# Kubernetes-Manifest f√ºr den Reporting-Service
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reporting-service
  namespace: erp-system
  labels:
    app: reporting-service
    component: analytics
spec:
  replicas: 2
  selector:
    matchLabels:
      app: reporting-service
  template:
    metadata:
      labels:
        app: reporting-service
        component: analytics
    spec:
      containers:
      - name: reporting-service
        image: ghcr.io/organization/erp-reporting:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8090
          name: http
        env:
        - name: REDIS_HOST
          value: "redis"
        - name: REDIS_PORT
          value: "6379"
        - name: API_SERVER_URL
          value: "http://api-server:8003"
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 1000m
            memory: 2Gi
        volumeMounts:
        - name: report-templates
          mountPath: /app/templates
          readOnly: true
        - name: report-data
          mountPath: /app/data
        readinessProbe:
          httpGet:
            path: /health
            port: 8090
          initialDelaySeconds: 20
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 8090
          initialDelaySeconds: 40
          periodSeconds: 30
      volumes:
      - name: report-templates
        configMap:
          name: report-templates
      - name: report-data
        persistentVolumeClaim:
          claimName: report-data-pvc
---
# Service
apiVersion: v1
kind: Service
metadata:
  name: reporting-service
  namespace: erp-system
spec:
  selector:
    app: reporting-service
  ports:
  - port: 8090
    targetPort: 8090
    name: http
  type: ClusterIP
---
# PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: report-data-pvc
  namespace: erp-system
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
# ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: report-templates
  namespace: erp-system
data:
  invoice-template.html: |
    <!DOCTYPE html>
    <html>
    <head><title>Rechnung</title></head>
    <body>
      <h1>Rechnung #{{invoice_number}}</h1>
      <p>Datum: {{date}}</p>
      <!-- Weitere Template-Inhalte -->
    </body>
    </html>
  sales-report-template.html: |
    <!DOCTYPE html>
    <html>
    <head><title>Verkaufsbericht</title></head>
    <body>
      <h1>Verkaufsbericht: {{period}}</h1>
      <p>Erstellt am: {{creation_date}}</p>
      <!-- Weitere Template-Inhalte -->
    </body>
    </html>
---
# HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: reporting-service-hpa
  namespace: erp-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: reporting-service
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 65
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: 100
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 90
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 20
        periodSeconds: 120
      - type: Pods
        value: 1
        periodSeconds: 180
      selectPolicy: Min
---
# NetworkPolicy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: reporting-service-network-policy
  namespace: erp-system
spec:
  podSelector:
    matchLabels:
      app: reporting-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: api-server
    - podSelector:
        matchLabels:
          app: frontend
    ports:
    - protocol: TCP
      port: 8090
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - podSelector:
        matchLabels:
          app: api-server
    ports:
    - protocol: TCP
      port: 8003
  - to:
    - podSelector:
        matchLabels:
          app: document-service
    ports:
    - protocol: TCP
      port: 8070
  - to:
    - podSelector:
        matchLabels:
          app: notification-service
    ports:
    - protocol: TCP
      port: 8085
  - to:
    - namespaceSelector: {}
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53 