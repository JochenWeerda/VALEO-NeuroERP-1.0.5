# Kubernetes-Manifest für Document-Service-Tracing-Patch
apiVersion: apps/v1
kind: Deployment
metadata:
  name: document-service
  namespace: erp-system
spec:
  template:
    metadata:
      annotations:
        # Behalte vorhandene Prometheus-Annotationen bei
        prometheus.io/scrape: "true"
        prometheus.io/port: "8070"
        prometheus.io/path: "/metrics"
        # Ergänze Jaeger-Annotationen
        jaeger.erp-system.svc.cluster.local/inject: "true"
        jaeger.erp-system.svc.cluster.local/service-name: "document-service"
    spec:
      containers:
      - name: document-service
        env:
        # Behalte vorhandene Umgebungsvariablen bei
        - name: ENABLE_METRICS
          value: "true"
        - name: METRICS_PATH
          value: "/metrics"
        # Füge Jaeger-Umgebungsvariablen hinzu
        - name: JAEGER_AGENT_HOST
          value: "erp-jaeger-agent.erp-system.svc.cluster.local"
        - name: JAEGER_AGENT_PORT
          value: "6831"
        - name: JAEGER_SAMPLER_TYPE
          value: "const"
        - name: JAEGER_SAMPLER_PARAM
          value: "1"
        - name: JAEGER_SERVICE_NAME
          value: "document-service"
        - name: ENABLE_TRACING
          value: "true"
        volumeMounts:
        # Behalte vorhandene Volumes bei
        - name: metrics-config
          mountPath: /app/config/metrics
          readOnly: true
        # Füge Tracing-Config hinzu
        - name: tracing-config
          mountPath: /app/config/tracing
          readOnly: true
        # Behalte vorhandene Probes bei
        livenessProbe:
          httpGet:
            path: /health
            port: 8070
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: 8070
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 2
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: 8070
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 2
          failureThreshold: 20
          successThreshold: 1
      volumes:
      # Behalte vorhandene Volumes bei
      - name: metrics-config
        configMap:
          name: document-service-metrics-config
      # Füge Tracing-Config hinzu
      - name: tracing-config
        configMap:
          name: document-service-tracing-config
---
# ConfigMap für Tracing-Konfiguration
apiVersion: v1
kind: ConfigMap
metadata:
  name: document-service-tracing-config
  namespace: erp-system
data:
  tracing.yml: |
    # Tracing-Konfiguration für Document-Service
    tracing:
      enabled: true
      service_name: document-service
      jaeger:
        agent_host: erp-jaeger-agent.erp-system.svc.cluster.local
        agent_port: 6831
        sampler_type: const
        sampler_param: 1
      # Operation-Tags für bessere Kategorisierung der Traces
      operation_tags:
        - key: document_type
          tag_as: document.type
        - key: user_id
          tag_as: user.id
        - key: operation
          tag_as: operation.name
      # Optionen für detaillierte Tracing-Spans
      span_options:
        include_request_headers:
          - content-type
          - authorization
          - x-request-id
        include_response_headers:
          - content-type
          - content-length
        include_payload: false
        include_metadata: true
  
  instrumentation.js: |
    // Beispiel für Tracing-Instrumentierungscode für NodeJS
    const { initTracer } = require('jaeger-client');
    
    // Initialisierung des Tracers
    function initJaegerTracer(serviceName) {
      const config = {
        serviceName: serviceName,
        sampler: {
          type: 'const',
          param: 1,
        },
        reporter: {
          logSpans: true,
          agentHost: process.env.JAEGER_AGENT_HOST || 'localhost',
          agentPort: parseInt(process.env.JAEGER_AGENT_PORT || '6832', 10),
        },
      };
      const options = {
        logger: {
          info(msg) {
            console.log('INFO', msg);
          },
          error(msg) {
            console.error('ERROR', msg);
          },
        },
      };
      return initTracer(config, options);
    }
    
    // Express-Middleware für Tracing
    function tracingMiddleware(req, res, next) {
      const tracer = req.app.locals.tracer;
      if (!tracer) {
        return next();
      }
      
      // Extract spanContext from HTTP headers
      const wireCtx = tracer.extract(opentracing.FORMAT_HTTP_HEADERS, req.headers);
      const parentSpanContext = wireCtx || null;
      
      // Create operation name based on route
      const pathname = url.parse(req.url).pathname;
      const operationName = `${req.method} ${pathname}`;
      
      // Start a new span
      const span = tracer.startSpan(operationName, {
        childOf: parentSpanContext,
        tags: {
          'http.method': req.method,
          'http.url': req.url,
          'component': 'document-service',
          'span.kind': 'server',
        },
      });
      
      // Store span in request
      req.span = span;
      
      // Add response listener to finalize span
      const finishSpan = () => {
        if (req.span) {
          req.span.setTag('http.status_code', res.statusCode);
          if (res.statusCode >= 400) {
            req.span.setTag('error', true);
          }
          req.span.finish();
        }
      };
      
      res.on('finish', finishSpan);
      res.on('close', finishSpan);
      
      next();
    }
    
    // Span für Dokumenten-Upload-Operationen
    function traceDocumentUpload(req, docType, callback) {
      const tracer = req.app.locals.tracer;
      if (!tracer || !req.span) {
        return callback();
      }
      
      const uploadSpan = tracer.startSpan('document_upload', { childOf: req.span });
      uploadSpan.setTag('document.type', docType);
      uploadSpan.setTag('operation.name', 'upload');
      
      try {
        const result = callback();
        uploadSpan.finish();
        return result;
      } catch (error) {
        uploadSpan.setTag('error', true);
        uploadSpan.log({
          event: 'error',
          'error.object': error,
          message: error.message,
          stack: error.stack,
        });
        uploadSpan.finish();
        throw error;
      }
    }
    
    module.exports = {
      initJaegerTracer,
      tracingMiddleware,
      traceDocumentUpload
    }; 