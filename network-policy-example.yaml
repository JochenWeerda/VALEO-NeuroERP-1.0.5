# Kubernetes NetworkPolicy für das ERP-System
# Diese Datei demonstriert Mikrosegmentierung für die Container-Sicherheit

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: api-server-network-policy
  namespace: erp-system
spec:
  podSelector:
    matchLabels:
      app: api-server
  policyTypes:
  - Ingress
  - Egress
  
  # Eingehender Datenverkehr
  ingress:
  # Von Frontend-Komponenten
  - from:
    - podSelector:
        matchLabels:
          component: frontend
    ports:
    - protocol: TCP
      port: 8003
      
  # Von internen Monitoring-Tools
  - from:
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 8003  # Metrics-Endpunkt
      
  # Von anderen API-Servern (für Clustering)
  - from:
    - podSelector:
        matchLabels:
          app: api-server
    ports:
    - protocol: TCP
      port: 8003
    - protocol: TCP
      port: 8001  # Interner Cluster-Port
  
  # Ausgehender Datenverkehr
  egress:
  # Zu Redis
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
      
  # Zu Celery-Workern
  - to:
    - podSelector:
        matchLabels:
          app: celery-worker
    ports:
    - protocol: TCP
      port: 5672  # AMQP Port für Messaging
      
  # Zu Prometheus für Pushing von Metriken (falls verwendet)
  - to:
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 9091  # Prometheus Pushgateway
      
  # DNS-Zugriff erlauben
  - to:
    - namespaceSelector: {}
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
      
  # Zugriff auf externe APIs und Services
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 10.0.0.0/8
        - 172.16.0.0/12
        - 192.168.0.0/16
    ports:
    - protocol: TCP
      port: 443  # HTTPS
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-network-policy
  namespace: erp-system
spec:
  podSelector:
    matchLabels:
      app: redis
  policyTypes:
  - Ingress
  - Egress
  
  # Eingehender Datenverkehr
  ingress:
  # Von API-Servern
  - from:
    - podSelector:
        matchLabels:
          app: api-server
    ports:
    - protocol: TCP
      port: 6379
      
  # Von Celery-Workern
  - from:
    - podSelector:
        matchLabels:
          app: celery-worker
    ports:
    - protocol: TCP
      port: 6379
      
  # Von Redis-Exporter für Prometheus
  - from:
    - podSelector:
        matchLabels:
          app: redis-exporter
    ports:
    - protocol: TCP
      port: 6379
      
  # Von anderen Redis-Instanzen (für Cluster/Replikation)
  - from:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 16379  # Cluster-Bus-Port
  
  # Ausgehender Datenverkehr
  egress:
  # Zu anderen Redis-Instanzen (für Cluster/Replikation)
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 16379  # Cluster-Bus-Port
      
  # DNS-Zugriff erlauben
  - to:
    - namespaceSelector: {}
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: celery-worker-network-policy
  namespace: erp-system
spec:
  podSelector:
    matchLabels:
      app: celery-worker
  policyTypes:
  - Ingress
  - Egress
  
  # Eingehender Datenverkehr
  ingress:
  # Von API-Servern
  - from:
    - podSelector:
        matchLabels:
          app: api-server
    ports:
    - protocol: TCP
      port: 5672  # AMQP Port für Messaging
      
  # Von Prometheus für Monitoring
  - from:
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 9100  # Node-Exporter Port
  
  # Ausgehender Datenverkehr
  egress:
  # Zu Redis
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
      
  # Zu API-Servern für Callback-Operationen
  - to:
    - podSelector:
        matchLabels:
          app: api-server
    ports:
    - protocol: TCP
      port: 8003
      
  # DNS-Zugriff erlauben
  - to:
    - namespaceSelector: {}
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
      
  # Zugriff auf externe Dienste für Aufgabenverarbeitung
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 10.0.0.0/8
        - 172.16.0.0/12
        - 192.168.0.0/16
    ports:
    - protocol: TCP
      port: 443  # HTTPS
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: erp-system
spec:
  podSelector: {}  # Gilt für alle Pods im Namespace
  policyTypes:
  - Ingress
  - Egress
  # Keine expliziten Regeln bedeutet: Alles verbieten
  # Dies dient als Fallback, falls ein Pod keine spezifische NetworkPolicy hat

# Beispiel einer Kubernetes-NetworkPolicy für verbessterte Sicherheit im ERP-System
# Diese NetworkPolicy steuert den Netzwerkverkehr zwischen den verschiedenen Microservices

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: auth-service-network-policy
  namespace: erp-system
spec:
  podSelector:
    matchLabels:
      app: auth-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          component: ui
    - podSelector:
        matchLabels:
          app: api-server
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: api-server
    ports:
    - protocol: TCP
      port: 8003
  - to:
    - podSelector:
        matchLabels:
          app: notification-service
    ports:
    - protocol: TCP
      port: 8085
  - to:
    - namespaceSelector: {}
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

---
# Frontend-NetworkPolicy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: frontend-network-policy
  namespace: erp-system
spec:
  podSelector:
    matchLabels:
      app: frontend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - ipBlock:
        cidr: 0.0.0.0/0
    ports:
    - protocol: TCP
      port: 80
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: api-server
    ports:
    - protocol: TCP
      port: 8003
  - to:
    - podSelector:
        matchLabels:
          app: auth-service
    ports:
    - protocol: TCP
      port: 8080
  - to:
    - namespaceSelector: {}
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53 