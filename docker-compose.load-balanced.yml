version: '3.8'

services:
  # Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/load-balancer.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/usr/share/nginx/html/static:ro
    depends_on:
      - backend1
      - backend2
      - backend3
      - frontend1
      - frontend2
    networks:
      - frontend-net
      - backend-net
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Server Pool
  backend1: &backend
    build:
      context: .
      dockerfile: backend.Dockerfile
    environment:
      - DATABASE_URL=postgresql://master:5432/valero
      - REDIS_URL=redis://redis-master:6379/0
      - SERVER_ID=1
    depends_on:
      - postgres-master
      - redis-master
    networks:
      - backend-net
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend2:
    <<: *backend
    environment:
      - DATABASE_URL=postgresql://master:5432/valero
      - REDIS_URL=redis://redis-master:6379/0
      - SERVER_ID=2

  backend3:
    <<: *backend
    environment:
      - DATABASE_URL=postgresql://master:5432/valero
      - REDIS_URL=redis://redis-master:6379/0
      - SERVER_ID=3

  # Frontend Server Pool
  frontend1: &frontend
    build:
      context: .
      dockerfile: frontend.Dockerfile
    environment:
      - API_URL=http://nginx/api
      - NODE_ENV=production
    networks:
      - frontend-net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend2:
    <<: *frontend
    environment:
      - API_URL=http://nginx/api
      - NODE_ENV=production

  # PostgreSQL Master
  postgres-master:
    image: postgres:14-alpine
    environment:
      - POSTGRES_DB=valero
      - POSTGRES_USER=valero
      - POSTGRES_PASSWORD=secret
    volumes:
      - postgres-master-data:/var/lib/postgresql/data
    networks:
      - backend-net
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U valero"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Replica
  postgres-replica:
    image: postgres:14-alpine
    environment:
      - POSTGRES_DB=valero
      - POSTGRES_USER=valero
      - POSTGRES_PASSWORD=secret
    volumes:
      - postgres-replica-data:/var/lib/postgresql/data
    networks:
      - backend-net
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U valero"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Master
  redis-master:
    image: redis:alpine
    command: redis-server --appendonly yes
    volumes:
      - redis-master-data:/data
    networks:
      - backend-net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Replica
  redis-replica:
    image: redis:alpine
    command: redis-server --slaveof redis-master 6379
    depends_on:
      - redis-master
    networks:
      - backend-net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - monitoring-net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=secret
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    networks:
      - monitoring-net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

volumes:
  postgres-master-data:
  postgres-replica-data:
  redis-master-data:
  prometheus-data:
  grafana-data:

networks:
  frontend-net:
  backend-net:
  monitoring-net: 