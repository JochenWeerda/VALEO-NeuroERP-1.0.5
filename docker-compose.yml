version: '3.8'

networks:
  valeo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

services:
  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: valeo-neuroerp-backend
    networks:
      valeo-network:
        ipv4_address: 172.20.1.10
    ports:
      - "8000:8000"
    environment:
      - TZ=Europe/Berlin
      - PYTHONPATH=/app
      - ENVIRONMENT=production
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: valeo-neuroerp-frontend
    networks:
      valeo-network:
        ipv4_address: 172.20.1.20
    ports:
      - "3000:3000"
    environment:
      - TZ=Europe/Berlin
      - REACT_APP_API_URL=http://172.20.1.10:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: unless-stopped
    depends_on:
      - backend

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: valeo-neuroerp-postgres
    networks:
      valeo-network:
        ipv4_address: 172.20.1.30
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=valeo_neuroerp
      - POSTGRES_USER=valeo_user
      - POSTGRES_PASSWORD=valeo_password
      - TZ=Europe/Berlin
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U valeo_user -d valeo_neuroerp"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: valeo-neuroerp-redis
    networks:
      valeo-network:
        ipv4_address: 172.20.1.40
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: valeo-neuroerp-nginx
    networks:
      valeo-network:
        ipv4_address: 172.20.1.50
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    restart: unless-stopped
    depends_on:
      - frontend
      - backend

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: valeo-neuroerp-prometheus
    networks:
      valeo-network:
        ipv4_address: 172.20.1.60
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: valeo-neuroerp-grafana
    networks:
      valeo-network:
        ipv4_address: 172.20.1.70
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=valeo_admin
      - TZ=Europe/Berlin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
