Metadata-Version: 2.4
Name: valeo-neuroerp
Version: 1.0.1
Summary: VALEO NeuroERP System
Home-page: https://github.com/genxais/framework
Author: Jochen
Author-email: team@genxais.ai
Project-URL: Documentation, https://docs.genxais.ai
Project-URL: Source, https://github.com/genxais/framework
Project-URL: Tracker, https://github.com/genxais/framework/issues
Project-URL: Discord, https://discord.gg/genxais
Keywords: ai,framework,development,apm,multi-agent,cursor,automation,code-generation,intelligent,software-development,sdk,rag,mcp
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Application Frameworks
Classifier: Topic :: Software Development :: Code Generators
Classifier: Topic :: Artificial Intelligence
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Operating System :: OS Independent
Classifier: Environment :: Console
Classifier: Framework :: AsyncIO
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: langchain>=0.0.300
Requires-Dist: networkx>=3.1
Requires-Dist: matplotlib>=3.7.1
Requires-Dist: jinja2>=3.1.2
Requires-Dist: pydantic>=2.0.0
Requires-Dist: prometheus-client>=0.17.1
Requires-Dist: psutil>=5.9.5
Requires-Dist: motor>=3.3.0
Requires-Dist: aioredis>=2.0.0
Requires-Dist: fastapi>=0.100.0
Requires-Dist: uvicorn>=0.22.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: flake8>=4.0.0; extra == "dev"
Requires-Dist: mypy>=0.991; extra == "dev"
Requires-Dist: coverage>=6.0.0; extra == "dev"
Provides-Extra: monitoring
Requires-Dist: prometheus-client>=0.14.0; extra == "monitoring"
Requires-Dist: grafana-api>=1.0.0; extra == "monitoring"
Provides-Extra: ml
Requires-Dist: numpy>=1.21.0; extra == "ml"
Requires-Dist: pandas>=1.3.0; extra == "ml"
Requires-Dist: scikit-learn>=1.0.0; extra == "ml"
Provides-Extra: web
Requires-Dist: fastapi>=0.68.0; extra == "web"
Requires-Dist: uvicorn>=0.15.0; extra == "web"
Requires-Dist: jinja2>=3.0.0; extra == "web"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: license-file
Dynamic: project-url
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# üöÄ GENXAIS Framework - GENerative eXplainable Artificial Intelligence System

[![Python](https://img.shields.io/badge/Python-3.8%2B-blue.svg)](https://python.org)
[![Framework](https://img.shields.io/badge/Framework-GENXAIS-green.svg)](https://github.com)
[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](LICENSE)

> **"Build the Future from the Beginning"**

GENXAIS is a modularized, intelligent development framework that implements the APM (Agile Project Management) methodology through AI-driven multi-agent collaboration. It provides systematic project development from vision to implementation with robust error handling and knowledge management.

## üåü Features

- üéØ **APM Methodology**: VAN ‚Üí PLAN ‚Üí CREATE ‚Üí IMPLEMENT ‚Üí REFLECT
- ü§ñ **Multi-Agent System**: Specialized agents for different development phases
- üß† **RAG Integration**: Knowledge management with local/MongoDB storage
- üõ°Ô∏è **Robust Error Handling**: Graceful degradation and recovery
- üìä **Performance Monitoring**: Comprehensive metrics and optimization
- üé® **Template System**: Pre-configured project templates
- üîÑ **Hot Reload**: Development-friendly configuration
- üí∞ **Token Optimization**: AI cost reduction strategies

## üìã Table of Contents

- [Quick Start](#-quick-start)
- [Installation](#-installation)
- [API Keys Setup](#-api-keys-setup)
- [Commands Reference](#-commands-reference)
- [Configuration](#-configuration)
- [Architecture](#-architecture)
- [Development](#-development)
- [Examples](#-examples)
- [Troubleshooting](#-troubleshooting)

## ‚ö° Quick Start

### 1. Initial Setup

```bash
# Clone the repository
git clone https://github.com/YOUR-USERNAME/GENXAIS-Framework.git
cd GENXAIS-Framework

# Install dependencies
pip install -r requirements.txt

# Set up API keys (see API Keys section)
cp api_keys.example.json api_keys.local.json
# Edit api_keys.local.json with your keys
```

### 2. Create Your First Project

```bash
# Initialize a new project with web app template
python genxais_sdk.py init --project my-awesome-app --template web_app

# Start the complete APM development cycle
python genxais_sdk.py start --project my-awesome-app --export

# Check project status
python genxais_sdk.py status --project my-awesome-app
```

### 3. Monitor and Optimize

```bash
# Monitor performance
python genxais_sdk.py monitor --project my-awesome-app

# Optimize project
python genxais_sdk.py optimize --project my-awesome-app
```

## üõ†Ô∏è Installation

### Prerequisites

- Python 3.8 or higher
- Git
- Optional: MongoDB (for advanced RAG features)
- Optional: Docker (for containerized deployment)

### Standard Installation

```bash
# 1. Clone repository
git clone https://github.com/YOUR-USERNAME/GENXAIS-Framework.git
cd GENXAIS-Framework

# 2. Create virtual environment (recommended)
python -m venv venv

# Windows
venv\Scripts\activate

# Linux/Mac
source venv/bin/activate

# 3. Install dependencies
pip install -r requirements.txt

# 4. Verify installation
python genxais_sdk.py --help
```

### Development Installation

```bash
# Install in development mode with extra dependencies
pip install -e .
pip install -r requirements-dev.txt

# Run tests
python -m pytest tests/

# Start development server
python genxais_sdk.py monitor --project dev-environment
```

## üîë API Keys Setup

GENXAIS Framework requires API keys for AI services. Follow these steps:

### 1. Create API Keys File

```bash
# Copy example configuration
cp api_keys.example.json api_keys.local.json
```

### 2. Configure API Keys

Edit `api_keys.local.json`:

```json
{
  "openai": {
    "api_key": "sk-your-openai-api-key-here",
    "organization": "optional-org-id",
    "model": "gpt-4-turbo-preview"
  },
  "anthropic": {
    "api_key": "sk-ant-your-anthropic-key-here",
    "model": "claude-3-sonnet-20240229"
  },
  "mongodb": {
    "url": "mongodb://localhost:27017/",
    "database": "genxais_rag",
    "username": "optional-username",
    "password": "optional-password"
  },
  "github": {
    "token": "ghp_your-github-token-here",
    "organization": "your-github-org"
  }
}
```

### 3. Environment Variables (Alternative)

```bash
# Set environment variables instead of JSON file
export OPENAI_API_KEY="sk-your-openai-api-key-here"
export ANTHROPIC_API_KEY="sk-ant-your-anthropic-key-here"
export MONGODB_URL="mongodb://localhost:27017/"
export GITHUB_TOKEN="ghp_your-github-token-here"

# Framework-specific settings
export GENXAIS_PROJECT_NAME="my-project"
export GENXAIS_DEBUG="false"
export GENXAIS_LOG_LEVEL="INFO"
```

### 4. Where to Get API Keys

| Service | URL | Notes |
|---------|-----|-------|
| OpenAI | https://platform.openai.com/api-keys | Required for GPT models |
| Anthropic | https://console.anthropic.com/ | Required for Claude models |
| MongoDB Atlas | https://cloud.mongodb.com/ | Optional, for cloud RAG storage |
| GitHub | https://github.com/settings/tokens | Optional, for repository integration |

## üìù Commands Reference

### Core Commands

```bash
# Initialize new project
python genxais_sdk.py init --project PROJECT_NAME [--template TEMPLATE]

# Start complete APM cycle
python genxais_sdk.py start --project PROJECT_NAME [--config CONFIG_FILE] [--export]

# Execute specific phase
python genxais_sdk.py module --project PROJECT_NAME [--phase PHASE_NAME]

# Show project status
python genxais_sdk.py status --project PROJECT_NAME [--config CONFIG_FILE]

# Optimize project performance
python genxais_sdk.py optimize --project PROJECT_NAME

# Monitor performance metrics
python genxais_sdk.py monitor --project PROJECT_NAME
```

### Available Templates

- `web_app` - Full-stack web application with React frontend and FastAPI backend
- `api_service` - RESTful API service with authentication and database
- `ml_pipeline` - Machine learning pipeline with data processing and model training
- `microservice` - Cloud-native microservice with Docker and Kubernetes
- `desktop_app` - Cross-platform desktop application with modern UI

### Available Phases

- `van` - Vision, Alignment, Navigation
- `plan` - Strategic Planning & Architecture
- `create` - Creation & Prototyping
- `implement` - Implementation & Deployment
- `reflect` - Reflection & Optimization

### Command Examples

```bash
# Create a new web application
python genxais_sdk.py init --project "my-web-app" --template web_app

# Execute only the planning phase
python genxais_sdk.py module --project "my-web-app" --phase plan

# Start full development cycle with knowledge export
python genxais_sdk.py start --project "my-web-app" --export

# Monitor performance in real-time
python genxais_sdk.py monitor --project "my-web-app"

# Optimize for production deployment
python genxais_sdk.py optimize --project "my-web-app"

# Check comprehensive project status
python genxais_sdk.py status --project "my-web-app"
```

## ‚öôÔ∏è Configuration

### Project Configuration

Create `genxais_config.json` in your project directory:

```json
{
  "project": {
    "name": "my-project",
    "type": "web_app",
    "version": "1.0.0",
    "description": "My awesome GENXAIS project"
  },
  "apm": {
    "enable_all_phases": true,
    "rag_integration": true,
    "parallel_execution": false,
    "token_optimization": true,
    "phase_timeout": 300,
    "auto_handover": true
  },
  "agents": {
    "max_parallel": 3,
    "conflict_resolution": "merge_strategies",
    "auto_scaling": true,
    "timeout": 600,
    "retry_attempts": 3
  },
  "error_handling": {
    "robust_mode": true,
    "max_recovery_attempts": 3,
    "fallback_strategies": "all",
    "auto_documentation": true
  },
  "monitoring": {
    "performance_tracking": true,
    "cost_optimization": true,
    "quality_metrics": true,
    "logging_level": "INFO"
  },
  "rag": {
    "storage_type": "local_json",
    "mongodb_url": "mongodb://localhost:27017/",
    "database_name": "genxais_rag",
    "backup_enabled": true
  }
}
```

### Directory Structure

```
my-project/
‚îú‚îÄ‚îÄ genxais_config.json         # Project configuration
‚îú‚îÄ‚îÄ logs/                       # Execution logs
‚îú‚îÄ‚îÄ rag_storage/               # Knowledge storage
‚îú‚îÄ‚îÄ exports/                   # Knowledge exports
‚îú‚îÄ‚îÄ templates/                 # Custom templates
‚îî‚îÄ‚îÄ monitoring/                # Performance data
```

## üèóÔ∏è Architecture

### Core Components

```
GENXAIS Framework
‚îú‚îÄ‚îÄ Core Package
‚îÇ   ‚îú‚îÄ‚îÄ Framework Orchestrator
‚îÇ   ‚îú‚îÄ‚îÄ Configuration Manager
‚îÇ   ‚îú‚îÄ‚îÄ APM Phases Engine
‚îÇ   ‚îî‚îÄ‚îÄ RAG System
‚îú‚îÄ‚îÄ Agent System
‚îÇ   ‚îú‚îÄ‚îÄ Base Agent
‚îÇ   ‚îú‚îÄ‚îÄ Coordinator
‚îÇ   ‚îú‚îÄ‚îÄ Developer Agent
‚îÇ   ‚îî‚îÄ‚îÄ Analyst Agent
‚îú‚îÄ‚îÄ Templates
‚îÇ   ‚îú‚îÄ‚îÄ Base Template
‚îÇ   ‚îú‚îÄ‚îÄ Web App Template
‚îÇ   ‚îî‚îÄ‚îÄ Custom Templates
‚îî‚îÄ‚îÄ Error Handling
    ‚îú‚îÄ‚îÄ Recovery Strategies
    ‚îú‚îÄ‚îÄ Fallback Mechanisms
    ‚îî‚îÄ‚îÄ Documentation System
```

### APM Methodology Flow

```mermaid
graph TD
    A[VAN: Vision-Alignment-Navigation] --> B[PLAN: Strategic Planning]
    B --> C[CREATE: Prototyping & Design]
    C --> D[IMPLEMENT: Development & Deployment]
    D --> E[REFLECT: Analysis & Optimization]
    E --> F[Knowledge Export]
    E --> A
```

### Multi-Agent Coordination

```mermaid
graph LR
    C[Coordinator] --> DA[Developer Agent]
    C --> AA[Analyst Agent]
    C --> CA[Custom Agent]
    DA <--> AA
    DA <--> CA
    AA <--> CA
```

## üíª Development

### Running Tests

```bash
# Run all tests
python -m pytest tests/

# Run specific test module
python -m pytest tests/test_framework.py

# Run with coverage
python -m pytest --cov=core tests/

# Run integration tests
python -m pytest tests/integration/
```

### Contributing

1. Fork the repository
2. Create a feature branch: `git checkout -b feature/amazing-feature`
3. Make your changes and add tests
4. Run tests: `python -m pytest`
5. Commit changes: `git commit -m 'Add amazing feature'`
6. Push to branch: `git push origin feature/amazing-feature`
7. Open a Pull Request

### Development Scripts

```bash
# Start development environment
python scripts/setup_dev.py

# Run code quality checks
python scripts/check_quality.py

# Build documentation
python scripts/build_docs.py

# Deploy to staging
python scripts/deploy_staging.py
```

## üìö Examples

### Basic Web Application

```bash
# 1. Initialize project
python genxais_sdk.py init --project "todo-app" --template web_app

# 2. Navigate to project
cd todo-app

# 3. Start development
python ../genxais_sdk.py start --project "todo-app"

# 4. Monitor progress
python ../genxais_sdk.py status --project "todo-app"
```

### API Service Development

```bash
# Create API service
python genxais_sdk.py init --project "user-api" --template api_service

# Execute specific phases
python genxais_sdk.py module --project "user-api" --phase van
python genxais_sdk.py module --project "user-api" --phase plan
python genxais_sdk.py module --project "user-api" --phase create

# Optimize for production
python genxais_sdk.py optimize --project "user-api"
```

### Machine Learning Pipeline

```bash
# Initialize ML project
python genxais_sdk.py init --project "ml-classifier" --template ml_pipeline

# Full development cycle with monitoring
python genxais_sdk.py start --project "ml-classifier" --export
python genxais_sdk.py monitor --project "ml-classifier"
```

## üêõ Troubleshooting

### Common Issues

#### Import Errors
```bash
# Ensure you're in the correct directory
cd GENXAIS-Framework
python genxais_sdk.py --help

# Check Python path
python -c "import sys; print(sys.path)"
```

#### API Key Issues
```bash
# Verify API keys file exists
ls -la api_keys.local.json

# Test API connectivity
python -c "
import json
with open('api_keys.local.json') as f:
    keys = json.load(f)
    print('Keys loaded:', list(keys.keys()))
"
```

#### MongoDB Connection
```bash
# Test MongoDB connection
python -c "
from pymongo import MongoClient
try:
    client = MongoClient('mongodb://localhost:27017/')
    client.server_info()
    print('MongoDB connected successfully')
except Exception as e:
    print(f'MongoDB connection failed: {e}')
"
```

### Performance Issues

#### Memory Usage
```bash
# Monitor memory usage during execution
python genxais_sdk.py monitor --project your-project
```

#### Token Optimization
```bash
# Enable token optimization in config
{
  "apm": {
    "token_optimization": true
  }
}
```

### Logging and Debugging

```bash
# Enable debug mode
export GENXAIS_DEBUG=true
export GENXAIS_LOG_LEVEL=DEBUG

# Run with verbose logging
python genxais_sdk.py start --project test-project
```

## üìÑ License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## ü§ù Support

- üìß Email: support@genxais.dev
- üêõ Issues: [GitHub Issues](https://github.com/YOUR-USERNAME/GENXAIS-Framework/issues)
- üí¨ Discussions: [GitHub Discussions](https://github.com/YOUR-USERNAME/GENXAIS-Framework/discussions)
- üìñ Documentation: [Full Documentation](https://genxais.readthedocs.io)

## üöÄ What's Next?

1. **Enhanced AI Integration**: GPT-5 and Claude 3 Opus support
2. **Visual Development**: Web-based project management interface
3. **Cloud Deployment**: Native cloud provider integrations
4. **Plugin System**: Extensible architecture for custom agents
5. **Real-time Collaboration**: Multi-developer project support

---

<p align="center">
  <strong>Built with ‚ù§Ô∏è by the GENXAIS Team</strong><br>
  <em>"Build the Future from the Beginning"</em>
</p>

# VALEO-NeuroERP

VALEO-NeuroERP ist ein intelligentes ERP-System, das KI-gest√ºtzte Funktionen f√ºr Unternehmensressourcenplanung bietet. Es kombiniert traditionelle ERP-Funktionalit√§ten mit modernen KI-Technologien, um Gesch√§ftsprozesse zu optimieren und zu automatisieren.

## Aktueller Status

Das Projekt befindet sich aktuell in der **IMPLEMENTATION-Phase** des GENXAIS-Zyklus v1.9. Die vorherigen Phasen (PLAN und CREATE) wurden erfolgreich abgeschlossen.

### Abgeschlossene Phasen:

1. **PLAN-Phase**: Definition von f√ºnf Arbeitspaketen:
   - Edge Network Resilience Framework
   - Conflict Resolution System
   - Edge Metrics Framework
   - Mutation Aggregator Service
   - GraphQL Optimierer

2. **CREATE-Phase**: Entwicklung von Architekturentw√ºrfen und Prototypen f√ºr alle Arbeitspakete.

3. **IMPLEMENTATION-Phase**: Vollst√§ndige Implementierung des Edge Network Resilience Frameworks mit folgenden Komponenten:
   - Offline-Manager (`offline_manager.py`)
   - Synchronisations-Queue (`sync_queue.py`)
   - Edge Network Resilience Framework (`edge_network_resilience.py`)
   - Umfangreiche Tests und Dokumentation

## Edge Network Resilience Framework

Das Edge Network Resilience Framework ist eine robuste L√∂sung f√ºr die Offline-Funktionalit√§t in Edge-Umgebungen. Es erm√∂glicht Anwendungen, auch bei instabiler oder fehlender Netzwerkverbindung weiterhin zu funktionieren und Daten zu synchronisieren, sobald die Verbindung wiederhergestellt ist.

### Hauptkomponenten:

1. **Offline-Manager**: Erkennung und Verwaltung des Netzwerkstatus
2. **Synchronisations-Queue**: Persistente Warteschlange f√ºr ausstehende √Ñnderungen
3. **Framework-Integration**: Integration der Komponenten mit API-Anbindung

### Verwendung:

```python
from backend.services.edge_resilience.edge_network_resilience import EdgeNetworkResilience

# Framework erstellen
framework = EdgeNetworkResilience(
    config_path="config.json",
    db_path="edge_resilience.db",
    api_endpoint="https://api.example.com/v1"
)

# Framework starten
await framework.start()

# Element zur Synchronisation hinzuf√ºgen
framework.add_sync_item(
    entity_type="customer",
    entity_id="12345",
    operation="update",
    data={"name": "Max Mustermann", "email": "max@example.com"}
)

# Framework stoppen
await framework.stop()
```

## N√§chste Schritte

Die n√§chste Phase (VALIDATION) wird sich auf folgende Aspekte konzentrieren:

1. Leistungstests und Optimierungen
2. Integration mit anderen Arbeitspaketen
3. Dokumentationsverbesserungen
4. Vorbereitung f√ºr die Produktionsumgebung

## Projektstruktur

Die wichtigsten Verzeichnisse und Dateien:

```
VALEO-NeuroERP/
‚îú‚îÄ‚îÄ backend/
‚îÇ   ‚îî‚îÄ‚îÄ services/
‚îÇ       ‚îî‚îÄ‚îÄ edge_resilience/
‚îÇ           ‚îú‚îÄ‚îÄ offline_manager.py
‚îÇ           ‚îú‚îÄ‚îÄ sync_queue.py
‚îÇ           ‚îú‚îÄ‚îÄ edge_network_resilience.py
‚îÇ           ‚îú‚îÄ‚îÄ tests/
‚îÇ           ‚îÇ   ‚îú‚îÄ‚îÄ test_offline_manager.py
‚îÇ           ‚îÇ   ‚îú‚îÄ‚îÄ test_sync_queue.py
‚îÇ           ‚îÇ   ‚îî‚îÄ‚îÄ test_edge_network_resilience.py
‚îÇ           ‚îî‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ memory-bank/
‚îÇ   ‚îú‚îÄ‚îÄ create_phase_v1_9.md
‚îÇ   ‚îî‚îÄ‚îÄ implementation_phase_v1_9.md
‚îî‚îÄ‚îÄ README.md
```

## Technologien

- Python 3.11
- SQLite f√ºr persistente Speicherung
- Asynchrone Programmierung mit asyncio
- REST API Integration

## Lizenz

Dieses Projekt steht unter der MIT-Lizenz.
