image: docker:20.10.16

services:
  - docker:20.10.16-dind

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  REGISTRY: registry.valeo-neuroerp.com
  VERSION: 1.1.0

stages:
  - test
  - build
  - scan
  - push
  - deploy
  - notify

.test_template: &test_definition
  stage: test
  image: python:3.9
  before_script:
    - pip install -r requirements.txt
    - pip install pytest pytest-cov
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: test-results.xml

test:excel-export:
  <<: *test_definition
  script:
    - pytest backend/tests/test_excel_export_service.py --cov --cov-report=xml --junitxml=test-results.xml

test:cache-manager:
  <<: *test_definition
  script:
    - pytest backend/tests/test_cache_manager.py --cov --cov-report=xml --junitxml=test-results.xml

test:api-gateway:
  <<: *test_definition
  script:
    - pytest backend/tests/test_api_gateway.py --cov --cov-report=xml --junitxml=test-results.xml

test:failover-monitor:
  <<: *test_definition
  script:
    - pytest backend/tests/test_failover_monitor.py --cov --cov-report=xml --junitxml=test-results.xml

test:auth-service:
  <<: *test_definition
  script:
    - pytest backend/tests/test_auth_service.py --cov --cov-report=xml --junitxml=test-results.xml

.build_template: &build_definition
  stage: build
  script:
    - docker build -t $REGISTRY/$SERVICE:$VERSION -f docker/$SERVICE/Dockerfile .
    - docker tag $REGISTRY/$SERVICE:$VERSION $REGISTRY/$SERVICE:latest

build:excel-export:
  <<: *build_definition
  variables:
    SERVICE: excel-export-service

build:cache-manager:
  <<: *build_definition
  variables:
    SERVICE: cache-manager

build:api-gateway:
  <<: *build_definition
  variables:
    SERVICE: api-gateway

build:failover-monitor:
  <<: *build_definition
  variables:
    SERVICE: failover-monitor

build:auth-service:
  <<: *build_definition
  variables:
    SERVICE: auth-service

.scan_template: &scan_definition
  stage: scan
  script:
    - trivy image --exit-code 1 --severity HIGH,CRITICAL $REGISTRY/$SERVICE:$VERSION

scan:excel-export:
  <<: *scan_definition
  variables:
    SERVICE: excel-export-service

scan:cache-manager:
  <<: *scan_definition
  variables:
    SERVICE: cache-manager

scan:api-gateway:
  <<: *scan_definition
  variables:
    SERVICE: api-gateway

scan:failover-monitor:
  <<: *scan_definition
  variables:
    SERVICE: failover-monitor

scan:auth-service:
  <<: *scan_definition
  variables:
    SERVICE: auth-service

.push_template: &push_definition
  stage: push
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $REGISTRY
    - docker push $REGISTRY/$SERVICE:$VERSION
    - docker push $REGISTRY/$SERVICE:latest

push:excel-export:
  <<: *push_definition
  variables:
    SERVICE: excel-export-service

push:cache-manager:
  <<: *push_definition
  variables:
    SERVICE: cache-manager

push:api-gateway:
  <<: *push_definition
  variables:
    SERVICE: api-gateway

push:failover-monitor:
  <<: *push_definition
  variables:
    SERVICE: failover-monitor

push:auth-service:
  <<: *push_definition
  variables:
    SERVICE: auth-service

deploy:staging:
  stage: deploy
  image: alpine/helm:3.11.1
  script:
    - helm upgrade --install valeo-neuroerp-staging helm/valeo-neuroerp
      --namespace valeo-staging
      --set global.environment=staging
      --set global.version=$VERSION
      --wait
  environment:
    name: staging
    url: https://staging.valeo-neuroerp.com
  only:
    - main

deploy:production:
  stage: deploy
  image: alpine/helm:3.11.1
  script:
    - helm upgrade --install valeo-neuroerp helm/valeo-neuroerp
      --namespace valeo-production
      --set global.environment=production
      --set global.version=$VERSION
      --wait
  environment:
    name: production
    url: https://valeo-neuroerp.com
  when: manual
  only:
    - tags

notify:success:
  stage: notify
  script:
    - |
      curl -X POST -H 'Content-type: application/json' \
      --data "{\"text\":\"✅ VALEO-NeuroERP v${VERSION} deployment successful!\"}" \
      $SLACK_WEBHOOK_URL
  when: on_success

notify:failure:
  stage: notify
  script:
    - |
      curl -X POST -H 'Content-type: application/json' \
      --data "{\"text\":\"❌ VALEO-NeuroERP v${VERSION} deployment failed!\"}" \
      $SLACK_WEBHOOK_URL
  when: on_failure 