# Multi-stage build für optimierte Produktions-Images
FROM python:3.11-slim as builder

# Arbeitsverzeichnis setzen
WORKDIR /app

# System-Abhängigkeiten installieren
RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Python-Abhängigkeiten kopieren und installieren
COPY requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt

# Produktions-Image
FROM python:3.11-slim as production

# Nicht-root Benutzer erstellen
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Arbeitsverzeichnis setzen
WORKDIR /app

# System-Abhängigkeiten installieren (nur curl für Health Checks)
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Python-Abhängigkeiten aus Builder kopieren
COPY --from=builder /root/.local /home/appuser/.local

# Anwendungscode kopieren
COPY --chown=appuser:appuser . .

# Verzeichnisse für Logs und Daten erstellen
RUN mkdir -p /app/logs /app/data && \
    chown -R appuser:appuser /app

# Umgebungsvariablen setzen
ENV PATH=/home/appuser/.local/bin:$PATH
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Port freigeben
EXPOSE 8000

# Health Check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Benutzer wechseln
USER appuser

# Anwendung starten
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"] 