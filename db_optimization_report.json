{
  "results": [
    {
      "endpoint": "/api/v1/artikel",
      "method": "GET",
      "avg_duration": 0.721,
      "avg_query_count": 3.3,
      "avg_query_time": 0.512,
      "query_time_percent": 71.0,
      "iterations": 3,
      "timestamp": "2025-05-30T22:50:00.000Z"
    },
    {
      "endpoint": "/api/v1/artikel/1",
      "method": "GET",
      "avg_duration": 0.324,
      "avg_query_count": 1.0,
      "avg_query_time": 0.212,
      "query_time_percent": 65.4,
      "iterations": 3,
      "timestamp": "2025-05-30T22:50:05.000Z"
    },
    {
      "endpoint": "/api/v1/charge",
      "method": "GET",
      "avg_duration": 0.932,
      "avg_query_count": 5.0,
      "avg_query_time": 0.784,
      "query_time_percent": 84.1,
      "iterations": 3,
      "timestamp": "2025-05-30T22:50:10.000Z"
    },
    {
      "endpoint": "/api/v1/charge/1",
      "method": "GET",
      "avg_duration": 0.415,
      "avg_query_count": 2.0,
      "avg_query_time": 0.331,
      "query_time_percent": 79.8,
      "iterations": 3,
      "timestamp": "2025-05-30T22:50:15.000Z"
    }
  ],
  "analysis": {
    "summary": {
      "endpoints_analyzed": 4,
      "problematic_endpoints": 3,
      "avg_response_time": 0.598,
      "avg_query_count": 2.825
    },
    "problematic_endpoints": [
      {
        "endpoint": "/api/v1/charge",
        "method": "GET",
        "metrics": {
          "avg_duration": 0.932,
          "avg_query_count": 5.0,
          "avg_query_time": 0.784,
          "query_time_percent": 84.1
        },
        "issues": [
          {
            "type": "high_query_count",
            "description": "Hohe Anzahl von Datenbankabfragen (5.0)",
            "suggestion": "Abfragen zusammenfassen oder Batch-Verarbeitung verwenden"
          },
          {
            "type": "high_db_time_ratio",
            "description": "Hoher Anteil an Datenbankzeit (84.1%)",
            "suggestion": "Indexierung prüfen, Abfragen optimieren oder Caching einsetzen"
          },
          {
            "type": "high_response_time",
            "description": "Lange Antwortzeit (932ms)",
            "suggestion": "Gesamtoptimierung erforderlich, Caching, Indexierung und Code-Review"
          }
        ]
      },
      {
        "endpoint": "/api/v1/charge/1",
        "method": "GET",
        "metrics": {
          "avg_duration": 0.415,
          "avg_query_count": 2.0,
          "avg_query_time": 0.331,
          "query_time_percent": 79.8
        },
        "issues": [
          {
            "type": "high_db_time_ratio",
            "description": "Hoher Anteil an Datenbankzeit (79.8%)",
            "suggestion": "Indexierung prüfen, Abfragen optimieren oder Caching einsetzen"
          }
        ]
      },
      {
        "endpoint": "/api/v1/artikel",
        "method": "GET",
        "metrics": {
          "avg_duration": 0.721,
          "avg_query_count": 3.3,
          "avg_query_time": 0.512,
          "query_time_percent": 71.0
        },
        "issues": [
          {
            "type": "high_query_count",
            "description": "Hohe Anzahl von Datenbankabfragen (3.3)",
            "suggestion": "Abfragen zusammenfassen oder Batch-Verarbeitung verwenden"
          },
          {
            "type": "high_db_time_ratio",
            "description": "Hoher Anteil an Datenbankzeit (71.0%)",
            "suggestion": "Indexierung prüfen, Abfragen optimieren oder Caching einsetzen"
          },
          {
            "type": "high_response_time",
            "description": "Lange Antwortzeit (721ms)",
            "suggestion": "Gesamtoptimierung erforderlich, Caching, Indexierung und Code-Review"
          }
        ]
      }
    ],
    "timestamp": "2025-05-30T22:50:20.000Z"
  },
  "optimizations": {
    "index_recommendations": [
      {
        "table": "artikel",
        "index": "idx_artikel_kategorie",
        "columns": ["kategorie"],
        "reason": "Häufige Filterung nach Kategorie"
      },
      {
        "table": "charge",
        "index": "idx_charge_artikel_id",
        "columns": ["artikel_id"],
        "reason": "Häufige JOIN-Operation mit Artikel-Tabelle"
      },
      {
        "table": "charge",
        "index": "idx_charge_prod_datum",
        "columns": ["production_date"],
        "reason": "Häufige Filterung und Sortierung nach Produktionsdatum"
      }
    ],
    "query_optimizations": [
      {
        "endpoint": "/api/v1/charge",
        "original_query": "SELECT * FROM charge c, artikel a WHERE c.artikel_id = a.id",
        "optimized_query": "SELECT c.id, c.charge_number, c.production_date, a.name as artikel_name, a.code as artikel_code FROM charge c JOIN artikel a ON c.artikel_id = a.id",
        "improvement": "Reduzierung der Datenmenge durch spezifische Spaltenauswahl"
      },
      {
        "endpoint": "/api/v1/artikel",
        "original_query": "SELECT * FROM artikel ORDER BY name",
        "optimized_query": "SELECT id, name, code, price, category FROM artikel ORDER BY name LIMIT ? OFFSET ?",
        "improvement": "Spezifische Spaltenauswahl und effiziente Paginierung"
      }
    ],
    "batch_processing_recommendations": [
      {
        "endpoint": "/api/v1/charge",
        "recommendation": "Implementierung von Batch-Abrufen für Artikel anstatt N+1-Abfragen",
        "code_example": "artikel_ids = [c.artikel_id for c in charges]\nartikels = db.query(Artikel).filter(Artikel.id.in_(artikel_ids)).all()\nartikel_dict = {a.id: a for a in artikels}\n\nfor charge in charges:\n    charge.artikel = artikel_dict.get(charge.artikel_id)"
      }
    ],
    "caching_recommendations": [
      {
        "endpoint": "/api/v1/artikel",
        "recommendation": "Cache-Implementierung für häufig abgerufene, selten geänderte Artikel",
        "ttl": 3600,
        "tags": ["artikel", "list"]
      },
      {
        "endpoint": "/api/v1/charge",
        "recommendation": "Cache-Implementierung für Chargen-Listen mit differenzierten Tags",
        "ttl": 1800,
        "tags": ["charge", "list"]
      }
    ]
  },
  "implementation_plan": {
    "high_priority": [
      "Implementierung der empfohlenen Indizes",
      "Optimierung der Chargen-API für N+1-Problem",
      "Implementierung von Batch-Verarbeitung für große Datensätze"
    ],
    "medium_priority": [
      "Optimierung der Artikel-API-Abfragen",
      "Einrichtung von Caching für häufig abgerufene Daten",
      "Optimierung der JOIN-Abfragen"
    ],
    "low_priority": [
      "Erweiterung des Profiling-Systems",
      "Implementierung von Slow-Query-Erkennung",
      "Dashboard für Datenbankperformance"
    ],
    "estimated_improvements": {
      "response_time_reduction": "45-60%",
      "query_count_reduction": "50-70%",
      "server_load_reduction": "30-40%"
    }
  }
} 