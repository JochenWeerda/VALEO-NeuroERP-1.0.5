# Docker-Compose zu Kubernetes Konvertierungsbeispiel
# Dienst: API-Server

# Original Docker-Compose Dienst
# --------------------
# api:
#   build:
#     context: .
#     dockerfile: Dockerfile
#   container_name: erp-api
#   restart: unless-stopped
#   ports:
#     - "8003:8003"
#   depends_on:
#     - redis
#   volumes:
#     - ./logs:/app/logs
#     - ./backend:/app/backend
#   environment:
#     - REDIS_HOST=redis
#     - REDIS_PORT=6379
#     - CELERY_BROKER_URL=redis://redis:6379/0
#     - CELERY_RESULT_BACKEND=redis://redis:6379/0
#   networks:
#     - erp-network

# Konvertiert zu Kubernetes Manifesten
# --------------------

# 1. Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-server
  namespace: erp-system
  labels:
    app: api-server
    component: backend
spec:
  replicas: 2  # Wir nutzen die Möglichkeit, mehr als eine Instanz zu betreiben
  selector:
    matchLabels:
      app: api-server
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: api-server
        component: backend
    spec:
      containers:
      - name: api
        image: ghcr.io/organization/erp-api:latest  # Referenz zu einem Container-Registry
        imagePullPolicy: Always
        ports:
        - containerPort: 8003
          name: http
        env:
        - name: REDIS_HOST
          value: redis
        - name: REDIS_PORT
          value: "6379"
        - name: CELERY_BROKER_URL
          value: redis://redis:6379/0
        - name: CELERY_RESULT_BACKEND
          value: redis://redis:6379/0
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: config
          mountPath: /app/config
        readinessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 30
          periodSeconds: 30
      volumes:
      - name: logs
        persistentVolumeClaim:
          claimName: api-logs-pvc
      - name: config
        configMap:
          name: api-config

---
# 2. Service
apiVersion: v1
kind: Service
metadata:
  name: api-server
  namespace: erp-system
  labels:
    app: api-server
spec:
  selector:
    app: api-server
  ports:
  - port: 8003
    targetPort: 8003
    name: http
  type: ClusterIP

---
# 3. ConfigMap für Konfigurationsdaten
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-config
  namespace: erp-system
data:
  config.json: |
    {
      "log_level": "info",
      "debug": false,
      "allowed_hosts": "*"
    }

---
# 4. PersistentVolumeClaim für Logs
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: api-logs-pvc
  namespace: erp-system
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard

---
# 5. HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-server-hpa
  namespace: erp-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-server
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300

---
# 6. NetworkPolicy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: api-network-policy
  namespace: erp-system
spec:
  podSelector:
    matchLabels:
      app: api-server
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          component: frontend
    ports:
    - protocol: TCP
      port: 8003
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379 