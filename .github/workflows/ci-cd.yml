name: ERP System CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7.0-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run system tests
        run: |
          python -m pytest -xvs tests/
          powershell -File scripts/system_test.ps1 -LogLevel Verbose
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
  
  build:
    name: Build Docker Images
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=short
      
      - name: Build and push API image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}/api:${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push Celery image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./docker/celery/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/celery:${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  
  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Deploy to Staging
        run: |
          echo "Deploying to Staging environment..."
          # Hier würde der tatsächliche Deployment-Code stehen, z.B.:
          # - SSH in den Staging-Server
          # - Docker-Compose-Datei aktualisieren
          # - Docker-Compose neu starten
      
      - name: Run integration tests
        run: |
          echo "Running integration tests on Staging..."
          # Hier würden Integration-Tests ausgeführt werden
  
  deploy-production:
    name: Deploy to Production
    needs: [build, deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Deploy to Production
        run: |
          echo "Deploying to Production environment..."
          # Hier würde der tatsächliche Deployment-Code stehen, z.B.:
          # - SSH in den Produktions-Server
          # - Docker-Compose-Datei aktualisieren
          # - Docker-Compose neu starten mit Rollback-Option
      
      - name: Verify deployment
        run: |
          echo "Verifying production deployment..."
          # Hier würden Smoke-Tests ausgeführt werden 