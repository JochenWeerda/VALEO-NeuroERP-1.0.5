# VALEO NeuroERP 2.0 - GitLab CI/CD Pipeline

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  POSTGRES_DB: test_db
  POSTGRES_USER: test_user
  POSTGRES_PASSWORD: test_pass
  REDIS_PASSWORD: test_redis
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"

stages:
  - build
  - test
  - quality
  - security
  - deploy
  - release

# Cache für Dependencies
.cache:
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - frontend/node_modules/
      - backend/.venv/
      - .sonar/cache

# ===========================
# Build Stage
# ===========================

build:frontend:
  stage: build
  image: node:20-alpine
  extends: .cache
  script:
    - cd frontend
    - npm ci
    - npm run build
    - npm run build:storybook
  artifacts:
    paths:
      - frontend/build/
      - frontend/storybook-static/
    expire_in: 1 week
  only:
    - branches
    - tags

build:backend:
  stage: build
  image: python:3.11-slim
  extends: .cache
  before_script:
    - apt-get update && apt-get install -y gcc libpq-dev
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install --upgrade pip
  script:
    - cd backend
    - pip install -r requirements.txt
    - pip install -r requirements-dev.txt
    - python -m compileall .
  artifacts:
    paths:
      - backend/.venv/
    expire_in: 1 week
  only:
    - branches
    - tags

build:docker:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
  only:
    - main
    - develop
    - tags

# ===========================
# Test Stage
# ===========================

test:frontend:
  stage: test
  image: node:20-alpine
  extends: .cache
  needs: ["build:frontend"]
  script:
    - cd frontend
    - npm ci
    - npm run test:ci
    - npm run test:e2e:ci
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    reports:
      junit: frontend/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: frontend/coverage/cobertura-coverage.xml
    paths:
      - frontend/coverage/
  only:
    - branches
    - merge_requests

test:backend:
  stage: test
  image: python:3.11-slim
  extends: .cache
  needs: ["build:backend"]
  services:
    - postgres:15-alpine
    - redis:7-alpine
  variables:
    DATABASE_URL: "postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres/$POSTGRES_DB"
    REDIS_URL: "redis://:$REDIS_PASSWORD@redis:6379/0"
  before_script:
    - apt-get update && apt-get install -y gcc libpq-dev
    - source backend/.venv/bin/activate
  script:
    - cd backend
    - pytest --cov=app --cov-report=xml --cov-report=html --junitxml=junit.xml
    - coverage report
  coverage: '/TOTAL.+?(\d+\%)/'
  artifacts:
    reports:
      junit: backend/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage.xml
    paths:
      - backend/htmlcov/
  only:
    - branches
    - merge_requests

test:integration:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  needs: ["build:docker"]
  script:
    - docker-compose -f docker-compose.test.yml up --abort-on-container-exit
    - docker-compose -f docker-compose.test.yml down
  only:
    - main
    - develop
    - merge_requests

# ===========================
# Quality Stage
# ===========================

quality:sonarqube:
  stage: quality
  image: sonarsource/sonar-scanner-cli:latest
  extends: .cache
  needs: ["test:frontend", "test:backend"]
  script:
    - sonar-scanner
      -Dsonar.projectKey=$CI_PROJECT_NAME
      -Dsonar.sources=.
      -Dsonar.host.url=$SONAR_HOST_URL
      -Dsonar.login=$SONAR_TOKEN
      -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
      -Dsonar.python.coverage.reportPaths=backend/coverage.xml
  only:
    - main
    - develop
    - merge_requests

quality:lint:frontend:
  stage: quality
  image: node:20-alpine
  extends: .cache
  needs: ["build:frontend"]
  script:
    - cd frontend
    - npm run lint
    - npm run prettier:check
  only:
    - branches
    - merge_requests

quality:lint:backend:
  stage: quality
  image: python:3.11-slim
  extends: .cache
  needs: ["build:backend"]
  before_script:
    - source backend/.venv/bin/activate
  script:
    - cd backend
    - flake8 .
    - black --check .
    - isort --check-only .
    - mypy .
  only:
    - branches
    - merge_requests

# ===========================
# Security Stage
# ===========================

security:dependency-check:
  stage: security
  image: owasp/dependency-check:latest
  script:
    - /usr/share/dependency-check/bin/dependency-check.sh
      --project "$CI_PROJECT_NAME"
      --scan .
      --format ALL
      --out reports
  artifacts:
    reports:
      dependency_scanning: reports/dependency-check-report.json
    paths:
      - reports/
  only:
    - main
    - develop
    - merge_requests

security:container-scan:
  stage: security
  image: aquasec/trivy:latest
  needs: ["build:docker"]
  script:
    - trivy image --format json --output trivy-report.json $IMAGE_TAG
    - trivy image $IMAGE_TAG
  artifacts:
    reports:
      container_scanning: trivy-report.json
  only:
    - main
    - develop

security:secrets-scan:
  stage: security
  image: trufflesecurity/trufflehog:latest
  script:
    - trufflehog git file://. --json > secrets-report.json || true
    - if [ -s secrets-report.json ]; then echo "Secrets found!" && exit 1; fi
  artifacts:
    reports:
      secret_detection: secrets-report.json
  only:
    - branches
    - merge_requests

# ===========================
# Deploy Stage
# ===========================

deploy:staging:
  stage: deploy
  image: alpine:latest
  needs: ["build:docker", "test:integration"]
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $STAGING_SERVER >> ~/.ssh/known_hosts
  script:
    - |
      ssh $STAGING_USER@$STAGING_SERVER << EOF
        cd /opt/valeo-neuroerp
        docker-compose pull
        docker-compose up -d
        docker system prune -f
      EOF
  environment:
    name: staging
    url: https://staging.valeo-erp.com
  only:
    - develop

deploy:production:
  stage: deploy
  image: alpine:latest
  needs: ["build:docker", "test:integration", "security:container-scan"]
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $PRODUCTION_SERVER >> ~/.ssh/known_hosts
  script:
    - |
      ssh $PRODUCTION_USER@$PRODUCTION_SERVER << EOF
        cd /opt/valeo-neuroerp
        docker-compose -f docker-compose.prod.yml pull
        docker-compose -f docker-compose.prod.yml up -d --no-deps
        docker system prune -f
      EOF
  environment:
    name: production
    url: https://erp.valeo.com
  when: manual
  only:
    - main
    - tags

# ===========================
# Release Stage
# ===========================

release:create:
  stage: release
  image: node:20-alpine
  needs: ["deploy:production"]
  before_script:
    - apk add --no-cache git
    - npm install -g semantic-release @semantic-release/gitlab
  script:
    - semantic-release
  only:
    - main

release:docker:
  stage: release
  image: docker:latest
  services:
    - docker:dind
  needs: ["deploy:production"]
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $IMAGE_TAG
    - docker tag $IMAGE_TAG $CI_REGISTRY_IMAGE:latest
    - docker tag $IMAGE_TAG $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  only:
    - tags

# ===========================
# Notifications
# ===========================

.notify:
  image: appropriate/curl:latest
  variables:
    GIT_STRATEGY: none

notify:success:
  extends: .notify
  stage: .post
  script:
    - |
      curl -X POST $SLACK_WEBHOOK_URL \
        -H 'Content-type: application/json' \
        --data "{
          \"text\": \"✅ Pipeline succeeded for $CI_PROJECT_NAME\",
          \"attachments\": [{
            \"color\": \"good\",
            \"fields\": [
              {\"title\": \"Project\", \"value\": \"$CI_PROJECT_NAME\", \"short\": true},
              {\"title\": \"Branch\", \"value\": \"$CI_COMMIT_REF_NAME\", \"short\": true},
              {\"title\": \"Commit\", \"value\": \"$CI_COMMIT_SHORT_SHA\", \"short\": true},
              {\"title\": \"Author\", \"value\": \"$CI_COMMIT_AUTHOR\", \"short\": true}
            ]
          }]
        }"
  when: on_success
  only:
    - main
    - develop

notify:failure:
  extends: .notify
  stage: .post
  script:
    - |
      curl -X POST $SLACK_WEBHOOK_URL \
        -H 'Content-type: application/json' \
        --data "{
          \"text\": \"❌ Pipeline failed for $CI_PROJECT_NAME\",
          \"attachments\": [{
            \"color\": \"danger\",
            \"fields\": [
              {\"title\": \"Project\", \"value\": \"$CI_PROJECT_NAME\", \"short\": true},
              {\"title\": \"Branch\", \"value\": \"$CI_COMMIT_REF_NAME\", \"short\": true},
              {\"title\": \"Commit\", \"value\": \"$CI_COMMIT_SHORT_SHA\", \"short\": true},
              {\"title\": \"Author\", \"value\": \"$CI_COMMIT_AUTHOR\", \"short\": true},
              {\"title\": \"Pipeline\", \"value\": \"$CI_PIPELINE_URL\", \"short\": false}
            ]
          }]
        }"
  when: on_failure
  only:
    - main
    - develop