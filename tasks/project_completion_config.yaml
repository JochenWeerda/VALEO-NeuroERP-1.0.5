title: "VALEO-NeuroERP Projektabschluss"
version: "2.1"
description: "Konfiguration für den produktiven GENXAIS-Zyklus zum Abschluss des VALEO-NeuroERP-Projekts"

# Phasen des Zyklus
phases:
  - "VAN"
  - "PLAN"
  - "CREATE"
  - "IMPLEMENTATION"
  - "REFLEKTION"

# Integrationen
use_langgraph: true
use_rag: true

langgraph_config:
  workflow_name: "GENXAIS-Completion-Cycle"
  enable_checkpoints: true
  save_state: true

rag_config:
  api_endpoint: "http://localhost:8000/api/v1/query"
  api_token: "valeo_rag_api_token_2025"
  collection: "valeo_neuroerp"

# Pipelines und Aufgaben
pipelines:
  - name: "Dokumentation-Vervollständigung"
    description: "Vervollständigt die Dokumentation des VALEO-NeuroERP-Systems"
    tasks:
      - name: "API-Dokumentation erstellen"
        type: "documentation"
        description: "Erstellt eine umfassende API-Dokumentation"
        target_file: "api_documentation.md"
        content: |
          # VALEO-NeuroERP API-Dokumentation
          
          ## Übersicht
          
          Diese Dokumentation beschreibt die API-Endpunkte des VALEO-NeuroERP-Systems.
          
          ## Authentifizierung
          
          Alle API-Anfragen erfordern eine Authentifizierung mittels Bearer-Token.
          
          ```
          Authorization: Bearer <token>
          ```
          
          ## Endpunkte
          
          ### Benutzer
          
          #### GET /api/v1/users
          
          Gibt eine Liste aller Benutzer zurück.
          
          **Parameter:**
          
          - `page`: Seitennummer (Standard: 1)
          - `limit`: Anzahl der Ergebnisse pro Seite (Standard: 10)
          
          **Antwort:**
          
          ```json
          {
            "users": [
              {
                "id": 1,
                "username": "admin",
                "email": "admin@example.com",
                "role": "admin"
              },
              ...
            ],
            "total": 100,
            "page": 1,
            "limit": 10
          }
          ```
          
          #### GET /api/v1/users/{id}
          
          Gibt einen bestimmten Benutzer zurück.
          
          **Antwort:**
          
          ```json
          {
            "id": 1,
            "username": "admin",
            "email": "admin@example.com",
            "role": "admin"
          }
          ```
          
          ### Transaktionen
          
          #### GET /api/v1/transactions
          
          Gibt eine Liste aller Transaktionen zurück.
          
          **Parameter:**
          
          - `page`: Seitennummer (Standard: 1)
          - `limit`: Anzahl der Ergebnisse pro Seite (Standard: 10)
          - `start_date`: Startdatum (Format: YYYY-MM-DD)
          - `end_date`: Enddatum (Format: YYYY-MM-DD)
          
          **Antwort:**
          
          ```json
          {
            "transactions": [
              {
                "id": 1,
                "amount": 100.0,
                "currency": "EUR",
                "description": "Zahlung",
                "date": "2025-07-01T12:00:00Z",
                "status": "completed"
              },
              ...
            ],
            "total": 1000,
            "page": 1,
            "limit": 10
          }
          ```
          
          ## Fehlerbehandlung
          
          Alle API-Anfragen geben im Fehlerfall einen entsprechenden HTTP-Statuscode zurück.
          
          ```json
          {
            "error": "Ungültige Anfrage",
            "code": 400,
            "details": "..."
          }
          ```

      - name: "Benutzerhandbuch erstellen"
        type: "documentation"
        description: "Erstellt ein umfassendes Benutzerhandbuch"
        target_file: "user_manual.md"
        content: |
          # VALEO-NeuroERP Benutzerhandbuch
          
          ## Einführung
          
          Willkommen zum VALEO-NeuroERP-System. Dieses Handbuch führt Sie durch die wichtigsten Funktionen und Workflows des Systems.
          
          ## Installation
          
          ### Systemanforderungen
          
          - Betriebssystem: Windows 10/11, macOS 12+, Linux (Ubuntu 20.04+)
          - RAM: mindestens 8 GB
          - Festplattenspeicher: mindestens 20 GB
          - Prozessor: Intel Core i5 oder vergleichbar
          
          ### Installationsschritte
          
          1. Laden Sie das Installationspaket von der offiziellen Website herunter.
          2. Führen Sie das Installationsprogramm aus.
          3. Folgen Sie den Anweisungen auf dem Bildschirm.
          4. Starten Sie das System nach der Installation neu.
          
          ## Erste Schritte
          
          ### Anmeldung
          
          1. Starten Sie die VALEO-NeuroERP-Anwendung.
          2. Geben Sie Ihren Benutzernamen und Ihr Passwort ein.
          3. Klicken Sie auf "Anmelden".
          
          ### Dashboard
          
          Nach der Anmeldung sehen Sie das Dashboard, das einen Überblick über die wichtigsten Kennzahlen und Aktivitäten bietet.
          
          ## Module
          
          ### Finanzen
          
          Das Finanzmodul ermöglicht die Verwaltung von:
          
          - Rechnungen
          - Zahlungen
          - Budgets
          - Finanzberichten
          
          ### Inventar
          
          Das Inventarmodul ermöglicht die Verwaltung von:
          
          - Produkten
          - Lagerbeständen
          - Bestellungen
          - Lieferanten
          
          ### Personalwesen
          
          Das Personalmodul ermöglicht die Verwaltung von:
          
          - Mitarbeitern
          - Gehaltsabrechnungen
          - Urlaubsanträgen
          - Leistungsbeurteilungen
          
          ## Tipps und Tricks
          
          - Verwenden Sie die Suchfunktion, um schnell auf bestimmte Datensätze zuzugreifen.
          - Nutzen Sie die Filterfunktionen, um große Datenmengen effizient zu durchsuchen.
          - Speichern Sie häufig verwendete Berichte als Favoriten.
          
          ## Fehlerbehebung
          
          ### Häufige Probleme
          
          - **Problem**: Die Anwendung startet nicht.
            **Lösung**: Überprüfen Sie, ob der Datenbankserver läuft.
          
          - **Problem**: Berichte können nicht generiert werden.
            **Lösung**: Stellen Sie sicher, dass Sie über die erforderlichen Berechtigungen verfügen.
          
          ## Support
          
          Bei Fragen oder Problemen wenden Sie sich bitte an:
          
          - E-Mail: support@valeo-neuroerp.com
          - Telefon: +49 123 456789
          - Support-Portal: https://support.valeo-neuroerp.com

  - name: "Deployment-Vorbereitung"
    description: "Bereitet das VALEO-NeuroERP-System für das Deployment vor"
    tasks:
      - name: "Docker-Compose-Konfiguration erstellen"
        type: "file_creation"
        description: "Erstellt eine Docker-Compose-Konfiguration für das Gesamtsystem"
        target_file: "docker-compose.production.yml"
        content: |
          version: '3.8'
          
          services:
            # Backend-Service
            backend:
              build:
                context: .
                dockerfile: docker/api-server.Dockerfile
              image: valeo-neuroerp-backend:latest
              restart: always
              environment:
                - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@db:5432/valeo_neuroerp
                - REDIS_URL=redis://redis:6379/0
                - SECRET_KEY=${SECRET_KEY}
                - ENVIRONMENT=production
              depends_on:
                - db
                - redis
              ports:
                - "8000:8000"
              volumes:
                - ./data:/app/data
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
                interval: 30s
                timeout: 10s
                retries: 3
          
            # Frontend-Service
            frontend:
              build:
                context: .
                dockerfile: docker/frontend-server.Dockerfile
              image: valeo-neuroerp-frontend:latest
              restart: always
              ports:
                - "80:80"
              depends_on:
                - backend
              environment:
                - API_URL=http://backend:8000
                - NODE_ENV=production
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:80"]
                interval: 30s
                timeout: 10s
                retries: 3
          
            # Datenbank-Service
            db:
              image: postgres:14-alpine
              restart: always
              environment:
                - POSTGRES_USER=postgres
                - POSTGRES_PASSWORD=${DB_PASSWORD}
                - POSTGRES_DB=valeo_neuroerp
              volumes:
                - postgres_data:/var/lib/postgresql/data
              ports:
                - "5432:5432"
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U postgres"]
                interval: 10s
                timeout: 5s
                retries: 5
          
            # Redis-Service
            redis:
              image: redis:6-alpine
              restart: always
              ports:
                - "6379:6379"
              volumes:
                - redis_data:/data
              healthcheck:
                test: ["CMD", "redis-cli", "ping"]
                interval: 10s
                timeout: 5s
                retries: 5
          
            # Celery-Worker
            celery_worker:
              build:
                context: .
                dockerfile: docker/celery/Dockerfile
              restart: always
              environment:
                - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@db:5432/valeo_neuroerp
                - REDIS_URL=redis://redis:6379/0
                - SECRET_KEY=${SECRET_KEY}
                - ENVIRONMENT=production
              depends_on:
                - backend
                - db
                - redis
              command: celery -A backend.tasks.worker worker -l info
          
            # Flower (Celery-Monitoring)
            flower:
              build:
                context: .
                dockerfile: docker/flower/Dockerfile
              restart: always
              ports:
                - "5555:5555"
              environment:
                - REDIS_URL=redis://redis:6379/0
              depends_on:
                - redis
                - celery_worker
              command: celery -A backend.tasks.worker flower --port=5555
          
            # Prometheus (Monitoring)
            prometheus:
              image: prom/prometheus:latest
              restart: always
              ports:
                - "9090:9090"
              volumes:
                - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
                - prometheus_data:/prometheus
              command:
                - '--config.file=/etc/prometheus/prometheus.yml'
                - '--storage.tsdb.path=/prometheus'
                - '--web.console.libraries=/etc/prometheus/console_libraries'
                - '--web.console.templates=/etc/prometheus/consoles'
                - '--web.enable-lifecycle'
          
            # Grafana (Visualisierung)
            grafana:
              image: grafana/grafana:latest
              restart: always
              ports:
                - "3000:3000"
              volumes:
                - ./docker/grafana/provisioning:/etc/grafana/provisioning
                - grafana_data:/var/lib/grafana
              depends_on:
                - prometheus
              environment:
                - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
                - GF_USERS_ALLOW_SIGN_UP=false
          
            # Backup-Service
            backup:
              build:
                context: .
                dockerfile: docker/backup.Dockerfile
              restart: always
              volumes:
                - postgres_data:/var/lib/postgresql/data:ro
                - ./backup:/backup
              environment:
                - POSTGRES_USER=postgres
                - POSTGRES_PASSWORD=${DB_PASSWORD}
                - POSTGRES_DB=valeo_neuroerp
                - BACKUP_SCHEDULE=0 0 * * *
              depends_on:
                - db
          
          volumes:
            postgres_data:
            redis_data:
            prometheus_data:
            grafana_data:

      - name: "CI/CD-Pipeline erstellen"
        type: "file_creation"
        description: "Erstellt eine GitHub Actions CI/CD-Pipeline-Konfiguration"
        target_file: ".github/workflows/ci-cd.yml"
        content: |
          name: VALEO-NeuroERP CI/CD Pipeline
          
          on:
            push:
              branches: [ main, develop ]
            pull_request:
              branches: [ main, develop ]
          
          jobs:
            test:
              runs-on: ubuntu-latest
              
              services:
                postgres:
                  image: postgres:14
                  env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: test_db
                  ports:
                    - 5432:5432
                  options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                
                redis:
                  image: redis:6
                  ports:
                    - 6379:6379
                  options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
              
              steps:
                - uses: actions/checkout@v3
                
                - name: Set up Python
                  uses: actions/setup-python@v4
                  with:
                    python-version: '3.11'
                    cache: 'pip'
                
                - name: Install dependencies
                  run: |
                    python -m pip install --upgrade pip
                    pip install -r requirements.txt
                    pip install pytest pytest-cov
                
                - name: Lint with flake8
                  run: |
                    pip install flake8
                    flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
                
                - name: Test with pytest
                  env:
                    DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
                    REDIS_URL: redis://localhost:6379/0
                    SECRET_KEY: test_secret_key
                    ENVIRONMENT: test
                  run: |
                    pytest --cov=. --cov-report=xml
                
                - name: Upload coverage to Codecov
                  uses: codecov/codecov-action@v3
                  with:
                    file: ./coverage.xml
                    fail_ci_if_error: true
            
            build:
              needs: test
              runs-on: ubuntu-latest
              if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
              
              steps:
                - uses: actions/checkout@v3
                
                - name: Set up Docker Buildx
                  uses: docker/setup-buildx-action@v2
                
                - name: Login to DockerHub
                  uses: docker/login-action@v2
                  with:
                    username: ${{ secrets.DOCKERHUB_USERNAME }}
                    password: ${{ secrets.DOCKERHUB_TOKEN }}
                
                - name: Build and push Backend
                  uses: docker/build-push-action@v4
                  with:
                    context: .
                    file: ./docker/api-server.Dockerfile
                    push: true
                    tags: valeo/neuroerp-backend:latest
                
                - name: Build and push Frontend
                  uses: docker/build-push-action@v4
                  with:
                    context: .
                    file: ./docker/frontend-server.Dockerfile
                    push: true
                    tags: valeo/neuroerp-frontend:latest
            
            deploy:
              needs: build
              runs-on: ubuntu-latest
              if: github.ref == 'refs/heads/main'
              
              steps:
                - uses: actions/checkout@v3
                
                - name: Install kubectl
                  uses: azure/setup-kubectl@v3
                  with:
                    version: 'latest'
                
                - name: Set Kubernetes context
                  uses: azure/k8s-set-context@v3
                  with:
                    kubeconfig: ${{ secrets.KUBE_CONFIG }}
                
                - name: Deploy to Kubernetes
                  run: |
                    kubectl apply -f kubernetes/namespace.yaml
                    kubectl apply -f kubernetes/secrets.yaml
                    kubectl apply -f kubernetes/configmap.yaml
                    kubectl apply -f kubernetes/backend-deployment.yaml
                    kubectl apply -f kubernetes/frontend-deployment.yaml
                    kubectl apply -f kubernetes/services.yaml
                
                - name: Verify deployment
                  run: |
                    kubectl rollout status deployment/backend -n valeo-neuroerp
                    kubectl rollout status deployment/frontend -n valeo-neuroerp

  - name: "Abschluss-Tests"
    description: "Führt umfassende Tests für das VALEO-NeuroERP-System durch"
    tasks:
      - name: "End-to-End-Tests erstellen"
        type: "code_generation"
        description: "Erstellt End-to-End-Tests für kritische Workflows"
        target_file: "tests/e2e/test_critical_workflows.py"
        code: |
          # -*- coding: utf-8 -*-
          """
          End-to-End-Tests für kritische Workflows des VALEO-NeuroERP-Systems.
          """
          
          import pytest
          import requests
          import json
          from selenium import webdriver
          from selenium.webdriver.common.by import By
          from selenium.webdriver.support.ui import WebDriverWait
          from selenium.webdriver.support import expected_conditions as EC
          
          # Konfiguration
          BASE_URL = "http://localhost"
          API_URL = f"{BASE_URL}:8000/api"
          UI_URL = f"{BASE_URL}"
          
          # Test-Benutzer
          TEST_USER = {
              "username": "test_user",
              "password": "test_password",
              "email": "test@example.com"
          }
          
          @pytest.fixture(scope="module")
          def api_token():
              """Authentifiziert einen Testbenutzer und gibt den API-Token zurück."""
              response = requests.post(
                  f"{API_URL}/v1/auth/login",
                  json={
                      "username": TEST_USER["username"],
                      "password": TEST_USER["password"]
                  }
              )
              assert response.status_code == 200
              return response.json()["token"]
          
          @pytest.fixture(scope="module")
          def browser():
              """Initialisiert einen Webdriver für UI-Tests."""
              options = webdriver.ChromeOptions()
              options.add_argument("--headless")
              options.add_argument("--no-sandbox")
              options.add_argument("--disable-dev-shm-usage")
              
              driver = webdriver.Chrome(options=options)
              driver.implicitly_wait(10)
              
              yield driver
              
              driver.quit()
          
          class TestCriticalWorkflows:
              """Tests für kritische Workflows."""
              
              def test_user_authentication_api(self, api_token):
                  """Test für die Benutzerauthentifizierung über die API."""
                  # Überprüfe, ob der Token gültig ist
                  response = requests.get(
                      f"{API_URL}/v1/users/me",
                      headers={"Authorization": f"Bearer {api_token}"}
                  )
                  assert response.status_code == 200
                  user_data = response.json()
                  assert user_data["username"] == TEST_USER["username"]
                  assert user_data["email"] == TEST_USER["email"]
              
              def test_transaction_creation_api(self, api_token):
                  """Test für die Erstellung einer Transaktion über die API."""
                  # Erstelle eine neue Transaktion
                  transaction_data = {
                      "amount": 100.0,
                      "currency": "EUR",
                      "description": "Test Transaction",
                      "type": "income"
                  }
                  
                  response = requests.post(
                      f"{API_URL}/v1/transactions",
                      headers={"Authorization": f"Bearer {api_token}"},
                      json=transaction_data
                  )
                  assert response.status_code == 201
                  created_transaction = response.json()
                  transaction_id = created_transaction["id"]
                  
                  # Überprüfe, ob die Transaktion erstellt wurde
                  response = requests.get(
                      f"{API_URL}/v1/transactions/{transaction_id}",
                      headers={"Authorization": f"Bearer {api_token}"}
                  )
                  assert response.status_code == 200
                  retrieved_transaction = response.json()
                  assert retrieved_transaction["amount"] == transaction_data["amount"]
                  assert retrieved_transaction["currency"] == transaction_data["currency"]
                  assert retrieved_transaction["description"] == transaction_data["description"]
              
              def test_login_ui(self, browser):
                  """Test für den Login über die UI."""
                  browser.get(f"{UI_URL}/login")
                  
                  # Eingabe der Anmeldedaten
                  username_input = browser.find_element(By.ID, "username")
                  password_input = browser.find_element(By.ID, "password")
                  submit_button = browser.find_element(By.XPATH, "//button[@type='submit']")
                  
                  username_input.send_keys(TEST_USER["username"])
                  password_input.send_keys(TEST_USER["password"])
                  submit_button.click()
                  
                  # Warte auf die Weiterleitung zum Dashboard
                  WebDriverWait(browser, 10).until(
                      EC.url_contains("/dashboard")
                  )
                  
                  # Überprüfe, ob der Benutzer angemeldet ist
                  user_info = WebDriverWait(browser, 10).until(
                      EC.presence_of_element_located((By.CLASS_NAME, "user-info"))
                  )
                  assert TEST_USER["username"] in user_info.text
              
              def test_create_invoice_ui(self, browser):
                  """Test für die Erstellung einer Rechnung über die UI."""
                  # Anmelden (falls noch nicht geschehen)
                  if "/login" in browser.current_url:
                      self.test_login_ui(browser)
                  
                  # Navigiere zur Rechnungserstellung
                  browser.get(f"{UI_URL}/invoices/create")
                  
                  # Fülle das Formular aus
                  customer_input = browser.find_element(By.ID, "customer")
                  amount_input = browser.find_element(By.ID, "amount")
                  description_input = browser.find_element(By.ID, "description")
                  submit_button = browser.find_element(By.XPATH, "//button[@type='submit']")
                  
                  customer_input.send_keys("Test Customer")
                  amount_input.send_keys("200.00")
                  description_input.send_keys("Test Invoice")
                  submit_button.click()
                  
                  # Warte auf die Bestätigungsmeldung
                  success_message = WebDriverWait(browser, 10).until(
                      EC.presence_of_element_located((By.CLASS_NAME, "success-message"))
                  )
                  assert "erfolgreich erstellt" in success_message.text
                  
                  # Überprüfe, ob die Rechnung in der Liste erscheint
                  browser.get(f"{UI_URL}/invoices")
                  invoice_items = WebDriverWait(browser, 10).until(
                      EC.presence_of_all_elements_located((By.CLASS_NAME, "invoice-item"))
                  )
                  
                  found = False
                  for item in invoice_items:
                      if "Test Customer" in item.text and "200.00" in item.text:
                          found = True
                          break
                  
                  assert found, "Die erstellte Rechnung wurde nicht in der Liste gefunden"

# Ausgabedokumente
artifacts:
  track:
    - "api_documentation.md"
    - "user_manual.md"
    - "completion_analysis.md"
    - "project_overview.md" 