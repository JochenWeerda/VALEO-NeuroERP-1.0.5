# üìÅ Datei: tasks/genxais_cycle_v2.0.yaml
# Produktiver GENXAIS-Zyklus v2.0 ‚Äì VALEO-NeuroERP f√ºr Landhandel

name: GENXAIS Cycle v2.0 ‚Äì VALEO-NeuroERP f√ºr Landhandel
version: 2.0
type: multi-phase-cycle
phases: [VAN, PLAN, CREATE, IMPLEMENTATION, REFLEKTION]
trigger: manual
cron_schedule: "0 4 * * *" # t√§glicher Start um 4 Uhr morgens

agent: langgraph-mas

context:
  db: MongoDB
  orchestrator: LangGraph
  memory: MCP
  graph_engine: Graphiti
  ui: Streamlit
  frontend: React
  backend: FastAPI

config:
  monitoring:
    enabled: true
    streamlit_dashboard: true
    grafana_enabled: true
    ports:
      streamlit: 8502
      grafana: 3000
      prometheus: 9090
  
  streamlit_ui:
    title: "GENXAIS v2.0 VALEO-NeuroERP f√ºr Landhandel"
    components:
      - name: "Phasenstatus"
        description: "Zeigt aktuellen Status jeder Phase (VAN bis REFLEKTION)"
        type: "status_indicator"
        refresh_rate: 60
      - name: "Pipelines (7)"
        description: "Visualisiert Fortschritt, Laufzeit und Agentenstatus pro Pipeline"
        type: "progress_tracker"
        refresh_rate: 30
      - name: "Graphiti-Pfade"
        description: "Live-Darstellung der Entscheidungspfade aus Graphiti"
        type: "network_graph"
        refresh_rate: 120
      - name: "KI-Modell-Performance"
        description: "Metriken f√ºr KI-Modelle in Echtzeit"
        type: "metrics_dashboard"
        refresh_rate: 60
      - name: "Landhandel-Module"
        description: "Status und Entwicklungsfortschritt der Landhandel-Module"
        type: "module_status"
        refresh_rate: 300
      - name: "Fehler-Tracking"
        description: "Anzeige offener Issues aus IssueTrackerAgent"
        type: "issue_table"
        refresh_rate: 300
      - name: "Versionstracking"
        description: "Vergleich von v1.9 ‚Üí v2.0"
        type: "version_comparison"
        refresh_rate: 600
    scripts:
      startup: "scripts/streamlit_startup.ps1"
      init_dashboard: "scripts/init_dashboard.py"
      refresh_data: "scripts/refresh_dashboard_data.py"

pipeline:
  type: multi-agent
  mode: intelligent-parallel
  pipelines: 7

pipelines:
  - name: "API-Pipeline"
    agents: ["APIAgent", "ValidatorAgent", "GraphitiAgent"]
    goals: ["API-Endpunkte f√ºr Landhandel-Module erweitern", "OpenAPI-Spezifikation aktualisieren"]
    tasks:
      - name: "Landhandel-API-Endpunkte erstellen"
        type: "code_generation"
        details: "Entwickle REST-API-Endpunkte f√ºr Bestandsverwaltung, Saisonplanung und Lieferkettenoptimierung"
        status: "pending"
      - name: "KI-Endpunkte f√ºr Preisgestaltung"
        type: "code_generation"
        details: "Implementiere API-Endpunkte f√ºr KI-gest√ºtzte Preisgestaltung basierend auf Marktdaten"
        status: "pending"
      - name: "API-Dokumentation aktualisieren"
        type: "documentation"
        details: "Aktualisiere die OpenAPI-Spezifikation f√ºr alle neuen Endpunkte"
        status: "pending"
  
  - name: "Frontend-Pipeline"
    agents: ["UIAgent", "ReactAgent", "GraphitiAgent"]
    goals: ["UI-Komponenten f√ºr Landhandel entwickeln", "Mobile Benutzeroberfl√§che verbessern"]
    tasks:
      - name: "Bestandsverwaltungs-Dashboard"
        type: "code_generation"
        details: "Entwickle ein interaktives Dashboard f√ºr die Bestandsverwaltung von Saatgut, D√ºngemittel und Pflanzenschutzmittel"
        status: "pending"
      - name: "Saisonale Planungsansicht"
        type: "code_generation"
        details: "Erstelle eine visuelle Planungsansicht f√ºr saisonale Gesch√§ftsprozesse"
        status: "pending"
      - name: "Mobile Optimierung"
        type: "code_generation"
        details: "Optimiere alle UI-Komponenten f√ºr mobile Endger√§te"
        status: "pending"
  
  - name: "Backend-Pipeline"
    agents: ["BackendAgent", "DatabaseAgent", "AIAgent", "GraphitiAgent"]
    goals: ["KI-Modelle integrieren", "Datenbankoptimierung f√ºr Landhandel-Daten"]
    tasks:
      - name: "KI-Modell f√ºr Preisgestaltung"
        type: "code_generation"
        details: "Implementiere ein KI-Modell zur Preisgestaltung basierend auf Marktdaten"
        status: "pending"
      - name: "Automatisierte Buchungsvorschl√§ge"
        type: "code_generation"
        details: "Entwickle einen Algorithmus f√ºr automatisierte Buchungsvorschl√§ge in der FIBU"
        status: "pending"
      - name: "Datenmodell f√ºr Landhandel"
        type: "code_generation"
        details: "Erweitere das Datenmodell f√ºr landwirtschaftliche Produkte und saisonale Gesch√§ftszyklen"
        status: "pending"
      - name: "Redis-Caching optimieren"
        type: "code_generation"
        details: "Optimiere die Redis-Caching-Strategie f√ºr verbesserte Performance"
        status: "pending"
  
  - name: "Dokumentations-Pipeline"
    agents: ["DocAgent", "MarkdownAgent", "GraphitiAgent"]
    goals: ["Dokumentation f√ºr Landhandel-Module erstellen", "Benutzerhandbuch aktualisieren"]
    tasks:
      - name: "Landhandel-Modul-Dokumentation"
        type: "documentation"
        details: "Erstelle umfassende Dokumentation f√ºr alle Landhandel-Module"
        status: "pending"
      - name: "KI-Funktionen dokumentieren"
        type: "documentation"
        details: "Dokumentiere alle KI-Funktionen und deren Verwendung"
        status: "pending"
      - name: "Benutzerhandbuch aktualisieren"
        type: "documentation"
        details: "Aktualisiere das Benutzerhandbuch mit allen neuen Funktionen"
        status: "pending"
  
  - name: "Test-Pipeline"
    agents: ["TestAgent", "QAAgent", "GraphitiAgent"]
    goals: ["E2E-Tests f√ºr Landhandel-Prozesse implementieren", "Testabdeckung auf 90% erh√∂hen"]
    tasks:
      - name: "E2E-Tests f√ºr Bestandsverwaltung"
        type: "code_generation"
        details: "Implementiere E2E-Tests f√ºr die Bestandsverwaltung von landwirtschaftlichen Produkten"
        status: "pending"
      - name: "KI-Modell-Tests"
        type: "code_generation"
        details: "Entwickle Tests f√ºr KI-Modelle zur Preisgestaltung und Buchungsvorschl√§ge"
        status: "pending"
      - name: "Performance-Tests"
        type: "code_generation"
        details: "Implementiere Performance-Tests f√ºr kritische Gesch√§ftsprozesse"
        status: "pending"
      - name: "Testautomatisierung erweitern"
        type: "code_generation"
        details: "Erweitere die Testautomatisierung f√ºr kontinuierliche Integration"
        status: "pending"
  
  - name: "DevOps-Pipeline"
    agents: ["DevOpsAgent", "KubernetesAgent", "GraphitiAgent"]
    goals: ["Deployment-Prozesse verbessern", "Monitoring f√ºr Landhandel-spezifische Metriken"]
    tasks:
      - name: "Kubernetes-Manifeste aktualisieren"
        type: "file_creation"
        details: "Aktualisiere Kubernetes-Manifeste f√ºr neue Module und Dienste"
        status: "pending"
      - name: "Monitoring f√ºr KI-Modelle"
        type: "code_generation"
        details: "Implementiere Monitoring f√ºr KI-Modell-Performance"
        status: "pending"
      - name: "Skalierbarkeit verbessern"
        type: "code_generation"
        details: "Optimiere die Skalierbarkeit f√ºr saisonale Lastspitzen"
        status: "pending"
  
  - name: "Sicherheits-Pipeline"
    agents: ["SecurityAgent", "AuditAgent", "GraphitiAgent"]
    goals: ["Branchenspezifische Sicherheitsstandards implementieren", "Datenschutz f√ºr Kundendaten verbessern"]
    tasks:
      - name: "Compliance-Pr√ºfung"
        type: "analysis"
        details: "√úberpr√ºfe die Einhaltung landwirtschaftlicher Vorschriften und Standards"
        status: "pending"
      - name: "Datenschutz-Audit"
        type: "analysis"
        details: "F√ºhre ein Datenschutz-Audit f√ºr Kundendaten durch"
        status: "pending"
      - name: "Zugriffskontrollen optimieren"
        type: "code_generation"
        details: "Optimiere Zugriffskontrollen f√ºr verschiedene Benutzerrollen"
        status: "pending"
      - name: "Regelm√§√üige Sicherheits√ºberpr√ºfungen"
        type: "process_implementation"
        details: "Implementiere einen Prozess f√ºr regelm√§√üige Sicherheits√ºberpr√ºfungen"
        status: "pending"

agents:
  - PlannerAgent
  - ConfigAgent
  - ValidatorAgent
  - ReviewAgent
  - GraphNavigator (Graphiti)
  - APIAgent
  - UIAgent
  - BackendAgent
  - DocAgent
  - TestAgent
  - DevOpsAgent
  - SecurityAgent
  - ReactAgent
  - DatabaseAgent
  - MarkdownAgent
  - QAAgent
  - KubernetesAgent
  - AuditAgent
  - AIAgent
  - ReflectionAgent
  - MemoryAgent

goals:
  - Vollst√§ndige Integration aller Landhandel-Module
  - Integration von KI-Funktionen f√ºr Preisgestaltung, FIBU und CRM
  - Optimierung f√ºr mobile Endger√§te
  - Erh√∂hung der Testabdeckung auf 90%
  - Einhaltung branchenspezifischer Sicherheitsstandards

artifacts:
  track:
    - landhandel_module_documentation.md
    - ai_integration_overview.md
    - mobile_ui_improvements.md
    - test_coverage_report.md
    - security_compliance_report.md
    - api_documentation.md
    - frontend_components.md
    - backend_optimization.md
    - deployment_guide.md
    - handover_document.md
    - reflection_report.md

versioning:
  current_version: 2.0
  previous_version: 1.9
  version_function: increment_version()

graphiti_config:
  activate: true
  enable_fallback_paths: true
  link_memory_to_graph: true
  visualize_decisions: true
  output: graphiti_trace_v2.md

completion:
  - Archive all artifacts
  - Generate final review
  - Prepare migration plan for v2.1 