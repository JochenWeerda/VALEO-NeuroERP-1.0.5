import { MCPSchema } from './mcpSchemaInjector';

/**
 * Cursor-Prompt-Templates f√ºr automatische Komponenten-Generierung
 */

export interface CursorPromptTemplate {
  name: string;
  description: string;
  template: string;
  variables: string[];
}

/**
 * Basis-Prompt f√ºr alle Komponenten-Generierungen
 */
export const BASE_PROMPT_TEMPLATE = `
# üéØ VALEO NeuroERP - React Komponenten Generator

Du bist ein erfahrener Frontend-Entwickler f√ºr VALEO NeuroERP. Erstelle React-Komponenten basierend auf dem bereitgestellten Supabase-Schema.

## üß† Regeln f√ºr die Komponentenerstellung

1. **Verwende ausschlie√ülich Felder, Typen und Relationen aus dem bereitgestellten Schema**
2. **Fremdschl√ºsselbeziehungen m√ºssen korrekt gehandhabt werden** ‚Äì dropdowns oder Lookups
3. **Formularvalidierung erfolgt auf Basis der im Schema enthaltenen Einschr√§nkungen** (z. B. \`NOT NULL\`, \`CHECK\`, \`ENUM\`)
4. **RLS-Richtlinien sind zu respektieren** (z. B. keine Anzeige schreibgesch√ºtzter Felder)
5. **Verwende \`zod\` f√ºr Typensicherheit**
6. **Generiere exakte TypeScript-Typen direkt aus dem Schema**
7. **Die Komponente muss eigenst√§ndig nutzbar und in sich geschlossen sein**
8. **Ber√ºcksichtige UI/UX: Nutze sinnvolle Labels, Gruppen und Reihenfolgen**

## üé® UI-Framework Regeln

### Material-UI (MUI) Komponenten
- Verwende MUI v5 Komponenten f√ºr komplexe UI-Elemente
- Nutze \`@mui/material\` f√ºr Buttons, Cards, Dialogs, etc.
- Verwende \`@mui/icons-material\` f√ºr Icons
- Implementiere Theme-Provider f√ºr konsistente Farben

### Ant Design Komponenten
- Verwende Ant Design f√ºr Tabellen, Formulare, Navigation
- Nutze \`antd\` f√ºr DataGrid, Form, Menu, etc.
- Implementiere deutsche Lokalisierung

### Tailwind CSS Utility-Klassen
- Verwende Tailwind f√ºr Layout, Spacing, Responsive Design
- Kombiniere mit MUI/Ant Design f√ºr beste Ergebnisse
- Nutze deutsche Klassennamen-Konventionen

## üîß TypeScript Regeln

### Typen-Definitionen
- Erstelle immer TypeScript Interfaces f√ºr Props
- Verwende Union Types f√ºr Status/Enums
- Nutze Generic Types f√ºr wiederverwendbare Komponenten

### Custom Hooks
- Erstelle TypeScript-Hooks f√ºr wiederverwendbare Logik
- Verwende Generic Types f√ºr flexible Hooks

## üìä Schema-Kontext

{{SCHEMA_CONTEXT}}

## üéØ Aufgabe

{{TASK_DESCRIPTION}}

## üìù Ausgabe-Format

Erstelle die folgenden Dateien:

1. **TypeScript-Typen** (\`types/{{TABLE_NAME}}.ts\`)
2. **React-Komponente** (\`components/{{COMPONENT_TYPE}}/{{COMPONENT_NAME}}.tsx\`)
3. **Tests** (\`components/__tests__/{{COMPONENT_NAME}}.test.tsx\`) - optional
4. **Dokumentation** (\`components/{{COMPONENT_TYPE}}/README.md\`) - optional

## üîí Sicherheits-Hinweise

- **JWT-Autorisierung** beim MCP-Request sicherstellen
- **Kein offenes Schema-Leak** √ºber das API
- **RLS-Verst√∂√üe fr√ºh abfangen** via Assertion-Layer vor dem Komponenten-Render
- **Sensitive Daten** (Passw√∂rter, Tokens) niemals im Frontend speichern
- **Input-Validierung** auf Client- und Server-Seite implementieren

---

**HINWEIS:** Verwende ausschlie√ülich die oben definierten Felder, Typen und Beziehungen. Erfinde KEINE zus√§tzlichen Felder oder Typen.
`;

/**
 * Formular-Komponenten-Prompt
 */
export const FORM_PROMPT_TEMPLATE = `
${BASE_PROMPT_TEMPLATE}

## üéØ Aufgabe: Formular-Komponente erstellen

Erstelle eine vollst√§ndige React-Formular-Komponente f√ºr die Tabelle \`{{TABLE_NAME}}\` mit folgenden Features:

### ‚úÖ Anforderungen:
- **React Hook Form** Integration mit Zod-Validierung
- **Material-UI** Komponenten f√ºr UI-Elemente
- **TailwindCSS** f√ºr zus√§tzliches Styling
- **Responsive Design** f√ºr mobile und desktop Ger√§te
- **Real-time Validierung** mit Fehlermeldungen
- **Loading States** und Error Handling
- **RLS-Compliance** mit entsprechenden UI-Hinweisen
- **Foreign Key Handling** mit Dropdowns/Lookups
- **Enum-Werte** f√ºr Status-Felder
- **Accessibility** Features (ARIA-Labels, Keyboard Navigation)

### üìã Komponenten-Struktur:
1. **Props Interface** mit TypeScript
2. **Form Hook** mit React Hook Form
3. **Validierung** basierend auf Schema
4. **UI-Komponenten** mit Material-UI
5. **Error Handling** und Loading States
6. **Submit/Cancel** Funktionalit√§t

### üé® UI-Features:
- **Card-Layout** mit Header und Content
- **Formular-Felder** mit Labels und Icons
- **Validierungs-Fehlermeldungen** unter den Feldern
- **Action Buttons** (Speichern, Abbrechen)
- **Loading Indicators** w√§hrend Submissions
- **Success/Error** Feedback

### üîí RLS-Integration:
- **Update-Beschr√§nkungen** in UI anzeigen
- **Delete-Beschr√§nkungen** ber√ºcksichtigen
- **Insert-Berechtigungen** pr√ºfen
- **Benutzer-Hinweise** f√ºr RLS-Richtlinien

### üì± Responsive Design:
- **Mobile-first** Ansatz
- **Touch-friendly** Buttons und Inputs
- **Flexible Layouts** f√ºr verschiedene Bildschirmgr√∂√üen
- **Optimierte** Formular-Navigation

## üìù Ausgabe:

Erstelle eine vollst√§ndige, produktionsbereite React-Komponente mit allen notwendigen Imports, Types und Features.
`;

/**
 * Tabellen-Komponenten-Prompt
 */
export const TABLE_PROMPT_TEMPLATE = `
${BASE_PROMPT_TEMPLATE}

## üéØ Aufgabe: Tabellen-Komponente erstellen

Erstelle eine vollst√§ndige React-Tabellen-Komponente f√ºr die Tabelle \`{{TABLE_NAME}}\` mit folgenden Features:

### ‚úÖ Anforderungen:
- **Material-UI Table** mit Sortierung und Paginierung
- **Volltext-Suche** √ºber alle relevanten Felder
- **Filterung** nach Status/Enums
- **Responsive Design** f√ºr mobile und desktop Ger√§te
- **RLS-Compliance** mit entsprechenden Aktionen
- **Loading States** und Error Handling
- **Foreign Key Resolution** mit Lookup-Daten
- **Accessibility** Features (ARIA-Labels, Keyboard Navigation)

### üìã Komponenten-Struktur:
1. **Props Interface** mit TypeScript
2. **State Management** f√ºr Sortierung, Filterung, Paginierung
3. **Data Processing** mit useMemo f√ºr Performance
4. **UI-Komponenten** mit Material-UI Table
5. **Search/Filter** Funktionalit√§t
6. **Action Handlers** (View, Edit, Delete)

### üé® UI-Features:
- **Table Header** mit Sortier-Indikatoren
- **Search Bar** mit Icon und Placeholder
- **Filter Dropdowns** f√ºr Enum-Felder
- **Status Chips** mit Farbkodierung
- **Action Buttons** (View, Edit, Delete)
- **Pagination** mit konfigurierbaren Seitengr√∂√üen
- **Empty State** f√ºr keine Daten
- **Loading Spinner** w√§hrend Datenabfrage

### üîí RLS-Integration:
- **Edit-Aktionen** nur f√ºr erlaubte Datens√§tze
- **Delete-Aktionen** nur wenn RLS erlaubt
- **View-Aktionen** f√ºr alle Datens√§tze
- **UI-Hinweise** f√ºr RLS-Beschr√§nkungen

### üì± Responsive Design:
- **Mobile-optimierte** Tabellen-Ansicht
- **Touch-friendly** Buttons und Aktionen
- **Scrollable** Tabellen f√ºr kleine Bildschirme
- **Stacked Layout** f√ºr mobile Ger√§te

## üìù Ausgabe:

Erstelle eine vollst√§ndige, produktionsbereite React-Tabellen-Komponente mit allen notwendigen Imports, Types und Features.
`;

/**
 * Vollst√§ndige CRUD-Komponenten-Prompt
 */
export const CRUD_PROMPT_TEMPLATE = `
${BASE_PROMPT_TEMPLATE}

## üéØ Aufgabe: Vollst√§ndige CRUD-Komponenten erstellen

Erstelle eine vollst√§ndige CRUD-Anwendung f√ºr die Tabelle \`{{TABLE_NAME}}\` mit folgenden Komponenten:

### ‚úÖ Anforderungen:
- **Formular-Komponente** f√ºr Create/Update
- **Tabellen-Komponente** f√ºr Read/List
- **Detail-Ansicht** f√ºr einzelne Datens√§tze
- **Modal-Dialoge** f√ºr Formulare
- **Navigation** zwischen verschiedenen Ansichten
- **State Management** f√ºr CRUD-Operationen
- **Error Handling** und Loading States
- **RLS-Compliance** f√ºr alle Operationen

### üìã Komponenten-Struktur:
1. **Types** (\`types/{{TABLE_NAME}}.ts\`)
2. **Form Component** (\`components/forms/{{TABLE_NAME}}Form.tsx\`)
3. **Table Component** (\`components/tables/{{TABLE_NAME}}Table.tsx\`)
4. **Page Component** (\`pages/{{TABLE_NAME}}Page.tsx\`)
5. **Tests** f√ºr alle Komponenten
6. **Documentation** mit Verwendungsbeispielen

### üé® UI-Features:
- **Dashboard-Layout** mit Statistiken
- **Action Buttons** f√ºr CRUD-Operationen
- **Modal-Dialoge** f√ºr Formulare
- **Snackbar-Benachrichtigungen** f√ºr Feedback
- **Loading States** f√ºr alle Operationen
- **Error Boundaries** f√ºr Fehlerbehandlung

### üîí RLS-Integration:
- **Create** nur wenn INSERT erlaubt
- **Read** nur wenn SELECT erlaubt
- **Update** nur wenn UPDATE erlaubt
- **Delete** nur wenn DELETE erlaubt
- **UI-Feedback** f√ºr RLS-Beschr√§nkungen

### üì± Responsive Design:
- **Mobile-first** Ansatz
- **Touch-friendly** Interface
- **Responsive** Tabellen und Formulare
- **Optimierte** Navigation f√ºr mobile Ger√§te

## üìù Ausgabe:

Erstelle eine vollst√§ndige, produktionsbereite CRUD-Anwendung mit allen notwendigen Komponenten, Types und Features.
`;

/**
 * Prompt-Templates generieren
 */
export class CursorPromptGenerator {
  /**
   * Generiert einen vollst√§ndigen Cursor-Prompt basierend auf Schema und Template
   */
  static generatePrompt(
    schema: MCPSchema,
    template: 'form' | 'table' | 'crud',
    options: {
      language?: 'de' | 'en';
      includeTests?: boolean;
      includeDocumentation?: boolean;
    } = {}
  ): string {
    const schemaContext = this.generateSchemaContext(schema);
    
    let promptTemplate: string;
    switch (template) {
      case 'form':
        promptTemplate = FORM_PROMPT_TEMPLATE;
        break;
      case 'table':
        promptTemplate = TABLE_PROMPT_TEMPLATE;
        break;
      case 'crud':
        promptTemplate = CRUD_PROMPT_TEMPLATE;
        break;
      default:
        throw new Error(`Unbekanntes Template: ${template}`);
    }

    // Template-Variablen ersetzen
    let prompt = promptTemplate
      .replace('{{SCHEMA_CONTEXT}}', schemaContext)
      .replace(/{{TABLE_NAME}}/g, schema.table)
      .replace(/{{COMPONENT_TYPE}}/g, template === 'form' ? 'forms' : template === 'table' ? 'tables' : 'pages')
      .replace(/{{COMPONENT_NAME}}/g, this.getComponentName(schema.table, template));

    // Optionale Features hinzuf√ºgen
    if (options.includeTests) {
      prompt += '\n\n## üß™ Tests\nErstelle umfassende Tests f√ºr alle Komponenten mit React Testing Library.';
    }

    if (options.includeDocumentation) {
      prompt += '\n\n## üìö Dokumentation\nErstelle eine umfassende README-Dokumentation mit Verwendungsbeispielen.';
    }

    if (options.language === 'en') {
      prompt = this.translateToEnglish(prompt);
    }

    return prompt;
  }

  /**
   * Generiert Schema-Kontext f√ºr Cursor-Prompt
   */
  private static generateSchemaContext(schema: MCPSchema): string {
    return `
### Aktuelle Tabelle: \`${schema.table}\`

### Schema-Details:
\`\`\`json
${JSON.stringify(schema, null, 2)}
\`\`\`

### RLS-Richtlinien:
- **SELECT**: ${schema.rls.select ? '‚úÖ Erlaubt' : '‚ùå Verboten'}
- **INSERT**: ${schema.rls.insert ? '‚úÖ Erlaubt' : '‚ùå Verboten'}
- **UPDATE**: ${schema.rls.update ? '‚úÖ Erlaubt' : '‚ùå Verboten'}
- **DELETE**: ${schema.rls.delete ? '‚úÖ Erlaubt' : '‚ùå Verboten'}

### Foreign Key Beziehungen:
${schema.columns
  .filter(col => col.foreign_key)
  .map(col => `- \`${col.name}\` ‚Üí \`${col.foreign_key}\``)
  .join('\n') || '- Keine Foreign Keys definiert'}

### Validierungsregeln:
${schema.columns
  .filter(col => col.not_null || col.check || col.enum_values)
  .map(col => {
    const rules = [];
    if (col.not_null) rules.push('NOT NULL');
    if (col.check) rules.push(`CHECK: ${col.check}`);
    if (col.enum_values) rules.push(`ENUM: [${col.enum_values.join(', ')}]`);
    return `- \`${col.name}\`: ${rules.join(', ')}`;
  })
  .join('\n') || '- Keine speziellen Validierungsregeln'}

### Schema-Timestamp: ${new Date().toISOString()}
`;
  }

  /**
   * Generiert Komponenten-Namen
   */
  private static getComponentName(tableName: string, template: string): string {
    const className = tableName.charAt(0).toUpperCase() + tableName.slice(1);
    
    switch (template) {
      case 'form':
        return `${className}Form`;
      case 'table':
        return `${className}Table`;
      case 'crud':
        return `${className}Page`;
      default:
        return className;
    }
  }

  /**
   * √úbersetzt Prompt ins Englische
   */
  private static translateToEnglish(prompt: string): string {
    const translations: Record<string, string> = {
      'Erstelle eine vollst√§ndige React-Formular-Komponente': 'Create a complete React form component',
      'Erstelle eine vollst√§ndige React-Tabellen-Komponente': 'Create a complete React table component',
      'Erstelle eine vollst√§ndige CRUD-Anwendung': 'Create a complete CRUD application',
      'Anforderungen': 'Requirements',
      'Komponenten-Struktur': 'Component Structure',
      'UI-Features': 'UI Features',
      'RLS-Integration': 'RLS Integration',
      'Responsive Design': 'Responsive Design',
      'Ausgabe': 'Output',
      'Erlaubt': 'Allowed',
      'Verboten': 'Forbidden',
      'Keine Foreign Keys definiert': 'No Foreign Keys defined',
      'Keine speziellen Validierungsregeln': 'No special validation rules',
      'HINWEIS': 'NOTE',
      'Verwende ausschlie√ülich die oben definierten Felder': 'Use only the fields defined above',
      'Erfinde KEINE zus√§tzlichen Felder oder Typen': 'Do NOT invent additional fields or types'
    };

    let translatedPrompt = prompt;
    Object.entries(translations).forEach(([german, english]) => {
      translatedPrompt = translatedPrompt.replace(new RegExp(german, 'g'), english);
    });

    return translatedPrompt;
  }

  /**
   * Generiert einen kurzen Prompt f√ºr schnelle Komponenten-Generierung
   */
  static generateQuickPrompt(schema: MCPSchema, componentType: string): string {
    return `
# Quick Component Generator

Generate a React component for table \`${schema.table}\` with type \`${componentType}\`.

## Schema:
\`\`\`json
${JSON.stringify(schema, null, 2)}
\`\`\`

## Requirements:
- Use only fields from schema
- Respect RLS policies: ${JSON.stringify(schema.rls)}
- Include TypeScript types
- Use Material-UI + TailwindCSS
- German labels and messages
- Responsive design

Generate the component now.
`;
  }

  /**
   * Generiert einen Debug-Prompt f√ºr Schema-Analyse
   */
  static generateDebugPrompt(schema: MCPSchema): string {
    return `
# Schema Debug Analysis

Analyze this Supabase schema and provide insights:

## Schema:
\`\`\`json
${JSON.stringify(schema, null, 2)}
\`\`\`

## Analysis Questions:
1. What are the primary business entities?
2. What are the foreign key relationships?
3. What RLS policies are in place?
4. What validation rules exist?
5. What UI components would be needed?
6. Any potential issues or improvements?

Provide a detailed analysis.
`;
  }
}

/**
 * Prompt-Templates f√ºr verschiedene Anwendungsf√§lle
 */
export const PROMPT_TEMPLATES: Record<string, CursorPromptTemplate> = {
  form: {
    name: 'Formular-Komponente',
    description: 'Erstellt eine React-Formular-Komponente basierend auf Supabase-Schema',
    template: FORM_PROMPT_TEMPLATE,
    variables: ['{{TABLE_NAME}}', '{{SCHEMA_CONTEXT}}', '{{COMPONENT_NAME}}']
  },
  table: {
    name: 'Tabellen-Komponente',
    description: 'Erstellt eine React-Tabellen-Komponente basierend auf Supabase-Schema',
    template: TABLE_PROMPT_TEMPLATE,
    variables: ['{{TABLE_NAME}}', '{{SCHEMA_CONTEXT}}', '{{COMPONENT_NAME}}']
  },
  crud: {
    name: 'CRUD-Anwendung',
    description: 'Erstellt eine vollst√§ndige CRUD-Anwendung basierend auf Supabase-Schema',
    template: CRUD_PROMPT_TEMPLATE,
    variables: ['{{TABLE_NAME}}', '{{SCHEMA_CONTEXT}}', '{{COMPONENT_NAME}}']
  }
};

export default CursorPromptGenerator; 