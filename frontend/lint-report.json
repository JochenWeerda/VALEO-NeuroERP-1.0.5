[{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\babel.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\components\\erp\\OrderSuggestion.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormControl' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InputLabel' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Select' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MenuItem' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1343,1346],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1343,1346],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'orderSuggestionFilters' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":55,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Card,\r\n  TextField,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Grid,\r\n  Typography,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Paper,\r\n  Alert,\r\n  CircularProgress,\r\n  IconButton,\r\n  Tooltip\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Search as SearchIcon,\r\n  Refresh as RefreshIcon,\r\n  Create as CreateIcon\r\n} from '@mui/icons-material';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport { useErpStore } from '../../store/erpStore';\r\nimport { OrderSuggestionData, OrderSuggestionFilters } from '../../types/erpTypes';\r\n\r\n// Validierungsschema für Filter\r\nconst filterSchema: yup.ObjectSchema<OrderSuggestionFilters> = yup.object({\r\n  articleGroup: yup.string().optional(),\r\n  branch: yup.string().optional(),\r\n  matchcode: yup.string().optional(),\r\n  minStock: yup.number().min(0, 'Mindestbestand muss größer oder gleich 0 sein').optional(),\r\n  maxStock: yup.number().min(0, 'Maximalbestand muss größer oder gleich 0 sein').optional()\r\n}) as yup.ObjectSchema<OrderSuggestionFilters>;\r\n\r\ninterface OrderSuggestionProps {\r\n  onSuggestionSelect?: (suggestion: OrderSuggestionData) => void;\r\n  onOrderCreate?: (order: any) => void;\r\n}\r\n\r\nexport const OrderSuggestion: React.FC<OrderSuggestionProps> = ({\r\n  onSuggestionSelect,\r\n  onOrderCreate\r\n}) => {\r\n  const {\r\n    orderSuggestions,\r\n    orderSuggestionFilters,\r\n    orderSuggestionLoading,\r\n    orderSuggestionError,\r\n    fetchOrderSuggestions,\r\n    createOrderFromSuggestion\r\n  } = useErpStore();\r\n\r\n  const [selectedSuggestions, setSelectedSuggestions] = useState<string[]>([]);\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors }\r\n  } = useForm<OrderSuggestionFilters>({\r\n    resolver: yupResolver(filterSchema)\r\n  });\r\n\r\n  // Initial laden\r\n  useEffect(() => {\r\n    fetchOrderSuggestions({});\r\n  }, [fetchOrderSuggestions]);\r\n\r\n  // Filter anwenden\r\n  const onSubmitFilters = (filters: OrderSuggestionFilters) => {\r\n    fetchOrderSuggestions(filters);\r\n  };\r\n\r\n  // Filter zurücksetzen\r\n  const handleResetFilters = () => {\r\n    reset();\r\n    fetchOrderSuggestions({});\r\n  };\r\n\r\n  // Vorschlag auswählen\r\n  const handleSuggestionSelect = (suggestion: OrderSuggestionData) => {\r\n    if (onSuggestionSelect) {\r\n      onSuggestionSelect(suggestion);\r\n    }\r\n  };\r\n\r\n  // Bestellung aus Vorschlag erstellen\r\n  const handleCreateOrder = async (suggestion: OrderSuggestionData) => {\r\n    try {\r\n      await createOrderFromSuggestion(suggestion);\r\n      if (onOrderCreate) {\r\n        onOrderCreate(suggestion);\r\n      }\r\n    } catch (error) {\r\n      console.error('Fehler beim Erstellen der Bestellung:', error);\r\n    }\r\n  };\r\n\r\n  // Mehrere Vorschläge auswählen\r\n  const handleSelectSuggestion = (articleNumber: string) => {\r\n    setSelectedSuggestions(prev => \r\n      prev.includes(articleNumber) \r\n        ? prev.filter(id => id !== articleNumber)\r\n        : [...prev, articleNumber]\r\n    );\r\n  };\r\n\r\n  // Alle ausgewählten Vorschläge zu Bestellung\r\n  const handleCreateOrderFromSelected = async () => {\r\n    const selectedSuggestionsData = orderSuggestions.filter(s => \r\n      selectedSuggestions.includes(s.articleNumber)\r\n    );\r\n    \r\n    for (const suggestion of selectedSuggestionsData) {\r\n      await handleCreateOrder(suggestion);\r\n    }\r\n    \r\n    setSelectedSuggestions([]);\r\n  };\r\n\r\n  return (\r\n    <Card className=\"p-6 max-w-7xl mx-auto\">\r\n      <Typography variant=\"h5\" className=\"mb-6 text-gray-800\">\r\n        Bestellvorschlag / Bestellung / Lieferantenstamm\r\n      </Typography>\r\n\r\n      {/* Filter-Bereich */}\r\n      <Paper className=\"p-4 mb-6 bg-gray-50\">\r\n        <Typography variant=\"h6\" className=\"mb-4\">\r\n          Filter\r\n        </Typography>\r\n        \r\n        <form onSubmit={handleSubmit(onSubmitFilters)}>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Controller\r\n                name=\"articleGroup\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Artikel-Gruppe\"\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Controller\r\n                name=\"branch\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Niederlassung\"\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Controller\r\n                name=\"matchcode\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Matchcode\"\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Controller\r\n                name=\"minStock\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Min.-Bestand\"\r\n                    type=\"number\"\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    error={!!errors.minStock}\r\n                    helperText={errors.minStock?.message}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Controller\r\n                name=\"maxStock\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Max.-Bestand\"\r\n                    type=\"number\"\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    error={!!errors.maxStock}\r\n                    helperText={errors.maxStock?.message}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <div className=\"flex space-x-2\">\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  startIcon={<SearchIcon />}\r\n                  size=\"small\"\r\n                >\r\n                  Suchen\r\n                </Button>\r\n                <Button\r\n                  type=\"button\"\r\n                  variant=\"outlined\"\r\n                  startIcon={<RefreshIcon />}\r\n                  size=\"small\"\r\n                  onClick={handleResetFilters}\r\n                >\r\n                  Zurücksetzen\r\n                </Button>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </Paper>\r\n\r\n      {/* Aktions-Buttons */}\r\n      <div className=\"flex justify-between items-center mb-4\">\r\n        <Typography variant=\"h6\">\r\n          Bestellvorschlagsliste ({orderSuggestions.length} Einträge)\r\n        </Typography>\r\n        \r\n        <div className=\"flex space-x-2\">\r\n          {selectedSuggestions.length > 0 && (\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<CreateIcon />}\r\n              onClick={handleCreateOrderFromSelected}\r\n              className=\"bg-green-600 hover:bg-green-700\"\r\n            >\r\n              Bestellung aus {selectedSuggestions.length} Vorschlägen erstellen\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Fehler-Anzeige */}\r\n      {orderSuggestionError && (\r\n        <Alert severity=\"error\" className=\"mb-4\">\r\n          {orderSuggestionError}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Lade-Indikator */}\r\n      {orderSuggestionLoading && (\r\n        <div className=\"flex justify-center items-center py-8\">\r\n          <CircularProgress />\r\n        </div>\r\n      )}\r\n\r\n      {/* Tabelle */}\r\n      {!orderSuggestionLoading && (\r\n        <Table className=\"w-full border-collapse\">\r\n          <TableHead>\r\n            <TableRow className=\"bg-gray-100\">\r\n              <TableCell className=\"font-semibold\">Auswahl</TableCell>\r\n              <TableCell className=\"font-semibold\">Lager</TableCell>\r\n              <TableCell className=\"font-semibold\">Artikel-Nr.</TableCell>\r\n              <TableCell className=\"font-semibold\">Bezeichnung</TableCell>\r\n              <TableCell className=\"font-semibold\">Bestand</TableCell>\r\n              <TableCell className=\"font-semibold\">Min.-Best.</TableCell>\r\n              <TableCell className=\"font-semibold\">Max.-Best.</TableCell>\r\n              <TableCell className=\"font-semibold\">Verkauf</TableCell>\r\n              <TableCell className=\"font-semibold\">Vorschlag</TableCell>\r\n              <TableCell className=\"font-semibold\">Einkauf</TableCell>\r\n              <TableCell className=\"font-semibold\">Matchcode</TableCell>\r\n              <TableCell className=\"font-semibold\">Aktionen</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {orderSuggestions.map((suggestion) => (\r\n              <TableRow \r\n                key={suggestion.articleNumber}\r\n                className=\"hover:bg-gray-50\"\r\n              >\r\n                <TableCell>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={selectedSuggestions.includes(suggestion.articleNumber)}\r\n                    onChange={() => handleSelectSuggestion(suggestion.articleNumber)}\r\n                    className=\"w-4 h-4\"\r\n                  />\r\n                </TableCell>\r\n                <TableCell>{suggestion.warehouse}</TableCell>\r\n                <TableCell className=\"font-mono\">{suggestion.articleNumber}</TableCell>\r\n                <TableCell>\r\n                  <div>\r\n                    <div className=\"font-medium\">{suggestion.description1}</div>\r\n                    {suggestion.description2 && (\r\n                      <div className=\"text-sm text-gray-600\">{suggestion.description2}</div>\r\n                    )}\r\n                  </div>\r\n                </TableCell>\r\n                <TableCell className=\"text-right\">{suggestion.stock}</TableCell>\r\n                <TableCell className=\"text-right\">{suggestion.minStock}</TableCell>\r\n                <TableCell className=\"text-right\">{suggestion.maxStock}</TableCell>\r\n                <TableCell className=\"text-right\">{suggestion.sales}</TableCell>\r\n                <TableCell className=\"text-right font-semibold text-blue-600\">\r\n                  {suggestion.suggestion}\r\n                </TableCell>\r\n                <TableCell className=\"text-right\">{suggestion.purchase}</TableCell>\r\n                <TableCell className=\"font-mono text-sm\">{suggestion.matchcode}</TableCell>\r\n                <TableCell>\r\n                  <div className=\"flex space-x-1\">\r\n                    <Tooltip title=\"Vorschlag auswählen\">\r\n                      <IconButton\r\n                        size=\"small\"\r\n                        onClick={() => handleSuggestionSelect(suggestion)}\r\n                        className=\"text-blue-600\"\r\n                      >\r\n                        <AddIcon />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Bestellung erstellen\">\r\n                      <IconButton\r\n                        size=\"small\"\r\n                        onClick={() => handleCreateOrder(suggestion)}\r\n                        className=\"text-green-600\"\r\n                      >\r\n                        <CreateIcon />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                  </div>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      )}\r\n\r\n      {/* Keine Daten */}\r\n      {!orderSuggestionLoading && orderSuggestions.length === 0 && (\r\n        <Alert severity=\"info\" className=\"mt-4\">\r\n          Keine Bestellvorschläge gefunden. Passen Sie die Filter an oder erstellen Sie neue Vorschläge.\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Zusätzliche Informationen */}\r\n      <Paper className=\"p-4 mt-6 bg-blue-50\">\r\n        <Typography variant=\"h6\" className=\"mb-2 text-blue-800\">\r\n          Informationen\r\n        </Typography>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-blue-700\">\r\n          <div>\r\n            <strong>Artikel-Gruppe:</strong> Gruppierung der Artikel nach Kategorien\r\n          </div>\r\n          <div>\r\n            <strong>Niederlassung:</strong> Standort/Zweigstelle\r\n          </div>\r\n          <div>\r\n            <strong>Matchcode:</strong> Suchcode für schnelle Artikelfindung\r\n          </div>\r\n          <div>\r\n            <strong>Min.-Bestand:</strong> Mindestbestand für automatische Bestellvorschläge\r\n          </div>\r\n          <div>\r\n            <strong>Max.-Bestand:</strong> Maximalbestand für Lageroptimierung\r\n          </div>\r\n          <div>\r\n            <strong>Vorschlag:</strong> Automatisch berechnete Bestellmenge\r\n          </div>\r\n        </div>\r\n      </Paper>\r\n    </Card>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\components\\erp\\PurchaseOrder.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Divider' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormControl' is defined but never used. Allowed unused vars must match /^_/u.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InputLabel' is defined but never used. Allowed unused vars must match /^_/u.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Select' is defined but never used. Allowed unused vars must match /^_/u.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DocumentReference' is defined but never used. Allowed unused vars must match /^_/u.","line":48,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentPurchaseOrder' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":120,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":120,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'addPurchaseOrderPosition' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":125,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updatePurchaseOrderPosition' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":126,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'deletePurchaseOrderPosition' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":127,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'watch' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":148,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":148,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":204,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6466,6469],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6466,6469],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'calculateTotals' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":239,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":239,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":246,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":246,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7866,7869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7866,7869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":247,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7914,7917],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7914,7917],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":248,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7962,7965],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7962,7965],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":294,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":294,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9230,9233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9230,9233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":641,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":641,"endColumn":50}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Card,\r\n  TextField,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Grid,\r\n  Typography,\r\n  Tabs,\r\n  Tab,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  Paper,\r\n  Alert,\r\n  CircularProgress,\r\n  IconButton,\r\n  Tooltip,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Divider,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Delete as DeleteIcon,\r\n  Edit as EditIcon,\r\n  Save as SaveIcon,\r\n  Cancel as CancelIcon,\r\n  Print as PrintIcon,\r\n  FileCopy as FileCopyIcon\r\n} from '@mui/icons-material';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport { useErpStore } from '../../store/erpStore';\r\nimport { \r\n  PurchaseOrderData, \r\n  PurchaseOrderPosition, \r\n  DocumentReference,\r\n  PaymentTerms,\r\n  UnitType,\r\n  PaymentMethod\r\n} from '../../types/erpTypes';\r\n\r\n// Validierungsschema für Bestellung\r\nconst purchaseOrderSchema: yup.ObjectSchema<PurchaseOrderData> = yup.object({\r\n  creditorAccountNumber: yup.string().required('Kreditor-Konto-Nr. ist erforderlich'),\r\n  branch: yup.string().required('Niederlassung ist erforderlich'),\r\n  costCenter: yup.string().required('Kostenträger ist erforderlich'),\r\n  commission: yup.string().required('Kommission ist erforderlich'),\r\n  supplier: yup.string().required('Lieferant ist erforderlich'),\r\n  latestDeliveryDate: yup.date().required('Lieferdatum ist erforderlich'),\r\n  loadingDeadline: yup.date().required('Lade-Termin ist erforderlich'),\r\n  loadingDate: yup.date().required('Lade-Datum ist erforderlich'),\r\n  orderNumber: yup.string().required('Bestell-Nr. ist erforderlich'),\r\n  orderDate: yup.date().required('Bestell-Datum ist erforderlich'),\r\n  operator: yup.string().required('Bediener ist erforderlich'),\r\n  completed: yup.boolean(),\r\n  additionalInfo: yup.string()\r\n}) as yup.ObjectSchema<PurchaseOrderData>;\r\n\r\n// Validierungsschema für Position\r\nconst positionSchema = yup.object({\r\n  articleNumber: yup.string().required('Artikel-Nr. ist erforderlich'),\r\n  supplier: yup.string().required('Lieferant ist erforderlich'),\r\n  description: yup.string().required('Bezeichnung ist erforderlich'),\r\n  quantity: yup.number().positive('Menge muss größer als 0 sein').required('Menge ist erforderlich'),\r\n  packageQuantity: yup.number().positive('Gebindemenge muss größer als 0 sein').required('Gebindemenge ist erforderlich'),\r\n  packageUnit: yup.string().required('Gebindeeinheit ist erforderlich'),\r\n  stock: yup.number().min(0, 'Bestand darf nicht negativ sein').required('Bestand ist erforderlich'),\r\n  price: yup.number().positive('Preis muss größer als 0 sein').required('Preis ist erforderlich'),\r\n  contract: yup.string().required('Kontrakt ist erforderlich')\r\n});\r\n\r\ninterface PurchaseOrderProps {\r\n  mode: 'create' | 'edit' | 'view';\r\n  initialData?: PurchaseOrderData;\r\n  onSave?: (order: PurchaseOrderData) => void;\r\n  onCancel?: () => void;\r\n}\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`purchase-order-tabpanel-${index}`}\r\n      aria-labelledby={`purchase-order-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <div className=\"py-4\">{children}</div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport const PurchaseOrder: React.FC<PurchaseOrderProps> = ({\r\n  mode,\r\n  initialData,\r\n  onSave,\r\n  onCancel\r\n}) => {\r\n  const {\r\n    currentPurchaseOrder,\r\n    purchaseOrderLoading,\r\n    purchaseOrderError,\r\n    createPurchaseOrder,\r\n    updatePurchaseOrder,\r\n    addPurchaseOrderPosition,\r\n    updatePurchaseOrderPosition,\r\n    deletePurchaseOrderPosition\r\n  } = useErpStore();\r\n\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [positions, setPositions] = useState<PurchaseOrderPosition[]>(initialData?.positions || []);\r\n  const [positionDialogOpen, setPositionDialogOpen] = useState(false);\r\n  const [editingPosition, setEditingPosition] = useState<PurchaseOrderPosition | null>(null);\r\n  const [paymentTerms, setPaymentTerms] = useState<PaymentTerms>(\r\n    initialData?.paymentTerms || {\r\n      paymentMethod: PaymentMethod.BANK_TRANSFER,\r\n      paymentDeadline: 30,\r\n      discountDays: 14,\r\n      discountPercent: 2,\r\n      notes: ''\r\n    }\r\n  );\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    setValue,\r\n    watch,\r\n    formState: { errors },\r\n    reset\r\n  } = useForm<PurchaseOrderData>({\r\n    resolver: yupResolver(purchaseOrderSchema),\r\n    defaultValues: {\r\n      creditorAccountNumber: initialData?.creditorAccountNumber || '',\r\n      branch: initialData?.branch || '',\r\n      costCenter: initialData?.costCenter || '',\r\n      commission: initialData?.commission || '',\r\n      supplier: initialData?.supplier || '',\r\n      latestDeliveryDate: initialData?.latestDeliveryDate || new Date(),\r\n      loadingDeadline: initialData?.loadingDeadline || new Date(),\r\n      loadingDate: initialData?.loadingDate || new Date(),\r\n      orderNumber: initialData?.orderNumber || `BO-${Date.now()}`,\r\n      orderDate: initialData?.orderDate || new Date(),\r\n      operator: initialData?.operator || '',\r\n      completed: initialData?.completed || false,\r\n      additionalInfo: initialData?.additionalInfo || '',\r\n      references: initialData?.references || [],\r\n      totalAmount: initialData?.totalAmount || 0,\r\n      netAmount: initialData?.netAmount || 0,\r\n      vatAmount: initialData?.vatAmount || 0\r\n    }\r\n  });\r\n\r\n  // Position-Form\r\n  const {\r\n    control: positionControl,\r\n    handleSubmit: handlePositionSubmit,\r\n    reset: resetPosition,\r\n    formState: { errors: positionErrors }\r\n  } = useForm({\r\n    resolver: yupResolver(positionSchema)\r\n  });\r\n\r\n  // Tab-Handler\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  // Position hinzufügen\r\n  const handleAddPosition = () => {\r\n    setEditingPosition(null);\r\n    resetPosition({\r\n      position: positions.length + 1,\r\n      articleNumber: '',\r\n      supplier: '',\r\n      description: '',\r\n      quantity: 0,\r\n      packageQuantity: 0,\r\n      packageUnit: UnitType.PIECE,\r\n      stock: 0,\r\n      price: 0,\r\n      contract: '',\r\n      netAmount: 0\r\n    } as any);\r\n    setPositionDialogOpen(true);\r\n  };\r\n\r\n  // Position bearbeiten\r\n  const handleEditPosition = (position: PurchaseOrderPosition) => {\r\n    setEditingPosition(position);\r\n    resetPosition(position);\r\n    setPositionDialogOpen(true);\r\n  };\r\n\r\n  // Position löschen\r\n  const handleDeletePosition = (positionId: string) => {\r\n    setPositions(prev => prev.filter(p => p.id !== positionId));\r\n  };\r\n\r\n  // Position speichern\r\n  const handleSavePosition = (positionData: PurchaseOrderPosition) => {\r\n    const positionWithId = {\r\n      ...positionData,\r\n      id: editingPosition?.id || `pos-${Date.now()}-${Math.random()}`\r\n    };\r\n    \r\n    if (editingPosition) {\r\n      // Position aktualisieren\r\n      setPositions(prev => prev.map(p => p.id === editingPosition.id ? positionWithId : p));\r\n    } else {\r\n      // Neue Position hinzufügen\r\n      setPositions(prev => [...prev, positionWithId]);\r\n    }\r\n    setPositionDialogOpen(false);\r\n    setEditingPosition(null);\r\n  };\r\n\r\n  // Gesamtbeträge berechnen\r\n  const calculateTotals = () => {\r\n    const netAmount = positions.reduce((sum, pos) => sum + (pos.quantity * pos.price), 0);\r\n    const vatAmount = netAmount * 0.19; // 19% MwSt\r\n    const totalAmount = netAmount + vatAmount;\r\n    \r\n    // Diese Felder sind nicht Teil des Hauptforms, daher verwenden wir setValue nicht\r\n    // Stattdessen speichern wir sie im State\r\n    (setValue as any)('netAmount', netAmount);\r\n    (setValue as any)('vatAmount', vatAmount);\r\n    (setValue as any)('totalAmount', totalAmount);\r\n  };\r\n\r\n  // Bestellung speichern\r\n  const onSubmit = async (data: PurchaseOrderData) => {\r\n    try {\r\n      const orderData = {\r\n        ...data,\r\n        positions: positions,\r\n        paymentTerms: paymentTerms\r\n      };\r\n\r\n      if (mode === 'create') {\r\n        await createPurchaseOrder(orderData);\r\n      } else if (mode === 'edit' && initialData?.id) {\r\n        await updatePurchaseOrder(initialData.id, orderData);\r\n      }\r\n\r\n      if (onSave) {\r\n        onSave(orderData);\r\n      }\r\n    } catch (error) {\r\n      console.error('Fehler beim Speichern der Bestellung:', error);\r\n    }\r\n  };\r\n\r\n  // Bestellung drucken\r\n  const handlePrint = async () => {\r\n    try {\r\n      // TODO: Implementiere Druck-Funktionalität\r\n      console.log('Drucke Bestellung...');\r\n    } catch (error) {\r\n      console.error('Fehler beim Drucken:', error);\r\n    }\r\n  };\r\n\r\n  // Bestellung kopieren\r\n  const handleCopy = () => {\r\n    const copiedOrder = {\r\n      ...initialData,\r\n      id: undefined,\r\n      orderNumber: `BO-${Date.now()}`,\r\n      orderDate: new Date(),\r\n      positions: positions.map(pos => ({ ...pos, id: `pos-${Date.now()}-${Math.random()}` }))\r\n    };\r\n    // Verwende die reset Funktion aus dem useForm Hook\r\n    (reset as any)(copiedOrder as PurchaseOrderData);\r\n  };\r\n\r\n  return (\r\n    <Card className=\"p-6 max-w-7xl mx-auto\">\r\n      <div className=\"flex justify-between items-center mb-6\">\r\n        <Typography variant=\"h5\" className=\"text-gray-800\">\r\n          {mode === 'create' ? 'Bestellung erstellen' : \r\n           mode === 'edit' ? 'Bestellung bearbeiten' : 'Bestellung anzeigen'}\r\n        </Typography>\r\n        \r\n        <div className=\"flex space-x-2\">\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<PrintIcon />}\r\n            onClick={handlePrint}\r\n            disabled={mode === 'create'}\r\n          >\r\n            Drucken\r\n          </Button>\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<FileCopyIcon />}\r\n            onClick={handleCopy}\r\n            disabled={mode === 'create'}\r\n          >\r\n            Kopieren\r\n          </Button>\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<CancelIcon />}\r\n            onClick={onCancel}\r\n          >\r\n            Abbrechen\r\n          </Button>\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            startIcon={<SaveIcon />}\r\n            onClick={handleSubmit(onSubmit)}\r\n            disabled={mode === 'view'}\r\n            data-testid=\"save-button\"\r\n          >\r\n            Speichern\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Fehler-Anzeige */}\r\n      {purchaseOrderError && (\r\n        <Alert severity=\"error\" className=\"mb-4\">\r\n          {purchaseOrderError}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Lade-Indikator */}\r\n      {purchaseOrderLoading && (\r\n        <div className=\"flex justify-center items-center py-8\">\r\n          <CircularProgress />\r\n        </div>\r\n      )}\r\n\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        {/* Kopfbereich */}\r\n        <Paper className=\"p-4 mb-6\">\r\n          <Typography variant=\"h6\" className=\"mb-4\">\r\n            Bestelldaten\r\n          </Typography>\r\n          \r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Controller\r\n                name=\"creditorAccountNumber\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Kreditor-Konto-Nr.\"\r\n                    fullWidth\r\n                    required\r\n                    error={!!errors.creditorAccountNumber}\r\n                    helperText={errors.creditorAccountNumber?.message}\r\n                    disabled={mode === 'view'}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Controller\r\n                name=\"branch\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Niederlassung\"\r\n                    fullWidth\r\n                    required\r\n                    error={!!errors.branch}\r\n                    helperText={errors.branch?.message}\r\n                    disabled={mode === 'view'}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Controller\r\n                name=\"costCenter\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Kostenträger\"\r\n                    fullWidth\r\n                    required\r\n                    error={!!errors.costCenter}\r\n                    helperText={errors.costCenter?.message}\r\n                    disabled={mode === 'view'}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Controller\r\n                name=\"commission\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Kommission\"\r\n                    fullWidth\r\n                    required\r\n                    error={!!errors.commission}\r\n                    helperText={errors.commission?.message}\r\n                    disabled={mode === 'view'}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Controller\r\n                name=\"supplier\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Lieferant\"\r\n                    fullWidth\r\n                    required\r\n                    error={!!errors.supplier}\r\n                    helperText={errors.supplier?.message}\r\n                    disabled={mode === 'view'}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Controller\r\n                name=\"latestDeliveryDate\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"spät. Liefer-Datum\"\r\n                    type=\"date\"\r\n                    fullWidth\r\n                    required\r\n                    error={!!errors.latestDeliveryDate}\r\n                    helperText={errors.latestDeliveryDate?.message}\r\n                    disabled={mode === 'view'}\r\n                    InputLabelProps={{ shrink: true }}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Controller\r\n                name=\"loadingDeadline\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Lade-Termin bis\"\r\n                    type=\"date\"\r\n                    fullWidth\r\n                    required\r\n                    error={!!errors.loadingDeadline}\r\n                    helperText={errors.loadingDeadline?.message}\r\n                    disabled={mode === 'view'}\r\n                    InputLabelProps={{ shrink: true }}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Controller\r\n                name=\"loadingDate\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Lade-Datum\"\r\n                    type=\"date\"\r\n                    fullWidth\r\n                    required\r\n                    error={!!errors.loadingDate}\r\n                    helperText={errors.loadingDate?.message}\r\n                    disabled={mode === 'view'}\r\n                    InputLabelProps={{ shrink: true }}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Controller\r\n                name=\"orderNumber\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Bestell-Nr.\"\r\n                    fullWidth\r\n                    required\r\n                    error={!!errors.orderNumber}\r\n                    helperText={errors.orderNumber?.message}\r\n                    disabled={mode === 'view'}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Controller\r\n                name=\"orderDate\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Bestell-Datum\"\r\n                    type=\"date\"\r\n                    fullWidth\r\n                    required\r\n                    error={!!errors.orderDate}\r\n                    helperText={errors.orderDate?.message}\r\n                    disabled={mode === 'view'}\r\n                    InputLabelProps={{ shrink: true }}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Controller\r\n                name=\"operator\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Bediener\"\r\n                    fullWidth\r\n                    required\r\n                    error={!!errors.operator}\r\n                    helperText={errors.operator?.message}\r\n                    disabled={mode === 'view'}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Controller\r\n                name=\"completed\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        checked={field.value}\r\n                        onChange={field.onChange}\r\n                        disabled={mode === 'view'}\r\n                      />\r\n                    }\r\n                    label=\"Erledigt\"\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n\r\n        {/* Registerkarten */}\r\n        <Paper className=\"mb-6\">\r\n          <Tabs value={tabValue} onChange={handleTabChange} className=\"border-b\">\r\n            <Tab label=\"Positionen\" />\r\n            <Tab label=\"Anfrage / Angebot / Auftrag\" />\r\n            <Tab label=\"Zahlungsbedingungen\" />\r\n            <Tab label=\"Zusätzliche Angaben\" />\r\n          </Tabs>\r\n\r\n          {/* Positionen Tab */}\r\n          <TabPanel value={tabValue} index={0}>\r\n            <div className=\"flex justify-between items-center mb-4\">\r\n              <Typography variant=\"h6\">\r\n                Bestellpositionen ({positions.length})\r\n              </Typography>\r\n              \r\n              <Button\r\n                variant=\"outlined\"\r\n                startIcon={<AddIcon />}\r\n                onClick={handleAddPosition}\r\n                disabled={mode === 'view'}\r\n                className=\"bg-blue-50 hover:bg-blue-100\"\r\n              >\r\n                Position hinzufügen\r\n              </Button>\r\n            </div>\r\n\r\n            {positions.length === 0 ? (\r\n              <Alert severity=\"info\">\r\n                Keine Positionen vorhanden. Klicken Sie auf \"Position hinzufügen\" um eine neue Position zu erstellen.\r\n              </Alert>\r\n            ) : (\r\n              <Table className=\"w-full border-collapse\">\r\n                <TableHead>\r\n                  <TableRow className=\"bg-gray-100\">\r\n                    <TableCell className=\"font-semibold\">Pos</TableCell>\r\n                    <TableCell className=\"font-semibold\">Artikel-Nr.</TableCell>\r\n                    <TableCell className=\"font-semibold\">Lieferant</TableCell>\r\n                    <TableCell className=\"font-semibold\">Bezeichnung</TableCell>\r\n                    <TableCell className=\"font-semibold\">Menge</TableCell>\r\n                    <TableCell className=\"font-semibold\">Geb.-Menge</TableCell>\r\n                    <TableCell className=\"font-semibold\">Geb.-Einheit</TableCell>\r\n                    <TableCell className=\"font-semibold\">Bestand</TableCell>\r\n                    <TableCell className=\"font-semibold\">Preis</TableCell>\r\n                    <TableCell className=\"font-semibold\">Kontrakt</TableCell>\r\n                    <TableCell className=\"font-semibold\">Nettobetrag</TableCell>\r\n                    <TableCell className=\"font-semibold\">Aktionen</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {positions.map((position, index) => (\r\n                    <TableRow key={position.id} className=\"hover:bg-gray-50\">\r\n                      <TableCell>{position.position}</TableCell>\r\n                      <TableCell className=\"font-mono\">{position.articleNumber}</TableCell>\r\n                      <TableCell>{position.supplier}</TableCell>\r\n                      <TableCell>{position.description}</TableCell>\r\n                      <TableCell className=\"text-right\">{position.quantity}</TableCell>\r\n                      <TableCell className=\"text-right\">{position.packageQuantity}</TableCell>\r\n                      <TableCell>{position.packageUnit}</TableCell>\r\n                      <TableCell className=\"text-right\">{position.stock}</TableCell>\r\n                      <TableCell className=\"text-right\">{position.price.toFixed(2)} €</TableCell>\r\n                      <TableCell>{position.contract}</TableCell>\r\n                      <TableCell className=\"text-right font-semibold\">\r\n                        {(position.quantity * position.price).toFixed(2)} €\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex space-x-1\">\r\n                          <Tooltip title=\"Bearbeiten\">\r\n                            <IconButton\r\n                              size=\"small\"\r\n                              onClick={() => handleEditPosition(position)}\r\n                              disabled={mode === 'view'}\r\n                            >\r\n                              <EditIcon />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                          <Tooltip title=\"Löschen\">\r\n                            <IconButton\r\n                              size=\"small\"\r\n                              onClick={() => handleDeletePosition(position.id)}\r\n                              disabled={mode === 'view'}\r\n                              className=\"text-red-600\"\r\n                            >\r\n                              <DeleteIcon />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            )}\r\n\r\n            {/* Summen */}\r\n            {positions.length > 0 && (\r\n              <Paper className=\"p-4 mt-4 bg-gray-50\">\r\n                <Grid container spacing={2} className=\"text-right\">\r\n                  <Grid item xs={12} sm={4}>\r\n                    <Typography variant=\"h6\">\r\n                      Nettobetrag: {positions.reduce((sum, pos) => sum + (pos.quantity * pos.price), 0).toFixed(2)} €\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={4}>\r\n                    <Typography variant=\"h6\">\r\n                      MwSt. (19%): {(positions.reduce((sum, pos) => sum + (pos.quantity * pos.price), 0) * 0.19).toFixed(2)} €\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={4}>\r\n                    <Typography variant=\"h5\" className=\"font-bold text-blue-600\">\r\n                      Gesamtbetrag: {(positions.reduce((sum, pos) => sum + (pos.quantity * pos.price), 0) * 1.19).toFixed(2)} €\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Paper>\r\n            )}\r\n          </TabPanel>\r\n\r\n          {/* Anfrage / Angebot / Auftrag Tab */}\r\n          <TabPanel value={tabValue} index={1}>\r\n            <Typography variant=\"h6\" className=\"mb-4\">\r\n              Referenzdokumente\r\n            </Typography>\r\n            <Alert severity=\"info\">\r\n              Hier können Sie Referenzdokumente wie Anfragen, Angebote oder Aufträge verknüpfen.\r\n            </Alert>\r\n          </TabPanel>\r\n\r\n          {/* Zahlungsbedingungen Tab */}\r\n          <TabPanel value={tabValue} index={2}>\r\n            <Typography variant=\"h6\" className=\"mb-4\">\r\n              Zahlungsbedingungen\r\n            </Typography>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  label=\"Zahlungsmethode\"\r\n                  fullWidth\r\n                  select\r\n                  value={paymentTerms.paymentMethod}\r\n                  onChange={(e) => setPaymentTerms(prev => ({ ...prev, paymentMethod: e.target.value }))}\r\n                  disabled={mode === 'view'}\r\n                >\r\n                  {Object.values(PaymentMethod).map((method) => (\r\n                    <MenuItem key={method} value={method}>\r\n                      {method}\r\n                    </MenuItem>\r\n                  ))}\r\n                </TextField>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  label=\"Zahlungsziel (Tage)\"\r\n                  type=\"number\"\r\n                  fullWidth\r\n                  value={paymentTerms.paymentDeadline}\r\n                  onChange={(e) => setPaymentTerms(prev => ({ ...prev, paymentDeadline: parseInt(e.target.value) || 0 }))}\r\n                  disabled={mode === 'view'}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </TabPanel>\r\n\r\n          {/* Zusätzliche Angaben Tab */}\r\n          <TabPanel value={tabValue} index={3}>\r\n            <Typography variant=\"h6\" className=\"mb-4\">\r\n              Zusätzliche Angaben\r\n            </Typography>\r\n            <Controller\r\n              name=\"additionalInfo\"\r\n              control={control}\r\n              render={({ field }) => (\r\n                <TextField\r\n                  {...field}\r\n                  label=\"Zusätzliche Informationen\"\r\n                  fullWidth\r\n                  multiline\r\n                  rows={4}\r\n                  disabled={mode === 'view'}\r\n                />\r\n              )}\r\n            />\r\n          </TabPanel>\r\n        </Paper>\r\n      </form>\r\n\r\n      {/* Position-Dialog */}\r\n      <Dialog \r\n        open={positionDialogOpen} \r\n        onClose={() => setPositionDialogOpen(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>\r\n          {editingPosition ? 'Position bearbeiten' : 'Neue Position hinzufügen'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <form onSubmit={handlePositionSubmit(handleSavePosition)}>\r\n            <Grid container spacing={3} className=\"mt-2\">\r\n              <Grid item xs={12} sm={6}>\r\n                <Controller\r\n                  name=\"articleNumber\"\r\n                  control={positionControl}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Artikel-Nr.\"\r\n                      fullWidth\r\n                      required\r\n                      error={!!positionErrors.articleNumber}\r\n                      helperText={positionErrors.articleNumber?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <Controller\r\n                  name=\"supplier\"\r\n                  control={positionControl}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Lieferant\"\r\n                      fullWidth\r\n                      required\r\n                      error={!!positionErrors.supplier}\r\n                      helperText={positionErrors.supplier?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  name=\"description\"\r\n                  control={positionControl}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Bezeichnung\"\r\n                      fullWidth\r\n                      required\r\n                      error={!!positionErrors.description}\r\n                      helperText={positionErrors.description?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <Controller\r\n                  name=\"quantity\"\r\n                  control={positionControl}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Menge\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      required\r\n                      error={!!positionErrors.quantity}\r\n                      helperText={positionErrors.quantity?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <Controller\r\n                  name=\"packageQuantity\"\r\n                  control={positionControl}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Gebindemenge\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      required\r\n                      error={!!positionErrors.packageQuantity}\r\n                      helperText={positionErrors.packageQuantity?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <Controller\r\n                  name=\"packageUnit\"\r\n                  control={positionControl}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Gebindeeinheit\"\r\n                      fullWidth\r\n                      required\r\n                      select\r\n                      error={!!positionErrors.packageUnit}\r\n                      helperText={positionErrors.packageUnit?.message}\r\n                    >\r\n                      {Object.values(UnitType).map((unit) => (\r\n                        <MenuItem key={unit} value={unit}>\r\n                          {unit}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </TextField>\r\n                  )}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <Controller\r\n                  name=\"stock\"\r\n                  control={positionControl}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Bestand\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      required\r\n                      error={!!positionErrors.stock}\r\n                      helperText={positionErrors.stock?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <Controller\r\n                  name=\"price\"\r\n                  control={positionControl}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Preis\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      required\r\n                      error={!!positionErrors.price}\r\n                      helperText={positionErrors.price?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <Controller\r\n                  name=\"contract\"\r\n                  control={positionControl}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Kontrakt\"\r\n                      fullWidth\r\n                      required\r\n                      error={!!positionErrors.contract}\r\n                      helperText={positionErrors.contract?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setPositionDialogOpen(false)}>\r\n            Abbrechen\r\n          </Button>\r\n          <Button \r\n            onClick={handlePositionSubmit(handleSavePosition)}\r\n            variant=\"contained\"\r\n          >\r\n            Speichern\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Card>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\components\\zvoove-integration\\ContactOverview.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":159,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4064,4067],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4064,4067],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":159,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4077,4080],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4077,4080],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'record' is defined but never used. Allowed unused args must match /^_/u.","line":324,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":324,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Table,\r\n  Form,\r\n  Select,\r\n  DatePicker,\r\n  Checkbox,\r\n  Card,\r\n  Typography,\r\n  Button,\r\n  Space,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Statistic,\r\n  Tag,\r\n  Tooltip,\r\n  Badge\r\n} from 'antd';\r\nimport {\r\n  SearchOutlined,\r\n  FilterOutlined,\r\n  DownloadOutlined,\r\n  EyeOutlined,\r\n  EditOutlined,\r\n  PhoneOutlined,\r\n  MailOutlined,\r\n  CalendarOutlined\r\n} from '@ant-design/icons';\r\nimport type { ColumnsType } from 'antd/es/table';\r\nimport dayjs from 'dayjs';\r\n\r\n// TypeScript Interfaces\r\ninterface ContactOverviewProps {\r\n  filters: ContactFilters;\r\n  onFilterChange: (filters: ContactFilters) => void;\r\n  contacts: Contact[];\r\n  loading?: boolean;\r\n}\r\n\r\ninterface ContactFilters {\r\n  // Kontakt-Typ\r\n  contactType: 'sales' | 'purchase' | 'all';\r\n  \r\n  // Sortierung\r\n  sortBy: 'contactNumber' | 'name' | 'date' | 'representative';\r\n  sortOrder: 'asc' | 'desc';\r\n  \r\n  // Selektion\r\n  representative: string;\r\n  dateRange: {\r\n    from: dayjs.Dayjs | null;\r\n    to: dayjs.Dayjs | null;\r\n  };\r\n  parity: string;\r\n  \r\n  // Optionen\r\n  onlyPlannedAppointments: boolean;\r\n  articleSumsInPrint: boolean;\r\n  \r\n  // Suchfelder\r\n  searchText: string;\r\n  contactNumber: string;\r\n}\r\n\r\ninterface Contact {\r\n  id: string;\r\n  contactNumber: string;\r\n  name: string;\r\n  representative: string;\r\n  contactType: 'sales' | 'purchase';\r\n  appointmentDate?: dayjs.Dayjs;\r\n  orderQuantity: number;\r\n  remainingQuantity: number;\r\n  status: 'active' | 'inactive' | 'planned';\r\n  phone?: string;\r\n  email?: string;\r\n  lastContact?: dayjs.Dayjs;\r\n  notes?: string;\r\n}\r\n\r\nconst { RangePicker } = DatePicker;\r\nconst { Option } = Select;\r\n\r\nexport const ContactOverview: React.FC<ContactOverviewProps> = ({\r\n  filters,\r\n  onFilterChange,\r\n  contacts,\r\n  loading = false\r\n}) => {\r\n  const [form] = Form.useForm();\r\n  const [filteredContacts, setFilteredContacts] = useState<Contact[]>(contacts);\r\n\r\n  // Statistiken berechnen\r\n  const calculateStats = () => {\r\n    const totalContacts = contacts.length;\r\n    const salesContacts = contacts.filter(c => c.contactType === 'sales').length;\r\n    const purchaseContacts = contacts.filter(c => c.contactType === 'purchase').length;\r\n    const plannedAppointments = contacts.filter(c => c.status === 'planned').length;\r\n    const totalOrderQuantity = contacts.reduce((sum, c) => sum + c.orderQuantity, 0);\r\n    const totalRemainingQuantity = contacts.reduce((sum, c) => sum + c.remainingQuantity, 0);\r\n\r\n    return {\r\n      totalContacts,\r\n      salesContacts,\r\n      purchaseContacts,\r\n      plannedAppointments,\r\n      totalOrderQuantity,\r\n      totalRemainingQuantity\r\n    };\r\n  };\r\n\r\n  const stats = calculateStats();\r\n\r\n  // Filter anwenden\r\n  useEffect(() => {\r\n    let filtered = [...contacts];\r\n\r\n    // Kontakt-Typ Filter\r\n    if (filters.contactType !== 'all') {\r\n      filtered = filtered.filter(c => c.contactType === filters.contactType);\r\n    }\r\n\r\n    // Vertreter Filter\r\n    if (filters.representative) {\r\n      filtered = filtered.filter(c => \r\n        c.representative.toLowerCase().includes(filters.representative.toLowerCase())\r\n      );\r\n    }\r\n\r\n    // Datumsbereich Filter\r\n    if (filters.dateRange.from && filters.dateRange.to) {\r\n      filtered = filtered.filter(c => {\r\n        if (c.appointmentDate) {\r\n          return c.appointmentDate.isAfter(filters.dateRange.from) && \r\n                 c.appointmentDate.isBefore(filters.dateRange.to);\r\n        }\r\n        return false;\r\n      });\r\n    }\r\n\r\n    // Nur geplante Termine\r\n    if (filters.onlyPlannedAppointments) {\r\n      filtered = filtered.filter(c => c.status === 'planned');\r\n    }\r\n\r\n    // Suchtext Filter\r\n    if (filters.searchText) {\r\n      const searchLower = filters.searchText.toLowerCase();\r\n      filtered = filtered.filter(c =>\r\n        c.name.toLowerCase().includes(searchLower) ||\r\n        c.contactNumber.toLowerCase().includes(searchLower) ||\r\n        c.representative.toLowerCase().includes(searchLower)\r\n      );\r\n    }\r\n\r\n    // Sortierung\r\n    filtered.sort((a, b) => {\r\n      let aValue: any, bValue: any;\r\n      \r\n      switch (filters.sortBy) {\r\n        case 'contactNumber':\r\n          aValue = a.contactNumber;\r\n          bValue = b.contactNumber;\r\n          break;\r\n        case 'name':\r\n          aValue = a.name;\r\n          bValue = b.name;\r\n          break;\r\n        case 'date':\r\n          aValue = a.appointmentDate || dayjs(0);\r\n          bValue = b.appointmentDate || dayjs(0);\r\n          break;\r\n        case 'representative':\r\n          aValue = a.representative;\r\n          bValue = b.representative;\r\n          break;\r\n        default:\r\n          aValue = a.contactNumber;\r\n          bValue = b.contactNumber;\r\n      }\r\n\r\n      if (filters.sortOrder === 'asc') {\r\n        return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;\r\n      } else {\r\n        return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;\r\n      }\r\n    });\r\n\r\n    setFilteredContacts(filtered);\r\n  }, [contacts, filters]);\r\n\r\n  // Filter zurücksetzen\r\n  const resetFilters = () => {\r\n    const defaultFilters: ContactFilters = {\r\n      contactType: 'all',\r\n      sortBy: 'contactNumber',\r\n      sortOrder: 'asc',\r\n      representative: '',\r\n      dateRange: { from: null, to: null },\r\n      parity: '',\r\n      onlyPlannedAppointments: false,\r\n      articleSumsInPrint: false,\r\n      searchText: '',\r\n      contactNumber: ''\r\n    };\r\n    \r\n    onFilterChange(defaultFilters);\r\n    form.resetFields();\r\n  };\r\n\r\n  // Tabellen-Spalten definieren\r\n  const columns: ColumnsType<Contact> = [\r\n    {\r\n      title: 'Kontakt-Nr.',\r\n      dataIndex: 'contactNumber',\r\n      key: 'contactNumber',\r\n      width: 120,\r\n      render: (text: string) => (\r\n        <Typography.Text strong>{text}</Typography.Text>\r\n      )\r\n    },\r\n    {\r\n      title: 'Name',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n      width: 200,\r\n      render: (text: string, record: Contact) => (\r\n        <div>\r\n          <Typography.Text strong>{text}</Typography.Text>\r\n          <div className=\"flex items-center space-x-2 mt-1\">\r\n            {record.phone && (\r\n              <Tooltip title={record.phone}>\r\n                <PhoneOutlined className=\"text-gray-500\" />\r\n              </Tooltip>\r\n            )}\r\n            {record.email && (\r\n              <Tooltip title={record.email}>\r\n                <MailOutlined className=\"text-gray-500\" />\r\n              </Tooltip>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      title: 'Vertreter',\r\n      dataIndex: 'representative',\r\n      key: 'representative',\r\n      width: 150,\r\n      render: (text: string) => (\r\n        <Tag color=\"blue\">{text}</Tag>\r\n      )\r\n    },\r\n    {\r\n      title: 'Typ',\r\n      dataIndex: 'contactType',\r\n      key: 'contactType',\r\n      width: 100,\r\n      render: (type: string) => (\r\n        <Tag color={type === 'sales' ? 'green' : 'orange'}>\r\n          {type === 'sales' ? 'Verkauf' : 'Einkauf'}\r\n        </Tag>\r\n      )\r\n    },\r\n    {\r\n      title: 'Termin',\r\n      dataIndex: 'appointmentDate',\r\n      key: 'appointmentDate',\r\n      width: 120,\r\n      render: (date: dayjs.Dayjs) => (\r\n        date ? (\r\n          <div className=\"flex items-center space-x-1\">\r\n            <CalendarOutlined className=\"text-gray-500\" />\r\n            <Typography.Text>{date.format('DD.MM.YYYY')}</Typography.Text>\r\n          </div>\r\n        ) : (\r\n          <Typography.Text type=\"secondary\">-</Typography.Text>\r\n        )\r\n      )\r\n    },\r\n    {\r\n      title: 'Abnahme-Menge',\r\n      dataIndex: 'orderQuantity',\r\n      key: 'orderQuantity',\r\n      width: 120,\r\n      render: (quantity: number) => (\r\n        <Typography.Text strong>{quantity.toLocaleString()}</Typography.Text>\r\n      )\r\n    },\r\n    {\r\n      title: 'Rest-Menge',\r\n      dataIndex: 'remainingQuantity',\r\n      key: 'remainingQuantity',\r\n      width: 120,\r\n      render: (quantity: number) => (\r\n        <Badge \r\n          count={quantity} \r\n          showZero \r\n          color={quantity > 0 ? 'orange' : 'green'}\r\n        />\r\n      )\r\n    },\r\n    {\r\n      title: 'Status',\r\n      dataIndex: 'status',\r\n      key: 'status',\r\n      width: 100,\r\n      render: (status: string) => {\r\n        const statusConfig = {\r\n          active: { color: 'green', text: 'Aktiv' },\r\n          inactive: { color: 'red', text: 'Inaktiv' },\r\n          planned: { color: 'blue', text: 'Geplant' }\r\n        };\r\n        \r\n        const config = statusConfig[status as keyof typeof statusConfig];\r\n        return <Tag color={config.color}>{config.text}</Tag>;\r\n      }\r\n    },\r\n    {\r\n      title: 'Aktionen',\r\n      key: 'actions',\r\n      width: 120,\r\n      render: (_, record: Contact) => (\r\n        <Space>\r\n          <Tooltip title=\"Anzeigen\">\r\n            <Button \r\n              type=\"text\" \r\n              icon={<EyeOutlined />} \r\n              size=\"small\"\r\n            />\r\n          </Tooltip>\r\n          <Tooltip title=\"Bearbeiten\">\r\n            <Button \r\n              type=\"text\" \r\n              icon={<EditOutlined />} \r\n              size=\"small\"\r\n            />\r\n          </Tooltip>\r\n        </Space>\r\n      )\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Statistiken */}\r\n      <Row gutter={16}>\r\n        <Col span={4}>\r\n          <Card>\r\n            <Statistic\r\n              title=\"Gesamt Kontakte\"\r\n              value={stats.totalContacts}\r\n              valueStyle={{ color: '#3f8600' }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col span={4}>\r\n          <Card>\r\n            <Statistic\r\n              title=\"Verkaufskontakte\"\r\n              value={stats.salesContacts}\r\n              valueStyle={{ color: '#1890ff' }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col span={4}>\r\n          <Card>\r\n            <Statistic\r\n              title=\"Einkaufskontakte\"\r\n              value={stats.purchaseContacts}\r\n              valueStyle={{ color: '#fa8c16' }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col span={4}>\r\n          <Card>\r\n            <Statistic\r\n              title=\"Geplante Termine\"\r\n              value={stats.plannedAppointments}\r\n              valueStyle={{ color: '#722ed1' }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col span={4}>\r\n          <Card>\r\n            <Statistic\r\n              title=\"Abnahme-Menge\"\r\n              value={stats.totalOrderQuantity}\r\n              valueStyle={{ color: '#eb2f96' }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col span={4}>\r\n          <Card>\r\n            <Statistic\r\n              title=\"Rest-Menge\"\r\n              value={stats.totalRemainingQuantity}\r\n              valueStyle={{ color: '#f5222d' }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Filter */}\r\n      <Card>\r\n        <Form\r\n          form={form}\r\n          layout=\"vertical\"\r\n          onValuesChange={(_, allValues) => {\r\n            const newFilters: ContactFilters = {\r\n              ...filters,\r\n              ...allValues\r\n            };\r\n            onFilterChange(newFilters);\r\n          }}\r\n        >\r\n          <Row gutter={16}>\r\n            <Col span={6}>\r\n              <Form.Item label=\"Kontakt-Typ\" name=\"contactType\">\r\n                <Select placeholder=\"Alle Kontakte\">\r\n                  <Option value=\"all\">Alle Kontakte</Option>\r\n                  <Option value=\"sales\">Verkaufskontakte</Option>\r\n                  <Option value=\"purchase\">Einkaufskontakte</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n            \r\n            <Col span={6}>\r\n              <Form.Item label=\"Vertreter\" name=\"representative\">\r\n                <Input \r\n                  placeholder=\"Vertreter suchen\"\r\n                  prefix={<SearchOutlined />}\r\n                />\r\n              </Form.Item>\r\n            </Col>\r\n            \r\n            <Col span={6}>\r\n              <Form.Item label=\"Zeitraum\" name=\"dateRange\">\r\n                <RangePicker \r\n                  placeholder={['Von', 'Bis']}\r\n                  format=\"DD.MM.YYYY\"\r\n                />\r\n              </Form.Item>\r\n            </Col>\r\n            \r\n            <Col span={6}>\r\n              <Form.Item label=\"Sortierung\" name=\"sortBy\">\r\n                <Select placeholder=\"Sortierung\">\r\n                  <Option value=\"contactNumber\">Kontaktnummer</Option>\r\n                  <Option value=\"name\">Name</Option>\r\n                  <Option value=\"date\">Datum</Option>\r\n                  <Option value=\"representative\">Vertreter</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          \r\n          <Row gutter={16}>\r\n            <Col span={8}>\r\n              <Form.Item label=\"Suche\" name=\"searchText\">\r\n                <Input \r\n                  placeholder=\"Name, Kontaktnummer oder Vertreter\"\r\n                  prefix={<SearchOutlined />}\r\n                />\r\n              </Form.Item>\r\n            </Col>\r\n            \r\n            <Col span={4}>\r\n              <Form.Item label=\"Sortierreihenfolge\" name=\"sortOrder\">\r\n                <Select>\r\n                  <Option value=\"asc\">Aufsteigend</Option>\r\n                  <Option value=\"desc\">Absteigend</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n            \r\n            <Col span={6}>\r\n              <Form.Item label=\"Optionen\">\r\n                <Space direction=\"vertical\">\r\n                  <Checkbox \r\n                    name=\"onlyPlannedAppointments\"\r\n                    checked={filters.onlyPlannedAppointments}\r\n                    onChange={(e) => onFilterChange({\r\n                      ...filters,\r\n                      onlyPlannedAppointments: e.target.checked\r\n                    })}\r\n                  >\r\n                    Nur geplante Termine\r\n                  </Checkbox>\r\n                  <Checkbox \r\n                    name=\"articleSumsInPrint\"\r\n                    checked={filters.articleSumsInPrint}\r\n                    onChange={(e) => onFilterChange({\r\n                      ...filters,\r\n                      articleSumsInPrint: e.target.checked\r\n                    })}\r\n                  >\r\n                    Artikel-Summen im Ausdruck\r\n                  </Checkbox>\r\n                </Space>\r\n              </Form.Item>\r\n            </Col>\r\n            \r\n            <Col span={6}>\r\n              <Form.Item label=\"Aktionen\">\r\n                <Space>\r\n                  <Button \r\n                    icon={<FilterOutlined />}\r\n                    onClick={resetFilters}\r\n                  >\r\n                    Filter zurücksetzen\r\n                  </Button>\r\n                  <Button \r\n                    icon={<DownloadOutlined />}\r\n                    type=\"primary\"\r\n                  >\r\n                    Export\r\n                  </Button>\r\n                </Space>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </Card>\r\n\r\n      {/* Tabelle */}\r\n      <Card>\r\n        <Table\r\n          columns={columns}\r\n          dataSource={filteredContacts}\r\n          rowKey=\"id\"\r\n          loading={loading}\r\n          pagination={{\r\n            total: filteredContacts.length,\r\n            pageSize: 20,\r\n            showSizeChanger: true,\r\n            showQuickJumper: true,\r\n            showTotal: (total, range) => \r\n              `${range[0]}-${range[1]} von ${total} Kontakten`\r\n          }}\r\n          scroll={{ x: 1200 }}\r\n        />\r\n      </Card>\r\n    </div>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\components\\zvoove-integration\\Navigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\components\\zvoove-integration\\OrderForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Divider' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isValid' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":131,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":131,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isDirty' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":131,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":131,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'watch' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":132,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":132,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'reset' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":134,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":194,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":194,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5940,5943],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5940,5943],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":392,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":392,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport {\r\n  Card,\r\n  TextField,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Typography,\r\n  Grid,\r\n  Paper,\r\n  Divider,\r\n  Alert\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Delete as DeleteIcon,\r\n  Save as SaveIcon,\r\n  Cancel as CancelIcon\r\n} from '@mui/icons-material';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\n// TypeScript Interfaces\r\ninterface OrderFormProps {\r\n  mode: 'offer' | 'order' | 'delivery' | 'invoice';\r\n  initialData?: Partial<OrderData>;\r\n  onSave: (data: OrderData) => void;\r\n  onCancel: () => void;\r\n}\r\n\r\ninterface OrderData {\r\n  // Belegdaten\r\n  customerNumber: string;\r\n  debtorNumber: string;\r\n  documentDate: Date;\r\n  contactPerson: string;\r\n  email: string;\r\n  \r\n  // Positionen\r\n  positions: OrderPosition[];\r\n  \r\n  // Summen\r\n  netAmount: number;\r\n  vatAmount: number;\r\n  totalAmount: number;\r\n}\r\n\r\ninterface OrderPosition {\r\n  id: string;\r\n  articleNumber: string;\r\n  description: string;\r\n  quantity: number;\r\n  unit: string;\r\n  unitPrice: number;\r\n  discount: number;\r\n  netPrice: number;\r\n}\r\n\r\n// Validierungsschema\r\nconst orderSchema = yup.object({\r\n  customerNumber: yup.string().required('Auftragsnummer ist erforderlich'),\r\n  debtorNumber: yup.string().required('Kunde ist erforderlich'),\r\n  documentDate: yup.date().required('Datum ist erforderlich'),\r\n  contactPerson: yup.string().required('Ansprechpartner ist erforderlich'),\r\n  email: yup.string()\r\n    .email('Ungültige E-Mail-Adresse')\r\n    .required('E-Mail ist erforderlich')\r\n    .matches(\r\n      /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\r\n      'Bitte geben Sie eine gültige E-Mail-Adresse ein'\r\n    ),\r\n  positions: yup.array().of(\r\n    yup.object({\r\n      id: yup.string().required(),\r\n      articleNumber: yup.string().required('Artikel-Nr. ist erforderlich'),\r\n      description: yup.string().required('Beschreibung ist erforderlich'),\r\n      quantity: yup.number()\r\n        .positive('Menge muss größer als 0 sein')\r\n        .required('Menge ist erforderlich')\r\n        .typeError('Menge muss eine Zahl sein'),\r\n      unit: yup.string().required('Einheit ist erforderlich'),\r\n      unitPrice: yup.number()\r\n        .positive('Preis muss größer als 0 sein')\r\n        .required('Preis ist erforderlich')\r\n        .typeError('Preis muss eine Zahl sein'),\r\n      discount: yup.number()\r\n        .min(0, 'Rabatt darf nicht negativ sein')\r\n        .max(100, 'Rabatt darf maximal 100% sein')\r\n        .required('Rabatt ist erforderlich')\r\n        .typeError('Rabatt muss eine Zahl sein'),\r\n      netPrice: yup.number()\r\n        .positive('Nettopreis muss größer als 0 sein')\r\n        .required('Nettopreis ist erforderlich')\r\n        .typeError('Nettopreis muss eine Zahl sein')\r\n    })\r\n  ).min(1, 'Mindestens eine Position ist erforderlich'),\r\n  netAmount: yup.number().min(0).required('Nettobetrag ist erforderlich'),\r\n  vatAmount: yup.number().min(0).required('MwSt. ist erforderlich'),\r\n  totalAmount: yup.number().min(0).required('Gesamtbetrag ist erforderlich')\r\n}) as yup.ObjectSchema<OrderData>;\r\n\r\n// Modus-spezifische Titel\r\nconst getModeTitle = (mode: string) => {\r\n  switch (mode) {\r\n    case 'offer': return 'Angebot erfassen';\r\n    case 'order': return 'Auftrag erfassen';\r\n    case 'delivery': return 'Lieferschein erfassen';\r\n    case 'invoice': return 'Rechnung erfassen';\r\n    default: return 'Dokument erfassen';\r\n  }\r\n};\r\n\r\nexport const OrderForm: React.FC<OrderFormProps> = ({\r\n  mode,\r\n  initialData,\r\n  onSave,\r\n  onCancel\r\n}) => {\r\n  const [positions, setPositions] = useState<OrderPosition[]>(\r\n    initialData?.positions || []\r\n  );\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isValid, isDirty },\r\n    watch,\r\n    setValue,\r\n    reset,\r\n    trigger\r\n  } = useForm<OrderData>({\r\n    resolver: yupResolver(orderSchema),\r\n    mode: 'onBlur', // Validierung beim Verlassen der Felder\r\n    reValidateMode: 'onChange', // Re-Validierung bei Änderungen\r\n    defaultValues: {\r\n      customerNumber: initialData?.customerNumber || '',\r\n      debtorNumber: initialData?.debtorNumber || '',\r\n      documentDate: initialData?.documentDate || new Date(),\r\n      contactPerson: initialData?.contactPerson || '',\r\n      email: initialData?.email || '',\r\n      positions: initialData?.positions || [],\r\n      netAmount: initialData?.netAmount || 0,\r\n      vatAmount: initialData?.vatAmount || 0,\r\n      totalAmount: initialData?.totalAmount || 0\r\n    }\r\n  });\r\n\r\n  // Summen berechnen\r\n  const calculateTotals = (positions: OrderPosition[]) => {\r\n    const netAmount = positions.reduce((sum, pos) => sum + pos.netPrice, 0);\r\n    const vatAmount = netAmount * 0.19; // 19% MwSt\r\n    const totalAmount = netAmount + vatAmount;\r\n    \r\n    setValue('netAmount', netAmount);\r\n    setValue('vatAmount', vatAmount);\r\n    setValue('totalAmount', totalAmount);\r\n    \r\n    return { netAmount, vatAmount, totalAmount };\r\n  };\r\n\r\n  // Position hinzufügen\r\n  const addPosition = () => {\r\n    const newPosition: OrderPosition = {\r\n      id: `pos-${Date.now()}`,\r\n      articleNumber: '',\r\n      description: '',\r\n      quantity: 1,\r\n      unit: 'Stück',\r\n      unitPrice: 0,\r\n      discount: 0,\r\n      netPrice: 0\r\n    };\r\n    \r\n    const updatedPositions = [...positions, newPosition];\r\n    setPositions(updatedPositions);\r\n    setValue('positions', updatedPositions);\r\n    calculateTotals(updatedPositions);\r\n  };\r\n\r\n  // Position entfernen\r\n  const removePosition = (id: string) => {\r\n    const updatedPositions = positions.filter(pos => pos.id !== id);\r\n    setPositions(updatedPositions);\r\n    setValue('positions', updatedPositions);\r\n    calculateTotals(updatedPositions);\r\n  };\r\n\r\n  // Position aktualisieren\r\n  const updatePosition = (id: string, field: keyof OrderPosition, value: any) => {\r\n    const updatedPositions = positions.map(pos => {\r\n      if (pos.id === id) {\r\n        const updatedPos = { ...pos, [field]: value };\r\n        \r\n        // Nettopreis berechnen\r\n        if (field === 'quantity' || field === 'unitPrice' || field === 'discount') {\r\n          const quantity = field === 'quantity' ? value : pos.quantity;\r\n          const unitPrice = field === 'unitPrice' ? value : pos.unitPrice;\r\n          const discount = field === 'discount' ? value : pos.discount;\r\n          const netPrice = quantity * unitPrice * (1 - discount / 100);\r\n          updatedPos.netPrice = netPrice;\r\n        }\r\n        \r\n        return updatedPos;\r\n      }\r\n      return pos;\r\n    });\r\n    \r\n    setPositions(updatedPositions);\r\n    setValue('positions', updatedPositions);\r\n    calculateTotals(updatedPositions);\r\n  };\r\n\r\n  const onSubmit = async (data: OrderData) => {\r\n    try {\r\n      // Zusätzliche Validierung vor dem Speichern\r\n      const isValid = await trigger();\r\n      if (!isValid) {\r\n        console.log('Formular-Validierung fehlgeschlagen:', errors);\r\n        return;\r\n      }\r\n\r\n      const finalData = {\r\n        ...data,\r\n        positions: positions\r\n      };\r\n      onSave(finalData);\r\n    } catch (error) {\r\n      console.error('Fehler beim Speichern:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card className=\"p-6 max-w-6xl mx-auto\">\r\n      <Typography variant=\"h5\" className=\"mb-6 text-gray-800\">\r\n        {getModeTitle(mode)}\r\n      </Typography>\r\n\r\n      <form onSubmit={handleSubmit(onSubmit)} noValidate>\r\n        {/* Belegdaten */}\r\n        <Paper className=\"p-4 mb-6\">\r\n          <Typography variant=\"h6\" className=\"mb-4 text-gray-700\">\r\n            Belegdaten\r\n          </Typography>\r\n          \r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} md={6}>\r\n              <Controller\r\n                name=\"customerNumber\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Auftragsnummer\"\r\n                    fullWidth\r\n                    required\r\n                    error={!!errors.customerNumber}\r\n                    helperText={errors.customerNumber?.message}\r\n                    inputProps={{\r\n                      'aria-describedby': errors.customerNumber ? 'customerNumber-error' : undefined\r\n                    }}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={6}>\r\n              <Controller\r\n                name=\"debtorNumber\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Kunde\"\r\n                    fullWidth\r\n                    required\r\n                    error={!!errors.debtorNumber}\r\n                    helperText={errors.debtorNumber?.message}\r\n                    inputProps={{\r\n                      'aria-describedby': errors.debtorNumber ? 'debtorNumber-error' : undefined\r\n                    }}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={6}>\r\n              <Controller\r\n                name=\"documentDate\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Auftragsdatum\"\r\n                    type=\"date\"\r\n                    fullWidth\r\n                    required\r\n                    InputLabelProps={{ shrink: true }}\r\n                    error={!!errors.documentDate}\r\n                    helperText={errors.documentDate?.message}\r\n                    inputProps={{\r\n                      'aria-describedby': errors.documentDate ? 'documentDate-error' : undefined\r\n                    }}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={6}>\r\n              <Controller\r\n                name=\"contactPerson\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Ansprechpartner\"\r\n                    fullWidth\r\n                    required\r\n                    error={!!errors.contactPerson}\r\n                    helperText={errors.contactPerson?.message}\r\n                    inputProps={{\r\n                      'aria-describedby': errors.contactPerson ? 'contactPerson-error' : undefined\r\n                    }}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={6}>\r\n              <Controller\r\n                name=\"email\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"E-Mail\"\r\n                    type=\"email\"\r\n                    fullWidth\r\n                    required\r\n                    error={!!errors.email}\r\n                    helperText={errors.email?.message}\r\n                    inputProps={{\r\n                      'aria-describedby': errors.email ? 'email-error' : undefined,\r\n                      'aria-invalid': !!errors.email\r\n                    }}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n\r\n        {/* Positionen */}\r\n        <Paper className=\"p-4 mb-6\">\r\n          <div className=\"flex justify-between items-center mb-4\">\r\n            <Typography variant=\"h6\" className=\"text-gray-700\">\r\n              Positionen\r\n            </Typography>\r\n            <Button\r\n              variant=\"outlined\"\r\n              startIcon={<AddIcon />}\r\n              onClick={addPosition}\r\n              className=\"bg-blue-50 hover:bg-blue-100\"\r\n            >\r\n              Position hinzufügen\r\n            </Button>\r\n          </div>\r\n\r\n          {positions.length === 0 ? (\r\n            <Alert severity=\"info\" className=\"mb-4\">\r\n              Keine Positionen vorhanden. Klicken Sie auf \"Position hinzufügen\" um eine neue Position zu erstellen.\r\n            </Alert>\r\n          ) : (\r\n            <Table className=\"mb-4\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Artikel-Nr.</TableCell>\r\n                  <TableCell>Beschreibung</TableCell>\r\n                  <TableCell>Menge</TableCell>\r\n                  <TableCell>Einheit</TableCell>\r\n                  <TableCell>Einzelpreis</TableCell>\r\n                  <TableCell>Rabatt (%)</TableCell>\r\n                  <TableCell>Gesamtpreis</TableCell>\r\n                  <TableCell>Aktionen</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {positions.map((position, index) => (\r\n                  <TableRow key={position.id}>\r\n                    <TableCell>\r\n                      <TextField\r\n                        value={position.articleNumber}\r\n                        onChange={(e) => updatePosition(position.id, 'articleNumber', e.target.value)}\r\n                        placeholder=\"Artikel-Nr.\"\r\n                        size=\"small\"\r\n                        fullWidth\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <TextField\r\n                        value={position.description}\r\n                        onChange={(e) => updatePosition(position.id, 'description', e.target.value)}\r\n                        placeholder=\"Beschreibung\"\r\n                        size=\"small\"\r\n                        fullWidth\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <TextField\r\n                        value={position.quantity}\r\n                        onChange={(e) => updatePosition(position.id, 'quantity', parseFloat(e.target.value) || 0)}\r\n                        type=\"number\"\r\n                        placeholder=\"Menge\"\r\n                        size=\"small\"\r\n                        fullWidth\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <TextField\r\n                        value={position.unit}\r\n                        onChange={(e) => updatePosition(position.id, 'unit', e.target.value)}\r\n                        placeholder=\"Einheit\"\r\n                        size=\"small\"\r\n                        fullWidth\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <TextField\r\n                        value={position.unitPrice}\r\n                        onChange={(e) => updatePosition(position.id, 'unitPrice', parseFloat(e.target.value) || 0)}\r\n                        type=\"number\"\r\n                        placeholder=\"Einzelpreis\"\r\n                        size=\"small\"\r\n                        fullWidth\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <TextField\r\n                        value={position.discount}\r\n                        onChange={(e) => updatePosition(position.id, 'discount', parseFloat(e.target.value) || 0)}\r\n                        type=\"number\"\r\n                        placeholder=\"Rabatt (%)\"\r\n                        size=\"small\"\r\n                        fullWidth\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <TextField\r\n                        value={position.netPrice.toFixed(2)}\r\n                        placeholder=\"Gesamtpreis\"\r\n                        size=\"small\"\r\n                        fullWidth\r\n                        InputProps={{ readOnly: true }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <IconButton\r\n                        onClick={() => removePosition(position.id)}\r\n                        color=\"error\"\r\n                        size=\"small\"\r\n                        title=\"Entfernen\"\r\n                      >\r\n                        <DeleteIcon />\r\n                      </IconButton>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          )}\r\n        </Paper>\r\n\r\n        {/* Summen */}\r\n        <Paper className=\"p-4 mb-6\">\r\n          <Typography variant=\"h6\" className=\"mb-4 text-gray-700\">\r\n            Summen\r\n          </Typography>\r\n          \r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} md={4}>\r\n              <Controller\r\n                name=\"netAmount\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Nettobetrag\"\r\n                    type=\"number\"\r\n                    fullWidth\r\n                    InputProps={{ readOnly: true }}\r\n                    value={field.value.toFixed(2)}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={4}>\r\n              <Controller\r\n                name=\"vatAmount\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"MwSt. (19%)\"\r\n                    type=\"number\"\r\n                    fullWidth\r\n                    InputProps={{ readOnly: true }}\r\n                    value={field.value.toFixed(2)}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={4}>\r\n              <Controller\r\n                name=\"totalAmount\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Gesamtbetrag\"\r\n                    type=\"number\"\r\n                    fullWidth\r\n                    InputProps={{ readOnly: true }}\r\n                    value={field.value.toFixed(2)}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n\r\n        {/* Buttons */}\r\n        <div className=\"flex justify-end space-x-4\">\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<CancelIcon />}\r\n            onClick={onCancel}\r\n            disabled={isSubmitting}\r\n          >\r\n            Abbrechen\r\n          </Button>\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            startIcon={<SaveIcon />}\r\n            disabled={isSubmitting || positions.length === 0}\r\n            data-testid=\"save-button\"\r\n          >\r\n            Speichern\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </Card>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\components\\zvoove-integration\\ZvooveContactOverview.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":159,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4064,4067],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4064,4067],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":159,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4077,4080],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4077,4080],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'record' is defined but never used. Allowed unused args must match /^_/u.","line":324,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":324,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Table,\r\n  Form,\r\n  Select,\r\n  DatePicker,\r\n  Checkbox,\r\n  Card,\r\n  Typography,\r\n  Button,\r\n  Space,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Statistic,\r\n  Tag,\r\n  Tooltip,\r\n  Badge\r\n} from 'antd';\r\nimport {\r\n  SearchOutlined,\r\n  FilterOutlined,\r\n  DownloadOutlined,\r\n  EyeOutlined,\r\n  EditOutlined,\r\n  PhoneOutlined,\r\n  MailOutlined,\r\n  CalendarOutlined\r\n} from '@ant-design/icons';\r\nimport type { ColumnsType } from 'antd/es/table';\r\nimport dayjs from 'dayjs';\r\n\r\n// TypeScript Interfaces\r\ninterface ContactOverviewProps {\r\n  filters: ContactFilters;\r\n  onFilterChange: (filters: ContactFilters) => void;\r\n  contacts: Contact[];\r\n  loading?: boolean;\r\n}\r\n\r\ninterface ContactFilters {\r\n  // Kontakt-Typ\r\n  contactType: 'sales' | 'purchase' | 'all';\r\n  \r\n  // Sortierung\r\n  sortBy: 'contactNumber' | 'name' | 'date' | 'representative';\r\n  sortOrder: 'asc' | 'desc';\r\n  \r\n  // Selektion\r\n  representative: string;\r\n  dateRange: {\r\n    from: dayjs.Dayjs | null;\r\n    to: dayjs.Dayjs | null;\r\n  };\r\n  parity: string;\r\n  \r\n  // Optionen\r\n  onlyPlannedAppointments: boolean;\r\n  articleSumsInPrint: boolean;\r\n  \r\n  // Suchfelder\r\n  searchText: string;\r\n  contactNumber: string;\r\n}\r\n\r\ninterface Contact {\r\n  id: string;\r\n  contactNumber: string;\r\n  name: string;\r\n  representative: string;\r\n  contactType: 'sales' | 'purchase';\r\n  appointmentDate?: dayjs.Dayjs;\r\n  orderQuantity: number;\r\n  remainingQuantity: number;\r\n  status: 'active' | 'inactive' | 'planned';\r\n  phone?: string;\r\n  email?: string;\r\n  lastContact?: dayjs.Dayjs;\r\n  notes?: string;\r\n}\r\n\r\nconst { RangePicker } = DatePicker;\r\nconst { Option } = Select;\r\n\r\nexport const ContactOverview: React.FC<ContactOverviewProps> = ({\r\n  filters,\r\n  onFilterChange,\r\n  contacts,\r\n  loading = false\r\n}) => {\r\n  const [form] = Form.useForm();\r\n  const [filteredContacts, setFilteredContacts] = useState<Contact[]>(contacts);\r\n\r\n  // Statistiken berechnen\r\n  const calculateStats = () => {\r\n    const totalContacts = contacts.length;\r\n    const salesContacts = contacts.filter(c => c.contactType === 'sales').length;\r\n    const purchaseContacts = contacts.filter(c => c.contactType === 'purchase').length;\r\n    const plannedAppointments = contacts.filter(c => c.status === 'planned').length;\r\n    const totalOrderQuantity = contacts.reduce((sum, c) => sum + c.orderQuantity, 0);\r\n    const totalRemainingQuantity = contacts.reduce((sum, c) => sum + c.remainingQuantity, 0);\r\n\r\n    return {\r\n      totalContacts,\r\n      salesContacts,\r\n      purchaseContacts,\r\n      plannedAppointments,\r\n      totalOrderQuantity,\r\n      totalRemainingQuantity\r\n    };\r\n  };\r\n\r\n  const stats = calculateStats();\r\n\r\n  // Filter anwenden\r\n  useEffect(() => {\r\n    let filtered = [...contacts];\r\n\r\n    // Kontakt-Typ Filter\r\n    if (filters.contactType !== 'all') {\r\n      filtered = filtered.filter(c => c.contactType === filters.contactType);\r\n    }\r\n\r\n    // Vertreter Filter\r\n    if (filters.representative) {\r\n      filtered = filtered.filter(c => \r\n        c.representative.toLowerCase().includes(filters.representative.toLowerCase())\r\n      );\r\n    }\r\n\r\n    // Datumsbereich Filter\r\n    if (filters.dateRange.from && filters.dateRange.to) {\r\n      filtered = filtered.filter(c => {\r\n        if (c.appointmentDate) {\r\n          return c.appointmentDate.isAfter(filters.dateRange.from) && \r\n                 c.appointmentDate.isBefore(filters.dateRange.to);\r\n        }\r\n        return false;\r\n      });\r\n    }\r\n\r\n    // Nur geplante Termine\r\n    if (filters.onlyPlannedAppointments) {\r\n      filtered = filtered.filter(c => c.status === 'planned');\r\n    }\r\n\r\n    // Suchtext Filter\r\n    if (filters.searchText) {\r\n      const searchLower = filters.searchText.toLowerCase();\r\n      filtered = filtered.filter(c =>\r\n        c.name.toLowerCase().includes(searchLower) ||\r\n        c.contactNumber.toLowerCase().includes(searchLower) ||\r\n        c.representative.toLowerCase().includes(searchLower)\r\n      );\r\n    }\r\n\r\n    // Sortierung\r\n    filtered.sort((a, b) => {\r\n      let aValue: any, bValue: any;\r\n      \r\n      switch (filters.sortBy) {\r\n        case 'contactNumber':\r\n          aValue = a.contactNumber;\r\n          bValue = b.contactNumber;\r\n          break;\r\n        case 'name':\r\n          aValue = a.name;\r\n          bValue = b.name;\r\n          break;\r\n        case 'date':\r\n          aValue = a.appointmentDate || dayjs(0);\r\n          bValue = b.appointmentDate || dayjs(0);\r\n          break;\r\n        case 'representative':\r\n          aValue = a.representative;\r\n          bValue = b.representative;\r\n          break;\r\n        default:\r\n          aValue = a.contactNumber;\r\n          bValue = b.contactNumber;\r\n      }\r\n\r\n      if (filters.sortOrder === 'asc') {\r\n        return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;\r\n      } else {\r\n        return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;\r\n      }\r\n    });\r\n\r\n    setFilteredContacts(filtered);\r\n  }, [contacts, filters]);\r\n\r\n  // Filter zurücksetzen\r\n  const resetFilters = () => {\r\n    const defaultFilters: ContactFilters = {\r\n      contactType: 'all',\r\n      sortBy: 'contactNumber',\r\n      sortOrder: 'asc',\r\n      representative: '',\r\n      dateRange: { from: null, to: null },\r\n      parity: '',\r\n      onlyPlannedAppointments: false,\r\n      articleSumsInPrint: false,\r\n      searchText: '',\r\n      contactNumber: ''\r\n    };\r\n    \r\n    onFilterChange(defaultFilters);\r\n    form.resetFields();\r\n  };\r\n\r\n  // Tabellen-Spalten definieren\r\n  const columns: ColumnsType<Contact> = [\r\n    {\r\n      title: 'Kontakt-Nr.',\r\n      dataIndex: 'contactNumber',\r\n      key: 'contactNumber',\r\n      width: 120,\r\n      render: (text: string) => (\r\n        <Typography.Text strong>{text}</Typography.Text>\r\n      )\r\n    },\r\n    {\r\n      title: 'Name',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n      width: 200,\r\n      render: (text: string, record: Contact) => (\r\n        <div>\r\n          <Typography.Text strong>{text}</Typography.Text>\r\n          <div className=\"flex items-center space-x-2 mt-1\">\r\n            {record.phone && (\r\n              <Tooltip title={record.phone}>\r\n                <PhoneOutlined className=\"text-gray-500\" />\r\n              </Tooltip>\r\n            )}\r\n            {record.email && (\r\n              <Tooltip title={record.email}>\r\n                <MailOutlined className=\"text-gray-500\" />\r\n              </Tooltip>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      title: 'Vertreter',\r\n      dataIndex: 'representative',\r\n      key: 'representative',\r\n      width: 150,\r\n      render: (text: string) => (\r\n        <Tag color=\"blue\">{text}</Tag>\r\n      )\r\n    },\r\n    {\r\n      title: 'Typ',\r\n      dataIndex: 'contactType',\r\n      key: 'contactType',\r\n      width: 100,\r\n      render: (type: string) => (\r\n        <Tag color={type === 'sales' ? 'green' : 'orange'}>\r\n          {type === 'sales' ? 'Verkauf' : 'Einkauf'}\r\n        </Tag>\r\n      )\r\n    },\r\n    {\r\n      title: 'Termin',\r\n      dataIndex: 'appointmentDate',\r\n      key: 'appointmentDate',\r\n      width: 120,\r\n      render: (date: dayjs.Dayjs) => (\r\n        date ? (\r\n          <div className=\"flex items-center space-x-1\">\r\n            <CalendarOutlined className=\"text-gray-500\" />\r\n            <Typography.Text>{date.format('DD.MM.YYYY')}</Typography.Text>\r\n          </div>\r\n        ) : (\r\n          <Typography.Text type=\"secondary\">-</Typography.Text>\r\n        )\r\n      )\r\n    },\r\n    {\r\n      title: 'Abnahme-Menge',\r\n      dataIndex: 'orderQuantity',\r\n      key: 'orderQuantity',\r\n      width: 120,\r\n      render: (quantity: number) => (\r\n        <Typography.Text strong>{quantity.toLocaleString()}</Typography.Text>\r\n      )\r\n    },\r\n    {\r\n      title: 'Rest-Menge',\r\n      dataIndex: 'remainingQuantity',\r\n      key: 'remainingQuantity',\r\n      width: 120,\r\n      render: (quantity: number) => (\r\n        <Badge \r\n          count={quantity} \r\n          showZero \r\n          color={quantity > 0 ? 'orange' : 'green'}\r\n        />\r\n      )\r\n    },\r\n    {\r\n      title: 'Status',\r\n      dataIndex: 'status',\r\n      key: 'status',\r\n      width: 100,\r\n      render: (status: string) => {\r\n        const statusConfig = {\r\n          active: { color: 'green', text: 'Aktiv' },\r\n          inactive: { color: 'red', text: 'Inaktiv' },\r\n          planned: { color: 'blue', text: 'Geplant' }\r\n        };\r\n        \r\n        const config = statusConfig[status as keyof typeof statusConfig];\r\n        return <Tag color={config.color}>{config.text}</Tag>;\r\n      }\r\n    },\r\n    {\r\n      title: 'Aktionen',\r\n      key: 'actions',\r\n      width: 120,\r\n      render: (_, record: Contact) => (\r\n        <Space>\r\n          <Tooltip title=\"Anzeigen\">\r\n            <Button \r\n              type=\"text\" \r\n              icon={<EyeOutlined />} \r\n              size=\"small\"\r\n            />\r\n          </Tooltip>\r\n          <Tooltip title=\"Bearbeiten\">\r\n            <Button \r\n              type=\"text\" \r\n              icon={<EditOutlined />} \r\n              size=\"small\"\r\n            />\r\n          </Tooltip>\r\n        </Space>\r\n      )\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Statistiken */}\r\n      <Row gutter={16}>\r\n        <Col span={4}>\r\n          <Card>\r\n            <Statistic\r\n              title=\"Gesamt Kontakte\"\r\n              value={stats.totalContacts}\r\n              valueStyle={{ color: '#3f8600' }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col span={4}>\r\n          <Card>\r\n            <Statistic\r\n              title=\"Verkaufskontakte\"\r\n              value={stats.salesContacts}\r\n              valueStyle={{ color: '#1890ff' }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col span={4}>\r\n          <Card>\r\n            <Statistic\r\n              title=\"Einkaufskontakte\"\r\n              value={stats.purchaseContacts}\r\n              valueStyle={{ color: '#fa8c16' }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col span={4}>\r\n          <Card>\r\n            <Statistic\r\n              title=\"Geplante Termine\"\r\n              value={stats.plannedAppointments}\r\n              valueStyle={{ color: '#722ed1' }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col span={4}>\r\n          <Card>\r\n            <Statistic\r\n              title=\"Abnahme-Menge\"\r\n              value={stats.totalOrderQuantity}\r\n              valueStyle={{ color: '#eb2f96' }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col span={4}>\r\n          <Card>\r\n            <Statistic\r\n              title=\"Rest-Menge\"\r\n              value={stats.totalRemainingQuantity}\r\n              valueStyle={{ color: '#f5222d' }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Filter */}\r\n      <Card>\r\n        <Form\r\n          form={form}\r\n          layout=\"vertical\"\r\n          onValuesChange={(_, allValues) => {\r\n            const newFilters: ContactFilters = {\r\n              ...filters,\r\n              ...allValues\r\n            };\r\n            onFilterChange(newFilters);\r\n          }}\r\n        >\r\n          <Row gutter={16}>\r\n            <Col span={6}>\r\n              <Form.Item label=\"Kontakt-Typ\" name=\"contactType\">\r\n                <Select placeholder=\"Alle Kontakte\">\r\n                  <Option value=\"all\">Alle Kontakte</Option>\r\n                  <Option value=\"sales\">Verkaufskontakte</Option>\r\n                  <Option value=\"purchase\">Einkaufskontakte</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n            \r\n            <Col span={6}>\r\n              <Form.Item label=\"Vertreter\" name=\"representative\">\r\n                <Input \r\n                  placeholder=\"Vertreter suchen\"\r\n                  prefix={<SearchOutlined />}\r\n                />\r\n              </Form.Item>\r\n            </Col>\r\n            \r\n            <Col span={6}>\r\n              <Form.Item label=\"Zeitraum\" name=\"dateRange\">\r\n                <RangePicker \r\n                  placeholder={['Von', 'Bis']}\r\n                  format=\"DD.MM.YYYY\"\r\n                />\r\n              </Form.Item>\r\n            </Col>\r\n            \r\n            <Col span={6}>\r\n              <Form.Item label=\"Sortierung\" name=\"sortBy\">\r\n                <Select placeholder=\"Sortierung\">\r\n                  <Option value=\"contactNumber\">Kontaktnummer</Option>\r\n                  <Option value=\"name\">Name</Option>\r\n                  <Option value=\"date\">Datum</Option>\r\n                  <Option value=\"representative\">Vertreter</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          \r\n          <Row gutter={16}>\r\n            <Col span={8}>\r\n              <Form.Item label=\"Suche\" name=\"searchText\">\r\n                <Input \r\n                  placeholder=\"Name, Kontaktnummer oder Vertreter\"\r\n                  prefix={<SearchOutlined />}\r\n                />\r\n              </Form.Item>\r\n            </Col>\r\n            \r\n            <Col span={4}>\r\n              <Form.Item label=\"Sortierreihenfolge\" name=\"sortOrder\">\r\n                <Select>\r\n                  <Option value=\"asc\">Aufsteigend</Option>\r\n                  <Option value=\"desc\">Absteigend</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n            \r\n            <Col span={6}>\r\n              <Form.Item label=\"Optionen\">\r\n                <Space direction=\"vertical\">\r\n                  <Checkbox \r\n                    name=\"onlyPlannedAppointments\"\r\n                    checked={filters.onlyPlannedAppointments}\r\n                    onChange={(e) => onFilterChange({\r\n                      ...filters,\r\n                      onlyPlannedAppointments: e.target.checked\r\n                    })}\r\n                  >\r\n                    Nur geplante Termine\r\n                  </Checkbox>\r\n                  <Checkbox \r\n                    name=\"articleSumsInPrint\"\r\n                    checked={filters.articleSumsInPrint}\r\n                    onChange={(e) => onFilterChange({\r\n                      ...filters,\r\n                      articleSumsInPrint: e.target.checked\r\n                    })}\r\n                  >\r\n                    Artikel-Summen im Ausdruck\r\n                  </Checkbox>\r\n                </Space>\r\n              </Form.Item>\r\n            </Col>\r\n            \r\n            <Col span={6}>\r\n              <Form.Item label=\"Aktionen\">\r\n                <Space>\r\n                  <Button \r\n                    icon={<FilterOutlined />}\r\n                    onClick={resetFilters}\r\n                  >\r\n                    Filter zurücksetzen\r\n                  </Button>\r\n                  <Button \r\n                    icon={<DownloadOutlined />}\r\n                    type=\"primary\"\r\n                  >\r\n                    Export\r\n                  </Button>\r\n                </Space>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </Card>\r\n\r\n      {/* Tabelle */}\r\n      <Card>\r\n        <Table\r\n          columns={columns}\r\n          dataSource={filteredContacts}\r\n          rowKey=\"id\"\r\n          loading={loading}\r\n          pagination={{\r\n            total: filteredContacts.length,\r\n            pageSize: 20,\r\n            showSizeChanger: true,\r\n            showQuickJumper: true,\r\n            showTotal: (total, range) => \r\n              `${range[0]}-${range[1]} von ${total} Kontakten`\r\n          }}\r\n          scroll={{ x: 1200 }}\r\n        />\r\n      </Card>\r\n    </div>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\components\\zvoove-integration\\ZvooveOrderForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Divider' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":155,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4784,4787],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4784,4787],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":326,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":326,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport {\r\n  Card,\r\n  TextField,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Typography,\r\n  Grid,\r\n  Paper,\r\n  Divider,\r\n  Alert\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Delete as DeleteIcon,\r\n  Save as SaveIcon,\r\n  Cancel as CancelIcon\r\n} from '@mui/icons-material';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\n// TypeScript Interfaces\r\ninterface OrderFormProps {\r\n  mode: 'offer' | 'order' | 'delivery' | 'invoice';\r\n  initialData?: Partial<OrderData>;\r\n  onSave: (data: OrderData) => void;\r\n  onCancel: () => void;\r\n}\r\n\r\ninterface OrderData {\r\n  // Belegdaten\r\n  customerNumber: string;\r\n  debtorNumber: string;\r\n  documentDate: Date;\r\n  contactPerson: string;\r\n  \r\n  // Positionen\r\n  positions: OrderPosition[];\r\n  \r\n  // Summen\r\n  netAmount: number;\r\n  vatAmount: number;\r\n  totalAmount: number;\r\n}\r\n\r\ninterface OrderPosition {\r\n  id: string;\r\n  articleNumber: string;\r\n  description: string;\r\n  quantity: number;\r\n  unit: string;\r\n  unitPrice: number;\r\n  discount: number;\r\n  netPrice: number;\r\n}\r\n\r\n// Validierungsschema\r\nconst orderSchema = yup.object({\r\n  customerNumber: yup.string().required('Auftragsnummer ist erforderlich'),\r\n  debtorNumber: yup.string().required('Kunde ist erforderlich'),\r\n  documentDate: yup.date().required('Datum ist erforderlich'),\r\n  contactPerson: yup.string().required('Ansprechpartner ist erforderlich'),\r\n  positions: yup.array().of(\r\n    yup.object({\r\n      id: yup.string().required(),\r\n      articleNumber: yup.string().required('Artikel-Nr. ist erforderlich'),\r\n      description: yup.string().required('Beschreibung ist erforderlich'),\r\n      quantity: yup.number().positive('Menge muss größer als 0 sein').required('Menge ist erforderlich'),\r\n      unit: yup.string().required('Einheit ist erforderlich'),\r\n      unitPrice: yup.number().positive('Preis muss größer als 0 sein').required('Preis ist erforderlich'),\r\n      discount: yup.number().min(0, 'Rabatt darf nicht negativ sein').max(100, 'Rabatt darf maximal 100% sein').required(),\r\n      netPrice: yup.number().positive('Nettopreis muss größer als 0 sein').required('Nettopreis ist erforderlich')\r\n    })\r\n  ).min(1, 'Mindestens eine Position ist erforderlich'),\r\n  netAmount: yup.number().min(0).required('Nettobetrag ist erforderlich'),\r\n  vatAmount: yup.number().min(0).required('MwSt. ist erforderlich'),\r\n  totalAmount: yup.number().min(0).required('Gesamtbetrag ist erforderlich')\r\n}) as yup.ObjectSchema<OrderData>;\r\n\r\nexport const OrderForm: React.FC<OrderFormProps> = ({\r\n  mode,\r\n  initialData,\r\n  onSave,\r\n  onCancel\r\n}) => {\r\n  const [positions, setPositions] = useState<OrderPosition[]>(\r\n    initialData?.positions || []\r\n  );\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting },\r\n    watch,\r\n    setValue\r\n  } = useForm<OrderData>({\r\n    resolver: yupResolver(orderSchema),\r\n    defaultValues: {\r\n      customerNumber: initialData?.customerNumber || '',\r\n      debtorNumber: initialData?.debtorNumber || '',\r\n      documentDate: initialData?.documentDate || new Date(),\r\n      contactPerson: initialData?.contactPerson || '',\r\n      positions: initialData?.positions || [],\r\n      netAmount: initialData?.netAmount || 0,\r\n      vatAmount: initialData?.vatAmount || 0,\r\n      totalAmount: initialData?.totalAmount || 0\r\n    }\r\n  });\r\n\r\n  // Berechne Summen basierend auf Positionen\r\n  const calculateTotals = (positions: OrderPosition[]) => {\r\n    const netAmount = positions.reduce((sum, pos) => sum + pos.netPrice, 0);\r\n    const vatAmount = netAmount * 0.19; // 19% MwSt\r\n    const totalAmount = netAmount + vatAmount;\r\n    \r\n    setValue('netAmount', netAmount);\r\n    setValue('vatAmount', vatAmount);\r\n    setValue('totalAmount', totalAmount);\r\n  };\r\n\r\n  // Neue Position hinzufügen\r\n  const addPosition = () => {\r\n    const newPosition: OrderPosition = {\r\n      id: Date.now().toString(),\r\n      articleNumber: '',\r\n      description: '',\r\n      quantity: 1,\r\n      unit: 'Stück',\r\n      unitPrice: 0,\r\n      discount: 0,\r\n      netPrice: 0\r\n    };\r\n    \r\n    const updatedPositions = [...positions, newPosition];\r\n    setPositions(updatedPositions);\r\n    setValue('positions', updatedPositions);\r\n    calculateTotals(updatedPositions);\r\n  };\r\n\r\n  // Position löschen\r\n  const removePosition = (id: string) => {\r\n    const updatedPositions = positions.filter(pos => pos.id !== id);\r\n    setPositions(updatedPositions);\r\n    setValue('positions', updatedPositions);\r\n    calculateTotals(updatedPositions);\r\n  };\r\n\r\n  // Position aktualisieren\r\n  const updatePosition = (id: string, field: keyof OrderPosition, value: any) => {\r\n    const updatedPositions = positions.map(pos => {\r\n      if (pos.id === id) {\r\n        const updatedPos = { ...pos, [field]: value };\r\n        \r\n        // Berechne Nettopreis\r\n        if (field === 'quantity' || field === 'unitPrice' || field === 'discount') {\r\n          const quantity = field === 'quantity' ? value : pos.quantity;\r\n          const unitPrice = field === 'unitPrice' ? value : pos.unitPrice;\r\n          const discount = field === 'discount' ? value : pos.discount;\r\n          \r\n          const grossPrice = quantity * unitPrice;\r\n          const discountAmount = grossPrice * (discount / 100);\r\n          updatedPos.netPrice = grossPrice - discountAmount;\r\n        }\r\n        \r\n        return updatedPos;\r\n      }\r\n      return pos;\r\n    });\r\n    \r\n    setPositions(updatedPositions);\r\n    setValue('positions', updatedPositions);\r\n    calculateTotals(updatedPositions);\r\n  };\r\n\r\n  // Formular absenden\r\n  const onSubmit = (data: OrderData) => {\r\n    const orderData: OrderData = {\r\n      ...data,\r\n      positions: positions,\r\n      netAmount: data.netAmount,\r\n      vatAmount: data.vatAmount,\r\n      totalAmount: data.totalAmount\r\n    };\r\n    \r\n    onSave(orderData);\r\n  };\r\n\r\n  const modeLabels = {\r\n    offer: 'Angebot',\r\n    order: 'Auftrag',\r\n    delivery: 'Lieferung',\r\n    invoice: 'Rechnung'\r\n  };\r\n\r\n  return (\r\n    <Card className=\"p-6 max-w-6xl mx-auto\">\r\n      <Typography variant=\"h5\" className=\"mb-6 text-gray-800\">\r\n        {modeLabels[mode]} erfassen\r\n      </Typography>\r\n\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        {/* Belegdaten */}\r\n        <Paper className=\"p-4 mb-6\">\r\n          <Typography variant=\"h6\" className=\"mb-4 text-gray-700\">\r\n            Belegdaten\r\n          </Typography>\r\n          \r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} md={6}>\r\n              <Controller\r\n                name=\"customerNumber\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Kundennummer\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    error={!!errors.customerNumber}\r\n                    helperText={errors.customerNumber?.message}\r\n                    required\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={6}>\r\n              <Controller\r\n                name=\"debtorNumber\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Debitoren-Nr.\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    error={!!errors.debtorNumber}\r\n                    helperText={errors.debtorNumber?.message}\r\n                    required\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={6}>\r\n              <Controller\r\n                name=\"documentDate\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Datum\"\r\n                    type=\"date\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    error={!!errors.documentDate}\r\n                    helperText={errors.documentDate?.message}\r\n                    InputLabelProps={{ shrink: true }}\r\n                    required\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={6}>\r\n              <Controller\r\n                name=\"contactPerson\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Ansprechpartner\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    error={!!errors.contactPerson}\r\n                    helperText={errors.contactPerson?.message}\r\n                    required\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n\r\n        {/* Positionen */}\r\n        <Paper className=\"p-4 mb-6\">\r\n          <div className=\"flex justify-between items-center mb-4\">\r\n            <Typography variant=\"h6\" className=\"text-gray-700\">\r\n              Positionen\r\n            </Typography>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<AddIcon />}\r\n              onClick={addPosition}\r\n              color=\"primary\"\r\n            >\r\n              Position hinzufügen\r\n            </Button>\r\n          </div>\r\n\r\n          {positions.length === 0 ? (\r\n            <Alert severity=\"info\" className=\"mb-4\">\r\n              Keine Positionen vorhanden. Fügen Sie mindestens eine Position hinzu.\r\n            </Alert>\r\n          ) : (\r\n            <Table className=\"mb-4\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Artikel-Nr.</TableCell>\r\n                  <TableCell>Beschreibung</TableCell>\r\n                  <TableCell>Menge</TableCell>\r\n                  <TableCell>Einheit</TableCell>\r\n                  <TableCell>Preis</TableCell>\r\n                  <TableCell>Rabatt %</TableCell>\r\n                  <TableCell>Nettopreis</TableCell>\r\n                  <TableCell>Aktionen</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {positions.map((position, index) => (\r\n                  <TableRow key={position.id}>\r\n                    <TableCell>\r\n                      <TextField\r\n                        value={position.articleNumber}\r\n                        onChange={(e) => updatePosition(position.id, 'articleNumber', e.target.value)}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        fullWidth\r\n                        placeholder=\"Artikel-Nr.\"\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <TextField\r\n                        value={position.description}\r\n                        onChange={(e) => updatePosition(position.id, 'description', e.target.value)}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        fullWidth\r\n                        placeholder=\"Beschreibung\"\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <TextField\r\n                        value={position.quantity}\r\n                        onChange={(e) => updatePosition(position.id, 'quantity', parseFloat(e.target.value) || 0)}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        type=\"number\"\r\n                        inputProps={{ min: 0, step: 0.01 }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <TextField\r\n                        value={position.unit}\r\n                        onChange={(e) => updatePosition(position.id, 'unit', e.target.value)}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        fullWidth\r\n                        placeholder=\"Stück\"\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <TextField\r\n                        value={position.unitPrice}\r\n                        onChange={(e) => updatePosition(position.id, 'unitPrice', parseFloat(e.target.value) || 0)}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        type=\"number\"\r\n                        inputProps={{ min: 0, step: 0.01 }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <TextField\r\n                        value={position.discount}\r\n                        onChange={(e) => updatePosition(position.id, 'discount', parseFloat(e.target.value) || 0)}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        type=\"number\"\r\n                        inputProps={{ min: 0, max: 100, step: 0.01 }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\" className=\"font-medium\">\r\n                        {position.netPrice.toFixed(2)} €\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <IconButton\r\n                        onClick={() => removePosition(position.id)}\r\n                        color=\"error\"\r\n                        size=\"small\"\r\n                      >\r\n                        <DeleteIcon />\r\n                      </IconButton>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          )}\r\n        </Paper>\r\n\r\n        {/* Summen */}\r\n        <Paper className=\"p-4 mb-6\">\r\n          <Typography variant=\"h6\" className=\"mb-4 text-gray-700\">\r\n            Summen\r\n          </Typography>\r\n          \r\n          <Grid container spacing={3} className=\"text-right\">\r\n            <Grid item xs={12} md={4}>\r\n              <Typography variant=\"body1\" className=\"text-gray-600\">\r\n                Nettobetrag:\r\n              </Typography>\r\n              <Typography variant=\"h6\" className=\"font-medium\">\r\n                {watch('netAmount').toFixed(2)} €\r\n              </Typography>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={4}>\r\n              <Typography variant=\"body1\" className=\"text-gray-600\">\r\n                MwSt. (19%):\r\n              </Typography>\r\n              <Typography variant=\"h6\" className=\"font-medium\">\r\n                {watch('vatAmount').toFixed(2)} €\r\n              </Typography>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={4}>\r\n              <Typography variant=\"body1\" className=\"text-gray-600\">\r\n                Gesamtbetrag:\r\n              </Typography>\r\n              <Typography variant=\"h5\" className=\"font-bold text-primary\">\r\n                {watch('totalAmount').toFixed(2)} €\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n\r\n        {/* Aktionen */}\r\n        <div className=\"flex justify-end space-x-4\">\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<CancelIcon />}\r\n            onClick={onCancel}\r\n            disabled={isSubmitting}\r\n          >\r\n            Abbrechen\r\n          </Button>\r\n          \r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            startIcon={<SaveIcon />}\r\n            disabled={isSubmitting || positions.length === 0}\r\n            color=\"primary\"\r\n          >\r\n            {isSubmitting ? 'Speichere...' : 'Speichern'}\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </Card>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\components\\zvoove-integration\\__tests__\\ContactOverview.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fireEvent' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":145,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":145,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\r\nimport userEvent from '@testing-library/user-event';\r\nimport { ConfigProvider } from 'antd';\r\nimport { ContactOverview } from '../ContactOverview';\r\nimport '@testing-library/jest-dom';\r\n\r\n// Mock der API-Service\r\nconst mockGetContacts = jest.fn();\r\nconst mockCreateContact = jest.fn();\r\nconst mockUpdateContact = jest.fn();\r\nconst mockDeleteContact = jest.fn();\r\n\r\njest.mock('../../../services/erpApi', () => ({\r\n  ErpApiService: jest.fn().mockImplementation(() => ({\r\n    getContacts: mockGetContacts,\r\n    createContact: mockCreateContact,\r\n    updateContact: mockUpdateContact,\r\n    deleteContact: mockDeleteContact\r\n  }))\r\n}));\r\n\r\nconst renderWithConfig = (component: React.ReactElement) => {\r\n  return render(\r\n    <ConfigProvider>\r\n      {component}\r\n    </ConfigProvider>\r\n  );\r\n};\r\n\r\ndescribe('ContactOverview', () => {\r\n  const defaultProps = {\r\n    filters: {\r\n      contactType: 'all' as const,\r\n      sortBy: 'contactNumber' as const,\r\n      sortOrder: 'asc' as const,\r\n      representative: '',\r\n      dateRange: {\r\n        from: null,\r\n        to: null\r\n      },\r\n      parity: '',\r\n      onlyPlannedAppointments: false,\r\n      articleSumsInPrint: false,\r\n      searchText: '',\r\n      contactNumber: ''\r\n    },\r\n    onFilterChange: jest.fn(),\r\n    contacts: [\r\n      {\r\n        id: '1',\r\n        contactNumber: 'K001',\r\n        name: 'Test Kunde',\r\n        representative: 'Max Mustermann',\r\n        contactType: 'sales' as const,\r\n        orderQuantity: 100,\r\n        remainingQuantity: 50,\r\n        status: 'active' as const,\r\n        phone: '123456789',\r\n        email: 'test@example.com'\r\n      }\r\n    ]\r\n  };\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('Backend-Integration', () => {\r\n    it('sollte Kontakte von der API laden', async () => {\r\n      const mockContacts = [\r\n        {\r\n          id: '1',\r\n          name: 'Test Kunde',\r\n          email: 'test@example.com',\r\n          phone: '123456789',\r\n          address: 'Teststraße 1',\r\n          customerNumber: 'K001',\r\n          createdAt: new Date().toISOString(),\r\n          updatedAt: new Date().toISOString()\r\n        }\r\n      ];\r\n\r\n      mockGetContacts.mockResolvedValue(mockContacts);\r\n\r\n      const contacts = await mockGetContacts({});\r\n      expect(contacts).toHaveLength(1);\r\n      expect(mockGetContacts).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('UI-Rendering', () => {\r\n    it('sollte die Kontaktübersicht korrekt rendern', () => {\r\n      renderWithConfig(<ContactOverview {...defaultProps} />);\r\n\r\n      expect(screen.getByText('Kontakte')).toBeInTheDocument();\r\n      expect(screen.getByText('Neuen Kontakt erstellen')).toBeInTheDocument();\r\n    });\r\n\r\n    it('sollte Suchfelder anzeigen', () => {\r\n      renderWithConfig(<ContactOverview {...defaultProps} />);\r\n\r\n      expect(screen.getByPlaceholderText('Nach Namen oder E-Mail suchen...')).toBeInTheDocument();\r\n      expect(screen.getByText('Filter')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  describe('Benutzer-Interaktionen', () => {\r\n    it('sollte Suchfunktion korrekt ausführen', async () => {\r\n      const user = userEvent.setup();\r\n      \r\n      renderWithConfig(<ContactOverview {...defaultProps} />);\r\n\r\n      const searchInput = screen.getByPlaceholderText('Nach Namen oder E-Mail suchen...');\r\n      await user.type(searchInput, 'Test');\r\n\r\n      expect(searchInput).toHaveValue('Test');\r\n    });\r\n\r\n    it('sollte Filter öffnen und schließen', async () => {\r\n      const user = userEvent.setup();\r\n      \r\n      renderWithConfig(<ContactOverview {...defaultProps} />);\r\n\r\n      const filterButton = screen.getByText('Filter');\r\n      await user.click(filterButton);\r\n\r\n      expect(screen.getByText('Kontakttyp')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  describe('Kontakt-Management', () => {\r\n    it('sollte neuen Kontakt erstellen', async () => {\r\n      const user = userEvent.setup();\r\n      \r\n      renderWithConfig(<ContactOverview {...defaultProps} />);\r\n\r\n      const createButton = screen.getByText('Neuen Kontakt erstellen');\r\n      await user.click(createButton);\r\n\r\n      expect(screen.getByText('Kontakt erstellen')).toBeInTheDocument();\r\n    });\r\n\r\n    it('sollte Kontakt bearbeiten', async () => {\r\n      const user = userEvent.setup();\r\n      \r\n      renderWithConfig(<ContactOverview {...defaultProps} />);\r\n\r\n      // Simuliere vorhandene Kontakte\r\n      const mockContacts = [\r\n        {\r\n          id: '1',\r\n          name: 'Test Kunde',\r\n          email: 'test@example.com',\r\n          phone: '123456789',\r\n          address: 'Teststraße 1',\r\n          customerNumber: 'K001',\r\n          createdAt: new Date().toISOString(),\r\n          updatedAt: new Date().toISOString()\r\n        }\r\n      ];\r\n\r\n      mockGetContacts.mockResolvedValue(mockContacts);\r\n\r\n      // Warte auf das Laden der Kontakte\r\n      await waitFor(() => {\r\n        expect(mockGetContacts).toHaveBeenCalled();\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('API-Integration', () => {\r\n    it('sollte Kontakte mit Filtern laden', async () => {\r\n      const filters = {\r\n        search: 'Test',\r\n        contactType: 'customer' as const,\r\n        sortBy: 'name' as const,\r\n        sortOrder: 'asc' as const\r\n      };\r\n\r\n      const mockContacts = [\r\n        {\r\n          id: '1',\r\n          name: 'Test Kunde',\r\n          email: 'test@example.com',\r\n          phone: '123456789',\r\n          address: 'Teststraße 1',\r\n          customerNumber: 'K001',\r\n          createdAt: new Date().toISOString(),\r\n          updatedAt: new Date().toISOString()\r\n        }\r\n      ];\r\n\r\n      mockGetContacts.mockResolvedValue(mockContacts);\r\n\r\n      const contacts = await mockGetContacts(filters);\r\n      expect(contacts).toHaveLength(1);\r\n      expect(mockGetContacts).toHaveBeenCalledWith(filters);\r\n    });\r\n\r\n    it('sollte Kontakt erstellen', async () => {\r\n      const newContact = {\r\n        name: 'Neuer Kunde',\r\n        email: 'neu@example.com',\r\n        phone: '987654321',\r\n        address: 'Neue Straße 1',\r\n        customerNumber: 'K002'\r\n      };\r\n\r\n      const createdContact = {\r\n        id: '2',\r\n        ...newContact,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n\r\n      mockCreateContact.mockResolvedValue(createdContact);\r\n\r\n      const result = await mockCreateContact(newContact);\r\n      expect(result.id).toBe('2');\r\n      expect(mockCreateContact).toHaveBeenCalledWith(newContact);\r\n    });\r\n\r\n    it('sollte Kontakt aktualisieren', async () => {\r\n      const updatedContact = {\r\n        id: '1',\r\n        name: 'Aktualisierter Kunde',\r\n        email: 'updated@example.com',\r\n        phone: '123456789',\r\n        address: 'Aktualisierte Straße 1',\r\n        customerNumber: 'K001'\r\n      };\r\n\r\n      mockUpdateContact.mockResolvedValue({\r\n        ...updatedContact,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      });\r\n\r\n      const result = await mockUpdateContact('1', updatedContact);\r\n      expect(result.name).toBe('Aktualisierter Kunde');\r\n      expect(mockUpdateContact).toHaveBeenCalledWith('1', updatedContact);\r\n    });\r\n\r\n    it('sollte Kontakt löschen', async () => {\r\n      mockDeleteContact.mockResolvedValue(true);\r\n\r\n      const result = await mockDeleteContact('1');\r\n      expect(result).toBe(true);\r\n      expect(mockDeleteContact).toHaveBeenCalledWith('1');\r\n    });\r\n  });\r\n}); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\components\\zvoove-integration\\__tests__\\Integration.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fireEvent' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'waitFor' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'antdConfig' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":25,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\r\nimport { ThemeProvider } from '@mui/material/styles';\r\nimport { createTheme } from '@mui/material/styles';\r\nimport { OrderForm } from '../ZvooveOrderForm';\r\nimport { ContactOverview } from '../ZvooveContactOverview';\r\nimport { zvooveApiService } from '../../../services/zvooveApi';\r\n\r\n// Create a test theme\r\nconst theme = createTheme();\r\n\r\n// Mock the zvooveApiService\r\njest.mock('../../../services/zvooveApi', () => ({\r\n  zvooveApiService: {\r\n    login: jest.fn(),\r\n    logout: jest.fn(),\r\n    getOrders: jest.fn(),\r\n    createOrder: jest.fn(),\r\n    getContacts: jest.fn(),\r\n    getSystemStatus: jest.fn()\r\n  }\r\n}));\r\n\r\n// Ant Design Konfiguration für Tests\r\nconst antdConfig = {\r\n  locale: {\r\n    locale: 'de_DE',\r\n    Table: {\r\n      filterTitle: 'Filter',\r\n      filterConfirm: 'OK',\r\n      filterReset: 'Zurücksetzen',\r\n      emptyText: 'Keine Daten',\r\n    },\r\n  },\r\n};\r\n\r\n// Render-Helper mit allen Providern\r\nconst renderWithProviders = (component: React.ReactElement) => {\r\n  return render(\r\n    <ThemeProvider theme={theme}>\r\n      {/* <ConfigProvider {...antdConfig}> */}\r\n        {component}\r\n      {/* </ConfigProvider> */}\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\ndescribe('Zvoove Integration Tests', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  test('✅ API Service ist verfügbar', () => {\r\n    expect(zvooveApiService).toBeDefined();\r\n    expect(typeof zvooveApiService.login).toBe('function');\r\n    expect(typeof zvooveApiService.logout).toBe('function');\r\n    expect(typeof zvooveApiService.getOrders).toBe('function');\r\n    expect(typeof zvooveApiService.createOrder).toBe('function');\r\n    expect(typeof zvooveApiService.getContacts).toBe('function');\r\n    expect(typeof zvooveApiService.getSystemStatus).toBe('function');\r\n  });\r\n\r\n  test('✅ OrderForm rendert korrekt', () => {\r\n    renderWithProviders(\r\n      <OrderForm\r\n        mode=\"order\"\r\n        onSave={() => {}}\r\n        onCancel={() => {}}\r\n      />\r\n    );\r\n\r\n    expect(screen.getByText(/Auftragserfassung/i)).toBeInTheDocument();\r\n  });\r\n\r\n  test('✅ ContactOverview rendert korrekt', () => {\r\n    const mockContacts = [];\r\n    const mockFilters = {\r\n      contactType: 'all' as const,\r\n      sortBy: 'contactNumber' as const,\r\n      sortOrder: 'asc' as const,\r\n      representative: '',\r\n      dateRange: { from: null, to: null },\r\n      parity: '',\r\n      onlyPlannedAppointments: false,\r\n      articleSumsInPrint: false,\r\n      searchText: '',\r\n      contactNumber: ''\r\n    };\r\n\r\n    renderWithProviders(\r\n      <ContactOverview\r\n        contacts={mockContacts}\r\n        filters={mockFilters}\r\n        onFilterChange={() => {}}\r\n      />\r\n    );\r\n\r\n    expect(screen.getByText(/Kontakte/i)).toBeInTheDocument();\r\n  });\r\n}); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\components\\zvoove-integration\\__tests__\\OrderForm.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\components\\zvoove-integration\\__tests__\\UIIntegration.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fireEvent' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'waitFor' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'zvooveApiService' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useZvooveStore' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\r\nimport { ThemeProvider } from '@mui/material/styles';\r\nimport { createTheme } from '@mui/material/styles';\r\nimport { OrderForm } from '../ZvooveOrderForm';\r\nimport { ContactOverview } from '../ZvooveContactOverview';\r\nimport { Navigation } from '../Navigation';\r\nimport { zvooveApiService } from '../../../services/zvooveApi';\r\nimport { useZvooveStore } from '../../../store/zvooveStore';\r\n\r\n// Create a test theme\r\nconst theme = createTheme();\r\n\r\n// Mock the zvooveApiService\r\njest.mock('../../../services/zvooveApi', () => ({\r\n  zvooveApiService: {\r\n    login: jest.fn(),\r\n    logout: jest.fn(),\r\n    getOrders: jest.fn(),\r\n    createOrder: jest.fn(),\r\n    getContacts: jest.fn(),\r\n    getSystemStatus: jest.fn()\r\n  }\r\n}));\r\n\r\n// Mock the zvooveStore\r\njest.mock('../../../store/zvooveStore', () => ({\r\n  useZvooveStore: jest.fn(() => ({\r\n    orders: [],\r\n    contacts: [],\r\n    loading: false,\r\n    error: null,\r\n    fetchOrders: jest.fn(),\r\n    fetchContacts: jest.fn(),\r\n    createOrder: jest.fn()\r\n  }))\r\n}));\r\n\r\ndescribe('Zvoove UI Integration Tests', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  test('✅ Navigation-Komponente rendert alle Haupt-Tabs', async () => {\r\n    render(\r\n      <ThemeProvider theme={theme}>\r\n        <Navigation \r\n          activeTab=\"ERFASSUNG\"\r\n          onTabChange={() => {}}\r\n        />\r\n      </ThemeProvider>\r\n    );\r\n\r\n    expect(screen.getByText(/Erfassung/i)).toBeInTheDocument();\r\n  });\r\n\r\n  test('✅ OrderForm rendert korrekt', async () => {\r\n    render(\r\n      <ThemeProvider theme={theme}>\r\n        <OrderForm \r\n          mode=\"order\"\r\n          onSave={() => {}}\r\n          onCancel={() => {}}\r\n        />\r\n      </ThemeProvider>\r\n    );\r\n\r\n    expect(screen.getByText(/Auftragserfassung/i)).toBeInTheDocument();\r\n  });\r\n\r\n  test('✅ ContactOverview rendert korrekt', async () => {\r\n    const mockContacts = [];\r\n    const mockFilters = {\r\n      contactType: 'all' as const,\r\n      sortBy: 'contactNumber' as const,\r\n      sortOrder: 'asc' as const,\r\n      representative: '',\r\n      dateRange: { from: null, to: null },\r\n      parity: '',\r\n      onlyPlannedAppointments: false,\r\n      articleSumsInPrint: false,\r\n      searchText: '',\r\n      contactNumber: ''\r\n    };\r\n\r\n    render(\r\n      <ThemeProvider theme={theme}>\r\n        <ContactOverview \r\n          contacts={mockContacts}\r\n          filters={mockFilters}\r\n          onFilterChange={() => {}}\r\n        />\r\n      </ThemeProvider>\r\n    );\r\n\r\n    expect(screen.getByText(/Kontakte/i)).toBeInTheDocument();\r\n  });\r\n}); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\jest.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\jest.setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\AIAnalyticsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\AgentProcessingOverlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\AgentSuggestion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\AnalyticsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\ApiCommunicationDemo.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'checkMiddleware' and 'loadData'. Either include them or remove the dependency array.","line":78,"column":6,"nodeType":"ArrayExpression","endLine":78,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [checkMiddleware, isAuthenticated, loadData]","fix":{"range":[1788,1805],"text":"[checkMiddleware, isAuthenticated, loadData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Typography, \r\n  Card, \r\n  Button, \r\n  Alert,\r\n  CircularProgress,\r\n  Chip,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemIcon,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem\r\n} from '@mui/material';\r\nimport {\r\n  CheckCircle as CheckCircleIcon,\r\n  Refresh as RefreshIcon,\r\n  Api as ApiIcon,\r\n  Storage as StorageIcon,\r\n  Cloud as CloudIcon,\r\n  Security as SecurityIcon,\r\n  Speed as SpeedIcon,\r\n  Add as AddIcon\r\n} from '@mui/icons-material';\r\nimport { useApi } from '../contexts/ApiContext';\r\nimport {\r\n  ObjectPageHeader,\r\n  ActionBar,\r\n  QuickViewCard,\r\n  StatusIndicator,\r\n  MessageStrip\r\n} from '../components/ui/NeuroFlowComponents';\r\n\r\nconst ApiCommunicationDemo: React.FC = () => {\r\n  const {\r\n    user,\r\n    isAuthenticated,\r\n    login,\r\n    logout,\r\n    systemStatus,\r\n    isLoading,\r\n    error,\r\n    refreshSystemStatus,\r\n    transactions,\r\n    inventory,\r\n    documents,\r\n    notifications,\r\n    getTransactions,\r\n    createTransaction,\r\n    getInventory,\r\n    createInventoryItem,\r\n    getDocuments,\r\n    getNotifications,\r\n    middlewareHealthCheck\r\n  } = useApi();\r\n\r\n  const [showLoginDialog, setShowLoginDialog] = useState(false);\r\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\r\n  const [createType, setCreateType] = useState<'transaction' | 'inventory'>('transaction');\r\n  const [loginData, setLoginData] = useState({ username: '', password: '' });\r\n  const [createData, setCreateData] = useState<any>({});\r\n  const [middlewareStatus, setMiddlewareStatus] = useState<any>(null);\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      loadData();\r\n      checkMiddleware();\r\n    }\r\n  }, [isAuthenticated]);\r\n\r\n  const loadData = async () => {\r\n    await Promise.all([\r\n      getTransactions(),\r\n      getInventory(),\r\n      getDocuments(),\r\n      getNotifications()\r\n    ]);\r\n  };\r\n\r\n  const checkMiddleware = async () => {\r\n    try {\r\n      const response = await middlewareHealthCheck();\r\n      setMiddlewareStatus(response);\r\n    } catch (err) {\r\n      console.error('Middleware check failed:', err);\r\n    }\r\n  };\r\n\r\n  const handleLogin = async () => {\r\n    const response = await login(loginData);\r\n    if (response.success) {\r\n      setShowLoginDialog(false);\r\n      setLoginData({ username: '', password: '' });\r\n    }\r\n  };\r\n\r\n  const handleLogout = async () => {\r\n    await logout();\r\n  };\r\n\r\n  const handleCreate = async () => {\r\n    if (createType === 'transaction') {\r\n      await createTransaction({\r\n        type: createData.type || 'income',\r\n        amount: parseFloat(createData.amount) || 0,\r\n        date: new Date().toISOString(),\r\n        description: createData.description || '',\r\n        user_id: user?.id || '',\r\n        status: 'pending'\r\n      });\r\n    } else if (createType === 'inventory') {\r\n      await createInventoryItem({\r\n        name: createData.name || '',\r\n        sku: createData.sku || '',\r\n        quantity: parseInt(createData.quantity) || 0,\r\n        unit_price: parseFloat(createData.unit_price) || 0,\r\n        location: createData.location || '',\r\n        category: createData.category || 'general',\r\n        status: 'in_stock'\r\n      });\r\n    }\r\n    setShowCreateDialog(false);\r\n    setCreateData({});\r\n    loadData();\r\n  };\r\n\r\n  if (!isAuthenticated) {\r\n    return (\r\n      <Box sx={{ minHeight: '100vh', bgcolor: '#F5F6F7', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n        <Card sx={{ p: 4, maxWidth: 400, width: '100%' }}>\r\n          <Box sx={{ textAlign: 'center', mb: 3 }}>\r\n            <ApiIcon sx={{ fontSize: 64, color: '#0A6ED1', mb: 2 }} />\r\n            <Typography variant=\"h4\" gutterBottom>\r\n              VALEO NeuroERP\r\n            </Typography>\r\n            <Typography variant=\"body1\" color=\"text.secondary\">\r\n              API-Kommunikation Demo\r\n            </Typography>\r\n          </Box>\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            fullWidth\r\n            size=\"large\"\r\n            onClick={() => setShowLoginDialog(true)}\r\n            startIcon={<SecurityIcon />}\r\n          >\r\n            Anmelden\r\n          </Button>\r\n\r\n          <Alert severity=\"info\" sx={{ mt: 2 }}>\r\n            Verwenden Sie die Demo-Anmeldedaten: admin/admin\r\n          </Alert>\r\n        </Card>\r\n\r\n        {/* Login Dialog */}\r\n        <Dialog open={showLoginDialog} onClose={() => setShowLoginDialog(false)} maxWidth=\"sm\" fullWidth>\r\n          <DialogTitle>Anmeldung</DialogTitle>\r\n          <DialogContent>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Benutzername\"\r\n              value={loginData.username}\r\n              onChange={(e) => setLoginData({ ...loginData, username: e.target.value })}\r\n              margin=\"normal\"\r\n            />\r\n            <TextField\r\n              fullWidth\r\n              label=\"Passwort\"\r\n              type=\"password\"\r\n              value={loginData.password}\r\n              onChange={(e) => setLoginData({ ...loginData, password: e.target.value })}\r\n              margin=\"normal\"\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={() => setShowLoginDialog(false)}>Abbrechen</Button>\r\n            <Button onClick={handleLogin} variant=\"contained\">Anmelden</Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ minHeight: '100vh', bgcolor: '#F5F6F7' }}>\r\n      {/* Header */}\r\n      <ObjectPageHeader\r\n        title=\"API-Kommunikation Demo\"\r\n        subtitle=\"Frontend ↔ Middleware ↔ Backend\"\r\n        status=\"Aktiv\"\r\n        actions={\r\n          <Box sx={{ display: 'flex', gap: 1 }}>\r\n            <Button variant=\"outlined\" onClick={handleLogout}>\r\n              Abmelden\r\n            </Button>\r\n            <Button variant=\"contained\" onClick={() => setShowCreateDialog(true)} startIcon={<AddIcon />}>\r\n              Neu erstellen\r\n            </Button>\r\n          </Box>\r\n        }\r\n      />\r\n\r\n      {/* Error Display */}\r\n      {error && (\r\n        <Box sx={{ px: 3 }}>\r\n          <MessageStrip type=\"error\" title=\"Fehler\">\r\n            {error}\r\n          </MessageStrip>\r\n        </Box>\r\n      )}\r\n\r\n      {/* Action Bar */}\r\n      <ActionBar\r\n        title=\"System-Status & Kommunikation\"\r\n        actions={[\r\n          {\r\n            label: 'Status aktualisieren',\r\n            icon: <RefreshIcon />,\r\n            onClick: () => {\r\n              refreshSystemStatus();\r\n              checkMiddleware();\r\n              loadData();\r\n            },\r\n            variant: 'outlined'\r\n          },\r\n          {\r\n            label: 'Middleware prüfen',\r\n            icon: <ApiIcon />,\r\n            onClick: checkMiddleware,\r\n            variant: 'outlined'\r\n          }\r\n        ]}\r\n      />\r\n\r\n      <Box sx={{ p: 3 }}>\r\n        {/* System Status */}\r\n        <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: '1fr 1fr' }, gap: 3, mb: 4 }}>\r\n          <QuickViewCard\r\n            title=\"Backend Status\"\r\n            icon={<StorageIcon />}\r\n          >\r\n            <Box sx={{ textAlign: 'center', py: 2 }}>\r\n              <StatusIndicator\r\n                status={systemStatus?.backend ? 'success' : 'error'}\r\n                label={systemStatus?.backend ? 'Online' : 'Offline'}\r\n                size=\"large\"\r\n              />\r\n              <Typography variant=\"body2\" sx={{ mt: 1, color: '#515559' }}>\r\n                Port 8000\r\n              </Typography>\r\n            </Box>\r\n          </QuickViewCard>\r\n\r\n          <QuickViewCard\r\n            title=\"Middleware Status\"\r\n            icon={<CloudIcon />}\r\n          >\r\n            <Box sx={{ textAlign: 'center', py: 2 }}>\r\n              <StatusIndicator\r\n                status={middlewareStatus?.success ? 'success' : 'error'}\r\n                label={middlewareStatus?.success ? 'Online' : 'Offline'}\r\n                size=\"large\"\r\n              />\r\n              <Typography variant=\"body2\" sx={{ mt: 1, color: '#515559' }}>\r\n                Port 8001\r\n              </Typography>\r\n            </Box>\r\n          </QuickViewCard>\r\n        </Box>\r\n\r\n        {/* Data Overview */}\r\n        <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', sm: '1fr 1fr', md: 'repeat(4, 1fr)' }, gap: 3, mb: 4 }}>\r\n          <QuickViewCard title=\"Transaktionen\" icon={<SpeedIcon />}>\r\n            <Box sx={{ textAlign: 'center', py: 2 }}>\r\n              <Typography variant=\"h3\" sx={{ color: '#0A6ED1', mb: 1 }}>\r\n                {transactions.length}\r\n              </Typography>\r\n              <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                Gesamt\r\n              </Typography>\r\n            </Box>\r\n          </QuickViewCard>\r\n\r\n          <QuickViewCard title=\"Inventar\" icon={<StorageIcon />}>\r\n            <Box sx={{ textAlign: 'center', py: 2 }}>\r\n              <Typography variant=\"h3\" sx={{ color: '#107C41', mb: 1 }}>\r\n                {inventory.length}\r\n              </Typography>\r\n              <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                Artikel\r\n              </Typography>\r\n            </Box>\r\n          </QuickViewCard>\r\n\r\n          <QuickViewCard title=\"Dokumente\" icon={<ApiIcon />}>\r\n            <Box sx={{ textAlign: 'center', py: 2 }}>\r\n              <Typography variant=\"h3\" sx={{ color: '#E9730C', mb: 1 }}>\r\n                {documents.length}\r\n              </Typography>\r\n              <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                Gespeichert\r\n              </Typography>\r\n            </Box>\r\n          </QuickViewCard>\r\n\r\n          <QuickViewCard title=\"Benachrichtigungen\" icon={<SecurityIcon />}>\r\n            <Box sx={{ textAlign: 'center', py: 2 }}>\r\n              <Typography variant=\"h3\" sx={{ color: '#BB0000', mb: 1 }}>\r\n                {notifications.filter(n => !n.read).length}\r\n              </Typography>\r\n              <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                Ungelesen\r\n              </Typography>\r\n            </Box>\r\n          </QuickViewCard>\r\n        </Box>\r\n\r\n        {/* Recent Data */}\r\n        <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: '1fr 1fr' }, gap: 3 }}>\r\n          <Card>\r\n            <Box sx={{ p: 2, borderBottom: '1px solid #E5E5E5' }}>\r\n              <Typography variant=\"h6\">Letzte Transaktionen</Typography>\r\n            </Box>\r\n            <List>\r\n              {transactions.slice(0, 5).map((transaction) => (\r\n                <ListItem key={transaction.id}>\r\n                  <ListItemIcon>\r\n                    <CheckCircleIcon color=\"primary\" />\r\n                  </ListItemIcon>\r\n                  <ListItemText\r\n                    primary={`${transaction.type} - ${transaction.amount}€`}\r\n                    secondary={transaction.description}\r\n                  />\r\n                  <Chip label={transaction.status} size=\"small\" />\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          </Card>\r\n\r\n          <Card>\r\n            <Box sx={{ p: 2, borderBottom: '1px solid #E5E5E5' }}>\r\n              <Typography variant=\"h6\">Inventar-Status</Typography>\r\n            </Box>\r\n            <List>\r\n              {inventory.slice(0, 5).map((item) => (\r\n                <ListItem key={item.id}>\r\n                  <ListItemIcon>\r\n                    <StorageIcon color=\"primary\" />\r\n                  </ListItemIcon>\r\n                  <ListItemText\r\n                    primary={item.name}\r\n                    secondary={`SKU: ${item.sku} - ${item.quantity} Stück`}\r\n                  />\r\n                  <Chip \r\n                    label={item.status} \r\n                    size=\"small\" \r\n                    color={item.status === 'in_stock' ? 'success' : 'warning'}\r\n                  />\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          </Card>\r\n        </Box>\r\n\r\n        {/* Loading Indicator */}\r\n        {isLoading && (\r\n          <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\r\n            <CircularProgress />\r\n          </Box>\r\n        )}\r\n      </Box>\r\n\r\n      {/* Create Dialog */}\r\n      <Dialog open={showCreateDialog} onClose={() => setShowCreateDialog(false)} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>Neuen Eintrag erstellen</DialogTitle>\r\n        <DialogContent>\r\n          <FormControl fullWidth margin=\"normal\">\r\n            <InputLabel>Typ</InputLabel>\r\n            <Select\r\n              value={createType}\r\n              onChange={(e) => setCreateType(e.target.value as 'transaction' | 'inventory')}\r\n            >\r\n              <MenuItem value=\"transaction\">Transaktion</MenuItem>\r\n              <MenuItem value=\"inventory\">Inventar-Item</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n\r\n          {createType === 'transaction' ? (\r\n            <>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Typ\"\r\n                value={createData.type || ''}\r\n                onChange={(e) => setCreateData({ ...createData, type: e.target.value })}\r\n                margin=\"normal\"\r\n              />\r\n              <TextField\r\n                fullWidth\r\n                label=\"Betrag\"\r\n                type=\"number\"\r\n                value={createData.amount || ''}\r\n                onChange={(e) => setCreateData({ ...createData, amount: e.target.value })}\r\n                margin=\"normal\"\r\n              />\r\n              <TextField\r\n                fullWidth\r\n                label=\"Beschreibung\"\r\n                value={createData.description || ''}\r\n                onChange={(e) => setCreateData({ ...createData, description: e.target.value })}\r\n                margin=\"normal\"\r\n              />\r\n            </>\r\n          ) : (\r\n            <>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Name\"\r\n                value={createData.name || ''}\r\n                onChange={(e) => setCreateData({ ...createData, name: e.target.value })}\r\n                margin=\"normal\"\r\n              />\r\n              <TextField\r\n                fullWidth\r\n                label=\"SKU\"\r\n                value={createData.sku || ''}\r\n                onChange={(e) => setCreateData({ ...createData, sku: e.target.value })}\r\n                margin=\"normal\"\r\n              />\r\n              <TextField\r\n                fullWidth\r\n                label=\"Menge\"\r\n                type=\"number\"\r\n                value={createData.quantity || ''}\r\n                onChange={(e) => setCreateData({ ...createData, quantity: e.target.value })}\r\n                margin=\"normal\"\r\n              />\r\n              <TextField\r\n                fullWidth\r\n                label=\"Einzelpreis\"\r\n                type=\"number\"\r\n                value={createData.unit_price || ''}\r\n                onChange={(e) => setCreateData({ ...createData, unit_price: e.target.value })}\r\n                margin=\"normal\"\r\n              />\r\n            </>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setShowCreateDialog(false)}>Abbrechen</Button>\r\n          <Button onClick={handleCreate} variant=\"contained\">Erstellen</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ApiCommunicationDemo; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\AssetManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\AssetManagement_MCP_NEW.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\BelegeErstellung.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\BiDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\CrmDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\CustomerManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\DataCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\DataCard_MCP_NEW.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":124,"column":6,"nodeType":"ArrayExpression","endLine":124,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [dataSource, loadData, valueField]","fix":{"range":[3592,3616],"text":"[dataSource, loadData, valueField]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":132,"column":6,"nodeType":"ArrayExpression","endLine":132,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [loadData, refreshInterval]","fix":{"range":[3822,3839],"text":"[loadData, refreshInterval]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Card, \r\n  CardContent, \r\n  Typography, \r\n  Box, \r\n  Chip,\r\n  CircularProgress,\r\n  Alert,\r\n  Tooltip\r\n} from '@mui/material';\r\nimport {\r\n  TrendingUp as TrendingUpIcon,\r\n  TrendingDown as TrendingDownIcon,\r\n  Remove as RemoveIcon,\r\n  Info as InfoIcon,\r\n  Warning as WarningIcon,\r\n  CheckCircle as CheckCircleIcon\r\n} from '@mui/icons-material';\r\nimport { TrustIndicator } from './TrustIndicator';\r\nimport type { TrustLevel } from './TrustIndicator';\r\n\r\n// MCP Integration Imports\r\nimport { useMCPData } from '../hooks/useMCPForm';\r\n\r\n// TypeScript Interfaces basierend auf MCP Schema\r\ninterface DataCardProps {\r\n  title: string;\r\n  dataSource: string; // MCP-Tabellenname\r\n  valueField: string; // Feldname für den Wert\r\n  trendField?: string; // Feldname für Trend-Berechnung\r\n  icon: string;\r\n  trustLevel: TrustLevel;\r\n  confidence: number;\r\n  refreshInterval?: number; // Auto-Refresh in Sekunden\r\n}\r\n\r\ninterface DataPoint {\r\n  value: number;\r\n  timestamp: string;\r\n  trend?: 'up' | 'down' | 'neutral';\r\n  change?: string;\r\n}\r\n\r\n/**\r\n * MCP-basierte DataCard-Komponente\r\n * Verwendet live Daten vom MCP-Server mit automatischer Trend-Berechnung\r\n */\r\nexport const DataCard_MCP_NEW: React.FC<DataCardProps> = ({\r\n  title,\r\n  dataSource,\r\n  valueField,\r\n  trendField,\r\n  icon,\r\n  trustLevel,\r\n  confidence,\r\n  refreshInterval = 300 // 5 Minuten Standard\r\n}) => {\r\n  const [currentData, setCurrentData] = useState<DataPoint | null>(null);\r\n  const [previousData, setPreviousData] = useState<DataPoint | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // MCP Hook für Daten\r\n  const dataHook = useMCPData(dataSource);\r\n\r\n  // Daten laden\r\n  const loadData = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n\r\n      const result = await dataHook.fetchData();\r\n      const data = result.data || [];\r\n\r\n      if (data.length > 0) {\r\n        // Neueste Daten\r\n        const latest = data[data.length - 1];\r\n        const currentValue = parseFloat(latest[valueField]) || 0;\r\n\r\n        // Vorherige Daten für Trend-Berechnung\r\n        const previous = data.length > 1 ? data[data.length - 2] : null;\r\n        const previousValue = previous ? parseFloat(previous[valueField]) || 0 : currentValue;\r\n\r\n        // Trend berechnen\r\n        let trend: 'up' | 'down' | 'neutral' = 'neutral';\r\n        let change = '0%';\r\n\r\n        if (previousValue !== 0) {\r\n          const changePercent = ((currentValue - previousValue) / previousValue) * 100;\r\n          change = `${changePercent > 0 ? '+' : ''}${changePercent.toFixed(1)}%`;\r\n          trend = changePercent > 0 ? 'up' : changePercent < 0 ? 'down' : 'neutral';\r\n        }\r\n\r\n        const newDataPoint: DataPoint = {\r\n          value: currentValue,\r\n          timestamp: latest.created_at || new Date().toISOString(),\r\n          trend,\r\n          change\r\n        };\r\n\r\n        setCurrentData(newDataPoint);\r\n        setPreviousData(previous ? {\r\n          value: previousValue,\r\n          timestamp: previous.created_at || new Date().toISOString()\r\n        } : null);\r\n\r\n        console.log(`✅ ${title} Daten geladen:`, newDataPoint);\r\n      } else {\r\n        setError('Keine Daten verfügbar');\r\n      }\r\n\r\n    } catch (err) {\r\n      console.error(`❌ Fehler beim Laden der ${title} Daten:`, err);\r\n      setError('Daten konnten nicht geladen werden');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Initial laden\r\n  useEffect(() => {\r\n    loadData();\r\n  }, [dataSource, valueField]);\r\n\r\n  // Auto-Refresh\r\n  useEffect(() => {\r\n    if (refreshInterval > 0) {\r\n      const interval = setInterval(loadData, refreshInterval * 1000);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [refreshInterval]);\r\n\r\n  // Trend-Konfiguration\r\n  const getTrendColor = (trend: 'up' | 'down' | 'neutral') => {\r\n    switch (trend) {\r\n      case 'up': return 'success';\r\n      case 'down': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getTrendIcon = (trend: 'up' | 'down' | 'neutral') => {\r\n    switch (trend) {\r\n      case 'up': return <TrendingUpIcon fontSize=\"small\" />;\r\n      case 'down': return <TrendingDownIcon fontSize=\"small\" />;\r\n      default: return <RemoveIcon fontSize=\"small\" />;\r\n    }\r\n  };\r\n\r\n  // Trust-Level-Konfiguration\r\n  const getTrustConfig = (level: TrustLevel) => {\r\n    switch (level) {\r\n      case 'high': return { color: 'success' as const, icon: <CheckCircleIcon />, label: 'Hoch' };\r\n      case 'medium': return { color: 'warning' as const, icon: <WarningIcon />, label: 'Mittel' };\r\n      case 'low': return { color: 'error' as const, icon: <WarningIcon />, label: 'Niedrig' };\r\n      default: return { color: 'default' as const, icon: <InfoIcon />, label: 'Unbekannt' };\r\n    }\r\n  };\r\n\r\n  // Loading-State\r\n  if (isLoading) {\r\n    return (\r\n      <Card className=\"h-full\">\r\n        <CardContent className=\"flex justify-center items-center h-32\">\r\n          <Box className=\"text-center\">\r\n            <CircularProgress size={24} className=\"mb-2\" />\r\n            <Typography variant=\"caption\" color=\"textSecondary\">\r\n              Lade {title}...\r\n            </Typography>\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  // Error-State\r\n  if (error || !currentData) {\r\n    return (\r\n      <Card className=\"h-full\">\r\n        <CardContent>\r\n          <Alert severity=\"error\" className=\"mb-2\">\r\n            <Typography variant=\"caption\">\r\n              {error || 'Keine Daten verfügbar'}\r\n            </Typography>\r\n          </Alert>\r\n          <Typography variant=\"body2\" color=\"textSecondary\">\r\n            {title}\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  const trustConfig = getTrustConfig(trustLevel);\r\n\r\n  return (\r\n    <Card className=\"h-full hover:shadow-md transition-shadow\">\r\n      <CardContent>\r\n        <Box className=\"flex items-center justify-between mb-3\">\r\n          <Box className=\"flex items-center space-x-2\">\r\n            <i className={`${icon} text-gray-400 text-lg`}></i>\r\n            <Typography variant=\"subtitle2\" color=\"textSecondary\">\r\n              {title}\r\n            </Typography>\r\n          </Box>\r\n          \r\n          {/* Trust Indicator */}\r\n          <Tooltip title={`Vertrauenslevel: ${trustConfig.label} (${confidence}%)`}>\r\n            <Box>\r\n              <TrustIndicator level={trustLevel} />\r\n            </Box>\r\n          </Tooltip>\r\n        </Box>\r\n\r\n        {/* Hauptwert */}\r\n        <Box className=\"flex items-baseline space-x-2 mb-2\">\r\n          <Typography variant=\"h4\" className=\"font-bold text-gray-900\">\r\n            {currentData.value.toLocaleString('de-DE')}\r\n          </Typography>\r\n          \r\n          {/* Trend */}\r\n          {currentData.trend && currentData.change && (\r\n            <Chip\r\n              icon={getTrendIcon(currentData.trend)}\r\n              label={currentData.change}\r\n              color={getTrendColor(currentData.trend)}\r\n              size=\"small\"\r\n              variant=\"outlined\"\r\n            />\r\n          )}\r\n        </Box>\r\n\r\n        {/* Zusätzliche Informationen */}\r\n        <Box className=\"space-y-1\">\r\n          <Typography variant=\"caption\" color=\"textSecondary\">\r\n            Letzte Aktualisierung: {new Date(currentData.timestamp).toLocaleString('de-DE')}\r\n          </Typography>\r\n          \r\n          {previousData && (\r\n            <Typography variant=\"caption\" color=\"textSecondary\">\r\n              Vorheriger Wert: {previousData.value.toLocaleString('de-DE')} \r\n              ({new Date(previousData.timestamp).toLocaleDateString('de-DE')})\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n\r\n        {/* MCP-Informationen */}\r\n        <Box className=\"mt-3 pt-2 border-t border-gray-100\">\r\n          <Typography variant=\"caption\" className=\"text-gray-500\">\r\n            <strong>Daten-Quelle:</strong> {dataSource}\r\n            <br />\r\n            <strong>Feld:</strong> {valueField}\r\n            <br />\r\n            <strong>Auto-Refresh:</strong> {refreshInterval > 0 ? `${refreshInterval}s` : 'Deaktiviert'}\r\n            <br />\r\n            <strong>MCP-Status:</strong> ✅ Live\r\n          </Typography>\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default DataCard_MCP_NEW; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\DataDogTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\DmsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\DocumentManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\DocumentsPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDocuments'. Either include it or remove the dependency array.","line":72,"column":6,"nodeType":"ArrayExpression","endLine":72,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadDocuments]","fix":{"range":[1565,1567],"text":"[loadDocuments]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Card, \r\n  Typography, \r\n  Button,\r\n  Chip,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemIcon,\r\n  ListItemSecondaryAction,\r\n  IconButton,\r\n  Tooltip,\r\n  CircularProgress,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Refresh as RefreshIcon,\r\n  Description as DescriptionIcon,\r\n  Download as DownloadIcon,\r\n  Visibility as VisibilityIcon,\r\n  FileCopy as FileCopyIcon,\r\n  Image as ImageIcon,\r\n  PictureAsPdf as PdfIcon,\r\n  InsertDriveFile as FileIcon,\r\n  FilterList as FilterListIcon\r\n} from '@mui/icons-material';\r\nimport { useApi } from '../contexts/ApiContext';\r\nimport {\r\n  ObjectPageHeader\r\n} from '../components/ui/NeuroFlowComponents';\r\n\r\ninterface DocumentFormData {\r\n  name: string;\r\n  type: string;\r\n  content: string;\r\n}\r\n\r\nconst DocumentsPage: React.FC = () => {\r\n  const {\r\n    documents,\r\n    getDocuments,\r\n    uploadDocument,\r\n    isLoading,\r\n    error\r\n  } = useApi();\r\n\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [editingDocument, setEditingDocument] = useState<any>(null);\r\n  const [formData, setFormData] = useState<DocumentFormData>({\r\n    name: '',\r\n    type: 'document',\r\n    content: ''\r\n  });\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filterType, setFilterType] = useState('all');\r\n\r\n  useEffect(() => {\r\n    loadDocuments();\r\n  }, []);\r\n\r\n  const loadDocuments = async () => {\r\n    await getDocuments();\r\n  };\r\n\r\n  const handleSubmit = async (formData: DocumentFormData) => {\r\n    try {\r\n      if (editingDocument) {\r\n        console.log('Update document:', editingDocument.id, formData);\r\n      } else {\r\n        const file = new File([''], formData.name, { type: 'text/plain' });\r\n        await uploadDocument(file, {\r\n          ...formData,\r\n          user_id: 'current-user-id' // TODO: Get from context\r\n        });\r\n      }\r\n      setOpenDialog(false);\r\n      resetForm();\r\n      loadDocuments();\r\n    } catch (err) {\r\n      console.error('Error saving document:', err);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (id: string) => {\r\n    if (window.confirm('Möchten Sie dieses Dokument wirklich löschen?')) {\r\n      // TODO: Implement deleteDocument\r\n      console.log('Delete document:', id);\r\n      loadDocuments();\r\n    }\r\n  };\r\n\r\n  const handleEdit = (document: any) => {\r\n    setEditingDocument(document);\r\n    setFormData({\r\n      name: document.name,\r\n      type: document.type,\r\n      content: document.content\r\n    });\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCreate = () => {\r\n    setEditingDocument(null);\r\n    setFormData({\r\n      name: '',\r\n      type: 'document',\r\n      content: ''\r\n    });\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      name: '',\r\n      type: 'document',\r\n      content: ''\r\n    });\r\n    setEditingDocument(null);\r\n  };\r\n\r\n  const filteredDocuments = documents.filter(doc => {\r\n    const matchesSearch = doc.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         doc.type.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesType = filterType === 'all' || doc.type === filterType;\r\n    return matchesSearch && matchesType;\r\n  });\r\n\r\n  const getTypeIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'pdf': return <PdfIcon color=\"error\" />;\r\n      case 'image': return <ImageIcon color=\"primary\" />;\r\n      case 'text': return <DescriptionIcon color=\"info\" />;\r\n      default: return <FileIcon />;\r\n    }\r\n  };\r\n\r\n  const getTypeColor = (type: string) => {\r\n    switch (type) {\r\n      case 'pdf': return 'error';\r\n      case 'image': return 'primary';\r\n      case 'text': return 'info';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const totalDocuments = filteredDocuments.length;\r\n  const pdfDocuments = filteredDocuments.filter(doc => doc.type === 'pdf').length;\r\n  const imageDocuments = filteredDocuments.filter(doc => doc.type === 'image').length;\r\n  const textDocuments = filteredDocuments.filter(doc => doc.type === 'text').length;\r\n\r\n  const handleResetFilters = () => {\r\n    setSearchTerm('');\r\n    setFilterType('all');\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ minHeight: '100vh', bgcolor: '#F5F6F7' }}>\r\n      {/* Header */}\r\n      <ObjectPageHeader\r\n        title=\"Dokumentenverwaltung\"\r\n        subtitle=\"Zentrale Verwaltung aller Dokumente und Dateien\"\r\n        status=\"Live-Daten\"\r\n        actions={\r\n          <Box sx={{ display: 'flex', gap: 1 }}>\r\n            <Button\r\n              variant=\"outlined\"\r\n              startIcon={<RefreshIcon />}\r\n              onClick={loadDocuments}\r\n              disabled={isLoading}\r\n            >\r\n              Aktualisieren\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<AddIcon />}\r\n              onClick={handleCreate}\r\n            >\r\n              Neues Dokument\r\n            </Button>\r\n          </Box>\r\n        }\r\n      />\r\n\r\n      {/* Error Display */}\r\n      {error && (\r\n        <Box sx={{ px: 3 }}>\r\n          <Typography variant=\"body1\" color=\"error\">{error}</Typography>\r\n        </Box>\r\n      )}\r\n\r\n      {/* Action Bar */}\r\n      <Box sx={{ p: 3 }}>\r\n        {/* Summary Cards */}\r\n        <Box className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\r\n          <Card sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n              <DescriptionIcon sx={{ fontSize: 40, color: '#0A6ED1' }} />\r\n              <Box>\r\n                <Typography variant=\"h4\" sx={{ color: '#0A6ED1', fontWeight: 600 }}>\r\n                  {totalDocuments}\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                  Gesamte Dokumente\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n\r\n          <Card sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n              <PdfIcon sx={{ fontSize: 40, color: '#BB0000' }} />\r\n              <Box>\r\n                <Typography variant=\"h4\" sx={{ color: '#BB0000', fontWeight: 600 }}>\r\n                  {pdfDocuments}\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                  PDF-Dokumente\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n\r\n          <Card sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n              <ImageIcon sx={{ fontSize: 40, color: '#107C41' }} />\r\n              <Box>\r\n                <Typography variant=\"h4\" sx={{ color: '#107C41', fontWeight: 600 }}>\r\n                  {imageDocuments}\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                  Bilder\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n\r\n          <Card sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n              <FileIcon sx={{ fontSize: 40, color: '#E9730C' }} />\r\n              <Box>\r\n                <Typography variant=\"h4\" sx={{ color: '#E9730C', fontWeight: 600 }}>\r\n                  {textDocuments}\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                  Text-Dokumente\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n        </Box>\r\n\r\n        {/* Filters */}\r\n        <Box sx={{ p: 3, pb: 0 }}>\r\n          <Card sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 3, flexWrap: 'wrap' }}>\r\n              <Typography variant=\"h6\" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                <FilterListIcon />\r\n                Filter\r\n              </Typography>\r\n              \r\n              <TextField\r\n                label=\"Suche\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n                size=\"small\"\r\n                sx={{ minWidth: 200 }}\r\n              />\r\n              \r\n              <FormControl size=\"small\" sx={{ minWidth: 150 }}>\r\n                <InputLabel>Typ</InputLabel>\r\n                <Select\r\n                  value={filterType}\r\n                  onChange={(e) => setFilterType(e.target.value)}\r\n                  label=\"Typ\"\r\n                >\r\n                  <MenuItem value=\"all\">Alle Typen</MenuItem>\r\n                  <MenuItem value=\"document\">Dokument</MenuItem>\r\n                  <MenuItem value=\"report\">Bericht</MenuItem>\r\n                  <MenuItem value=\"contract\">Vertrag</MenuItem>\r\n                  <MenuItem value=\"invoice\">Rechnung</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n              \r\n              <Button\r\n                variant=\"outlined\"\r\n                onClick={handleResetFilters}\r\n                size=\"small\"\r\n              >\r\n                Filter zurücksetzen\r\n              </Button>\r\n            </Box>\r\n          </Card>\r\n        </Box>\r\n\r\n        {/* Documents List */}\r\n        <Card>\r\n          <List>\r\n            {filteredDocuments.map((document) => (\r\n              <ListItem key={document.id} divider>\r\n                <ListItemIcon>\r\n                  {getTypeIcon(document.type)}\r\n                </ListItemIcon>\r\n                <ListItemText\r\n                  primary={\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n                      <Typography variant=\"body1\" sx={{ fontWeight: 600 }}>\r\n                        {document.name}\r\n                      </Typography>\r\n                      <Box sx={{ display: 'flex', gap: 1, mb: 1 }}>\r\n                        <Chip\r\n                          label={document.type}\r\n                          size=\"small\"\r\n                          color={getTypeColor(document.type) as any}\r\n                        />\r\n                      </Box>\r\n                    </Box>\r\n                  }\r\n                  secondary={\r\n                    <Box>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\r\n                        {document.content.substring(0, 100)}...\r\n                      </Typography>\r\n                      <Typography variant=\"caption\" color=\"text.secondary\">\r\n                        Erstellt: {new Date(document.created_at).toLocaleDateString('de-DE')}\r\n                      </Typography>\r\n                    </Box>\r\n                  }\r\n                />\r\n                <ListItemSecondaryAction>\r\n                  <Box sx={{ display: 'flex', gap: 1 }}>\r\n                    <Tooltip title=\"Anzeigen\">\r\n                      <IconButton size=\"small\">\r\n                        <VisibilityIcon />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Herunterladen\">\r\n                      <IconButton size=\"small\">\r\n                        <DownloadIcon />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Kopieren\">\r\n                      <IconButton size=\"small\">\r\n                        <FileCopyIcon />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Bearbeiten\">\r\n                      <IconButton\r\n                        size=\"small\"\r\n                        onClick={() => handleEdit(document)}\r\n                      >\r\n                        <EditIcon />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Löschen\">\r\n                      <IconButton\r\n                        size=\"small\"\r\n                        color=\"error\"\r\n                        onClick={() => handleDelete(document.id)}\r\n                      >\r\n                        <DeleteIcon />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                  </Box>\r\n                </ListItemSecondaryAction>\r\n              </ListItem>\r\n            ))}\r\n            {filteredDocuments.length === 0 && (\r\n              <ListItem>\r\n                <ListItemText\r\n                  primary={\r\n                    <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" sx={{ py: 4 }}>\r\n                      Keine Dokumente gefunden\r\n                    </Typography>\r\n                  }\r\n                />\r\n              </ListItem>\r\n            )}\r\n          </List>\r\n        </Card>\r\n      </Box>\r\n\r\n      {/* Create/Edit Dialog */}\r\n      <Dialog open={openDialog} onClose={() => setOpenDialog(false)} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>\r\n          {editingDocument ? 'Dokument bearbeiten' : 'Neues Dokument'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ pt: 2 }}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Dokumentname\"\r\n              value={formData.name}\r\n              onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n              margin=\"normal\"\r\n              required\r\n            />\r\n\r\n            <Box className=\"grid grid-cols-1 gap-4\">\r\n              <FormControl fullWidth sx={{ mb: 2 }}>\r\n                <InputLabel>Typ</InputLabel>\r\n                <Select\r\n                  value={formData.type}\r\n                  onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n                  label=\"Typ\"\r\n                >\r\n                  <MenuItem value=\"document\">Dokument</MenuItem>\r\n                  <MenuItem value=\"report\">Bericht</MenuItem>\r\n                  <MenuItem value=\"contract\">Vertrag</MenuItem>\r\n                  <MenuItem value=\"invoice\">Rechnung</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Box>\r\n\r\n            <TextField\r\n              fullWidth\r\n              label=\"Inhalt\"\r\n              value={formData.content}\r\n              onChange={(e) => setFormData({ ...formData, content: e.target.value })}\r\n              margin=\"normal\"\r\n              multiline\r\n              rows={8}\r\n              required\r\n            />\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenDialog(false)}>Abbrechen</Button>\r\n          <Button onClick={() => handleSubmit(formData)} variant=\"contained\">\r\n            {editingDocument ? 'Aktualisieren' : 'Erstellen'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Loading Overlay */}\r\n      {isLoading && (\r\n        <Box sx={{ \r\n          position: 'fixed', \r\n          top: 0, \r\n          left: 0, \r\n          right: 0, \r\n          bottom: 0, \r\n          bgcolor: 'rgba(0,0,0,0.3)', \r\n          display: 'flex', \r\n          alignItems: 'center', \r\n          justifyContent: 'center',\r\n          zIndex: 9999\r\n        }}>\r\n          <CircularProgress />\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default DocumentsPage; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\FibuDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\FinanceManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\FinanzFormular.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\HelpDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\Input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\InventoryPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadInventory'. Either include it or remove the dependency array.","line":87,"column":6,"nodeType":"ArrayExpression","endLine":87,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadInventory]","fix":{"range":[1903,1905],"text":"[loadInventory]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Card, \r\n  Typography, \r\n  Button,\r\n  Chip,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n  Tooltip,\r\n  CircularProgress,\r\n  TablePagination,\r\n  InputAdornment,\r\n  LinearProgress\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Search as SearchIcon,\r\n  Refresh as RefreshIcon,\r\n  Inventory as InventoryIcon,\r\n  Warning as WarningIcon,\r\n  CheckCircle as CheckCircleIcon,\r\n  Error as ErrorIcon,\r\n  LocationOn as LocationIcon\r\n} from '@mui/icons-material';\r\nimport { useApi } from '../contexts/ApiContext';\r\nimport {\r\n  ObjectPageHeader,\r\n  ActionBar,\r\n  MessageStrip\r\n} from '../components/ui/NeuroFlowComponents';\r\n\r\ninterface InventoryFormData {\r\n  name: string;\r\n  sku: string;\r\n  quantity: number;\r\n  unit_price: number;\r\n  location: string;\r\n  category: string;\r\n}\r\n\r\nconst InventoryPage: React.FC = () => {\r\n  const {\r\n    inventory,\r\n    getInventory,\r\n    createInventoryItem,\r\n    updateInventoryItem,\r\n    isLoading,\r\n    error\r\n  } = useApi();\r\n\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [editingItem, setEditingItem] = useState<any>(null);\r\n  const [formData, setFormData] = useState<InventoryFormData>({\r\n    name: '',\r\n    sku: '',\r\n    quantity: 0,\r\n    unit_price: 0,\r\n    location: '',\r\n    category: 'general'\r\n  });\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [filterCategory, setFilterCategory] = useState('all');\r\n  const [filterStatus, setFilterStatus] = useState('all');\r\n\r\n  useEffect(() => {\r\n    loadInventory();\r\n  }, []);\r\n\r\n  const loadInventory = async () => {\r\n    await getInventory();\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      if (editingItem) {\r\n        await updateInventoryItem(editingItem.id, formData);\r\n      } else {\r\n        await createInventoryItem({\r\n          ...formData,\r\n          status: 'in_stock'\r\n        });\r\n      }\r\n      setOpenDialog(false);\r\n      resetForm();\r\n      loadInventory();\r\n    } catch (err) {\r\n      console.error('Error saving inventory item:', err);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (id: string) => {\r\n    if (window.confirm('Möchten Sie diesen Artikel wirklich löschen?')) {\r\n      // TODO: Implement deleteInventoryItem\r\n      console.log('Delete inventory item:', id);\r\n      loadInventory();\r\n    }\r\n  };\r\n\r\n  const handleEdit = (item: any) => {\r\n    setEditingItem(item);\r\n    setFormData({\r\n      name: item.name,\r\n      sku: item.sku,\r\n      quantity: item.quantity,\r\n      unit_price: item.unit_price,\r\n      location: item.location || '',\r\n      category: item.category\r\n    });\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      name: '',\r\n      sku: '',\r\n      quantity: 0,\r\n      unit_price: 0,\r\n      location: '',\r\n      category: 'general'\r\n    });\r\n    setEditingItem(null);\r\n  };\r\n\r\n  const filteredInventory = inventory.filter(item => {\r\n    const matchesSearch = item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         item.sku.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         item.location?.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesCategory = filterCategory === 'all' || item.category === filterCategory;\r\n    const matchesStatus = filterStatus === 'all' || item.status === filterStatus;\r\n    return matchesSearch && matchesCategory && matchesStatus;\r\n  });\r\n\r\n  const paginatedInventory = filteredInventory.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'in_stock': return 'success';\r\n      case 'low_stock': return 'warning';\r\n      case 'out_of_stock': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'in_stock': return <CheckCircleIcon color=\"success\" />;\r\n      case 'low_stock': return <WarningIcon color=\"warning\" />;\r\n      case 'out_of_stock': return <ErrorIcon color=\"error\" />;\r\n      default: return <InventoryIcon />;\r\n    }\r\n  };\r\n\r\n  const getStatusText = (status: string) => {\r\n    switch (status) {\r\n      case 'in_stock': return 'Verfügbar';\r\n      case 'low_stock': return 'Niedrig';\r\n      case 'out_of_stock': return 'Nicht verfügbar';\r\n      default: return status;\r\n    }\r\n  };\r\n\r\n  const totalValue = filteredInventory.reduce((sum, item) => sum + (item.quantity * item.unit_price), 0);\r\n  const totalItems = filteredInventory.reduce((sum, item) => sum + item.quantity, 0);\r\n  const lowStockItems = filteredInventory.filter(item => item.status === 'low_stock').length;\r\n  const outOfStockItems = filteredInventory.filter(item => item.status === 'out_of_stock').length;\r\n\r\n  return (\r\n    <Box sx={{ minHeight: '100vh', bgcolor: '#F5F6F7' }}>\r\n      {/* Header */}\r\n      <ObjectPageHeader\r\n        title=\"Inventar\"\r\n        subtitle=\"Verwaltung aller Lagerbestände\"\r\n        status={`${filteredInventory.length} Artikel`}\r\n        actions={\r\n          <Box sx={{ display: 'flex', gap: 1 }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<AddIcon />}\r\n              onClick={() => setOpenDialog(true)}\r\n            >\r\n              Neuer Artikel\r\n            </Button>\r\n            <Button\r\n              variant=\"outlined\"\r\n              startIcon={<RefreshIcon />}\r\n              onClick={loadInventory}\r\n              disabled={isLoading}\r\n            >\r\n              Aktualisieren\r\n            </Button>\r\n          </Box>\r\n        }\r\n      />\r\n\r\n      {/* Error Display */}\r\n      {error && (\r\n        <Box sx={{ px: 3 }}>\r\n          <MessageStrip type=\"error\" title=\"Fehler\">\r\n            {error}\r\n          </MessageStrip>\r\n        </Box>\r\n      )}\r\n\r\n      {/* Action Bar */}\r\n      <ActionBar\r\n        title=\"Inventarverwaltung\"\r\n        actions={[\r\n          {\r\n            label: 'Filter zurücksetzen',\r\n            onClick: () => {\r\n              setSearchTerm('');\r\n              setFilterCategory('all');\r\n              setFilterStatus('all');\r\n            },\r\n            variant: 'outlined'\r\n          }\r\n        ]}\r\n      />\r\n\r\n      <Box sx={{ p: 3 }}>\r\n        {/* Summary Cards */}\r\n        <Box className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\r\n          <Card sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n              <InventoryIcon sx={{ fontSize: 40, color: '#0A6ED1' }} />\r\n              <Box>\r\n                <Typography variant=\"h4\" sx={{ color: '#0A6ED1', fontWeight: 600 }}>\r\n                  {filteredInventory.length}\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                  Artikel\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n\r\n          <Card sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n              <CheckCircleIcon sx={{ fontSize: 40, color: '#107C41' }} />\r\n              <Box>\r\n                <Typography variant=\"h4\" sx={{ color: '#107C41', fontWeight: 600 }}>\r\n                  {totalItems}\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                  Gesamtbestand\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n\r\n          <Card sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n              <WarningIcon sx={{ fontSize: 40, color: '#E9730C' }} />\r\n              <Box>\r\n                <Typography variant=\"h4\" sx={{ color: '#E9730C', fontWeight: 600 }}>\r\n                  {lowStockItems}\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                  Niedriger Bestand\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n\r\n          <Card sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n              <ErrorIcon sx={{ fontSize: 40, color: '#BB0000' }} />\r\n              <Box>\r\n                <Typography variant=\"h4\" sx={{ color: '#BB0000', fontWeight: 600 }}>\r\n                  {outOfStockItems}\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                  Nicht verfügbar\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n        </Box>\r\n\r\n        {/* Filters */}\r\n        <Card sx={{ p: 3, mb: 3 }}>\r\n          <Box className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n            <TextField\r\n              fullWidth\r\n              label=\"Suchen\"\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <SearchIcon />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n            <FormControl fullWidth>\r\n              <InputLabel>Kategorie</InputLabel>\r\n              <Select\r\n                value={filterCategory}\r\n                onChange={(e) => setFilterCategory(e.target.value)}\r\n                label=\"Kategorie\"\r\n              >\r\n                <MenuItem value=\"all\">Alle</MenuItem>\r\n                <MenuItem value=\"general\">Allgemein</MenuItem>\r\n                <MenuItem value=\"electronics\">Elektronik</MenuItem>\r\n                <MenuItem value=\"office\">Büro</MenuItem>\r\n                <MenuItem value=\"tools\">Werkzeuge</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Status</InputLabel>\r\n              <Select\r\n                value={filterStatus}\r\n                onChange={(e) => setFilterStatus(e.target.value)}\r\n                label=\"Status\"\r\n              >\r\n                <MenuItem value=\"all\">Alle</MenuItem>\r\n                <MenuItem value=\"in_stock\">Verfügbar</MenuItem>\r\n                <MenuItem value=\"low_stock\">Niedrig</MenuItem>\r\n                <MenuItem value=\"out_of_stock\">Nicht verfügbar</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n              <Typography variant=\"h6\" sx={{ color: '#0A6ED1' }}>\r\n                Gesamtwert: {totalValue.toFixed(2)}€\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n        </Card>\r\n\r\n        {/* Data Table */}\r\n        <Card>\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow sx={{ bgcolor: '#F5F6F7' }}>\r\n                  <TableCell>Artikel</TableCell>\r\n                  <TableCell>SKU</TableCell>\r\n                  <TableCell>Bestand</TableCell>\r\n                  <TableCell>Einzelpreis</TableCell>\r\n                  <TableCell>Gesamtwert</TableCell>\r\n                  <TableCell>Standort</TableCell>\r\n                  <TableCell>Status</TableCell>\r\n                  <TableCell align=\"right\">Aktionen</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {paginatedInventory.map((item) => (\r\n                  <TableRow key={item.id} hover>\r\n                    <TableCell>\r\n                      <Box>\r\n                        <Typography variant=\"body2\" sx={{ fontWeight: 600 }}>\r\n                          {item.name}\r\n                        </Typography>\r\n                        <Typography variant=\"caption\" color=\"text.secondary\">\r\n                          {item.category}\r\n                        </Typography>\r\n                      </Box>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\" sx={{ fontFamily: 'monospace' }}>\r\n                        {item.sku}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                        <Typography variant=\"body2\" sx={{ fontWeight: 600 }}>\r\n                          {item.quantity}\r\n                        </Typography>\r\n                        {item.status === 'low_stock' && (\r\n                          <LinearProgress \r\n                            variant=\"determinate\" \r\n                            value={Math.min((item.quantity / 10) * 100, 100)} \r\n                            sx={{ width: 50, height: 4 }}\r\n                          />\r\n                        )}\r\n                      </Box>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\">\r\n                        {item.unit_price.toFixed(2)}€\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\" sx={{ fontWeight: 600, color: '#0A6ED1' }}>\r\n                        {(item.quantity * item.unit_price).toFixed(2)}€\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                        <LocationIcon fontSize=\"small\" color=\"action\" />\r\n                        <Typography variant=\"body2\">\r\n                          {item.location || '-'}\r\n                        </Typography>\r\n                      </Box>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                        {getStatusIcon(item.status)}\r\n                        <Chip\r\n                          label={getStatusText(item.status)}\r\n                          size=\"small\"\r\n                          color={getStatusColor(item.status) as any}\r\n                        />\r\n                      </Box>\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                      <Box sx={{ display: 'flex', gap: 1 }}>\r\n                        <Tooltip title=\"Bearbeiten\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => handleEdit(item)}\r\n                          >\r\n                            <EditIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Löschen\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            color=\"error\"\r\n                            onClick={() => handleDelete(item.id)}\r\n                          >\r\n                            <DeleteIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </Box>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n                {paginatedInventory.length === 0 && (\r\n                  <TableRow>\r\n                    <TableCell colSpan={8} align=\"center\" sx={{ py: 4 }}>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Keine Artikel gefunden\r\n                      </Typography>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          \r\n          <TablePagination\r\n            component=\"div\"\r\n            count={filteredInventory.length}\r\n            page={page}\r\n            onPageChange={(_, newPage) => setPage(newPage)}\r\n            rowsPerPage={rowsPerPage}\r\n            onRowsPerPageChange={(e) => {\r\n              setRowsPerPage(parseInt(e.target.value, 10));\r\n              setPage(0);\r\n            }}\r\n            labelRowsPerPage=\"Zeilen pro Seite:\"\r\n            labelDisplayedRows={({ from, to, count }) => `${from}-${to} von ${count}`}\r\n          />\r\n        </Card>\r\n      </Box>\r\n\r\n      {/* Create/Edit Dialog */}\r\n      <Dialog open={openDialog} onClose={() => setOpenDialog(false)} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>\r\n          {editingItem ? 'Artikel bearbeiten' : 'Neuer Artikel'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ pt: 2 }}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Artikelname\"\r\n              value={formData.name}\r\n              onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n              margin=\"normal\"\r\n              required\r\n            />\r\n\r\n            <TextField\r\n              fullWidth\r\n              label=\"SKU\"\r\n              value={formData.sku}\r\n              onChange={(e) => setFormData({ ...formData, sku: e.target.value })}\r\n              margin=\"normal\"\r\n              required\r\n            />\r\n\r\n            <Box className=\"grid grid-cols-2 gap-4\">\r\n              <TextField\r\n                fullWidth\r\n                label=\"Menge\"\r\n                type=\"number\"\r\n                value={formData.quantity}\r\n                onChange={(e) => setFormData({ ...formData, quantity: parseInt(e.target.value) || 0 })}\r\n                margin=\"normal\"\r\n                required\r\n              />\r\n\r\n              <TextField\r\n                fullWidth\r\n                label=\"Einzelpreis\"\r\n                type=\"number\"\r\n                value={formData.unit_price}\r\n                onChange={(e) => setFormData({ ...formData, unit_price: parseFloat(e.target.value) || 0 })}\r\n                margin=\"normal\"\r\n                required\r\n                InputProps={{\r\n                  endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n                }}\r\n              />\r\n            </Box>\r\n\r\n            <TextField\r\n              fullWidth\r\n              label=\"Standort\"\r\n              value={formData.location}\r\n              onChange={(e) => setFormData({ ...formData, location: e.target.value })}\r\n              margin=\"normal\"\r\n            />\r\n\r\n            <FormControl fullWidth margin=\"normal\">\r\n              <InputLabel>Kategorie</InputLabel>\r\n              <Select\r\n                value={formData.category}\r\n                onChange={(e) => setFormData({ ...formData, category: e.target.value })}\r\n                label=\"Kategorie\"\r\n              >\r\n                <MenuItem value=\"general\">Allgemein</MenuItem>\r\n                <MenuItem value=\"electronics\">Elektronik</MenuItem>\r\n                <MenuItem value=\"office\">Büro</MenuItem>\r\n                <MenuItem value=\"tools\">Werkzeuge</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenDialog(false)}>Abbrechen</Button>\r\n          <Button onClick={handleSubmit} variant=\"contained\">\r\n            {editingItem ? 'Aktualisieren' : 'Erstellen'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Loading Overlay */}\r\n      {isLoading && (\r\n        <Box sx={{ \r\n          position: 'fixed', \r\n          top: 0, \r\n          left: 0, \r\n          right: 0, \r\n          bottom: 0, \r\n          bgcolor: 'rgba(0,0,0,0.3)', \r\n          display: 'flex', \r\n          alignItems: 'center', \r\n          justifyContent: 'center',\r\n          zIndex: 9999\r\n        }}>\r\n          <CircularProgress />\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default InventoryPage; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\InvoicesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\InvoicesPage_MCP_NEW.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\KundenFormular.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\LagerDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\LandingPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'mockBIParameters'. Either include it or remove the dependency array.","line":321,"column":6,"nodeType":"ArrayExpression","endLine":321,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [mockBIParameters]","fix":{"range":[9652,9654],"text":"[mockBIParameters]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Card, \r\n  Typography, \r\n  Button,\r\n  Grid,\r\n  Container,\r\n  Tabs,\r\n  Tab,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  Chip,\r\n  Avatar,\r\n  Divider,\r\n  Paper,\r\n  IconButton,\r\n  Tooltip,\r\n  LinearProgress,\r\n  Badge,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Rating,\r\n  Alert,\r\n  Breadcrumbs,\r\n  Link,\r\n  AppBar,\r\n  Toolbar,\r\n  Menu,\r\n  MenuItem as MenuItemType,\r\n  Switch,\r\n  FormControlLabel,\r\n  Drawer,\r\n  ListItemButton,\r\n  InputAdornment,\r\n  Autocomplete\r\n} from '@mui/material';\r\nimport {\r\n  Dashboard as DashboardIcon,\r\n  Book as BookIcon,\r\n  School as SchoolIcon,\r\n  Help as HelpIcon,\r\n  Search as SearchIcon,\r\n  PlayArrow as PlayIcon,\r\n  CheckCircle as CheckCircleIcon,\r\n  ExpandMore as ExpandMoreIcon,\r\n  Person as PersonIcon,\r\n  Business as BusinessIcon,\r\n  Analytics as AnalyticsIcon,\r\n  Inventory as InventoryIcon,\r\n  Assignment as AssignmentIcon,\r\n  VideoLibrary as VideoIcon,\r\n  Article as ArticleIcon,\r\n  Quiz as QuizIcon,\r\n  Star as StarIcon,\r\n  TrendingUp as TrendingUpIcon,\r\n  Security as SecurityIcon,\r\n  Support as SupportIcon,\r\n  Notifications as NotificationsIcon,\r\n  Settings as SettingsIcon,\r\n  KeyboardArrowRight as ArrowRightIcon,\r\n  KeyboardArrowLeft as ArrowLeftIcon,\r\n  Bookmark as BookmarkIcon,\r\n  Share as ShareIcon,\r\n  Download as DownloadIcon,\r\n  Print as PrintIcon,\r\n  Email as EmailIcon,\r\n  Phone as PhoneIcon,\r\n  LocationOn as LocationIcon,\r\n  AccessTime as TimeIcon,\r\n  Group as GroupIcon,\r\n  Work as WorkIcon,\r\n  Code as CodeIcon,\r\n  Build as BuildIcon,\r\n  Storage as StorageIcon,\r\n  Cloud as CloudIcon,\r\n  Speed as SpeedIcon,\r\n  Verified as VerifiedIcon,\r\n  Psychology as PsychologyIcon,\r\n  AutoAwesome as AutoAwesomeIcon,\r\n  AccountCircle as AccountCircleIcon,\r\n  Brightness4 as DarkModeIcon,\r\n  Brightness7 as LightModeIcon,\r\n  Favorite as FavoriteIcon,\r\n  FavoriteBorder as FavoriteBorderIcon,\r\n  Logout as LogoutIcon,\r\n  Login as LoginIcon,\r\n  Menu as MenuIcon,\r\n  BugReport as BugReportIcon,\r\n  Close as CloseIcon,\r\n  BarChart as BarChartIcon,\r\n  Timeline as TimelineIcon,\r\n  ShowChart as ShowChartIcon\r\n} from '@mui/icons-material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { Last9Test } from '../components/DataDogTest';\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface LearningModule {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  duration: string;\r\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\r\n  category: string;\r\n  completed: boolean;\r\n  progress: number;\r\n  rating: number;\r\n  instructor: string;\r\n  videoUrl?: string;\r\n  materials: string[];\r\n}\r\n\r\ninterface DocumentationItem {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  category: string;\r\n  tags: string[];\r\n  lastUpdated: string;\r\n  author: string;\r\n  views: number;\r\n  rating: number;\r\n  content: string;\r\n}\r\n\r\ninterface FavoriteItem {\r\n  id: string;\r\n  title: string;\r\n  type: 'menu' | 'bi' | 'parameter';\r\n  path: string;\r\n  icon: React.ReactNode;\r\n  category: string;\r\n}\r\n\r\ninterface BIParameter {\r\n  id: string;\r\n  name: string;\r\n  value: number;\r\n  unit: string;\r\n  trend: 'up' | 'down' | 'stable';\r\n  target: number;\r\n  category: string;\r\n}\r\n\r\nconst LandingPage: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const { user, isAuthenticated, logout } = useAuth();\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedCategory, setSelectedCategory] = useState('all');\r\n  const [openVideoDialog, setOpenVideoDialog] = useState(false);\r\n  const [selectedVideo, setSelectedVideo] = useState<string>('');\r\n  const [darkMode, setDarkMode] = useState(false);\r\n  const [settingsOpen, setSettingsOpen] = useState(false);\r\n  const [favorites, setFavorites] = useState<FavoriteItem[]>([]);\r\n  const [biParameters, setBiParameters] = useState<BIParameter[]>([]);\r\n  const [searchAnchorEl, setSearchAnchorEl] = useState<null | HTMLElement>(null);\r\n  const [userMenuAnchorEl, setUserMenuAnchorEl] = useState<null | HTMLElement>(null);\r\n  const [globalSearchTerm, setGlobalSearchTerm] = useState('');\r\n\r\n  // Mock-Daten für Lernmodule\r\n  const learningModules: LearningModule[] = [\r\n    {\r\n      id: '1',\r\n      title: 'VALEO NeuroERP Grundlagen',\r\n      description: 'Lernen Sie die Grundfunktionen des ERP-Systems kennen',\r\n      duration: '45 Min',\r\n      difficulty: 'beginner',\r\n      category: 'Grundlagen',\r\n      completed: false,\r\n      progress: 0,\r\n      rating: 4.8,\r\n      instructor: 'Dr. Anna Schmidt',\r\n      videoUrl: 'https://example.com/video1',\r\n      materials: ['PDF-Anleitung', 'Übungsdateien', 'Quiz']\r\n    },\r\n    {\r\n      id: '2',\r\n      title: 'Datenverwaltung & Analytics',\r\n      description: 'Erweiterte Datenanalyse und Reporting-Funktionen',\r\n      duration: '60 Min',\r\n      difficulty: 'intermediate',\r\n      category: 'Analytics',\r\n      completed: false,\r\n      progress: 25,\r\n      rating: 4.6,\r\n      instructor: 'Prof. Michael Weber',\r\n      videoUrl: 'https://example.com/video2',\r\n      materials: ['Datenbeispiele', 'Analytics-Tools', 'Fallstudien']\r\n    },\r\n    {\r\n      id: '3',\r\n      title: 'KI-gestützte Entscheidungsfindung',\r\n      description: 'Nutzen Sie KI-Algorithmen für bessere Geschäftsentscheidungen',\r\n      duration: '90 Min',\r\n      difficulty: 'advanced',\r\n      category: 'KI & ML',\r\n      completed: false,\r\n      progress: 0,\r\n      rating: 4.9,\r\n      instructor: 'Dr. Sarah Müller',\r\n      videoUrl: 'https://example.com/video3',\r\n      materials: ['KI-Modelle', 'Datenbanken', 'API-Dokumentation']\r\n    },\r\n    {\r\n      id: '4',\r\n      title: 'Prozessoptimierung',\r\n      description: 'Optimieren Sie Ihre Geschäftsprozesse mit NeuroERP',\r\n      duration: '75 Min',\r\n      difficulty: 'intermediate',\r\n      category: 'Prozesse',\r\n      completed: true,\r\n      progress: 100,\r\n      rating: 4.7,\r\n      instructor: 'Ing. Thomas Fischer',\r\n      videoUrl: 'https://example.com/video4',\r\n      materials: ['Prozessdiagramme', 'Optimierungstools', 'Best Practices']\r\n    }\r\n  ];\r\n\r\n  // Mock-Daten für Dokumentation\r\n  const documentationItems: DocumentationItem[] = [\r\n    {\r\n      id: '1',\r\n      title: 'Installation & Setup Guide',\r\n      description: 'Schritt-für-Schritt Anleitung zur Installation von VALEO NeuroERP',\r\n      category: 'Installation',\r\n      tags: ['Setup', 'Installation', 'Konfiguration'],\r\n      lastUpdated: '2024-01-15',\r\n      author: 'System Administration',\r\n      views: 1247,\r\n      rating: 4.8,\r\n      content: 'Detaillierte Installationsanleitung...'\r\n    },\r\n    {\r\n      id: '2',\r\n      title: 'API-Dokumentation',\r\n      description: 'Vollständige API-Referenz für Entwickler',\r\n      category: 'Entwicklung',\r\n      tags: ['API', 'REST', 'Integration'],\r\n      lastUpdated: '2024-01-10',\r\n      author: 'Development Team',\r\n      views: 892,\r\n      rating: 4.6,\r\n      content: 'API-Endpunkte und Authentifizierung...'\r\n    },\r\n    {\r\n      id: '3',\r\n      title: 'Sicherheitsrichtlinien',\r\n      description: 'Best Practices für Datensicherheit und Compliance',\r\n      category: 'Sicherheit',\r\n      tags: ['Sicherheit', 'Compliance', 'GDPR'],\r\n      lastUpdated: '2024-01-12',\r\n      author: 'Security Team',\r\n      views: 567,\r\n      rating: 4.9,\r\n      content: 'Sicherheitsrichtlinien und Compliance...'\r\n    }\r\n  ];\r\n\r\n  // Mock-Daten für Favoriten\r\n  const availableFavorites: FavoriteItem[] = [\r\n    { id: '1', title: 'Dashboard', type: 'menu', path: '/dashboard', icon: <DashboardIcon />, category: 'Navigation' },\r\n    { id: '2', title: 'Umsatz-Analyse', type: 'bi', path: '/analytics/sales', icon: <BarChartIcon />, category: 'Business Intelligence' },\r\n    { id: '3', title: 'Kundenzufriedenheit', type: 'parameter', path: '/kpi/satisfaction', icon: <TrendingUpIcon />, category: 'KPIs' },\r\n    { id: '4', title: 'Lagerbestand', type: 'bi', path: '/analytics/inventory', icon: <InventoryIcon />, category: 'Business Intelligence' },\r\n    { id: '5', title: 'Personal-Management', type: 'menu', path: '/personal', icon: <PersonIcon />, category: 'Navigation' },\r\n    { id: '6', title: 'Produktivität', type: 'parameter', path: '/kpi/productivity', icon: <ShowChartIcon />, category: 'KPIs' }\r\n  ];\r\n\r\n  // Mock-Daten für BI-Parameter\r\n  const mockBIParameters: BIParameter[] = [\r\n    { id: '1', name: 'Umsatz', value: 1250000, unit: '€', trend: 'up', target: 1200000, category: 'Finanzen' },\r\n    { id: '2', name: 'Kundenzufriedenheit', value: 4.8, unit: '/5', trend: 'up', target: 4.5, category: 'Service' },\r\n    { id: '3', name: 'Produktivität', value: 87, unit: '%', trend: 'stable', target: 85, category: 'Operationen' },\r\n    { id: '4', name: 'Lagerumschlag', value: 12.5, unit: 'x/Jahr', trend: 'up', target: 10, category: 'Logistik' },\r\n    { id: '5', name: 'Mitarbeiterfluktuation', value: 8.2, unit: '%', trend: 'down', target: 10, category: 'Personal' }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    setBiParameters(mockBIParameters);\r\n  }, []);\r\n\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  const handleVideoPlay = (videoUrl: string) => {\r\n    setSelectedVideo(videoUrl);\r\n    setOpenVideoDialog(true);\r\n  };\r\n\r\n  const getDifficultyColor = (difficulty: string) => {\r\n    switch (difficulty) {\r\n      case 'beginner': return 'success';\r\n      case 'intermediate': return 'warning';\r\n      case 'advanced': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getDifficultyText = (difficulty: string) => {\r\n    switch (difficulty) {\r\n      case 'beginner': return 'Anfänger';\r\n      case 'intermediate': return 'Fortgeschritten';\r\n      case 'advanced': return 'Experte';\r\n      default: return difficulty;\r\n    }\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    navigate('/login');\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    logout();\r\n    setUserMenuAnchorEl(null);\r\n  };\r\n\r\n  const handleThemeToggle = () => {\r\n    setDarkMode(!darkMode);\r\n  };\r\n\r\n  const handleAddFavorite = (item: FavoriteItem) => {\r\n    if (!favorites.find(fav => fav.id === item.id)) {\r\n      setFavorites([...favorites, item]);\r\n    }\r\n  };\r\n\r\n  const handleRemoveFavorite = (itemId: string) => {\r\n    setFavorites(favorites.filter(fav => fav.id !== itemId));\r\n  };\r\n\r\n  const handleGlobalSearch = (term: string) => {\r\n    setGlobalSearchTerm(term);\r\n    // Hier würde die globale Suche implementiert werden\r\n    console.log('Globale Suche nach:', term);\r\n  };\r\n\r\n  const filteredModules = learningModules.filter(module => {\r\n    const matchesSearch = module.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         module.description.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesCategory = selectedCategory === 'all' || module.category === selectedCategory;\r\n    return matchesSearch && matchesCategory;\r\n  });\r\n\r\n  return (\r\n    <Box sx={{ minHeight: '100vh', bgcolor: darkMode ? '#121212' : '#F5F6F7' }}>\r\n      {/* Header mit Anmeldung, Suchleiste und Einstellungen */}\r\n      <AppBar position=\"static\" sx={{ bgcolor: darkMode ? '#1e1e1e' : '#0A6ED1' }}>\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" sx={{ flexGrow: 0, mr: 3, fontWeight: 700 }}>\r\n            VALEO NeuroERP\r\n          </Typography>\r\n\r\n          {/* Globale Suchleiste */}\r\n          <Box sx={{ flexGrow: 1, maxWidth: 600, mx: 2 }}>\r\n            <Autocomplete\r\n              freeSolo\r\n              options={[\r\n                'Dashboard',\r\n                'Personal-Management',\r\n                'Finanzen',\r\n                'Lager',\r\n                'Produktion',\r\n                'Analytics',\r\n                'Dokumentation',\r\n                'Support'\r\n              ]}\r\n              value={globalSearchTerm}\r\n              onChange={(event, newValue) => {\r\n                if (typeof newValue === 'string') {\r\n                  handleGlobalSearch(newValue);\r\n                }\r\n              }}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  placeholder=\"Globale Suche...\"\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  sx={{\r\n                    '& .MuiOutlinedInput-root': {\r\n                      bgcolor: darkMode ? '#2d2d2d' : 'white',\r\n                      '& fieldset': {\r\n                        borderColor: darkMode ? '#555' : '#ccc',\r\n                      },\r\n                      '&:hover fieldset': {\r\n                        borderColor: darkMode ? '#777' : '#999',\r\n                      },\r\n                    },\r\n                  }}\r\n                  InputProps={{\r\n                    ...params.InputProps,\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <SearchIcon />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                />\r\n              )}\r\n            />\r\n          </Box>\r\n\r\n          {/* Theme Toggle */}\r\n          <IconButton\r\n            color=\"inherit\"\r\n            onClick={handleThemeToggle}\r\n            sx={{ mr: 1 }}\r\n          >\r\n            {darkMode ? <LightModeIcon /> : <DarkModeIcon />}\r\n          </IconButton>\r\n\r\n          {/* Benachrichtigungen */}\r\n          <IconButton color=\"inherit\" sx={{ mr: 1 }}>\r\n            <Badge badgeContent={3} color=\"error\">\r\n              <NotificationsIcon />\r\n            </Badge>\r\n          </IconButton>\r\n\r\n          {/* Einstellungen */}\r\n          <IconButton\r\n            color=\"inherit\"\r\n            onClick={() => setSettingsOpen(true)}\r\n            sx={{ mr: 1 }}\r\n          >\r\n            <SettingsIcon />\r\n          </IconButton>\r\n\r\n          {/* Login Button */}\r\n          {!isAuthenticated && (\r\n            <Tooltip title=\"Anmelden\">\r\n              <IconButton\r\n                color=\"inherit\"\r\n                onClick={handleLogin}\r\n                sx={{ mr: 1 }}\r\n              >\r\n                <LoginIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          )}\r\n\r\n          {/* Last9 Test Button */}\r\n          <Tooltip title=\"Last9 Observability Test\">\r\n            <IconButton\r\n              color=\"inherit\"\r\n              onClick={() => {\r\n                // Scroll to Last9 Test component\r\n                const last9Test = document.getElementById('last9-test');\r\n                if (last9Test) {\r\n                  last9Test.scrollIntoView({ behavior: 'smooth' });\r\n                }\r\n              }}\r\n              sx={{ mr: 1 }}\r\n            >\r\n              <BugReportIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n\r\n          {/* Benutzer-Menü */}\r\n          <IconButton\r\n            color=\"inherit\"\r\n            onClick={(e) => setUserMenuAnchorEl(e.currentTarget)}\r\n          >\r\n            {isAuthenticated ? (\r\n              <Avatar sx={{ width: 32, height: 32, bgcolor: 'secondary.main' }}>\r\n                {user?.name.charAt(0)}\r\n              </Avatar>\r\n            ) : (\r\n              <AccountCircleIcon />\r\n            )}\r\n          </IconButton>\r\n\r\n          {/* Benutzer-Menü Dropdown */}\r\n          <Menu\r\n            anchorEl={userMenuAnchorEl}\r\n            open={Boolean(userMenuAnchorEl)}\r\n            onClose={() => setUserMenuAnchorEl(null)}\r\n          >\r\n            {isAuthenticated ? (\r\n              <>\r\n                <MenuItem onClick={() => setUserMenuAnchorEl(null)}>\r\n                  <ListItemIcon>\r\n                    <AccountCircleIcon fontSize=\"small\" />\r\n                  </ListItemIcon>\r\n                  {user?.name}\r\n                </MenuItem>\r\n                <MenuItem onClick={() => setUserMenuAnchorEl(null)}>\r\n                  <ListItemIcon>\r\n                    <EmailIcon fontSize=\"small\" />\r\n                  </ListItemIcon>\r\n                  {user?.email}\r\n                </MenuItem>\r\n                <Divider />\r\n                <MenuItem onClick={handleLogout}>\r\n                  <ListItemIcon>\r\n                    <LogoutIcon fontSize=\"small\" />\r\n                  </ListItemIcon>\r\n                  Abmelden\r\n                </MenuItem>\r\n              </>\r\n            ) : (\r\n              <MenuItem onClick={handleLogin}>\r\n                <ListItemIcon>\r\n                  <LoginIcon fontSize=\"small\" />\r\n                </ListItemIcon>\r\n                Anmelden\r\n              </MenuItem>\r\n            )}\r\n          </Menu>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      {/* Einstellungen-Drawer */}\r\n      <Drawer\r\n        anchor=\"right\"\r\n        open={settingsOpen}\r\n        onClose={() => setSettingsOpen(false)}\r\n        sx={{\r\n          '& .MuiDrawer-paper': {\r\n            width: 400,\r\n            bgcolor: darkMode ? '#1e1e1e' : 'white',\r\n            color: darkMode ? 'white' : 'inherit'\r\n          }\r\n        }}\r\n      >\r\n        <Box sx={{ p: 3 }}>\r\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n            <Typography variant=\"h6\">Einstellungen</Typography>\r\n            <IconButton onClick={() => setSettingsOpen(false)}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </Box>\r\n\r\n          {/* Theme-Einstellungen */}\r\n          <Card sx={{ p: 3, mb: 3 }}>\r\n            <Typography variant=\"h6\" sx={{ mb: 2 }}>\r\n              Erscheinungsbild\r\n            </Typography>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={darkMode}\r\n                  onChange={handleThemeToggle}\r\n                  color=\"primary\"\r\n                />\r\n              }\r\n              label=\"Dark Mode\"\r\n            />\r\n          </Card>\r\n\r\n          {/* Favoriten */}\r\n          <Card sx={{ p: 3, mb: 3 }}>\r\n            <Typography variant=\"h6\" sx={{ mb: 2 }}>\r\n              Meine Favoriten\r\n            </Typography>\r\n            \r\n            {/* Aktuelle Favoriten */}\r\n            {favorites.length > 0 && (\r\n              <Box sx={{ mb: 3 }}>\r\n                <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>\r\n                  Aktuelle Favoriten:\r\n                </Typography>\r\n                <List dense>\r\n                  {favorites.map((fav) => (\r\n                    <ListItem key={fav.id} sx={{ px: 0 }}>\r\n                      <ListItemIcon sx={{ minWidth: 40 }}>\r\n                        {fav.icon}\r\n                      </ListItemIcon>\r\n                      <ListItemText \r\n                        primary={fav.title}\r\n                        secondary={fav.category}\r\n                      />\r\n                      <IconButton\r\n                        size=\"small\"\r\n                        onClick={() => handleRemoveFavorite(fav.id)}\r\n                        color=\"error\"\r\n                      >\r\n                        <FavoriteIcon />\r\n                      </IconButton>\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n              </Box>\r\n            )}\r\n\r\n            {/* Verfügbare Favoriten hinzufügen */}\r\n            <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>\r\n              Favoriten hinzufügen:\r\n            </Typography>\r\n            <List dense>\r\n              {availableFavorites\r\n                .filter(item => !favorites.find(fav => fav.id === item.id))\r\n                .map((item) => (\r\n                  <ListItem key={item.id} sx={{ px: 0 }}>\r\n                    <ListItemIcon sx={{ minWidth: 40 }}>\r\n                      {item.icon}\r\n                    </ListItemIcon>\r\n                    <ListItemText \r\n                      primary={item.title}\r\n                      secondary={item.category}\r\n                    />\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={() => handleAddFavorite(item)}\r\n                      color=\"primary\"\r\n                    >\r\n                      <FavoriteBorderIcon />\r\n                    </IconButton>\r\n                  </ListItem>\r\n                ))}\r\n            </List>\r\n          </Card>\r\n\r\n          {/* BI-Parameter */}\r\n          <Card sx={{ p: 3 }}>\r\n            <Typography variant=\"h6\" sx={{ mb: 2 }}>\r\n              Business Intelligence Parameter\r\n            </Typography>\r\n            <List dense>\r\n              {biParameters.map((param) => (\r\n                <ListItem key={param.id} sx={{ px: 0 }}>\r\n                  <ListItemIcon sx={{ minWidth: 40 }}>\r\n                    {param.trend === 'up' ? (\r\n                      <TrendingUpIcon color=\"success\" />\r\n                    ) : param.trend === 'down' ? (\r\n                      <TrendingUpIcon color=\"error\" sx={{ transform: 'rotate(180deg)' }} />\r\n                    ) : (\r\n                      <TimelineIcon color=\"action\" />\r\n                    )}\r\n                  </ListItemIcon>\r\n                  <ListItemText \r\n                    primary={param.name}\r\n                    secondary={`${param.value} ${param.unit} (Ziel: ${param.target} ${param.unit})`}\r\n                  />\r\n                  <Chip \r\n                    label={param.category} \r\n                    size=\"small\" \r\n                    variant=\"outlined\"\r\n                  />\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          </Card>\r\n        </Box>\r\n      </Drawer>\r\n\r\n      {/* Hero Section */}\r\n      <Box sx={{ \r\n        background: 'linear-gradient(135deg, #0A6ED1 0%, #1976d2 50%, #42a5f5 100%)',\r\n        color: 'white',\r\n        py: 8\r\n      }}>\r\n        <Container maxWidth=\"lg\">\r\n          <Grid container spacing={4} alignItems=\"center\">\r\n            <Grid item xs={12} md={6}>\r\n              <Typography variant=\"h2\" sx={{ fontWeight: 700, mb: 2 }}>\r\n                VALEO NeuroERP 2.0\r\n              </Typography>\r\n              <Typography variant=\"h5\" sx={{ mb: 3, opacity: 0.9 }}>\r\n                Intelligentes ERP-System mit KI-Integration\r\n              </Typography>\r\n              <Typography variant=\"body1\" sx={{ mb: 4, opacity: 0.8 }}>\r\n                Entdecken Sie die Zukunft der Unternehmensführung mit unserem fortschrittlichen \r\n                ERP-System. Kombinieren Sie traditionelle ERP-Funktionen mit modernster \r\n                künstlicher Intelligenz für optimale Geschäftsergebnisse.\r\n              </Typography>\r\n              <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>\r\n                <Button \r\n                  variant=\"contained\" \r\n                  size=\"large\"\r\n                  onClick={() => navigate('/dashboard')}\r\n                  sx={{ \r\n                    bgcolor: 'white', \r\n                    color: '#0A6ED1',\r\n                    '&:hover': { bgcolor: '#f5f5f5' }\r\n                  }}\r\n                >\r\n                  Dashboard öffnen\r\n                </Button>\r\n                <Button \r\n                  variant=\"outlined\" \r\n                  size=\"large\"\r\n                  sx={{ borderColor: 'white', color: 'white' }}\r\n                >\r\n                  Demo anfordern\r\n                </Button>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <Box sx={{ textAlign: 'center' }}>\r\n                <AutoAwesomeIcon sx={{ fontSize: 120, opacity: 0.8 }} />\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </Box>\r\n\r\n      {/* Main Content */}\r\n      <Container maxWidth=\"lg\" sx={{ py: 4 }}>\r\n        {/* Breadcrumbs */}\r\n        <Breadcrumbs sx={{ mb: 3 }}>\r\n          <Link color=\"inherit\" href=\"#\">\r\n            Startseite\r\n          </Link>\r\n          <Typography color=\"text.primary\">VALEO NeuroERP</Typography>\r\n        </Breadcrumbs>\r\n\r\n        {/* Tabs */}\r\n        <Card sx={{ mb: 4 }}>\r\n          <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n            <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"ERP sections\">\r\n              <Tab \r\n                icon={<DashboardIcon />} \r\n                label=\"Übersicht\" \r\n                iconPosition=\"start\"\r\n              />\r\n              <Tab \r\n                icon={<SchoolIcon />} \r\n                label=\"Lernbereich\" \r\n                iconPosition=\"start\"\r\n              />\r\n              <Tab \r\n                icon={<BookIcon />} \r\n                label=\"Dokumentation\" \r\n                iconPosition=\"start\"\r\n              />\r\n              <Tab \r\n                icon={<HelpIcon />} \r\n                label=\"Wiki & Support\" \r\n                iconPosition=\"start\"\r\n              />\r\n            </Tabs>\r\n          </Box>\r\n\r\n          {/* Tab Content */}\r\n          <TabPanel value={tabValue} index={0}>\r\n            {/* Übersicht */}\r\n            <Grid container spacing={4}>\r\n              {/* System-Status */}\r\n              <Grid item xs={12} md={8}>\r\n                <Card sx={{ p: 3, mb: 3 }}>\r\n                  <Typography variant=\"h5\" sx={{ mb: 3, display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                    <TrendingUpIcon color=\"primary\" />\r\n                    System-Status\r\n                  </Typography>\r\n                  <Grid container spacing={3}>\r\n                    <Grid item xs={6} md={3}>\r\n                      <Box sx={{ textAlign: 'center' }}>\r\n                        <VerifiedIcon sx={{ fontSize: 40, color: 'success.main', mb: 1 }} />\r\n                        <Typography variant=\"h6\" color=\"success.main\">Online</Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">System-Status</Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                    <Grid item xs={6} md={3}>\r\n                      <Box sx={{ textAlign: 'center' }}>\r\n                        <SpeedIcon sx={{ fontSize: 40, color: 'primary.main', mb: 1 }} />\r\n                        <Typography variant=\"h6\">99.9%</Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">Uptime</Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                    <Grid item xs={6} md={3}>\r\n                      <Box sx={{ textAlign: 'center' }}>\r\n                        <GroupIcon sx={{ fontSize: 40, color: 'info.main', mb: 1 }} />\r\n                        <Typography variant=\"h6\">1,247</Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">Aktive Benutzer</Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                    <Grid item xs={6} md={3}>\r\n                      <Box sx={{ textAlign: 'center' }}>\r\n                        <SecurityIcon sx={{ fontSize: 40, color: 'warning.main', mb: 1 }} />\r\n                        <Typography variant=\"h6\">256-bit</Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">Verschlüsselung</Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Card>\r\n\r\n                {/* Schnellzugriff */}\r\n                <Card sx={{ p: 3 }}>\r\n                  <Typography variant=\"h5\" sx={{ mb: 3, display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                    <WorkIcon color=\"primary\" />\r\n                    Schnellzugriff\r\n                  </Typography>\r\n                  <Grid container spacing={2}>\r\n                    {[\r\n                      { title: 'Dashboard', icon: <DashboardIcon />, path: '/dashboard', color: '#0A6ED1' },\r\n                      { title: 'Personal', icon: <PersonIcon />, path: '/personal', color: '#107C41' },\r\n                      { title: 'Finanzen', icon: <BusinessIcon />, path: '/finance', color: '#E9730C' },\r\n                      { title: 'Lager', icon: <InventoryIcon />, path: '/warehouse', color: '#BB0000' },\r\n                      { title: 'Produktion', icon: <BuildIcon />, path: '/production', color: '#6F3CC4' },\r\n                      { title: 'Analytics', icon: <AnalyticsIcon />, path: '/reporting', color: '#0F828F' }\r\n                    ].map((item) => (\r\n                      <Grid item xs={6} sm={4} md={2} key={item.title}>\r\n                        <Card \r\n                          sx={{ \r\n                            p: 2, \r\n                            textAlign: 'center', \r\n                            cursor: 'pointer',\r\n                            transition: 'all 0.3s ease',\r\n                            '&:hover': { \r\n                              transform: 'translateY(-4px)',\r\n                              boxShadow: '0 8px 25px rgba(0,0,0,0.15)'\r\n                            }\r\n                          }}\r\n                          onClick={() => navigate(item.path)}\r\n                        >\r\n                          <Box sx={{ color: item.color, mb: 1 }}>\r\n                            {item.icon}\r\n                          </Box>\r\n                          <Typography variant=\"body2\" sx={{ fontWeight: 500 }}>\r\n                            {item.title}\r\n                          </Typography>\r\n                        </Card>\r\n                      </Grid>\r\n                    ))}\r\n                  </Grid>\r\n                </Card>\r\n              </Grid>\r\n\r\n              {/* Sidebar */}\r\n              <Grid item xs={12} md={4}>\r\n                {/* Aktuelle Aktivitäten */}\r\n                <Card sx={{ p: 3, mb: 3 }}>\r\n                  <Typography variant=\"h6\" sx={{ mb: 2 }}>\r\n                    Aktuelle Aktivitäten\r\n                  </Typography>\r\n                  <List>\r\n                    {[\r\n                      { text: 'Neue Benutzer registriert', time: 'vor 5 Min', icon: <PersonIcon /> },\r\n                      { text: 'System-Update abgeschlossen', time: 'vor 15 Min', icon: <CheckCircleIcon /> },\r\n                      { text: 'Backup erfolgreich', time: 'vor 1 Std', icon: <StorageIcon /> },\r\n                      { text: 'KI-Modell trainiert', time: 'vor 2 Std', icon: <PsychologyIcon /> }\r\n                    ].map((activity, index) => (\r\n                      <ListItem key={index} sx={{ px: 0 }}>\r\n                        <ListItemIcon sx={{ minWidth: 40 }}>\r\n                          {activity.icon}\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                          primary={activity.text}\r\n                          secondary={activity.time}\r\n                        />\r\n                      </ListItem>\r\n                    ))}\r\n                  </List>\r\n                </Card>\r\n\r\n                {/* Support */}\r\n                <Card sx={{ p: 3 }}>\r\n                  <Typography variant=\"h6\" sx={{ mb: 2 }}>\r\n                    Support & Kontakt\r\n                  </Typography>\r\n                  <List>\r\n                    <ListItem sx={{ px: 0 }}>\r\n                      <ListItemIcon>\r\n                        <EmailIcon />\r\n                      </ListItemIcon>\r\n                      <ListItemText primary=\"support@valeo-neuroerp.de\" />\r\n                    </ListItem>\r\n                    <ListItem sx={{ px: 0 }}>\r\n                      <ListItemIcon>\r\n                        <PhoneIcon />\r\n                      </ListItemIcon>\r\n                      <ListItemText primary=\"+49 89 1234 5678\" />\r\n                    </ListItem>\r\n                    <ListItem sx={{ px: 0 }}>\r\n                      <ListItemIcon>\r\n                        <LocationIcon />\r\n                      </ListItemIcon>\r\n                      <ListItemText primary=\"München, Deutschland\" />\r\n                    </ListItem>\r\n                  </List>\r\n                  <Button \r\n                    variant=\"contained\" \r\n                    fullWidth \r\n                    startIcon={<SupportIcon />}\r\n                    sx={{ mt: 2 }}\r\n                  >\r\n                    Support anfordern\r\n                  </Button>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n          </TabPanel>\r\n\r\n          <TabPanel value={tabValue} index={1}>\r\n            {/* Lernbereich */}\r\n            <Box sx={{ mb: 4 }}>\r\n              <Typography variant=\"h4\" sx={{ mb: 2 }}>\r\n                Lernbereich & Schulungen\r\n              </Typography>\r\n              <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n                Erweitern Sie Ihre Kenntnisse mit unseren umfassenden Schulungsmodulen und \r\n                interaktiven Lerninhalten.\r\n              </Typography>\r\n\r\n              {/* Filter */}\r\n              <Card sx={{ p: 3, mb: 3 }}>\r\n                <Grid container spacing={2} alignItems=\"center\">\r\n                  <Grid item xs={12} md={6}>\r\n                    <TextField\r\n                      fullWidth\r\n                      placeholder=\"Module durchsuchen...\"\r\n                      value={searchTerm}\r\n                      onChange={(e) => setSearchTerm(e.target.value)}\r\n                      InputProps={{\r\n                        startAdornment: <SearchIcon sx={{ mr: 1, color: 'text.secondary' }} />\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} md={3}>\r\n                    <FormControl fullWidth>\r\n                      <InputLabel>Kategorie</InputLabel>\r\n                      <Select\r\n                        value={selectedCategory}\r\n                        onChange={(e) => setSelectedCategory(e.target.value)}\r\n                        label=\"Kategorie\"\r\n                      >\r\n                        <MenuItem value=\"all\">Alle Kategorien</MenuItem>\r\n                        <MenuItem value=\"Grundlagen\">Grundlagen</MenuItem>\r\n                        <MenuItem value=\"Analytics\">Analytics</MenuItem>\r\n                        <MenuItem value=\"KI & ML\">KI & ML</MenuItem>\r\n                        <MenuItem value=\"Prozesse\">Prozesse</MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={12} md={3}>\r\n                    <Button \r\n                      variant=\"outlined\" \r\n                      fullWidth\r\n                      onClick={() => {\r\n                        setSearchTerm('');\r\n                        setSelectedCategory('all');\r\n                      }}\r\n                    >\r\n                      Filter zurücksetzen\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </Card>\r\n\r\n              {/* Lernmodule */}\r\n              <Grid container spacing={3}>\r\n                {filteredModules.map((module) => (\r\n                  <Grid item xs={12} md={6} key={module.id}>\r\n                    <Card sx={{ p: 3, height: '100%' }}>\r\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n                        <Chip \r\n                          label={module.category} \r\n                          size=\"small\" \r\n                          color=\"primary\" \r\n                          variant=\"outlined\"\r\n                        />\r\n                        <Chip \r\n                          label={getDifficultyText(module.difficulty)}\r\n                          size=\"small\"\r\n                          color={getDifficultyColor(module.difficulty) as any}\r\n                        />\r\n                      </Box>\r\n\r\n                      <Typography variant=\"h6\" sx={{ mb: 1 }}>\r\n                        {module.title}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n                        {module.description}\r\n                      </Typography>\r\n\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n                        <Rating value={module.rating} readOnly size=\"small\" />\r\n                        <Typography variant=\"body2\" sx={{ ml: 1 }}>\r\n                          ({module.rating})\r\n                        </Typography>\r\n                      </Box>\r\n\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n                        <TimeIcon fontSize=\"small\" sx={{ mr: 1, color: 'text.secondary' }} />\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          {module.duration}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ ml: 2 }}>\r\n                          • {module.instructor}\r\n                        </Typography>\r\n                      </Box>\r\n\r\n                      {module.progress > 0 && (\r\n                        <Box sx={{ mb: 2 }}>\r\n                          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\r\n                            <Typography variant=\"body2\">Fortschritt</Typography>\r\n                            <Typography variant=\"body2\">{module.progress}%</Typography>\r\n                          </Box>\r\n                          <LinearProgress \r\n                            variant=\"determinate\" \r\n                            value={module.progress} \r\n                            sx={{ height: 6, borderRadius: 3 }}\r\n                          />\r\n                        </Box>\r\n                      )}\r\n\r\n                      <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap', mb: 2 }}>\r\n                        {module.materials.map((material, index) => (\r\n                          <Chip \r\n                            key={index} \r\n                            label={material} \r\n                            size=\"small\" \r\n                            variant=\"outlined\"\r\n                          />\r\n                        ))}\r\n                      </Box>\r\n\r\n                      <Box sx={{ display: 'flex', gap: 1 }}>\r\n                        <Button \r\n                          variant=\"contained\" \r\n                          startIcon={<PlayIcon />}\r\n                          onClick={() => handleVideoPlay(module.videoUrl || '')}\r\n                          fullWidth\r\n                        >\r\n                          {module.completed ? 'Wiederholen' : 'Starten'}\r\n                        </Button>\r\n                        {module.completed && (\r\n                          <CheckCircleIcon color=\"success\" sx={{ alignSelf: 'center' }} />\r\n                        )}\r\n                      </Box>\r\n                    </Card>\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n            </Box>\r\n          </TabPanel>\r\n\r\n          <TabPanel value={tabValue} index={2}>\r\n            {/* Dokumentation */}\r\n            <Box sx={{ mb: 4 }}>\r\n              <Typography variant=\"h4\" sx={{ mb: 2 }}>\r\n                Dokumentation & Handbücher\r\n              </Typography>\r\n              <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n                Umfassende Dokumentation, API-Referenzen und technische Handbücher für \r\n                Entwickler und Administratoren.\r\n              </Typography>\r\n\r\n              {/* Dokumentationskategorien */}\r\n              <Grid container spacing={3}>\r\n                {[\r\n                  { title: 'Benutzerhandbuch', icon: <BookIcon />, count: 15, color: '#0A6ED1' },\r\n                  { title: 'API-Dokumentation', icon: <CodeIcon />, count: 8, color: '#107C41' },\r\n                  { title: 'Administration', icon: <SettingsIcon />, count: 12, color: '#E9730C' },\r\n                  { title: 'Entwicklung', icon: <BuildIcon />, count: 6, color: '#BB0000' },\r\n                  { title: 'Sicherheit', icon: <SecurityIcon />, count: 4, color: '#6F3CC4' },\r\n                  { title: 'Integration', icon: <CloudIcon />, count: 9, color: '#0F828F' }\r\n                ].map((category) => (\r\n                  <Grid item xs={12} sm={6} md={4} key={category.title}>\r\n                    <Card sx={{ p: 3, cursor: 'pointer', transition: 'all 0.3s ease', '&:hover': { transform: 'translateY(-4px)' } }}>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n                        <Box sx={{ color: category.color, mr: 2 }}>\r\n                          {category.icon}\r\n                        </Box>\r\n                        <Box>\r\n                          <Typography variant=\"h6\">{category.title}</Typography>\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">\r\n                            {category.count} Dokumente\r\n                          </Typography>\r\n                        </Box>\r\n                      </Box>\r\n                      <Button variant=\"outlined\" fullWidth>\r\n                        Durchsuchen\r\n                      </Button>\r\n                    </Card>\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n\r\n              {/* Neueste Dokumentation */}\r\n              <Typography variant=\"h5\" sx={{ mt: 4, mb: 3 }}>\r\n                Neueste Dokumentation\r\n              </Typography>\r\n              <Grid container spacing={3}>\r\n                {documentationItems.map((item) => (\r\n                  <Grid item xs={12} md={6} key={item.id}>\r\n                    <Card sx={{ p: 3 }}>\r\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n                        <Chip label={item.category} size=\"small\" color=\"primary\" />\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          {item.lastUpdated}\r\n                        </Typography>\r\n                      </Box>\r\n                      <Typography variant=\"h6\" sx={{ mb: 1 }}>\r\n                        {item.title}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n                        {item.description}\r\n                      </Typography>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n                        <Rating value={item.rating} readOnly size=\"small\" />\r\n                        <Typography variant=\"body2\" sx={{ ml: 1 }}>\r\n                          ({item.rating})\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ ml: 2 }}>\r\n                          {item.views} Aufrufe\r\n                        </Typography>\r\n                      </Box>\r\n                      <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap', mb: 2 }}>\r\n                        {item.tags.map((tag) => (\r\n                          <Chip key={tag} label={tag} size=\"small\" variant=\"outlined\" />\r\n                        ))}\r\n                      </Box>\r\n                      <Box sx={{ display: 'flex', gap: 1 }}>\r\n                        <Button variant=\"contained\" size=\"small\">\r\n                          Lesen\r\n                        </Button>\r\n                        <Button variant=\"outlined\" size=\"small\" startIcon={<DownloadIcon />}>\r\n                          PDF\r\n                        </Button>\r\n                        <Button variant=\"outlined\" size=\"small\" startIcon={<PrintIcon />}>\r\n                          Drucken\r\n                        </Button>\r\n                      </Box>\r\n                    </Card>\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n            </Box>\r\n          </TabPanel>\r\n\r\n          <TabPanel value={tabValue} index={3}>\r\n            {/* Wiki & Support */}\r\n            <Box sx={{ mb: 4 }}>\r\n              <Typography variant=\"h4\" sx={{ mb: 2 }}>\r\n                Wiki & Support\r\n              </Typography>\r\n              <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n                Finden Sie Antworten auf häufig gestellte Fragen, Lösungen für Probleme \r\n                und umfassende Support-Ressourcen.\r\n              </Typography>\r\n\r\n              <Grid container spacing={4}>\r\n                {/* FAQ */}\r\n                <Grid item xs={12} md={8}>\r\n                  <Card sx={{ p: 3 }}>\r\n                    <Typography variant=\"h5\" sx={{ mb: 3 }}>\r\n                      Häufig gestellte Fragen (FAQ)\r\n                    </Typography>\r\n                    <Accordion>\r\n                      <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                        <Typography variant=\"h6\">Wie installiere ich VALEO NeuroERP?</Typography>\r\n                      </AccordionSummary>\r\n                      <AccordionDetails>\r\n                        <Typography>\r\n                          Die Installation erfolgt über unseren Installer. Laden Sie die \r\n                          neueste Version herunter und folgen Sie der Schritt-für-Schritt-Anleitung.\r\n                        </Typography>\r\n                      </AccordionDetails>\r\n                    </Accordion>\r\n                    <Accordion>\r\n                      <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                        <Typography variant=\"h6\">Wie konfiguriere ich die KI-Funktionen?</Typography>\r\n                      </AccordionSummary>\r\n                      <AccordionDetails>\r\n                        <Typography>\r\n                          Die KI-Funktionen können über das Admin-Panel konfiguriert werden. \r\n                          Sie benötigen entsprechende Berechtigungen und API-Schlüssel.\r\n                        </Typography>\r\n                      </AccordionDetails>\r\n                    </Accordion>\r\n                    <Accordion>\r\n                      <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                        <Typography variant=\"h6\">Wie sichere ich meine Daten?</Typography>\r\n                      </AccordionSummary>\r\n                      <AccordionDetails>\r\n                        <Typography>\r\n                          Wir empfehlen regelmäßige Backups und die Verwendung unserer \r\n                          integrierten Sicherheitsfunktionen. Kontaktieren Sie unser Support-Team.\r\n                        </Typography>\r\n                      </AccordionDetails>\r\n                    </Accordion>\r\n                  </Card>\r\n                </Grid>\r\n\r\n                {/* Support-Kanäle */}\r\n                <Grid item xs={12} md={4}>\r\n                  <Card sx={{ p: 3, mb: 3 }}>\r\n                    <Typography variant=\"h6\" sx={{ mb: 2 }}>\r\n                      Support-Kanäle\r\n                    </Typography>\r\n                    <List>\r\n                      <ListItem sx={{ px: 0 }}>\r\n                        <ListItemIcon>\r\n                          <EmailIcon color=\"primary\" />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                          primary=\"E-Mail Support\"\r\n                          secondary=\"support@valeo-neuroerp.de\"\r\n                        />\r\n                      </ListItem>\r\n                      <ListItem sx={{ px: 0 }}>\r\n                        <ListItemIcon>\r\n                          <PhoneIcon color=\"primary\" />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                          primary=\"Telefon Support\"\r\n                          secondary=\"+49 89 1234 5678\"\r\n                        />\r\n                      </ListItem>\r\n                      <ListItem sx={{ px: 0 }}>\r\n                        <ListItemIcon>\r\n                          <HelpIcon color=\"primary\" />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                          primary=\"Live Chat\"\r\n                          secondary=\"24/7 verfügbar\"\r\n                        />\r\n                      </ListItem>\r\n                    </List>\r\n                  </Card>\r\n\r\n                  <Card sx={{ p: 3 }}>\r\n                    <Typography variant=\"h6\" sx={{ mb: 2 }}>\r\n                      Community\r\n                    </Typography>\r\n                    <List>\r\n                      <ListItem sx={{ px: 0 }}>\r\n                        <ListItemIcon>\r\n                          <GroupIcon color=\"primary\" />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                          primary=\"Forum\"\r\n                          secondary=\"Diskussionen & Lösungen\"\r\n                        />\r\n                      </ListItem>\r\n                      <ListItem sx={{ px: 0 }}>\r\n                        <ListItemIcon>\r\n                          <VideoIcon color=\"primary\" />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                          primary=\"Video-Tutorials\"\r\n                          secondary=\"Schritt-für-Schritt Anleitungen\"\r\n                        />\r\n                      </ListItem>\r\n                      <ListItem sx={{ px: 0 }}>\r\n                        <ListItemIcon>\r\n                          <ArticleIcon color=\"primary\" />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                          primary=\"Blog\"\r\n                          secondary=\"News & Updates\"\r\n                        />\r\n                      </ListItem>\r\n                    </List>\r\n                  </Card>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          </TabPanel>\r\n        </Card>\r\n      </Container>\r\n\r\n      {/* Video Dialog */}\r\n      <Dialog \r\n        open={openVideoDialog} \r\n        onClose={() => setOpenVideoDialog(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Schulungsvideo</DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ width: '100%', height: 400, bgcolor: 'black', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n            <Typography color=\"white\">\r\n              Video-Player würde hier angezeigt werden\r\n            </Typography>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenVideoDialog(false)}>Schließen</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Last9 Test */}\r\n      <Box id=\"last9-test\" sx={{ mt: 4 }}>\r\n        <Last9Test />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default LandingPage; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\Layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\LieferantenFormular.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\LoginPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\MitarbeiterFormular.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\Modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\ModuleCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\NeuroFlowDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\NotificationDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\PersonalManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\PersonalizedDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadUserDashboard'. Either include it or remove the dependency array.","line":270,"column":6,"nodeType":"ArrayExpression","endLine":270,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadUserDashboard, user]","fix":{"range":[7758,7764],"text":"[loadUserDashboard, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Box,\r\n  Button,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Chip,\r\n  Avatar,\r\n  LinearProgress,\r\n  Tooltip,\r\n  Switch,\r\n  FormControlLabel,\r\n  Divider,\r\n  Alert\r\n} from '@mui/material';\r\nimport {\r\n  Dashboard as DashboardIcon,\r\n  Settings as SettingsIcon,\r\n  Add as AddIcon,\r\n  Remove as RemoveIcon,\r\n  DragIndicator as DragIcon,\r\n  Business as BusinessIcon,\r\n  Inventory as InventoryIcon,\r\n  Receipt as ReceiptIcon,\r\n  Description as DocumentIcon,\r\n  Analytics as AnalyticsIcon,\r\n  People as PeopleIcon,\r\n  ShoppingCart as SalesIcon,\r\n  LocalShipping as WarehouseIcon,\r\n  Build as ProductionIcon,\r\n  AccountBalance as FinanceIcon,\r\n  Assessment as QualityIcon,\r\n  Assignment as ProjectIcon,\r\n  Notifications as NotificationsIcon,\r\n  TrendingUp as TrendingUpIcon,\r\n  TrendingDown as TrendingDownIcon,\r\n  Warning as WarningIcon,\r\n  CheckCircle as SuccessIcon,\r\n  Error as ErrorIcon,\r\n  Schedule as ScheduleIcon,\r\n  Star as StarIcon,\r\n  Favorite as FavoriteIcon,\r\n  Visibility as VisibilityIcon,\r\n  VisibilityOff as VisibilityOffIcon,\r\n  LocalShipping as LocalShippingIcon,\r\n  Build as BuildIcon,\r\n  Assessment as AssessmentIcon\r\n} from '@mui/icons-material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useApi } from '../contexts/ApiContext';\r\nimport { DataCard, ProgressCard, AlertMessage, SectionHeader } from '../components/ui/ModernComponents';\r\n\r\n// Komponenten-Typen\r\ninterface DashboardComponent {\r\n  id: string;\r\n  type: 'metric' | 'progress' | 'chart' | 'list' | 'quick-action' | 'notification' | 'favorite';\r\n  title: string;\r\n  description: string;\r\n  icon: React.ReactElement;\r\n  color: string;\r\n  data?: any;\r\n  size: 'small' | 'medium' | 'large';\r\n  position: number;\r\n  visible: boolean;\r\n  favorite: boolean;\r\n  roleBased: boolean;\r\n  allowedRoles: string[];\r\n}\r\n\r\n// Benutzer-Rollen\r\ntype UserRole = 'admin' | 'manager' | 'employee' | 'finance' | 'sales' | 'warehouse' | 'production' | 'quality' | 'hr';\r\n\r\n// Verfügbare Komponenten\r\nconst availableComponents: DashboardComponent[] = [\r\n  // Metriken\r\n  {\r\n    id: 'revenue',\r\n    type: 'metric',\r\n    title: 'Umsatz (Monat)',\r\n    description: 'Aktueller Monatsumsatz',\r\n    icon: <FinanceIcon />,\r\n    color: '#1976d2',\r\n    data: { value: 2847500, unit: '€', change: 12.5, trend: 'up' },\r\n    size: 'medium',\r\n    position: 1,\r\n    visible: true,\r\n    favorite: true,\r\n    roleBased: true,\r\n    allowedRoles: ['admin', 'manager', 'finance']\r\n  },\r\n  {\r\n    id: 'orders',\r\n    type: 'metric',\r\n    title: 'Bestellungen',\r\n    description: 'Anzahl offener Bestellungen',\r\n    icon: <ReceiptIcon />,\r\n    color: '#2e7d32',\r\n    data: { value: 1247, unit: '', change: -2.3, trend: 'down' },\r\n    size: 'small',\r\n    position: 2,\r\n    visible: true,\r\n    favorite: false,\r\n    roleBased: true,\r\n    allowedRoles: ['admin', 'manager', 'sales']\r\n  },\r\n  {\r\n    id: 'inventory',\r\n    type: 'metric',\r\n    title: 'Lagerbestand',\r\n    description: 'Aktueller Lagerbestand',\r\n    icon: <InventoryIcon />,\r\n    color: '#ed6c02',\r\n    data: { value: 8942, unit: 'Stück', change: 5.7, trend: 'up' },\r\n    size: 'small',\r\n    position: 3,\r\n    visible: true,\r\n    favorite: false,\r\n    roleBased: true,\r\n    allowedRoles: ['admin', 'manager', 'warehouse']\r\n  },\r\n  {\r\n    id: 'customers',\r\n    type: 'metric',\r\n    title: 'Aktive Kunden',\r\n    description: 'Anzahl aktiver Kunden',\r\n    icon: <PeopleIcon />,\r\n    color: '#9c27b0',\r\n    data: { value: 342, unit: '', change: 8.1, trend: 'up' },\r\n    size: 'small',\r\n    position: 4,\r\n    visible: true,\r\n    favorite: false,\r\n    roleBased: true,\r\n    allowedRoles: ['admin', 'manager', 'sales']\r\n  },\r\n\r\n  // Fortschritts-Komponenten\r\n  {\r\n    id: 'production-progress',\r\n    type: 'progress',\r\n    title: 'Produktionsfortschritt',\r\n    description: 'Aktuelle Produktionsaufträge',\r\n    icon: <ProductionIcon />,\r\n    color: '#7b1fa2',\r\n    data: { progress: 75, current: 15, total: 20 },\r\n    size: 'medium',\r\n    position: 5,\r\n    visible: true,\r\n    favorite: true,\r\n    roleBased: true,\r\n    allowedRoles: ['admin', 'manager', 'production']\r\n  },\r\n  {\r\n    id: 'quality-checks',\r\n    type: 'progress',\r\n    title: 'Qualitätsprüfungen',\r\n    description: 'Offene Qualitätsprüfungen',\r\n    icon: <QualityIcon />,\r\n    color: '#388e3c',\r\n    data: { progress: 60, current: 12, total: 20 },\r\n    size: 'medium',\r\n    position: 6,\r\n    visible: true,\r\n    favorite: false,\r\n    roleBased: true,\r\n    allowedRoles: ['admin', 'manager', 'quality']\r\n  },\r\n\r\n  // Schnellaktionen\r\n  {\r\n    id: 'quick-actions',\r\n    type: 'quick-action',\r\n    title: 'Schnellaktionen',\r\n    description: 'Häufig verwendete Aktionen',\r\n    icon: <AddIcon />,\r\n    color: '#f57c00',\r\n    data: {\r\n      actions: [\r\n        { label: 'Neue Bestellung', route: '/sales/orders/new', icon: <ReceiptIcon /> },\r\n        { label: 'Lagerbewegung', route: '/warehouse/movements/new', icon: <LocalShippingIcon /> },\r\n        { label: 'Produktionsauftrag', route: '/production/orders/new', icon: <BuildIcon /> },\r\n        { label: 'Qualitätsprüfung', route: '/quality/inspections/new', icon: <AssessmentIcon /> }\r\n      ]\r\n    },\r\n    size: 'large',\r\n    position: 7,\r\n    visible: true,\r\n    favorite: true,\r\n    roleBased: false,\r\n    allowedRoles: []\r\n  },\r\n\r\n  // Benachrichtigungen\r\n  {\r\n    id: 'notifications',\r\n    type: 'notification',\r\n    title: 'Wichtige Benachrichtigungen',\r\n    description: 'Systembenachrichtigungen',\r\n    icon: <NotificationsIcon />,\r\n    color: '#d32f2f',\r\n    data: {\r\n      notifications: [\r\n        { id: 1, type: 'warning', message: 'Lagerbestand Artikel A-123 niedrig', time: '2 Min' },\r\n        { id: 2, type: 'info', message: 'Neue Bestellung #12345 eingegangen', time: '5 Min' },\r\n        { id: 3, type: 'success', message: 'Produktionsauftrag #789 abgeschlossen', time: '12 Min' }\r\n      ]\r\n    },\r\n    size: 'medium',\r\n    position: 8,\r\n    visible: true,\r\n    favorite: false,\r\n    roleBased: false,\r\n    allowedRoles: []\r\n  },\r\n\r\n  // Favoriten\r\n  {\r\n    id: 'favorites',\r\n    type: 'favorite',\r\n    title: 'Meine Favoriten',\r\n    description: 'Häufig verwendete Funktionen',\r\n    icon: <StarIcon />,\r\n    color: '#ff9800',\r\n    data: {\r\n      favorites: [\r\n        { label: 'Kundenverwaltung', route: '/crm/customers', icon: <PeopleIcon /> },\r\n        { label: 'Finanzberichte', route: '/finance/reports', icon: <AnalyticsIcon /> },\r\n        { label: 'Lagerbestand', route: '/warehouse/inventory', icon: <InventoryIcon /> },\r\n        { label: 'Dokumente', route: '/documents', icon: <DocumentIcon /> }\r\n      ]\r\n    },\r\n    size: 'large',\r\n    position: 9,\r\n    visible: true,\r\n    favorite: true,\r\n    roleBased: false,\r\n    allowedRoles: []\r\n  }\r\n];\r\n\r\nconst PersonalizedDashboard: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const { user, isAuthenticated } = useApi();\r\n  const [components, setComponents] = useState<DashboardComponent[]>([]);\r\n  const [settingsOpen, setSettingsOpen] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Benutzerrolle bestimmen (vereinfacht)\r\n  const getUserRole = (): UserRole => {\r\n    if (!user) return 'employee';\r\n    if (user.role === 'admin') return 'admin';\r\n    if (user.role === 'manager') return 'manager';\r\n    if (user.role === 'finance') return 'finance';\r\n    if (user.role === 'sales') return 'sales';\r\n    if (user.role === 'warehouse') return 'warehouse';\r\n    if (user.role === 'production') return 'production';\r\n    if (user.role === 'quality') return 'quality';\r\n    if (user.role === 'hr') return 'hr';\r\n    return 'employee';\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadUserDashboard();\r\n  }, [user]);\r\n\r\n  const loadUserDashboard = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Lade gespeicherte Dashboard-Konfiguration\r\n      const savedConfig = localStorage.getItem(`dashboard-config-${user?.id}`);\r\n      let userComponents: DashboardComponent[];\r\n\r\n      if (savedConfig) {\r\n        userComponents = JSON.parse(savedConfig);\r\n      } else {\r\n        // Erstelle Standard-Konfiguration basierend auf Rolle\r\n        const userRole = getUserRole();\r\n        userComponents = availableComponents.filter(comp => \r\n          !comp.roleBased || comp.allowedRoles.includes(userRole)\r\n        ).map((comp, index) => ({\r\n          ...comp,\r\n          position: index + 1,\r\n          visible: true\r\n        }));\r\n      }\r\n\r\n      setComponents(userComponents);\r\n    } catch (error) {\r\n      console.error('Fehler beim Laden der Dashboard-Konfiguration:', error);\r\n      setComponents(availableComponents.slice(0, 6)); // Fallback\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const saveDashboardConfig = (newComponents: DashboardComponent[]) => {\r\n    try {\r\n      localStorage.setItem(`dashboard-config-${user?.id}`, JSON.stringify(newComponents));\r\n      setComponents(newComponents);\r\n    } catch (error) {\r\n      console.error('Fehler beim Speichern der Dashboard-Konfiguration:', error);\r\n    }\r\n  };\r\n\r\n  const toggleComponentVisibility = (componentId: string) => {\r\n    const updatedComponents = components.map(comp =>\r\n      comp.id === componentId ? { ...comp, visible: !comp.visible } : comp\r\n    );\r\n    saveDashboardConfig(updatedComponents);\r\n  };\r\n\r\n  const toggleFavorite = (componentId: string) => {\r\n    const updatedComponents = components.map(comp =>\r\n      comp.id === componentId ? { ...comp, favorite: !comp.favorite } : comp\r\n    );\r\n    saveDashboardConfig(updatedComponents);\r\n  };\r\n\r\n  const addComponent = (component: DashboardComponent) => {\r\n    const newComponent = {\r\n      ...component,\r\n      position: components.length + 1,\r\n      visible: true,\r\n      favorite: false\r\n    };\r\n    const updatedComponents = [...components, newComponent];\r\n    saveDashboardConfig(updatedComponents);\r\n  };\r\n\r\n  const removeComponent = (componentId: string) => {\r\n    const updatedComponents = components.filter(comp => comp.id !== componentId);\r\n    saveDashboardConfig(updatedComponents);\r\n  };\r\n\r\n  const renderComponent = (component: DashboardComponent) => {\r\n    if (!component.visible) return null;\r\n\r\n    switch (component.type) {\r\n      case 'metric':\r\n        return (\r\n          <DataCard\r\n            key={component.id}\r\n            title={component.title}\r\n            value={component.data.value}\r\n            subtitle={component.description}\r\n            icon={component.icon}\r\n            color={component.color}\r\n            trend={component.data.trend ? {\r\n              value: component.data.change,\r\n              direction: component.data.trend\r\n            } : undefined}\r\n            onClick={() => navigate(`/${component.id.split('-')[0]}`)}\r\n          />\r\n        );\r\n\r\n      case 'progress':\r\n        return (\r\n          <ProgressCard\r\n            key={component.id}\r\n            title={component.title}\r\n            progress={component.data.progress}\r\n            current={component.data.current}\r\n            total={component.data.total}\r\n            color={component.color}\r\n            subtitle={component.description}\r\n          />\r\n        );\r\n\r\n      case 'quick-action':\r\n        return (\r\n          <Card key={component.id} className=\"h-full\">\r\n            <CardContent>\r\n              <Box className=\"flex items-center justify-between mb-4\">\r\n                <Box className=\"flex items-center\">\r\n                  <Avatar sx={{ bgcolor: component.color, mr: 2 }}>\r\n                    {component.icon}\r\n                  </Avatar>\r\n                  <Box>\r\n                    <Typography variant=\"h6\" className=\"font-semibold\">\r\n                      {component.title}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" className=\"text-gray-600\">\r\n                      {component.description}\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n                <Box className=\"flex items-center space-x-1\">\r\n                  <Tooltip title=\"Favorit\">\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={() => toggleFavorite(component.id)}\r\n                      color={component.favorite ? 'primary' : 'default'}\r\n                    >\r\n                      <FavoriteIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                  <Tooltip title=\"Ausblenden\">\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={() => toggleComponentVisibility(component.id)}\r\n                    >\r\n                      <VisibilityOffIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Box>\r\n              </Box>\r\n              <Box className=\"grid grid-cols-2 gap-2\">\r\n                {component.data.actions.map((action: any, index: number) => (\r\n                  <Button\r\n                    key={index}\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    startIcon={action.icon}\r\n                    onClick={() => navigate(action.route)}\r\n                    className=\"h-12\"\r\n                  >\r\n                    {action.label}\r\n                  </Button>\r\n                ))}\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        );\r\n\r\n      case 'notification':\r\n        return (\r\n          <Card key={component.id} className=\"h-full\">\r\n            <CardContent>\r\n              <Box className=\"flex items-center justify-between mb-4\">\r\n                <Box className=\"flex items-center\">\r\n                  <Avatar sx={{ bgcolor: component.color, mr: 2 }}>\r\n                    {component.icon}\r\n                  </Avatar>\r\n                  <Box>\r\n                    <Typography variant=\"h6\" className=\"font-semibold\">\r\n                      {component.title}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" className=\"text-gray-600\">\r\n                      {component.description}\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n                <Box className=\"flex items-center space-x-1\">\r\n                  <Tooltip title=\"Favorit\">\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={() => toggleFavorite(component.id)}\r\n                      color={component.favorite ? 'primary' : 'default'}\r\n                    >\r\n                      <FavoriteIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                  <Tooltip title=\"Ausblenden\">\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={() => toggleComponentVisibility(component.id)}\r\n                    >\r\n                      <VisibilityOffIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Box>\r\n              </Box>\r\n              <Box className=\"space-y-2\">\r\n                {component.data.notifications.map((notification: any) => (\r\n                  <Alert\r\n                    key={notification.id}\r\n                    severity={notification.type}\r\n                    className=\"text-sm\"\r\n                    action={\r\n                      <Typography variant=\"caption\" className=\"text-gray-500\">\r\n                        {notification.time}\r\n                      </Typography>\r\n                    }\r\n                  >\r\n                    {notification.message}\r\n                  </Alert>\r\n                ))}\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        );\r\n\r\n      case 'favorite':\r\n        return (\r\n          <Card key={component.id} className=\"h-full\">\r\n            <CardContent>\r\n              <Box className=\"flex items-center justify-between mb-4\">\r\n                <Box className=\"flex items-center\">\r\n                  <Avatar sx={{ bgcolor: component.color, mr: 2 }}>\r\n                    {component.icon}\r\n                  </Avatar>\r\n                  <Box>\r\n                    <Typography variant=\"h6\" className=\"font-semibold\">\r\n                      {component.title}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" className=\"text-gray-600\">\r\n                      {component.description}\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n                <Box className=\"flex items-center space-x-1\">\r\n                  <Tooltip title=\"Favorit\">\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={() => toggleFavorite(component.id)}\r\n                      color={component.favorite ? 'primary' : 'default'}\r\n                    >\r\n                      <FavoriteIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                  <Tooltip title=\"Ausblenden\">\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={() => toggleComponentVisibility(component.id)}\r\n                    >\r\n                      <VisibilityOffIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Box>\r\n              </Box>\r\n              <Box className=\"grid grid-cols-2 gap-2\">\r\n                {component.data.favorites.map((favorite: any, index: number) => (\r\n                  <Button\r\n                    key={index}\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    startIcon={favorite.icon}\r\n                    onClick={() => navigate(favorite.route)}\r\n                    className=\"h-12\"\r\n                  >\r\n                    {favorite.label}\r\n                  </Button>\r\n                ))}\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        );\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const getGridSize = (size: string) => {\r\n    switch (size) {\r\n      case 'small': return 'md:w-1/4';\r\n      case 'medium': return 'md:w-1/2';\r\n      case 'large': return 'md:w-full';\r\n      default: return 'md:w-1/2';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box className=\"flex items-center justify-center h-64\">\r\n        <LinearProgress className=\"w-32\" />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box className=\"p-6 bg-gray-50 min-h-screen\">\r\n      {/* Header */}\r\n      <SectionHeader\r\n        title={`Willkommen zurück, ${user?.full_name || 'Benutzer'}!`}\r\n        subtitle=\"Ihr personalisiertes VALEO NeuroERP Dashboard\"\r\n        actions={\r\n          <Box className=\"flex items-center space-x-2\">\r\n            <Chip\r\n              icon={<BusinessIcon />}\r\n              label={getUserRole().toUpperCase()}\r\n              color=\"primary\"\r\n              variant=\"outlined\"\r\n            />\r\n            <Button\r\n              variant=\"outlined\"\r\n              startIcon={<SettingsIcon />}\r\n              onClick={() => setSettingsOpen(true)}\r\n            >\r\n              Dashboard anpassen\r\n            </Button>\r\n          </Box>\r\n        }\r\n      />\r\n\r\n      {/* Dashboard Grid */}\r\n      <Box className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n        {components\r\n          .filter(comp => comp.visible)\r\n          .sort((a, b) => a.position - b.position)\r\n          .map(component => (\r\n            <Box key={component.id} className={`w-full ${getGridSize(component.size)}`}>\r\n              {renderComponent(component)}\r\n            </Box>\r\n          ))}\r\n      </Box>\r\n\r\n      {/* Einstellungen Dialog */}\r\n      <Dialog\r\n        open={settingsOpen}\r\n        onClose={() => setSettingsOpen(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>\r\n          Dashboard anpassen\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box className=\"space-y-4\">\r\n            <Typography variant=\"h6\" className=\"font-semibold\">\r\n              Verfügbare Komponenten\r\n            </Typography>\r\n            \r\n            <Box className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              {availableComponents.map(component => {\r\n                const isVisible = components.some(c => c.id === component.id && c.visible);\r\n                const isAdded = components.some(c => c.id === component.id);\r\n                \r\n                return (\r\n                  <Card key={component.id} variant=\"outlined\">\r\n                    <CardContent>\r\n                      <Box className=\"flex items-center justify-between\">\r\n                        <Box className=\"flex items-center\">\r\n                          <Avatar sx={{ bgcolor: component.color, mr: 2, width: 32, height: 32 }}>\r\n                            {component.icon}\r\n                          </Avatar>\r\n                          <Box>\r\n                            <Typography variant=\"subtitle2\" className=\"font-semibold\">\r\n                              {component.title}\r\n                            </Typography>\r\n                            <Typography variant=\"caption\" className=\"text-gray-600\">\r\n                              {component.description}\r\n                            </Typography>\r\n                          </Box>\r\n                        </Box>\r\n                        <Box className=\"flex items-center space-x-1\">\r\n                          {component.roleBased && (\r\n                            <Chip\r\n                              label=\"Rollenbasiert\"\r\n                              size=\"small\"\r\n                              variant=\"outlined\"\r\n                              color=\"primary\"\r\n                            />\r\n                          )}\r\n                          {isAdded ? (\r\n                            <Button\r\n                              size=\"small\"\r\n                              variant=\"outlined\"\r\n                              color=\"error\"\r\n                              startIcon={<RemoveIcon />}\r\n                              onClick={() => removeComponent(component.id)}\r\n                            >\r\n                              Entfernen\r\n                            </Button>\r\n                          ) : (\r\n                            <Button\r\n                              size=\"small\"\r\n                              variant=\"contained\"\r\n                              startIcon={<AddIcon />}\r\n                              onClick={() => addComponent(component)}\r\n                            >\r\n                              Hinzufügen\r\n                            </Button>\r\n                          )}\r\n                        </Box>\r\n                      </Box>\r\n                    </CardContent>\r\n                  </Card>\r\n                );\r\n              })}\r\n            </Box>\r\n\r\n            <Divider />\r\n\r\n            <Typography variant=\"h6\" className=\"font-semibold\">\r\n              Aktuelle Komponenten\r\n            </Typography>\r\n            \r\n            <Box className=\"space-y-2\">\r\n              {components.map(component => (\r\n                <Box key={component.id} className=\"flex items-center justify-between p-3 border rounded\">\r\n                  <Box className=\"flex items-center\">\r\n                    <DragIcon className=\"mr-2 text-gray-400\" />\r\n                    <Avatar sx={{ bgcolor: component.color, mr: 2, width: 24, height: 24 }}>\r\n                      {component.icon}\r\n                    </Avatar>\r\n                    <Box>\r\n                      <Typography variant=\"body2\" className=\"font-medium\">\r\n                        {component.title}\r\n                      </Typography>\r\n                      <Typography variant=\"caption\" className=\"text-gray-600\">\r\n                        {component.description}\r\n                      </Typography>\r\n                    </Box>\r\n                  </Box>\r\n                  <Box className=\"flex items-center space-x-2\">\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Switch\r\n                          checked={component.visible}\r\n                          onChange={() => toggleComponentVisibility(component.id)}\r\n                          size=\"small\"\r\n                        />\r\n                      }\r\n                      label=\"Sichtbar\"\r\n                    />\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Switch\r\n                          checked={component.favorite}\r\n                          onChange={() => toggleFavorite(component.id)}\r\n                          size=\"small\"\r\n                        />\r\n                      }\r\n                      label=\"Favorit\"\r\n                    />\r\n                  </Box>\r\n                </Box>\r\n              ))}\r\n            </Box>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setSettingsOpen(false)}>\r\n            Schließen\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={() => {\r\n              // Reset auf Standard-Konfiguration\r\n              const userRole = getUserRole();\r\n              const defaultComponents = availableComponents\r\n                .filter(comp => !comp.roleBased || comp.allowedRoles.includes(userRole))\r\n                .map((comp, index) => ({\r\n                  ...comp,\r\n                  position: index + 1,\r\n                  visible: true,\r\n                  favorite: false\r\n                }));\r\n              saveDashboardConfig(defaultComponents);\r\n              setSettingsOpen(false);\r\n            }}\r\n          >\r\n            Zurücksetzen\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PersonalizedDashboard; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\ProductionManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\ProduktFormular.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\ProjectManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\ProjektFormular.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\PurchasingManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\QualityManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\ReportingAnalytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\SalesManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\SapFioriDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\SentryErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\SettingsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\Sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\StatusCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\Table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\TestPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\TransactionsPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTransactions'. Either include it or remove the dependency array.","line":79,"column":6,"nodeType":"ArrayExpression","endLine":79,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadTransactions]","fix":{"range":[1748,1750],"text":"[loadTransactions]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Card, \r\n  Typography, \r\n  Button,\r\n  Chip,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n  Tooltip,\r\n  Alert,\r\n  CircularProgress,\r\n  TablePagination,\r\n  InputAdornment\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Search as SearchIcon,\r\n  Refresh as RefreshIcon,\r\n  TrendingUp as TrendingUpIcon,\r\n  TrendingDown as TrendingDownIcon,\r\n  AccountBalance as AccountBalanceIcon\r\n} from '@mui/icons-material';\r\nimport { useApi } from '../contexts/ApiContext';\r\nimport {\r\n  ObjectPageHeader,\r\n  ActionBar,\r\n  MessageStrip\r\n} from '../components/ui/NeuroFlowComponents';\r\n\r\ninterface TransactionFormData {\r\n  type: string;\r\n  amount: number;\r\n  description: string;\r\n  date: string;\r\n}\r\n\r\nconst TransactionsPage: React.FC = () => {\r\n  const {\r\n    transactions,\r\n    getTransactions,\r\n    createTransaction,\r\n    isLoading,\r\n    error\r\n  } = useApi();\r\n\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [editingTransaction, setEditingTransaction] = useState<any>(null);\r\n  const [formData, setFormData] = useState<TransactionFormData>({\r\n    type: 'income',\r\n    amount: 0,\r\n    description: '',\r\n    date: new Date().toISOString().split('T')[0]\r\n  });\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [filterType, setFilterType] = useState('all');\r\n\r\n  useEffect(() => {\r\n    loadTransactions();\r\n  }, []);\r\n\r\n  const loadTransactions = async () => {\r\n    await getTransactions();\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      if (editingTransaction) {\r\n        // TODO: Implement updateTransaction\r\n        console.log('Update transaction:', editingTransaction.id, formData);\r\n      } else {\r\n        await createTransaction({\r\n          ...formData,\r\n          user_id: 'current-user-id', // TODO: Get from context\r\n          status: 'pending'\r\n        });\r\n      }\r\n      setOpenDialog(false);\r\n      resetForm();\r\n      loadTransactions();\r\n    } catch (err) {\r\n      console.error('Error saving transaction:', err);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (id: string) => {\r\n    if (window.confirm('Möchten Sie diese Transaktion wirklich löschen?')) {\r\n      // TODO: Implement deleteTransaction\r\n      console.log('Delete transaction:', id);\r\n      loadTransactions();\r\n    }\r\n  };\r\n\r\n  const handleEdit = (transaction: any) => {\r\n    setEditingTransaction(transaction);\r\n    setFormData({\r\n      type: transaction.type,\r\n      amount: transaction.amount,\r\n      description: transaction.description || '',\r\n      date: new Date(transaction.date).toISOString().split('T')[0]\r\n    });\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      type: 'income',\r\n      amount: 0,\r\n      description: '',\r\n      date: new Date().toISOString().split('T')[0]\r\n    });\r\n    setEditingTransaction(null);\r\n  };\r\n\r\n  const filteredTransactions = transactions.filter(transaction => {\r\n    const matchesSearch = transaction.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         transaction.type.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesType = filterType === 'all' || transaction.type === filterType;\r\n    return matchesSearch && matchesType;\r\n  });\r\n\r\n  const paginatedTransactions = filteredTransactions.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'completed': return 'success';\r\n      case 'pending': return 'warning';\r\n      case 'failed': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getTypeIcon = (type: string) => {\r\n    return type === 'income' ? <TrendingUpIcon color=\"success\" /> : <TrendingDownIcon color=\"error\" />;\r\n  };\r\n\r\n  const totalAmount = filteredTransactions.reduce((sum, t) => sum + t.amount, 0);\r\n\r\n  return (\r\n    <Box sx={{ minHeight: '100vh', bgcolor: '#F5F6F7' }}>\r\n      {/* Header */}\r\n      <ObjectPageHeader\r\n        title=\"Transaktionen\"\r\n        subtitle=\"Verwaltung aller Finanztransaktionen\"\r\n        status={`${filteredTransactions.length} Transaktionen`}\r\n        actions={\r\n          <Box sx={{ display: 'flex', gap: 1 }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<AddIcon />}\r\n              onClick={() => setOpenDialog(true)}\r\n            >\r\n              Neue Transaktion\r\n            </Button>\r\n            <Button\r\n              variant=\"outlined\"\r\n              startIcon={<RefreshIcon />}\r\n              onClick={loadTransactions}\r\n              disabled={isLoading}\r\n            >\r\n              Aktualisieren\r\n            </Button>\r\n          </Box>\r\n        }\r\n      />\r\n\r\n      {/* Error Display */}\r\n      {error && (\r\n        <Box sx={{ px: 3 }}>\r\n          <MessageStrip type=\"error\" title=\"Fehler\">\r\n            {error}\r\n          </MessageStrip>\r\n        </Box>\r\n      )}\r\n\r\n      {/* Action Bar */}\r\n      <ActionBar\r\n        title=\"Transaktionsverwaltung\"\r\n        actions={[\r\n          {\r\n            label: 'Filter zurücksetzen',\r\n            onClick: () => {\r\n              setSearchTerm('');\r\n              setFilterType('all');\r\n            },\r\n            variant: 'outlined'\r\n          }\r\n        ]}\r\n      />\r\n\r\n      <Box sx={{ p: 3 }}>\r\n        {/* Summary Cards */}\r\n        <Box className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\r\n          <Card sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n              <AccountBalanceIcon sx={{ fontSize: 40, color: '#0A6ED1' }} />\r\n              <Box>\r\n                <Typography variant=\"h4\" sx={{ color: '#0A6ED1', fontWeight: 600 }}>\r\n                  {filteredTransactions.length}\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                  Gesamte Transaktionen\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n\r\n          <Card sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n              <TrendingUpIcon sx={{ fontSize: 40, color: '#107C41' }} />\r\n              <Box>\r\n                <Typography variant=\"h4\" sx={{ color: '#107C41', fontWeight: 600 }}>\r\n                  {filteredTransactions.filter(t => t.type === 'income').length}\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                  Einnahmen\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n\r\n          <Card sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n              <TrendingDownIcon sx={{ fontSize: 40, color: '#BB0000' }} />\r\n              <Box>\r\n                <Typography variant=\"h4\" sx={{ color: '#BB0000', fontWeight: 600 }}>\r\n                  {filteredTransactions.filter(t => t.type === 'expense').length}\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                  Ausgaben\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n        </Box>\r\n\r\n        {/* Filters */}\r\n        <Card sx={{ p: 3, mb: 3 }}>\r\n          <Box className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n            <TextField\r\n              fullWidth\r\n              label=\"Suchen\"\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <SearchIcon />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n            <FormControl fullWidth>\r\n              <InputLabel>Typ</InputLabel>\r\n              <Select\r\n                value={filterType}\r\n                onChange={(e) => setFilterType(e.target.value)}\r\n                label=\"Typ\"\r\n              >\r\n                <MenuItem value=\"all\">Alle</MenuItem>\r\n                <MenuItem value=\"income\">Einnahmen</MenuItem>\r\n                <MenuItem value=\"expense\">Ausgaben</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n              <Typography variant=\"h6\" sx={{ color: '#0A6ED1' }}>\r\n                Gesamtbetrag: {totalAmount.toFixed(2)}€\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n        </Card>\r\n\r\n        {/* Data Table */}\r\n        <Card>\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow sx={{ bgcolor: '#F5F6F7' }}>\r\n                  <TableCell>Typ</TableCell>\r\n                  <TableCell>Betrag</TableCell>\r\n                  <TableCell>Beschreibung</TableCell>\r\n                  <TableCell>Datum</TableCell>\r\n                  <TableCell>Status</TableCell>\r\n                  <TableCell align=\"right\">Aktionen</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {paginatedTransactions.map((transaction) => (\r\n                  <TableRow key={transaction.id} hover>\r\n                    <TableCell>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                        {getTypeIcon(transaction.type)}\r\n                        <Typography variant=\"body2\" sx={{ textTransform: 'capitalize' }}>\r\n                          {transaction.type}\r\n                        </Typography>\r\n                      </Box>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography\r\n                        variant=\"body2\"\r\n                        sx={{\r\n                          color: transaction.type === 'income' ? '#107C41' : '#BB0000',\r\n                          fontWeight: 600\r\n                        }}\r\n                      >\r\n                        {transaction.amount.toFixed(2)}€\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\" sx={{ maxWidth: 200 }}>\r\n                        {transaction.description || '-'}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\">\r\n                        {new Date(transaction.date).toLocaleDateString('de-DE')}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Chip\r\n                        label={transaction.status}\r\n                        size=\"small\"\r\n                        color={getStatusColor(transaction.status) as any}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                      <Box sx={{ display: 'flex', gap: 1 }}>\r\n                        <Tooltip title=\"Bearbeiten\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => handleEdit(transaction)}\r\n                          >\r\n                            <EditIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Löschen\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            color=\"error\"\r\n                            onClick={() => handleDelete(transaction.id)}\r\n                          >\r\n                            <DeleteIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </Box>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n                {paginatedTransactions.length === 0 && (\r\n                  <TableRow>\r\n                    <TableCell colSpan={6} align=\"center\" sx={{ py: 4 }}>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Keine Transaktionen gefunden\r\n                      </Typography>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          \r\n          <TablePagination\r\n            component=\"div\"\r\n            count={filteredTransactions.length}\r\n            page={page}\r\n            onPageChange={(_, newPage) => setPage(newPage)}\r\n            rowsPerPage={rowsPerPage}\r\n            onRowsPerPageChange={(e) => {\r\n              setRowsPerPage(parseInt(e.target.value, 10));\r\n              setPage(0);\r\n            }}\r\n            labelRowsPerPage=\"Zeilen pro Seite:\"\r\n            labelDisplayedRows={({ from, to, count }) => `${from}-${to} von ${count}`}\r\n          />\r\n        </Card>\r\n      </Box>\r\n\r\n      {/* Create/Edit Dialog */}\r\n      <Dialog open={openDialog} onClose={() => setOpenDialog(false)} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>\r\n          {editingTransaction ? 'Transaktion bearbeiten' : 'Neue Transaktion'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ pt: 2 }}>\r\n            <FormControl fullWidth margin=\"normal\">\r\n              <InputLabel>Typ</InputLabel>\r\n              <Select\r\n                value={formData.type}\r\n                onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n                label=\"Typ\"\r\n              >\r\n                <MenuItem value=\"income\">Einnahme</MenuItem>\r\n                <MenuItem value=\"expense\">Ausgabe</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <TextField\r\n              fullWidth\r\n              label=\"Betrag\"\r\n              type=\"number\"\r\n              value={formData.amount}\r\n              onChange={(e) => setFormData({ ...formData, amount: parseFloat(e.target.value) || 0 })}\r\n              margin=\"normal\"\r\n              InputProps={{\r\n                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n              }}\r\n            />\r\n\r\n            <TextField\r\n              fullWidth\r\n              label=\"Beschreibung\"\r\n              value={formData.description}\r\n              onChange={(e) => setFormData({ ...formData, description: e.target.value })}\r\n              margin=\"normal\"\r\n              multiline\r\n              rows={3}\r\n            />\r\n\r\n            <TextField\r\n              fullWidth\r\n              label=\"Datum\"\r\n              type=\"date\"\r\n              value={formData.date}\r\n              onChange={(e) => setFormData({ ...formData, date: e.target.value })}\r\n              margin=\"normal\"\r\n              InputLabelProps={{ shrink: true }}\r\n            />\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenDialog(false)}>Abbrechen</Button>\r\n          <Button onClick={handleSubmit} variant=\"contained\">\r\n            {editingTransaction ? 'Aktualisieren' : 'Erstellen'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Loading Overlay */}\r\n      {isLoading && (\r\n        <Box sx={{ \r\n          position: 'fixed', \r\n          top: 0, \r\n          left: 0, \r\n          right: 0, \r\n          bottom: 0, \r\n          bgcolor: 'rgba(0,0,0,0.3)', \r\n          display: 'flex', \r\n          alignItems: 'center', \r\n          justifyContent: 'center',\r\n          zIndex: 9999\r\n        }}>\r\n          <CircularProgress />\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default TransactionsPage; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\TrustAwareDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\TrustAwareLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\TrustIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\WarehouseManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\WarenwirtschaftFormular.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\__tests__\\Button.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\__tests__\\DataCard.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\__tests__\\Input.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\__tests__\\Layout.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\__tests__\\Modal.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\__tests__\\SapFioriDashboard.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\__tests__\\SimpleTest.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\forms\\InvoiceForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\tables\\InvoiceTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\tables\\InvoiceTable_MCP.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\tables\\InvoiceTable_MCP_NEW.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\ui\\ComponentLibrary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\ui\\ModernComponents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\legacy\\ui\\NeuroFlowComponents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\pages\\IntegrationPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1050,1053],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1050,1053],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1059,1062],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1059,1062],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NavigationTab' is defined but never used. Allowed unused vars must match /^_/u.","line":74,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'initialTab' is assigned a value but never used. Allowed unused args must match /^_/u.","line":104,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":104,"endColumn":13},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchContacts' and 'fetchOrders'. Either include them or remove the dependency array.","line":139,"column":6,"nodeType":"ArrayExpression","endLine":139,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchContacts, fetchOrders]","fix":{"range":[3249,3251],"text":"[fetchContacts, fetchOrders]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3647,3650],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3647,3650],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Tabs,\r\n  Tab,\r\n  Box,\r\n  Alert,\r\n  CircularProgress,\r\n  Paper,\r\n  Button,\r\n  Chip,\r\n  CardActions\r\n} from '@mui/material';\r\nimport {\r\n  Assignment as AssignmentIcon,\r\n  People as PeopleIcon,\r\n  LocalShipping as DeliveryIcon,\r\n  Assessment as AssessmentIcon\r\n} from '@mui/icons-material';\r\nimport { useErpStore } from '../store/erpStore';\r\nimport { OrderForm } from '../components/zvoove-integration/ZvooveOrderForm';\r\nimport { ContactOverview } from '../components/zvoove-integration/ZvooveContactOverview';\r\nimport { Navigation } from '../components/zvoove-integration/Navigation';\r\n\r\n// TypeScript Interfaces\r\ninterface IntegrationPageProps {\r\n  initialTab?: 'orders' | 'contacts' | 'deliveries';\r\n}\r\n\r\ninterface ContactFilters {\r\n  contactType: 'all' | 'sales' | 'purchase';\r\n  sortBy: 'contactNumber' | 'name' | 'date' | 'representative';\r\n  sortOrder: 'asc' | 'desc';\r\n  representative: string;\r\n  dateRange: { from: any; to: any };\r\n  parity: string;\r\n  onlyPlannedAppointments: boolean;\r\n  articleSumsInPrint: boolean;\r\n  searchText: string;\r\n  contactNumber: string;\r\n}\r\n\r\ninterface OrderData {\r\n  // Belegdaten\r\n  customerNumber: string;\r\n  debtorNumber: string;\r\n  documentDate: Date;\r\n  contactPerson: string;\r\n  \r\n  // Positionen\r\n  positions: OrderPosition[];\r\n  \r\n  // Summen\r\n  netAmount: number;\r\n  vatAmount: number;\r\n  totalAmount: number;\r\n}\r\n\r\ninterface OrderPosition {\r\n  id: string;\r\n  articleNumber: string;\r\n  description: string;\r\n  quantity: number;\r\n  unit: string;\r\n  unitPrice: number;\r\n  discount: number;\r\n  netPrice: number;\r\n}\r\n\r\ntype NavigationTab = 'orders' | 'contacts' | 'deliveries';\r\n\r\n// TabPanel Component\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport const IntegrationPage: React.FC<IntegrationPageProps> = ({\r\n  initialTab = 'orders'\r\n}) => {\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const [navigationTab, setNavigationTab] = useState<'ALLGEMEIN' | 'ERFASSUNG' | 'ABRECHNUNG' | 'LAGER' | 'PRODUKTION' | 'AUSWERTUNG'>('ERFASSUNG');\r\n  \r\n  // Store Hooks\r\n  const {\r\n    orders,\r\n    contacts,\r\n    loading,\r\n    error,\r\n    fetchOrders,\r\n    fetchContacts,\r\n    createOrder,\r\n    clearError\r\n  } = useErpStore();\r\n\r\n  // Contact Filters\r\n  const [contactFilters, setContactFilters] = useState<ContactFilters>({\r\n    contactType: 'all',\r\n    sortBy: 'contactNumber',\r\n    sortOrder: 'asc',\r\n    representative: '',\r\n    dateRange: { from: null, to: null },\r\n    parity: '',\r\n    onlyPlannedAppointments: false,\r\n    articleSumsInPrint: false,\r\n    searchText: '',\r\n    contactNumber: ''\r\n  });\r\n\r\n  // Initial Data laden\r\n  useEffect(() => {\r\n    fetchOrders();\r\n    fetchContacts();\r\n  }, []);\r\n\r\n  // Tab ändern\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setActiveTab(newValue);\r\n  };\r\n\r\n  // Navigation Tab ändern\r\n  const handleNavigationTabChange = (tab: 'ALLGEMEIN' | 'ERFASSUNG' | 'ABRECHNUNG' | 'LAGER' | 'PRODUKTION' | 'AUSWERTUNG') => {\r\n    setNavigationTab(tab);\r\n  };\r\n\r\n  // Sub-Item klicken\r\n  const handleSubItemClick = (subItem: any) => {\r\n    console.log('Sub-Item geklickt:', subItem);\r\n    // Hier könnte Navigation zu spezifischen Seiten erfolgen\r\n  };\r\n\r\n  // Order speichern\r\n  const handleOrderSave = async (orderData: OrderData) => {\r\n    try {\r\n      await createOrder(orderData);\r\n      console.log('Auftrag erfolgreich erstellt:', orderData);\r\n    } catch (error) {\r\n      console.error('Fehler beim Erstellen des Auftrags:', error);\r\n    }\r\n  };\r\n\r\n  // Order abbrechen\r\n  const handleOrderCancel = () => {\r\n    console.log('Auftragserfassung abgebrochen');\r\n  };\r\n\r\n  // Contact Filter ändern\r\n  const handleContactFilterChange = (newFilters: ContactFilters) => {\r\n    setContactFilters(newFilters);\r\n    fetchContacts();\r\n  };\r\n\r\n  // Statistiken berechnen\r\n  const orderStats = {\r\n    total: orders.length,\r\n    byType: {\r\n      offer: orders.filter(order => order.status === 'offer').length,\r\n      order: orders.filter(order => order.status === 'order').length\r\n    },\r\n    totalAmount: orders.reduce((sum, order) => sum + order.totalAmount, 0)\r\n  };\r\n  const contactStats = {\r\n    total: contacts.length,\r\n    byType: {\r\n      sales: contacts.filter(contact => contact.contactType === 'sales').length,\r\n      purchase: contacts.filter(contact => contact.contactType === 'purchase').length\r\n    },\r\n    totalOrderQuantity: contacts.reduce((sum, contact) => sum + contact.totalOrderQuantity, 0),\r\n    totalRemainingQuantity: contacts.reduce((sum, contact) => sum + contact.totalRemainingQuantity, 0)\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      {/* Navigation */}\r\n      <Navigation\r\n        activeTab={navigationTab}\r\n        onTabChange={handleNavigationTabChange}\r\n        onSubItemClick={handleSubItemClick}\r\n      />\r\n\r\n      <Container maxWidth=\"xl\" className=\"py-8\">\r\n        {/* Header */}\r\n        <Box className=\"mb-8\">\r\n          <Typography variant=\"h4\" className=\"text-gray-800 font-bold mb-2\">\r\n            zvoove Handel Integration\r\n          </Typography>\r\n          <Typography variant=\"body1\" className=\"text-gray-600\">\r\n            Vollständige Integration mit dem Warenwirtschaftssystem zvoove Handel\r\n          </Typography>\r\n        </Box>\r\n\r\n        {/* Error Alert */}\r\n        {error && (\r\n          <Alert \r\n            severity=\"error\" \r\n            className=\"mb-6\"\r\n            onClose={clearError}\r\n          >\r\n            {error}\r\n          </Alert>\r\n        )}\r\n\r\n        {/* Loading Indicator */}\r\n        {loading && (\r\n          <Box className=\"flex justify-center items-center py-8\">\r\n            <CircularProgress />\r\n          </Box>\r\n        )}\r\n\r\n        {/* Statistiken */}\r\n        <Grid container spacing={3} className=\"mb-8\">\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\" className=\"text-gray-700 mb-2\">\r\n                  Aufträge\r\n                </Typography>\r\n                <Typography variant=\"h4\" className=\"text-blue-600 font-bold\">\r\n                  {orderStats.total}\r\n                </Typography>\r\n                <Box className=\"flex space-x-2 mt-2\">\r\n                  <Chip label={`${orderStats.byType.offer} Angebote`} size=\"small\" color=\"primary\" variant=\"outlined\" />\r\n                  <Chip label={`${orderStats.byType.order} Aufträge`} size=\"small\" color=\"success\" variant=\"outlined\" />\r\n                </Box>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\" className=\"text-gray-700 mb-2\">\r\n                  Kontakte\r\n                </Typography>\r\n                <Typography variant=\"h4\" className=\"text-green-600 font-bold\">\r\n                  {contactStats.total}\r\n                </Typography>\r\n                <Box className=\"flex space-x-2 mt-2\">\r\n                  <Chip label={`${contactStats.byType.sales} Verkauf`} size=\"small\" color=\"success\" variant=\"outlined\" />\r\n                  <Chip label={`${contactStats.byType.purchase} Einkauf`} size=\"small\" color=\"warning\" variant=\"outlined\" />\r\n                </Box>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\" className=\"text-gray-700 mb-2\">\r\n                  Gesamtumsatz\r\n                </Typography>\r\n                <Typography variant=\"h4\" className=\"text-purple-600 font-bold\">\r\n                  {orderStats.totalAmount.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' })}\r\n                </Typography>\r\n                <Typography variant=\"body2\" className=\"text-gray-600 mt-1\">\r\n                  Alle Aufträge\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={3}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\" className=\"text-gray-700 mb-2\">\r\n                  Bestellmenge\r\n                </Typography>\r\n                <Typography variant=\"h4\" className=\"text-orange-600 font-bold\">\r\n                  {contactStats.totalOrderQuantity.toLocaleString()}\r\n                </Typography>\r\n                <Typography variant=\"body2\" className=\"text-gray-600 mt-1\">\r\n                  Rest: {contactStats.totalRemainingQuantity.toLocaleString()}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* Hauptinhalt */}\r\n        <Paper className=\"shadow-lg\">\r\n          <Tabs \r\n            value={activeTab} \r\n            onChange={handleTabChange}\r\n            className=\"border-b border-gray-200\"\r\n            indicatorColor=\"primary\"\r\n            textColor=\"primary\"\r\n          >\r\n            <Tab \r\n              icon={<AssignmentIcon />} \r\n              label=\"Auftragserfassung\" \r\n              className=\"flex items-center space-x-2\"\r\n            />\r\n            <Tab \r\n              icon={<PeopleIcon />} \r\n              label=\"Kontaktübersicht\" \r\n              className=\"flex items-center space-x-2\"\r\n            />\r\n            <Tab \r\n              icon={<DeliveryIcon />} \r\n              label=\"Lieferungen\" \r\n              className=\"flex items-center space-x-2\"\r\n            />\r\n            <Tab \r\n              icon={<AssessmentIcon />} \r\n              label=\"Auswertungen\" \r\n              className=\"flex items-center space-x-2\"\r\n            />\r\n          </Tabs>\r\n\r\n          {/* Auftragserfassung */}\r\n          <TabPanel value={activeTab} index={0}>\r\n            <OrderForm\r\n              mode=\"order\"\r\n              onSave={handleOrderSave}\r\n              onCancel={handleOrderCancel}\r\n            />\r\n          </TabPanel>\r\n\r\n          {/* Kontaktübersicht */}\r\n          <TabPanel value={activeTab} index={1}>\r\n            <ContactOverview\r\n              filters={contactFilters}\r\n              onFilterChange={handleContactFilterChange}\r\n              contacts={contacts}\r\n              loading={loading}\r\n            />\r\n          </TabPanel>\r\n\r\n          {/* Lieferungen */}\r\n          <TabPanel value={activeTab} index={2}>\r\n            <Box className=\"text-center py-12\">\r\n              <Typography variant=\"h6\" className=\"text-gray-600 mb-4\">\r\n                Lieferungserfassung\r\n              </Typography>\r\n              <Typography variant=\"body1\" className=\"text-gray-500\">\r\n                Die Lieferungserfassung wird in einer separaten Komponente implementiert.\r\n              </Typography>\r\n              <Button \r\n                variant=\"contained\" \r\n                className=\"mt-4\"\r\n                onClick={() => console.log('Lieferungserfassung öffnen')}\r\n              >\r\n                Lieferung erstellen\r\n              </Button>\r\n            </Box>\r\n          </TabPanel>\r\n\r\n          {/* Auswertungen */}\r\n          <TabPanel value={activeTab} index={3}>\r\n            <Box className=\"text-center py-12\">\r\n              <Typography variant=\"h6\" className=\"text-gray-600 mb-4\">\r\n                Auswertungen und Berichte\r\n              </Typography>\r\n              <Typography variant=\"body1\" className=\"text-gray-500\">\r\n                Hier werden verschiedene Auswertungen und Berichte angezeigt.\r\n              </Typography>\r\n              <Grid container spacing={3} className=\"mt-6\">\r\n                <Grid item xs={12} md={6}>\r\n                  <Card>\r\n                    <CardContent>\r\n                      <Typography variant=\"h6\" className=\"mb-2\">\r\n                        Auftragsstatistiken\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" className=\"text-gray-600\">\r\n                        Detaillierte Auswertung der Aufträge nach verschiedenen Kriterien.\r\n                      </Typography>\r\n                    </CardContent>\r\n                    <CardActions>\r\n                      <Button size=\"small\" color=\"primary\">\r\n                        Bericht anzeigen\r\n                      </Button>\r\n                    </CardActions>\r\n                  </Card>\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                  <Card>\r\n                    <CardContent>\r\n                      <Typography variant=\"h6\" className=\"mb-2\">\r\n                        Kontaktstatistiken\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" className=\"text-gray-600\">\r\n                        Analyse der Kontakte und deren Aktivitäten.\r\n                      </Typography>\r\n                    </CardContent>\r\n                    <CardActions>\r\n                      <Button size=\"small\" color=\"primary\">\r\n                        Bericht anzeigen\r\n                      </Button>\r\n                    </CardActions>\r\n                  </Card>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          </TabPanel>\r\n        </Paper>\r\n\r\n        {/* Footer */}\r\n        <Box className=\"mt-8 text-center\">\r\n          <Typography variant=\"body2\" className=\"text-gray-500\">\r\n            zvoove Handel Integration v2.0.1 | Powered by VALEO NeuroERP\r\n          </Typography>\r\n        </Box>\r\n      </Container>\r\n    </div>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\public\\sw.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\scripts\\test_frontend_with_backend.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\services\\erpApi.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InquiryPosition' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UnitType' is defined but never used. Allowed unused vars must match /^_/u.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PaymentMethod' is defined but never used. Allowed unused vars must match /^_/u.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OrderStatusEnum' is defined but never used. Allowed unused vars must match /^_/u.","line":38,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OfferStatusEnum' is defined but never used. Allowed unused vars must match /^_/u.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":474,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":474,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15490,15493],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15490,15493],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":475,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":475,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15544,15547],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15544,15547],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":486,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":486,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios, { AxiosResponse } from 'axios';\r\nimport {\r\n  // Bestellvorschlag\r\n  OrderSuggestionData,\r\n  OrderSuggestionFilters,\r\n  \r\n  // Bestellung\r\n  PurchaseOrderData,\r\n  PurchaseOrderPosition,\r\n  \r\n  // Lieferanten-Angebot\r\n  SupplierOfferData,\r\n  SupplierOfferPosition,\r\n  \r\n  // Anfrage\r\n  InquiryData,\r\n  InquiryPosition,\r\n  \r\n  // Lieferschein\r\n  DeliveryNoteData,\r\n  DeliveryPosition,\r\n  \r\n  // Auftragsbestätigung\r\n  OrderConfirmationData,\r\n  ContactPerson,\r\n  Representative,\r\n  \r\n  // Angebot\r\n  OfferData,\r\n  \r\n  // Allgemeine Typen\r\n  ApiResponse,\r\n  PaginatedResponse,\r\n  FilterOptions,\r\n  DocumentType,\r\n  UnitType,\r\n  PaymentMethod,\r\n  OrderStatusEnum,\r\n  OfferStatusEnum\r\n} from '../types/erpTypes';\r\n\r\n// API-Basis-URL\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\r\n\r\n// Axios-Instanz mit Standard-Konfiguration\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request-Interceptor für Authentifizierung\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Response-Interceptor für Fehlerbehandlung\r\napiClient.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    console.error('API Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport class ErpApiService {\r\n  // ============================================================================\r\n  // BESTELLVORSCHLAG / BESTELLUNG / LIEFERANTENSTAMM\r\n  // ============================================================================\r\n\r\n  /**\r\n   * Bestellvorschläge abrufen\r\n   */\r\n  async getOrderSuggestions(filters: OrderSuggestionFilters): Promise<OrderSuggestionData[]> {\r\n    const response: AxiosResponse<ApiResponse<OrderSuggestionData[]>> = await apiClient.get('/order-suggestions', {\r\n      params: filters\r\n    });\r\n    return response.data.data || [];\r\n  }\r\n\r\n  /**\r\n   * Bestellung aus Vorschlag erstellen\r\n   */\r\n  async createOrderFromSuggestion(suggestion: OrderSuggestionData): Promise<PurchaseOrderData> {\r\n    const response: AxiosResponse<ApiResponse<PurchaseOrderData>> = await apiClient.post('/order-suggestions/create-order', suggestion);\r\n    return response.data.data!;\r\n  }\r\n\r\n  // ============================================================================\r\n  // BESTELLUNG ERSTELLEN\r\n  // ============================================================================\r\n\r\n  /**\r\n   * Bestellungen abrufen\r\n   */\r\n  async getPurchaseOrders(filters?: FilterOptions): Promise<PaginatedResponse<PurchaseOrderData>> {\r\n    const response: AxiosResponse<ApiResponse<PaginatedResponse<PurchaseOrderData>>> = await apiClient.get('/purchase-orders', {\r\n      params: filters\r\n    });\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Bestellung abrufen\r\n   */\r\n  async getPurchaseOrder(id: string): Promise<PurchaseOrderData> {\r\n    const response: AxiosResponse<ApiResponse<PurchaseOrderData>> = await apiClient.get(`/purchase-orders/${id}`);\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Bestellung erstellen\r\n   */\r\n  async createPurchaseOrder(order: PurchaseOrderData): Promise<PurchaseOrderData> {\r\n    const response: AxiosResponse<ApiResponse<PurchaseOrderData>> = await apiClient.post('/purchase-orders', order);\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Bestellung aktualisieren\r\n   */\r\n  async updatePurchaseOrder(id: string, order: Partial<PurchaseOrderData>): Promise<PurchaseOrderData> {\r\n    const response: AxiosResponse<ApiResponse<PurchaseOrderData>> = await apiClient.put(`/purchase-orders/${id}`, order);\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Bestellung löschen\r\n   */\r\n  async deletePurchaseOrder(id: string): Promise<void> {\r\n    await apiClient.delete(`/purchase-orders/${id}`);\r\n  }\r\n\r\n  /**\r\n   * Bestellposition hinzufügen\r\n   */\r\n  async addPurchaseOrderPosition(orderId: string, position: PurchaseOrderPosition): Promise<PurchaseOrderPosition> {\r\n    const response: AxiosResponse<ApiResponse<PurchaseOrderPosition>> = await apiClient.post(`/purchase-orders/${orderId}/positions`, position);\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Bestellposition aktualisieren\r\n   */\r\n  async updatePurchaseOrderPosition(orderId: string, positionId: string, position: Partial<PurchaseOrderPosition>): Promise<PurchaseOrderPosition> {\r\n    const response: AxiosResponse<ApiResponse<PurchaseOrderPosition>> = await apiClient.put(`/purchase-orders/${orderId}/positions/${positionId}`, position);\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Bestellposition löschen\r\n   */\r\n  async deletePurchaseOrderPosition(orderId: string, positionId: string): Promise<void> {\r\n    await apiClient.delete(`/purchase-orders/${orderId}/positions/${positionId}`);\r\n  }\r\n\r\n  // ============================================================================\r\n  // LIEFERANTEN-ANGEBOT\r\n  // ============================================================================\r\n\r\n  /**\r\n   * Lieferanten-Angebote abrufen\r\n   */\r\n  async getSupplierOffers(filters?: FilterOptions): Promise<PaginatedResponse<SupplierOfferData>> {\r\n    const response: AxiosResponse<ApiResponse<PaginatedResponse<SupplierOfferData>>> = await apiClient.get('/supplier-offers', {\r\n      params: filters\r\n    });\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Lieferanten-Angebot abrufen\r\n   */\r\n  async getSupplierOffer(id: string): Promise<SupplierOfferData> {\r\n    const response: AxiosResponse<ApiResponse<SupplierOfferData>> = await apiClient.get(`/supplier-offers/${id}`);\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Lieferanten-Angebot erstellen\r\n   */\r\n  async createSupplierOffer(offer: SupplierOfferData): Promise<SupplierOfferData> {\r\n    const response: AxiosResponse<ApiResponse<SupplierOfferData>> = await apiClient.post('/supplier-offers', offer);\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Lieferanten-Angebot aktualisieren\r\n   */\r\n  async updateSupplierOffer(id: string, offer: Partial<SupplierOfferData>): Promise<SupplierOfferData> {\r\n    const response: AxiosResponse<ApiResponse<SupplierOfferData>> = await apiClient.put(`/supplier-offers/${id}`, offer);\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Lieferanten-Angebot löschen\r\n   */\r\n  async deleteSupplierOffer(id: string): Promise<void> {\r\n    await apiClient.delete(`/supplier-offers/${id}`);\r\n  }\r\n\r\n  /**\r\n   * Angebotsposition hinzufügen\r\n   */\r\n  async addSupplierOfferPosition(offerId: string, position: SupplierOfferPosition): Promise<SupplierOfferPosition> {\r\n    const response: AxiosResponse<ApiResponse<SupplierOfferPosition>> = await apiClient.post(`/supplier-offers/${offerId}/positions`, position);\r\n    return response.data.data!;\r\n  }\r\n\r\n  // ============================================================================\r\n  // ANFRAGE\r\n  // ============================================================================\r\n\r\n  /**\r\n   * Anfragen abrufen\r\n   */\r\n  async getInquiries(filters?: FilterOptions): Promise<PaginatedResponse<InquiryData>> {\r\n    const response: AxiosResponse<ApiResponse<PaginatedResponse<InquiryData>>> = await apiClient.get('/inquiries', {\r\n      params: filters\r\n    });\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Anfrage abrufen\r\n   */\r\n  async getInquiry(id: string): Promise<InquiryData> {\r\n    const response: AxiosResponse<ApiResponse<InquiryData>> = await apiClient.get(`/inquiries/${id}`);\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Anfrage erstellen\r\n   */\r\n  async createInquiry(inquiry: InquiryData): Promise<InquiryData> {\r\n    const response: AxiosResponse<ApiResponse<InquiryData>> = await apiClient.post('/inquiries', inquiry);\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Anfrage aktualisieren\r\n   */\r\n  async updateInquiry(id: string, inquiry: Partial<InquiryData>): Promise<InquiryData> {\r\n    const response: AxiosResponse<ApiResponse<InquiryData>> = await apiClient.put(`/inquiries/${id}`, inquiry);\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Anfrage löschen\r\n   */\r\n  async deleteInquiry(id: string): Promise<void> {\r\n    await apiClient.delete(`/inquiries/${id}`);\r\n  }\r\n\r\n  // ============================================================================\r\n  // LIEFERSCHEIN-ERFASSUNG\r\n  // ============================================================================\r\n\r\n  /**\r\n   * Lieferscheine abrufen\r\n   */\r\n  async getDeliveryNotes(filters?: FilterOptions): Promise<PaginatedResponse<DeliveryNoteData>> {\r\n    const response: AxiosResponse<ApiResponse<PaginatedResponse<DeliveryNoteData>>> = await apiClient.get('/delivery-notes', {\r\n      params: filters\r\n    });\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Lieferschein abrufen\r\n   */\r\n  async getDeliveryNote(id: string): Promise<DeliveryNoteData> {\r\n    const response: AxiosResponse<ApiResponse<DeliveryNoteData>> = await apiClient.get(`/delivery-notes/${id}`);\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Lieferschein erstellen\r\n   */\r\n  async createDeliveryNote(delivery: DeliveryNoteData): Promise<DeliveryNoteData> {\r\n    const response: AxiosResponse<ApiResponse<DeliveryNoteData>> = await apiClient.post('/delivery-notes', delivery);\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Lieferschein aktualisieren\r\n   */\r\n  async updateDeliveryNote(id: string, delivery: Partial<DeliveryNoteData>): Promise<DeliveryNoteData> {\r\n    const response: AxiosResponse<ApiResponse<DeliveryNoteData>> = await apiClient.put(`/delivery-notes/${id}`, delivery);\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Lieferschein löschen\r\n   */\r\n  async deleteDeliveryNote(id: string): Promise<void> {\r\n    await apiClient.delete(`/delivery-notes/${id}`);\r\n  }\r\n\r\n  /**\r\n   * Lieferposition hinzufügen\r\n   */\r\n  async addDeliveryPosition(deliveryId: string, position: DeliveryPosition): Promise<DeliveryPosition> {\r\n    const response: AxiosResponse<ApiResponse<DeliveryPosition>> = await apiClient.post(`/delivery-notes/${deliveryId}/positions`, position);\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Lieferschein drucken\r\n   */\r\n  async printDeliveryNote(id: string): Promise<Blob> {\r\n    const response = await apiClient.get(`/delivery-notes/${id}/print`, {\r\n      responseType: 'blob'\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  // ============================================================================\r\n  // AUFTRAGSBESTÄTIGUNG\r\n  // ============================================================================\r\n\r\n  /**\r\n   * Auftragsbestätigungen abrufen\r\n   */\r\n  async getOrderConfirmations(filters?: FilterOptions): Promise<PaginatedResponse<OrderConfirmationData>> {\r\n    const response: AxiosResponse<ApiResponse<PaginatedResponse<OrderConfirmationData>>> = await apiClient.get('/order-confirmations', {\r\n      params: filters\r\n    });\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Auftragsbestätigung abrufen\r\n   */\r\n  async getOrderConfirmation(id: string): Promise<OrderConfirmationData> {\r\n    const response: AxiosResponse<ApiResponse<OrderConfirmationData>> = await apiClient.get(`/order-confirmations/${id}`);\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Auftragsbestätigung erstellen\r\n   */\r\n  async createOrderConfirmation(confirmation: OrderConfirmationData): Promise<OrderConfirmationData> {\r\n    const response: AxiosResponse<ApiResponse<OrderConfirmationData>> = await apiClient.post('/order-confirmations', confirmation);\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Auftragsbestätigung aktualisieren\r\n   */\r\n  async updateOrderConfirmation(id: string, confirmation: Partial<OrderConfirmationData>): Promise<OrderConfirmationData> {\r\n    const response: AxiosResponse<ApiResponse<OrderConfirmationData>> = await apiClient.put(`/order-confirmations/${id}`, confirmation);\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Auftragsbestätigung löschen\r\n   */\r\n  async deleteOrderConfirmation(id: string): Promise<void> {\r\n    await apiClient.delete(`/order-confirmations/${id}`);\r\n  }\r\n\r\n  /**\r\n   * Ansprechpartner hinzufügen\r\n   */\r\n  async addContactPerson(confirmationId: string, contact: ContactPerson): Promise<ContactPerson> {\r\n    const response: AxiosResponse<ApiResponse<ContactPerson>> = await apiClient.post(`/order-confirmations/${confirmationId}/contacts`, contact);\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Vertreter hinzufügen\r\n   */\r\n  async addRepresentative(confirmationId: string, representative: Representative): Promise<Representative> {\r\n    const response: AxiosResponse<ApiResponse<Representative>> = await apiClient.post(`/order-confirmations/${confirmationId}/representatives`, representative);\r\n    return response.data.data!;\r\n  }\r\n\r\n  // ============================================================================\r\n  // ANGEBOT\r\n  // ============================================================================\r\n\r\n  /**\r\n   * Angebote abrufen\r\n   */\r\n  async getOffers(filters?: FilterOptions): Promise<PaginatedResponse<OfferData>> {\r\n    const response: AxiosResponse<ApiResponse<PaginatedResponse<OfferData>>> = await apiClient.get('/offers', {\r\n      params: filters\r\n    });\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Angebot abrufen\r\n   */\r\n  async getOffer(id: string): Promise<OfferData> {\r\n    const response: AxiosResponse<ApiResponse<OfferData>> = await apiClient.get(`/offers/${id}`);\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Angebot erstellen\r\n   */\r\n  async createOffer(offer: OfferData): Promise<OfferData> {\r\n    const response: AxiosResponse<ApiResponse<OfferData>> = await apiClient.post('/offers', offer);\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Angebot aktualisieren\r\n   */\r\n  async updateOffer(id: string, offer: Partial<OfferData>): Promise<OfferData> {\r\n    const response: AxiosResponse<ApiResponse<OfferData>> = await apiClient.put(`/offers/${id}`, offer);\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Angebot löschen\r\n   */\r\n  async deleteOffer(id: string): Promise<void> {\r\n    await apiClient.delete(`/offers/${id}`);\r\n  }\r\n\r\n  // ============================================================================\r\n  // ALLGEMEINE FUNKTIONEN\r\n  // ============================================================================\r\n\r\n  /**\r\n   * Dokument drucken\r\n   */\r\n  async printDocument(documentType: DocumentType, id: string): Promise<Blob> {\r\n    const response = await apiClient.get(`/${documentType}/${id}/print`, {\r\n      responseType: 'blob'\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  /**\r\n   * Dokument als PDF exportieren\r\n   */\r\n  async exportDocument(documentType: DocumentType, id: string): Promise<Blob> {\r\n    const response = await apiClient.get(`/${documentType}/${id}/export`, {\r\n      responseType: 'blob'\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  /**\r\n   * Status aktualisieren\r\n   */\r\n  async updateStatus(documentType: DocumentType, id: string, status: string): Promise<void> {\r\n    await apiClient.patch(`/${documentType}/${id}/status`, { status });\r\n  }\r\n\r\n  /**\r\n   * Als erledigt markieren\r\n   */\r\n  async markAsCompleted(documentType: DocumentType, id: string): Promise<void> {\r\n    await apiClient.patch(`/${documentType}/${id}/complete`);\r\n  }\r\n\r\n  /**\r\n   * Statistiken abrufen\r\n   */\r\n  async getStatistics(): Promise<any> {\r\n    const response: AxiosResponse<ApiResponse<any>> = await apiClient.get('/statistics');\r\n    return response.data.data!;\r\n  }\r\n\r\n  /**\r\n   * Health Check\r\n   */\r\n  async healthCheck(): Promise<boolean> {\r\n    try {\r\n      const response = await apiClient.get('/health');\r\n      return response.status === 200;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n// Singleton-Instanz exportieren\r\nexport const erpApiService = new ErpApiService(); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\services\\zvooveApi.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'credentials' is defined but never used. Allowed unused args must match /^_/u.","line":4,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[553,556],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[553,556],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Basic zvooveApi service for testing purposes\r\nexport const zvooveApiService = {\r\n  // Authentication\r\n  login: async (credentials: { username: string; password: string }) => {\r\n    // Mock implementation\r\n    return Promise.resolve({ success: true, token: 'mock-token' });\r\n  },\r\n  \r\n  logout: async () => {\r\n    // Mock implementation\r\n    return Promise.resolve({ success: true });\r\n  },\r\n  \r\n  // Orders\r\n  getOrders: async () => {\r\n    // Mock implementation\r\n    return Promise.resolve({ data: [] });\r\n  },\r\n  \r\n  createOrder: async (orderData: any) => {\r\n    // Mock implementation\r\n    return Promise.resolve({ success: true, data: orderData });\r\n  },\r\n  \r\n  // Contacts\r\n  getContacts: async () => {\r\n    // Mock implementation\r\n    return Promise.resolve({ data: [] });\r\n  },\r\n  \r\n  // System\r\n  getSystemStatus: async () => {\r\n    // Mock implementation\r\n    return Promise.resolve({ status: 'online' });\r\n  }\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\App.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'logout' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":89,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":89,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\r\nimport { CssBaseline, Box, CircularProgress } from '@mui/material';\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\r\nimport { AuthProvider, useAuth } from './contexts/AuthContext';\r\nimport { PreloadRouter } from './components/PreloadRouter';\r\nimport { Navigation } from './components/Navigation';\r\nimport { PreloadIndicator } from './components/Navigation';\r\nimport { ErrorBoundary } from './components/ErrorBoundary';\r\nimport OfflineStatusBar from './components/OfflineStatusBar';\r\n\r\n// Query Client erstellen\r\nconst queryClient = new QueryClient({\r\n  defaultOptions: {\r\n    queries: {\r\n      retry: 1,\r\n      refetchOnWindowFocus: false,\r\n    },\r\n  },\r\n});\r\n\r\n// Loading Component\r\nconst LoadingSpinner: React.FC = () => (\r\n  <Box\r\n    sx={{\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      minHeight: '100vh',\r\n      flexDirection: 'column',\r\n      gap: 2\r\n    }}\r\n  >\r\n    <CircularProgress size={60} />\r\n    <Box sx={{ textAlign: 'center' }}>\r\n      <div style={{ fontSize: '1.1rem', fontWeight: 500, marginBottom: '0.5rem' }}>\r\n        VALEO NeuroERP lädt...\r\n      </div>\r\n      <div style={{ fontSize: '0.9rem', color: '#666' }}>\r\n        Bitte warten Sie einen Moment\r\n      </div>\r\n    </Box>\r\n  </Box>\r\n);\r\n\r\n// Theme erstellen\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#1976d2',\r\n      light: '#42a5f5',\r\n      dark: '#1565c0'\r\n    },\r\n    secondary: {\r\n      main: '#dc004e',\r\n      light: '#ff5983',\r\n      dark: '#9a0036'\r\n    },\r\n    background: {\r\n      default: '#f5f5f5',\r\n      paper: '#ffffff'\r\n    }\r\n  },\r\n  typography: {\r\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n  },\r\n  components: {\r\n    MuiButton: {\r\n      styleOverrides: {\r\n        root: {\r\n          textTransform: 'none',\r\n          borderRadius: 8\r\n        }\r\n      }\r\n    },\r\n    MuiCard: {\r\n      styleOverrides: {\r\n        root: {\r\n          borderRadius: 12,\r\n          boxShadow: '0 2px 8px rgba(0,0,0,0.1)'\r\n        }\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nconst AppContent: React.FC = () => {\r\n  const { isAuthenticated, loading, logout } = useAuth();\r\n\r\n  if (loading) {\r\n    return <LoadingSpinner />;\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <Navigation />\r\n      <PreloadRouter isAuthenticated={isAuthenticated} />\r\n      <PreloadIndicator />\r\n      <OfflineStatusBar />\r\n    </Router>\r\n  );\r\n};\r\n\r\nfunction App() {\r\n  return (\r\n    <ErrorBoundary>\r\n      <QueryClientProvider client={queryClient}>\r\n        <ThemeProvider theme={theme}>\r\n          <CssBaseline />\r\n          <AuthProvider>\r\n            <AppContent />\r\n          </AuthProvider>\r\n        </ThemeProvider>\r\n      </QueryClientProvider>\r\n    </ErrorBoundary>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\__mocks__\\fileMock.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\AgentProcessingOverlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\AgentSuggestion.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Chip' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":7}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport type { AgentSuggestion as AgentSuggestionType } from '../lib/schemas';\r\nimport { \r\n  Card, \r\n  CardContent, \r\n  Typography, \r\n  Box, \r\n  Avatar,\r\n  Chip\r\n} from '@mui/material';\r\nimport { \r\n  SmartToy as RobotIcon,\r\n  Check as CheckIcon,\r\n  Close as CloseIcon\r\n} from '@mui/icons-material';\r\n// ✅ NEU: Import der standardisierten UI-Komponenten\r\nimport { StandardButton } from './forms/FormStandardization';\r\nimport { UI_LABELS } from './ui/UIStandardization';\r\n\r\nexport interface AgentSuggestionProps {\r\n  suggestion: AgentSuggestionType;\r\n  onAccept: (suggestion: AgentSuggestionType) => void;\r\n  onReject: (suggestion: AgentSuggestionType) => void;\r\n  className?: string;\r\n}\r\n\r\nexport const AgentSuggestion: React.FC<AgentSuggestionProps> = ({\r\n  suggestion,\r\n  onAccept,\r\n  onReject,\r\n  className\r\n}) => {\r\n  const handleAccept = () => {\r\n    onAccept(suggestion);\r\n  };\r\n\r\n  const handleReject = () => {\r\n    onReject(suggestion);\r\n  };\r\n\r\n  return (\r\n    <Card sx={{ p: 2, border: 1, borderColor: 'divider' }} className={className}>\r\n      <CardContent>\r\n        <Box display=\"flex\" alignItems=\"flex-start\" justifyContent=\"space-between\" mb={2}>\r\n          <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n            <Avatar sx={{ width: 32, height: 32, bgcolor: 'primary.main' }}>\r\n              <RobotIcon fontSize=\"small\" />\r\n            </Avatar>\r\n            <Box>\r\n              <Typography variant=\"subtitle2\" fontWeight=\"medium\" color=\"text.primary\">\r\n                {suggestion.title}\r\n              </Typography>\r\n              <Typography variant=\"caption\" color=\"text.secondary\">\r\n                {UI_LABELS.AI.SUGGESTION}\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n          <Box display=\"flex\" alignItems=\"center\" gap={0.5}>\r\n            <Typography variant=\"caption\" color=\"text.secondary\">\r\n              {UI_LABELS.AI.CONFIDENCE}: {suggestion.confidence}%\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n\r\n        <Typography variant=\"body2\" color=\"text.primary\" mb={2}>\r\n          {suggestion.description}\r\n        </Typography>\r\n\r\n        {suggestion.parameters && (\r\n          <Box mb={2} p={1.5} bgcolor=\"grey.50\" borderRadius={1}>\r\n            <Typography variant=\"caption\" fontWeight=\"medium\" color=\"text.secondary\" display=\"block\" mb={1}>\r\n              {UI_LABELS.AI.DETAILS}:\r\n            </Typography>\r\n            <Box \r\n              component=\"pre\" \r\n              sx={{ \r\n                fontSize: '0.75rem', \r\n                color: 'text.secondary',\r\n                whiteSpace: 'pre-wrap',\r\n                margin: 0\r\n              }}\r\n            >\r\n              {JSON.stringify(suggestion.parameters, null, 2)}\r\n            </Box>\r\n          </Box>\r\n        )}\r\n\r\n        <Box display=\"flex\" gap={1}>\r\n          <StandardButton\r\n            variant=\"contained\"\r\n            color=\"success\"\r\n            size=\"small\"\r\n            onClick={handleAccept}\r\n            startIcon={<CheckIcon />}\r\n            sx={{ flex: 1 }}\r\n          >\r\n            {UI_LABELS.ACTIONS.ACCEPT}\r\n          </StandardButton>\r\n          <StandardButton\r\n            variant=\"contained\"\r\n            color=\"error\"\r\n            size=\"small\"\r\n            onClick={handleReject}\r\n            startIcon={<CloseIcon />}\r\n            sx={{ flex: 1 }}\r\n          >\r\n            {UI_LABELS.ACTIONS.REJECT}\r\n          </StandardButton>\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\BundleAnalysis.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getBundleAnalysis' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":15,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[797,800],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[797,800],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3008,3011],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3008,3011],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":131,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4315,4318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4315,4318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":174,"column":92,"nodeType":null,"messageId":"unusedVar","endLine":174,"endColumn":97}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport { Card, Typography, Box, Chip, Alert, CircularProgress } from '../utils/muiImports';\r\nimport { usePreload } from '../services/PreloadService';\r\nimport type { BundleAnalysis as BundleAnalysisData, PerformanceMetrics } from '../services/PreloadService';\r\n\r\ninterface BundleAnalysisProps {\r\n  showPerformance?: boolean;\r\n  showOptimizations?: boolean;\r\n}\r\n\r\nexport const BundleAnalysisComponent: React.FC<BundleAnalysisProps> = ({\r\n  showPerformance = true,\r\n  showOptimizations = true\r\n}) => {\r\n  const { getBundleAnalysis, getPerformanceReport, generateBundleAnalysis } = usePreload();\r\n  const [bundleAnalysis, setBundleAnalysis] = useState<BundleAnalysisData | null>(null);\r\n  const [performanceReport, setPerformanceReport] = useState<any>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const loadAnalysis = async () => {\r\n      try {\r\n        setLoading(true);\r\n        \r\n        // Bundle-Analyse laden\r\n        const analysis = await generateBundleAnalysis();\r\n        setBundleAnalysis(analysis);\r\n        \r\n        // Performance-Report laden\r\n        if (showPerformance) {\r\n          const report = getPerformanceReport();\r\n          setPerformanceReport(report);\r\n        }\r\n        \r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : 'Unbekannter Fehler');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadAnalysis();\r\n  }, [generateBundleAnalysis, getPerformanceReport, showPerformance]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"200px\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n        Fehler beim Laden der Bundle-Analyse: {error}\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  if (!bundleAnalysis) {\r\n    return (\r\n      <Alert severity=\"warning\" sx={{ mb: 2 }}>\r\n        Keine Bundle-Analyse verfügbar\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  const formatSize = (size: number): string => {\r\n    if (size < 1024) return `${size} B`;\r\n    if (size < 1024 * 1024) return `${(size / 1024).toFixed(1)} KB`;\r\n    return `${(size / (1024 * 1024)).toFixed(1)} MB`;\r\n  };\r\n\r\n  const getSizeColor = (size: number): string => {\r\n    if (size < 100) return 'success';\r\n    if (size < 500) return 'warning';\r\n    return 'error';\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ p: 2 }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        📊 Bundle-Analyse\r\n      </Typography>\r\n\r\n      {/* Gesamtübersicht */}\r\n      <Card sx={{ p: 3, mb: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Gesamtübersicht\r\n        </Typography>\r\n        <Box display=\"flex\" gap={2} flexWrap=\"wrap\">\r\n          <Chip \r\n            label={`Gesamtgröße: ${formatSize(bundleAnalysis.totalSize)}`}\r\n            color={getSizeColor(bundleAnalysis.totalSize) as any}\r\n            variant=\"outlined\"\r\n          />\r\n          <Chip \r\n            label={`Chunks: ${bundleAnalysis.chunkCount}`}\r\n            color=\"primary\"\r\n            variant=\"outlined\"\r\n          />\r\n          <Chip \r\n            label={`Größter Chunk: ${bundleAnalysis.largestChunks[0]?.name || 'N/A'}`}\r\n            color=\"secondary\"\r\n            variant=\"outlined\"\r\n          />\r\n        </Box>\r\n      </Card>\r\n\r\n      {/* Größte Chunks */}\r\n      <Card sx={{ p: 3, mb: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Größte Chunks\r\n        </Typography>\r\n        <Box display=\"flex\" flexDirection=\"column\" gap={1}>\r\n          {bundleAnalysis.largestChunks.map((chunk, index) => (\r\n            <Box key={chunk.name} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n              <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  #{index + 1}\r\n                </Typography>\r\n                <Typography variant=\"body1\">\r\n                  {chunk.name}\r\n                </Typography>\r\n              </Box>\r\n              <Box display=\"flex\" gap={1}>\r\n                <Chip \r\n                  label={formatSize(chunk.size)}\r\n                  color={getSizeColor(chunk.size) as any}\r\n                  size=\"small\"\r\n                />\r\n                <Chip \r\n                  label={`${chunk.percentage.toFixed(1)}%`}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </Box>\r\n            </Box>\r\n          ))}\r\n        </Box>\r\n      </Card>\r\n\r\n      {/* Performance-Report */}\r\n      {showPerformance && performanceReport && (\r\n        <Card sx={{ p: 3, mb: 3 }}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Performance-Metriken\r\n          </Typography>\r\n          <Box display=\"flex\" gap={2} flexWrap=\"wrap\" mb={2}>\r\n            <Chip \r\n              label={`Durchschnittliche Ladezeit: ${performanceReport.averageLoadTime.toFixed(0)}ms`}\r\n              color={performanceReport.averageLoadTime > 1000 ? 'error' : 'success'}\r\n              variant=\"outlined\"\r\n            />\r\n            <Chip \r\n              label={`Preloaded Routes: ${performanceReport.totalPreloadedRoutes}`}\r\n              color=\"primary\"\r\n              variant=\"outlined\"\r\n            />\r\n            <Chip \r\n              label={`Cache Hit Rate: ${performanceReport.cacheHitRate.toFixed(1)}%`}\r\n              color=\"secondary\"\r\n              variant=\"outlined\"\r\n            />\r\n          </Box>\r\n          \r\n          {performanceReport.slowestRoutes.length > 0 && (\r\n            <Box>\r\n              <Typography variant=\"subtitle2\" gutterBottom>\r\n                Langsamste Routen:\r\n              </Typography>\r\n              {performanceReport.slowestRoutes.slice(0, 3).map((route: PerformanceMetrics, index: number) => (\r\n                <Box key={route.route} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={1}>\r\n                  <Typography variant=\"body2\">\r\n                    {route.route}\r\n                  </Typography>\r\n                  <Chip \r\n                    label={`${route.loadTime.toFixed(0)}ms`}\r\n                    color={route.loadTime > 1000 ? 'error' : 'warning'}\r\n                    size=\"small\"\r\n                  />\r\n                </Box>\r\n              ))}\r\n            </Box>\r\n          )}\r\n        </Card>\r\n      )}\r\n\r\n      {/* Optimierungsvorschläge */}\r\n      {showOptimizations && bundleAnalysis.optimizationSuggestions.length > 0 && (\r\n        <Card sx={{ p: 3 }}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Optimierungsvorschläge\r\n          </Typography>\r\n          <Box display=\"flex\" flexDirection=\"column\" gap={1}>\r\n            {bundleAnalysis.optimizationSuggestions.map((suggestion, index) => (\r\n              <Alert key={index} severity=\"info\" sx={{ mb: 1 }}>\r\n                {suggestion}\r\n              </Alert>\r\n            ))}\r\n          </Box>\r\n        </Card>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default BundleAnalysisComponent; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\Button.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cn' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UI_LABELS' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'icon' is defined but never used. Allowed unused args must match /^_/u.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'className' is defined but never used. Allowed unused args must match /^_/u.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { cn } from '../lib/utils';\r\n// ✅ NEU: Import der standardisierten UI-Komponenten\r\nimport { StandardButton } from './forms/FormStandardization';\r\nimport { UI_LABELS } from './ui/UIStandardization';\r\n\r\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  variant?: 'primary' | 'secondary' | 'success' | 'warning' | 'danger' | 'agent' | 'ai';\r\n  size?: 'sm' | 'md' | 'lg';\r\n  loading?: boolean;\r\n  icon?: string;\r\n  children: React.ReactNode;\r\n}\r\n\r\n/**\r\n * ✅ REFAKTORIERT: Button-Komponente verwendet jetzt StandardButton\r\n * \r\n * Diese Komponente wurde refaktoriert um die neue StandardButton-Komponente zu verwenden.\r\n * Alle Props werden an die StandardButton-Komponente weitergeleitet.\r\n * \r\n * @deprecated Verwenden Sie direkt StandardButton aus FormStandardization\r\n */\r\nexport const Button: React.FC<ButtonProps> = ({\r\n  variant = 'primary',\r\n  size = 'md',\r\n  loading = false,\r\n  icon,\r\n  children,\r\n  className,\r\n  disabled,\r\n  ...props\r\n}) => {\r\n  // ✅ REFAKTORIERT: Mapping der alten Varianten zu neuen StandardButton-Varianten\r\n  const getStandardVariant = (oldVariant: string) => {\r\n    switch (oldVariant) {\r\n      case 'primary': return 'contained';\r\n      case 'secondary': return 'outlined';\r\n      case 'success': return 'contained';\r\n      case 'warning': return 'contained';\r\n      case 'danger': return 'contained';\r\n      case 'agent': return 'contained';\r\n      case 'ai': return 'contained';\r\n      default: return 'contained';\r\n    }\r\n  };\r\n\r\n  const getStandardColor = (oldVariant: string) => {\r\n    switch (oldVariant) {\r\n      case 'primary': return 'primary';\r\n      case 'secondary': return 'secondary';\r\n      case 'success': return 'success';\r\n      case 'warning': return 'warning';\r\n      case 'danger': return 'error';\r\n      case 'agent': return 'primary';\r\n      case 'ai': return 'primary';\r\n      default: return 'primary';\r\n    }\r\n  };\r\n\r\n  const getStandardSize = (oldSize: string) => {\r\n    switch (oldSize) {\r\n      case 'sm': return 'small';\r\n      case 'md': return 'medium';\r\n      case 'lg': return 'large';\r\n      default: return 'medium';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <StandardButton\r\n      variant={getStandardVariant(variant)}\r\n      color={getStandardColor(variant)}\r\n      size={getStandardSize(size)}\r\n      loading={loading}\r\n      disabled={disabled}\r\n      onClick={props.onClick ? (event: React.MouseEvent<HTMLButtonElement>) => props.onClick?.(event) : undefined}\r\n      type={props.type as 'submit' | 'button' | 'reset'}\r\n    >\r\n      {children}\r\n    </StandardButton>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\DataCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Chip' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StatusChip' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UI_LABELS' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'confidence' is defined but never used. Allowed unused args must match /^_/u.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getTrendStatus' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":30,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, Typography, Box, Chip } from '@mui/material';\r\nimport { TrendingUp, TrendingDown, Remove } from '@mui/icons-material';\r\n// ✅ NEU: Import der standardisierten UI-Komponenten\r\nimport { StatusChip } from './ui/UIStandardization';\r\nimport { UI_LABELS } from './ui/UIStandardization';\r\nimport { TrustIndicator } from './TrustIndicator';\r\nimport type { TrustLevel } from './TrustIndicator';\r\n\r\nexport interface DataCardProps {\r\n  title: string;\r\n  value: string;\r\n  trend: 'up' | 'down' | 'neutral';\r\n  change: string;\r\n  icon: string;\r\n  trustLevel: TrustLevel;\r\n  confidence: number;\r\n}\r\n\r\nexport const DataCard: React.FC<DataCardProps> = ({\r\n  title,\r\n  value,\r\n  trend,\r\n  change,\r\n  icon,\r\n  trustLevel,\r\n  confidence\r\n}) => {\r\n  // ✅ REFAKTORIERT: Verwendung von StatusChip für Trend-Anzeige\r\n  const getTrendStatus = () => {\r\n    switch (trend) {\r\n      case 'up':\r\n        return 'success' as const;\r\n      case 'down':\r\n        return 'error' as const;\r\n      default:\r\n        return 'warning' as const;\r\n    }\r\n  };\r\n\r\n  const getTrendIcon = () => {\r\n    switch (trend) {\r\n      case 'up':\r\n        return <TrendingUp fontSize=\"small\" />;\r\n      case 'down':\r\n        return <TrendingDown fontSize=\"small\" />;\r\n      default:\r\n        return <Remove fontSize=\"small\" />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card sx={{ p: 3, height: '100%' }}>\r\n      <CardContent>\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n          <Box flex={1}>\r\n            <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1}>\r\n              <i className={`${icon} text-gray-400`}></i>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                {title}\r\n              </Typography>\r\n            </Box>\r\n            <Box display=\"flex\" alignItems=\"baseline\" gap={1}>\r\n              <Typography variant=\"h4\" component=\"p\" fontWeight=\"bold\" color=\"text.primary\">\r\n                {value}\r\n              </Typography>\r\n              <Box display=\"flex\" alignItems=\"center\" gap={0.5}>\r\n                {getTrendIcon()}\r\n                <Typography variant=\"body2\" color=\"text.secondary\" fontWeight=\"medium\">\r\n                  {change}\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n          <Box ml={2}>\r\n            <TrustIndicator level={trustLevel} />\r\n          </Box>\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\DataCard_MCP_NEW.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Chip' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'trendField' is defined but never used. Allowed unused args must match /^_/u.","line":55,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3066,3069],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3066,3069],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3306,3309],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3306,3309],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":127,"column":6,"nodeType":"ArrayExpression","endLine":127,"endColumn":47,"suggestions":[{"desc":"Update the dependencies array to be: [dataSource, valueField, refreshInterval, loadData]","fix":{"range":[3847,3888],"text":"[dataSource, valueField, refreshInterval, loadData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Card, \r\n  CardContent, \r\n  Typography, \r\n  Box, \r\n  Chip,\r\n  CircularProgress,\r\n  Tooltip\r\n} from '@mui/material';\r\nimport {\r\n  TrendingUp as TrendingUpIcon,\r\n  TrendingDown as TrendingDownIcon,\r\n  Remove as RemoveIcon,\r\n  Info as InfoIcon,\r\n  Warning as WarningIcon,\r\n  CheckCircle as CheckCircleIcon\r\n} from '@mui/icons-material';\r\n// ✅ NEU: Import der standardisierten UI-Komponenten\r\nimport { StatusChip, StandardMessage } from './ui/UIStandardization';\r\nimport { UI_LABELS } from './ui/UIStandardization';\r\nimport { TrustIndicator } from './TrustIndicator';\r\nimport type { TrustLevel } from './TrustIndicator';\r\n\r\n// MCP Integration Imports\r\nimport { useMCPData } from '../hooks/useMCPForm';\r\n\r\n// TypeScript Interfaces basierend auf MCP Schema\r\ninterface DataCardProps {\r\n  title: string;\r\n  dataSource: string; // MCP-Tabellenname\r\n  valueField: string; // Feldname für den Wert\r\n  trendField?: string; // Feldname für Trend-Berechnung\r\n  icon: string;\r\n  trustLevel: TrustLevel;\r\n  confidence: number;\r\n  refreshInterval?: number; // Auto-Refresh in Sekunden\r\n}\r\n\r\ninterface DataPoint {\r\n  value: number;\r\n  timestamp: string;\r\n  trend?: 'up' | 'down' | 'neutral';\r\n  change?: string;\r\n}\r\n\r\n/**\r\n * MCP-basierte DataCard-Komponente\r\n * Verwendet live Daten vom MCP-Server mit automatischer Trend-Berechnung\r\n */\r\nexport const DataCard_MCP_NEW: React.FC<DataCardProps> = ({\r\n  title,\r\n  dataSource,\r\n  valueField,\r\n  trendField,\r\n  icon,\r\n  trustLevel,\r\n  confidence,\r\n  refreshInterval = 300 // 5 Minuten Standard\r\n}) => {\r\n  const [currentData, setCurrentData] = useState<DataPoint | null>(null);\r\n  const [previousData, setPreviousData] = useState<DataPoint | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // MCP Hook für Daten\r\n  const dataHook = useMCPData(dataSource);\r\n\r\n  // Daten laden\r\n  const loadData = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n\r\n      const result = await dataHook.fetchData();\r\n      const data = result.data || [];\r\n\r\n      if (data.length > 0) {\r\n        // Neueste Daten\r\n        const latest = data[data.length - 1];\r\n        const currentValue = parseFloat(latest[valueField]) || 0;\r\n\r\n        // Vorherige Daten für Trend-Berechnung\r\n        const previous = data.length > 1 ? data[data.length - 2] : null;\r\n        const previousValue = previous ? parseFloat(previous[valueField]) || 0 : currentValue;\r\n\r\n        // Trend berechnen\r\n        let trend: 'up' | 'down' | 'neutral' = 'neutral';\r\n        let change = '0%';\r\n\r\n        if (previousValue !== 0) {\r\n          const changePercent = ((currentValue - previousValue) / previousValue) * 100;\r\n          change = `${changePercent > 0 ? '+' : ''}${changePercent.toFixed(1)}%`;\r\n          trend = changePercent > 0 ? 'up' : changePercent < 0 ? 'down' : 'neutral';\r\n        }\r\n\r\n        const newDataPoint: DataPoint = {\r\n          value: currentValue,\r\n          timestamp: (latest as any).created_at || new Date().toISOString(),\r\n          trend,\r\n          change\r\n        };\r\n\r\n        setCurrentData(newDataPoint);\r\n        setPreviousData(previous ? {\r\n          value: previousValue,\r\n          timestamp: (previous as any).created_at || new Date().toISOString()\r\n        } : null);\r\n      } else {\r\n        setError('Keine Daten verfügbar');\r\n      }\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Fehler beim Laden der Daten');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Initial laden und Auto-Refresh\r\n  useEffect(() => {\r\n    loadData();\r\n    \r\n    if (refreshInterval > 0) {\r\n      const interval = setInterval(loadData, refreshInterval * 1000);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [dataSource, valueField, refreshInterval]);\r\n\r\n  // ✅ REFAKTORIERT: Verwendung von StatusChip für Trend-Anzeige\r\n  const getTrendStatus = (trend: 'up' | 'down' | 'neutral'): keyof typeof UI_LABELS.STATUS => {\r\n    switch (trend) {\r\n      case 'up':\r\n        return 'ACTIVE';\r\n      case 'down':\r\n        return 'ERROR';\r\n      default:\r\n        return 'PENDING';\r\n    }\r\n  };\r\n\r\n  const getTrendIcon = (trend: 'up' | 'down' | 'neutral') => {\r\n    switch (trend) {\r\n      case 'up':\r\n        return <TrendingUpIcon fontSize=\"small\" />;\r\n      case 'down':\r\n        return <TrendingDownIcon fontSize=\"small\" />;\r\n      default:\r\n        return <RemoveIcon fontSize=\"small\" />;\r\n    }\r\n  };\r\n\r\n  // Trust-Level-Konfiguration\r\n  const getTrustConfig = (level: TrustLevel) => {\r\n    switch (level) {\r\n      case 'high': return { color: 'success' as const, icon: <CheckCircleIcon />, label: UI_LABELS.STATUS.HIGH };\r\n      case 'medium': return { color: 'warning' as const, icon: <WarningIcon />, label: UI_LABELS.STATUS.MEDIUM };\r\n      case 'low': return { color: 'error' as const, icon: <WarningIcon />, label: UI_LABELS.STATUS.LOW };\r\n      default: return { color: 'default' as const, icon: <InfoIcon />, label: UI_LABELS.STATUS.UNKNOWN };\r\n    }\r\n  };\r\n\r\n  // Loading-State\r\n  if (isLoading) {\r\n    return (\r\n      <Card sx={{ height: '100%' }}>\r\n        <CardContent sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 128 }}>\r\n          <Box textAlign=\"center\">\r\n            <CircularProgress size={24} sx={{ mb: 1 }} />\r\n            <Typography variant=\"caption\" color=\"text.secondary\">\r\n              {UI_LABELS.MESSAGES.LOADING} {title}...\r\n            </Typography>\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  // Error-State\r\n  if (error || !currentData) {\r\n    return (\r\n      <Card sx={{ height: '100%' }}>\r\n        <CardContent>\r\n          <StandardMessage\r\n            type=\"error\"\r\n            message={error || UI_LABELS.MESSAGES.NO_DATA}\r\n          />\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            {title}\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  const trustConfig = getTrustConfig(trustLevel);\r\n\r\n  return (\r\n    <Card sx={{ height: '100%', '&:hover': { boxShadow: 3 }, transition: 'box-shadow 0.2s' }}>\r\n      <CardContent>\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={2}>\r\n          <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n            <i className={`${icon} text-gray-400 text-lg`}></i>\r\n            <Typography variant=\"subtitle2\" color=\"text.secondary\">\r\n              {title}\r\n            </Typography>\r\n          </Box>\r\n          \r\n          {/* Trust Indicator */}\r\n          <Tooltip title={`Vertrauenslevel: ${trustConfig.label} (${confidence}%)`}>\r\n            <Box>\r\n              <TrustIndicator level={trustLevel} />\r\n            </Box>\r\n          </Tooltip>\r\n        </Box>\r\n\r\n        {/* Hauptwert */}\r\n        <Box display=\"flex\" alignItems=\"baseline\" gap={1} mb={1}>\r\n          <Typography variant=\"h4\" fontWeight=\"bold\" color=\"text.primary\">\r\n            {currentData.value.toLocaleString('de-DE')}\r\n          </Typography>\r\n          \r\n          {/* ✅ REFAKTORIERT: Trend mit StatusChip */}\r\n          {currentData.trend && currentData.change && (\r\n            <Box display=\"flex\" alignItems=\"center\" gap={0.5}>\r\n              {getTrendIcon(currentData.trend)}\r\n              <Typography variant=\"caption\" color=\"text.secondary\">\r\n                {currentData.change}\r\n              </Typography>\r\n              <StatusChip\r\n                status={getTrendStatus(currentData.trend)}\r\n                size=\"small\"\r\n              />\r\n            </Box>\r\n          )}\r\n        </Box>\r\n\r\n        {/* Zusätzliche Informationen */}\r\n        <Box display=\"flex\" flexDirection=\"column\" gap={0.5}>\r\n          <Typography variant=\"caption\" color=\"text.secondary\">\r\n            {UI_LABELS.MESSAGES.LAST_UPDATE}: {new Date(currentData.timestamp).toLocaleString('de-DE')}\r\n          </Typography>\r\n          \r\n          {previousData && (\r\n            <Typography variant=\"caption\" color=\"text.secondary\">\r\n              {UI_LABELS.MESSAGES.PREVIOUS_VALUE}: {previousData.value.toLocaleString('de-DE')} \r\n              ({new Date(previousData.timestamp).toLocaleDateString('de-DE')})\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n\r\n        {/* MCP-Informationen */}\r\n        <Box mt={2} pt={1} borderTop={1} borderColor=\"divider\">\r\n          <Typography variant=\"caption\" color=\"text.secondary\">\r\n            <strong>{UI_LABELS.MESSAGES.DATA_SOURCE}:</strong> {dataSource}\r\n            <br />\r\n            <strong>{UI_LABELS.MESSAGES.FIELD}:</strong> {valueField}\r\n            <br />\r\n            <strong>{UI_LABELS.MESSAGES.AUTO_REFRESH}:</strong> {refreshInterval > 0 ? `${refreshInterval}s` : UI_LABELS.STATUS.DISABLED}\r\n            <br />\r\n            <strong>{UI_LABELS.MESSAGES.MCP_STATUS}:</strong> ✅ {UI_LABELS.STATUS.LIVE}\r\n          </Typography>\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default DataCard_MCP_NEW; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\DataDogTest.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[565,568],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[565,568],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[612,615],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[612,615],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1297,1300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1297,1300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1344,1347],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1344,1347],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1804,1807],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1804,1807],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1849,1852],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1849,1852],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2250,2253],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2250,2253],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2295,2298],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2295,2298],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2877,2880],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2877,2880],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2938,2941],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2938,2941],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { Button, Card, Typography, Alert, CircularProgress, Box } from '@mui/material';\r\n\r\nexport const Last9Test: React.FC = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [status, setStatus] = useState<string>('');\r\n\r\n  const testErrorTracking = async () => {\r\n    setLoading(true);\r\n    setStatus('Testing error tracking...');\r\n    \r\n    try {\r\n      throw new Error('Test Error für Last9 - ' + new Date().toISOString());\r\n    } catch (error) {\r\n      if (typeof window !== 'undefined' && (window as any).last9Metrics) {\r\n        await (window as any).last9Metrics.trackError(error as Error, {\r\n          component: 'Last9Test',\r\n          test_type: 'manual_error'\r\n        });\r\n        setStatus('✅ Error tracking test completed');\r\n      } else {\r\n        setStatus('❌ Last9 metrics not available');\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const testPerformanceTracking = async () => {\r\n    setLoading(true);\r\n    setStatus('Testing performance tracking...');\r\n    \r\n    const startTime = performance.now();\r\n    \r\n    // Simuliere eine ERP-Operation\r\n    setTimeout(async () => {\r\n      const duration = performance.now() - startTime;\r\n      \r\n      if (typeof window !== 'undefined' && (window as any).last9Metrics) {\r\n        await (window as any).last9Metrics.trackERPOperation('test_operation', duration, true);\r\n        setStatus(`✅ Performance tracking test completed (${duration.toFixed(2)}ms)`);\r\n      } else {\r\n        setStatus('❌ Last9 metrics not available');\r\n      }\r\n      setLoading(false);\r\n    }, 1000);\r\n  };\r\n\r\n  const testUserInteraction = async () => {\r\n    setLoading(true);\r\n    setStatus('Testing user interaction...');\r\n    \r\n    if (typeof window !== 'undefined' && (window as any).last9Metrics) {\r\n      await (window as any).last9Metrics.trackUserInteraction('test_button_click', 'Last9Test');\r\n      setStatus('✅ User interaction test completed');\r\n    } else {\r\n      setStatus('❌ Last9 metrics not available');\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const testCustomMetric = async () => {\r\n    setLoading(true);\r\n    setStatus('Testing custom metric...');\r\n    \r\n    if (typeof window !== 'undefined' && (window as any).last9Metrics) {\r\n      await (window as any).last9Metrics.sendMetric({\r\n        name: 'custom_erp_metric',\r\n        value: Math.random() * 100,\r\n        tags: {\r\n          metric_type: 'test',\r\n          component: 'Last9Test',\r\n          timestamp: new Date().toISOString()\r\n        }\r\n      });\r\n      setStatus('✅ Custom metric test completed');\r\n    } else {\r\n      setStatus('❌ Last9 metrics not available');\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const testConnection = async () => {\r\n    setLoading(true);\r\n    setStatus('Testing Last9 connection...');\r\n    \r\n    if (typeof window !== 'undefined' && (window as any).last9Metrics) {\r\n      const success = await (window as any).last9Metrics.testConnection();\r\n      if (success) {\r\n        setStatus('✅ Last9 connection successful');\r\n      } else {\r\n        setStatus('❌ Last9 connection failed');\r\n      }\r\n    } else {\r\n      setStatus('❌ Last9 metrics not available');\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <Card sx={{ p: 3, maxWidth: 600, mx: 'auto', mt: 4 }}>\r\n      <Typography variant=\"h5\" gutterBottom>\r\n        Last9 Observability Test\r\n      </Typography>\r\n      \r\n      <Alert severity=\"info\" sx={{ mb: 3 }}>\r\n        Testen Sie die Last9-Integration mit Ihrem Cluster: gmail-jochen-weerda\r\n      </Alert>\r\n\r\n      {status && (\r\n        <Alert severity={status.includes('✅') ? 'success' : status.includes('❌') ? 'error' : 'info'} sx={{ mb: 3 }}>\r\n          {status}\r\n        </Alert>\r\n      )}\r\n\r\n      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n        <Button \r\n          variant=\"contained\" \r\n          color=\"primary\"\r\n          onClick={testConnection}\r\n          disabled={loading}\r\n          startIcon={loading ? <CircularProgress size={20} /> : null}\r\n        >\r\n          Connection Test\r\n        </Button>\r\n\r\n        <Button \r\n          variant=\"contained\" \r\n          color=\"secondary\"\r\n          onClick={testUserInteraction}\r\n          disabled={loading}\r\n          startIcon={loading ? <CircularProgress size={20} /> : null}\r\n        >\r\n          User Interaction Testen\r\n        </Button>\r\n\r\n        <Button \r\n          variant=\"contained\" \r\n          color=\"secondary\"\r\n          onClick={testPerformanceTracking}\r\n          disabled={loading}\r\n          startIcon={loading ? <CircularProgress size={20} /> : null}\r\n        >\r\n          Performance Tracking Testen\r\n        </Button>\r\n\r\n        <Button \r\n          variant=\"contained\" \r\n          color=\"error\"\r\n          onClick={testErrorTracking}\r\n          disabled={loading}\r\n          startIcon={loading ? <CircularProgress size={20} /> : null}\r\n        >\r\n          Error Tracking Testen\r\n        </Button>\r\n\r\n        <Button \r\n          variant=\"outlined\"\r\n          onClick={testCustomMetric}\r\n          disabled={loading}\r\n          startIcon={loading ? <CircularProgress size={20} /> : null}\r\n        >\r\n          Custom Metric Testen\r\n        </Button>\r\n      </Box>\r\n\r\n      <Typography variant=\"body2\" sx={{ mt: 3, color: 'text.secondary' }}>\r\n        Öffnen Sie das Last9 Dashboard unter https://app.last9.io, um die Test-Daten zu sehen.\r\n        Cluster: gmail-jochen-weerda\r\n      </Typography>\r\n    </Card>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\ErrorBoundary.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Alert' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Component, ErrorInfo, ReactNode } from 'react';\r\nimport { Alert, Button, Box, Typography, Paper } from '@mui/material';\r\nimport { Refresh as RefreshIcon, BugReport as BugReportIcon } from '@mui/icons-material';\r\n// ✅ NEU: Import der standardisierten UI-Komponenten\r\nimport { StandardButton } from './forms/FormStandardization';\r\nimport { StandardMessage } from './ui/UIStandardization';\r\nimport { UI_LABELS } from './ui/UIStandardization';\r\n\r\ninterface Props {\r\n  children: ReactNode;\r\n  fallback?: ReactNode;\r\n}\r\n\r\ninterface State {\r\n  hasError: boolean;\r\n  error?: Error;\r\n  errorInfo?: ErrorInfo;\r\n}\r\n\r\nexport class ErrorBoundary extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error: Error): State {\r\n    return { hasError: true, error };\r\n  }\r\n\r\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n    console.error('Error Boundary caught an error:', error, errorInfo);\r\n    this.setState({ error, errorInfo });\r\n  }\r\n\r\n  handleReload = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  handleReset = () => {\r\n    this.setState({ hasError: false, error: undefined, errorInfo: undefined });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      if (this.props.fallback) {\r\n        return this.props.fallback;\r\n      }\r\n\r\n      return (\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            minHeight: '100vh',\r\n            p: 3,\r\n            bgcolor: 'background.default'\r\n          }}\r\n        >\r\n          <Paper\r\n            elevation={3}\r\n            sx={{\r\n              p: 4,\r\n              maxWidth: 600,\r\n              textAlign: 'center',\r\n              borderRadius: 2\r\n            }}\r\n          >\r\n            <BugReportIcon\r\n              sx={{\r\n                fontSize: 64,\r\n                color: 'error.main',\r\n                mb: 2\r\n              }}\r\n            />\r\n            \r\n            <Typography variant=\"h4\" component=\"h1\" gutterBottom color=\"error.main\">\r\n              {UI_LABELS.ERRORS.TITLE}\r\n            </Typography>\r\n            \r\n            <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n              {UI_LABELS.ERRORS.DESCRIPTION}\r\n            </Typography>\r\n\r\n            {process.env.NODE_ENV === 'development' && this.state.error && (\r\n              <Box sx={{ mb: 3, textAlign: 'left' }}>\r\n                <StandardMessage\r\n                  type=\"error\"\r\n                  title={UI_LABELS.ERRORS.DETAILS_TITLE}\r\n                  message={this.state.error.toString()}\r\n                />\r\n              </Box>\r\n            )}\r\n\r\n            <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center', flexWrap: 'wrap' }}>\r\n              <StandardButton\r\n                variant=\"contained\"\r\n                startIcon={<RefreshIcon />}\r\n                onClick={this.handleReset}\r\n                sx={{ minWidth: 140 }}\r\n              >\r\n                {UI_LABELS.ACTIONS.RETRY}\r\n              </StandardButton>\r\n              \r\n              <StandardButton\r\n                variant=\"outlined\"\r\n                startIcon={<RefreshIcon />}\r\n                onClick={this.handleReload}\r\n                sx={{ minWidth: 140 }}\r\n              >\r\n                {UI_LABELS.ACTIONS.RELOAD_PAGE}\r\n              </StandardButton>\r\n            </Box>\r\n          </Paper>\r\n        </Box>\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\Input.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cn' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UI_LABELS' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'variant' is assigned a value but never used. Allowed unused args must match /^_/u.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'icon' is defined but never used. Allowed unused args must match /^_/u.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'className' is defined but never used. Allowed unused args must match /^_/u.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":35,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { cn } from '../lib/utils';\r\n// ✅ NEU: Import der standardisierten UI-Komponenten\r\nimport { StandardTextField } from './forms/FormStandardization';\r\nimport { UI_LABELS } from './ui/UIStandardization';\r\n\r\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\r\n  label?: string;\r\n  error?: string;\r\n  helperText?: string;\r\n  variant?: 'default' | 'agent';\r\n  icon?: string;\r\n}\r\n\r\n/**\r\n * ✅ REFAKTORIERT: Input-Komponente verwendet jetzt StandardTextField\r\n * \r\n * Diese Komponente wurde refaktoriert um die neue StandardTextField-Komponente zu verwenden.\r\n * Alle Props werden an die StandardTextField-Komponente weitergeleitet.\r\n * \r\n * @deprecated Verwenden Sie direkt StandardTextField aus FormStandardization\r\n */\r\nexport const Input: React.FC<InputProps> = ({\r\n  label,\r\n  error,\r\n  helperText,\r\n  variant = 'default',\r\n  icon,\r\n  className,\r\n  id,\r\n  type = 'text',\r\n  required = false,\r\n  disabled = false,\r\n  placeholder,\r\n  ...props\r\n}) => {\r\n  const inputId = id || `input-${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n  return (\r\n    <StandardTextField\r\n      name={inputId}\r\n      label={label}\r\n      type={type as 'text' | 'email' | 'password' | 'number' | 'tel' | 'url' | 'date'}\r\n      required={required}\r\n      disabled={disabled}\r\n      placeholder={placeholder}\r\n      helperText={error || helperText}\r\n    />\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\Layout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HomeIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":42,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":470,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":470,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15871,15874],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15871,15874],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":470,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":470,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15906,15909],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15906,15909],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { \n  AppBar, \n  Toolbar, \n  Typography, \n  IconButton,\n  Drawer,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Box,\n  Avatar,\n  Menu,\n  MenuItem,\n  Divider,\n  Badge,\n  Tooltip,\n  Breadcrumbs,\n  Link\n} from '@mui/material';\nimport {\n  Menu as MenuIcon,\n  Dashboard as DashboardIcon,\n  Business as BusinessIcon,\n  Inventory as InventoryIcon,\n  Receipt as ReceiptIcon,\n  Description as DocumentIcon,\n  Analytics as AnalyticsIcon,\n  People as PeopleIcon,\n  ShoppingCart as SalesIcon,\n  LocalShipping as WarehouseIcon,\n  Build as ProductionIcon,\n  AccountBalance as FinanceIcon,\n  Assessment as QualityIcon,\n  Assignment as ProjectIcon,\n  Settings as SettingsIcon,\n  Notifications as NotificationsIcon,\n  AccountCircle as AccountCircleIcon,\n  Logout as LogoutIcon,\n  Help as HelpIcon,\n  Home as HomeIcon,\n  ChevronRight as ChevronRightIcon,\n  AccountBalance as AccountBalanceIcon,\n  LocalShipping as LocalShippingIcon,\n  Assignment as AssignmentIcon,\n  Build as BuildIcon,\n  Assessment as AssessmentIcon\n} from '@mui/icons-material';\nimport { useNavigate, useLocation } from 'react-router-dom';\n// ✅ NEU: Import der standardisierten UI-Komponenten\nimport { UI_LABELS } from './ui/UIStandardization';\nimport { useApi } from '../contexts/ApiContext';\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\ninterface NavigationItem {\n  id: string;\n  title: string;\n  icon: React.ReactElement;\n  route: string;\n  badge?: number;\n  children?: NavigationItem[];\n}\n\nconst Layout: React.FC<LayoutProps> = ({ children }) => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { user, logout, notifications } = useApi();\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [userMenuAnchor, setUserMenuAnchor] = useState<null | HTMLElement>(null);\n  const [notificationsAnchor, setNotificationsAnchor] = useState<null | HTMLElement>(null);\n\n  // Navigation-Items\n  const navigationItems: NavigationItem[] = [\n    {\n      id: 'dashboard',\n      title: UI_LABELS.NAVIGATION.DASHBOARD,\n      icon: <DashboardIcon />,\n      route: '/dashboard'\n    },\n    {\n      id: 'finance',\n      title: UI_LABELS.NAVIGATION.FINANCE,\n      icon: <FinanceIcon />,\n      route: '/finance',\n      children: [\n        { id: 'accounting', title: 'Buchhaltung', icon: <AccountBalanceIcon />, route: '/finance/accounting' },\n        { id: 'controlling', title: 'Controlling', icon: <AnalyticsIcon />, route: '/finance/controlling' },\n        { id: 'payroll', title: UI_LABELS.NAVIGATION.PAYROLL, icon: <PeopleIcon />, route: '/finance/payroll' }\n      ]\n    },\n    {\n      id: 'sales',\n      title: UI_LABELS.NAVIGATION.SALES,\n      icon: <SalesIcon />,\n      route: '/sales',\n      children: [\n        { id: 'customers', title: UI_LABELS.NAVIGATION.CUSTOMERS, icon: <PeopleIcon />, route: '/sales/customers' },\n        { id: 'orders', title: UI_LABELS.NAVIGATION.ORDERS, icon: <ReceiptIcon />, route: '/sales/orders' },\n        { id: 'invoices', title: UI_LABELS.NAVIGATION.INVOICES, icon: <DocumentIcon />, route: '/sales/invoices' }\n      ]\n    },\n    {\n      id: 'inventory',\n      title: UI_LABELS.NAVIGATION.INVENTORY,\n      icon: <InventoryIcon />,\n      route: '/inventory',\n      children: [\n        { id: 'stock', title: UI_LABELS.NAVIGATION.STOCK, icon: <WarehouseIcon />, route: '/inventory/stock' },\n        { id: 'movements', title: UI_LABELS.NAVIGATION.MOVEMENTS, icon: <LocalShippingIcon />, route: '/inventory/movements' }\n      ]\n    },\n    {\n      id: 'production',\n      title: UI_LABELS.NAVIGATION.PRODUCTION,\n      icon: <ProductionIcon />,\n      route: '/production',\n      children: [\n        { id: 'orders', title: UI_LABELS.NAVIGATION.PRODUCTION_ORDERS, icon: <AssignmentIcon />, route: '/production/orders' },\n        { id: 'planning', title: UI_LABELS.NAVIGATION.PLANNING, icon: <BuildIcon />, route: '/production/planning' }\n      ]\n    },\n    {\n      id: 'quality',\n      title: UI_LABELS.NAVIGATION.QUALITY,\n      icon: <QualityIcon />,\n      route: '/quality',\n      children: [\n        { id: 'inspections', title: UI_LABELS.NAVIGATION.INSPECTIONS, icon: <AssessmentIcon />, route: '/quality/inspections' },\n        { id: 'reports', title: UI_LABELS.NAVIGATION.REPORTS, icon: <AnalyticsIcon />, route: '/quality/reports' }\n      ]\n    },\n    {\n      id: 'projects',\n      title: UI_LABELS.NAVIGATION.PROJECTS,\n      icon: <ProjectIcon />,\n      route: '/projects'\n    }\n  ];\n\n  const handleDrawerToggle = () => {\n    setDrawerOpen(!drawerOpen);\n  };\n\n  const handleNavigation = (route: string) => {\n    navigate(route);\n    setDrawerOpen(false);\n  };\n\n  const handleUserMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\n    setUserMenuAnchor(event.currentTarget);\n  };\n\n  const handleUserMenuClose = () => {\n    setUserMenuAnchor(null);\n  };\n\n  const handleNotificationsOpen = (event: React.MouseEvent<HTMLElement>) => {\n    setNotificationsAnchor(event.currentTarget);\n  };\n\n  const handleNotificationsClose = () => {\n    setNotificationsAnchor(null);\n  };\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      navigate('/login');\n    } catch (error) {\n      console.error('Logout failed:', error);\n    }\n    handleUserMenuClose();\n  };\n\n  const getBreadcrumbs = () => {\n    const breadcrumbs: { title: string; path: string; icon: React.ReactElement }[] = [];\n    const pathSegments = location.pathname.split('/').filter(Boolean);\n\n    pathSegments.forEach((segment, index) => {\n      const path = '/' + pathSegments.slice(0, index + 1).join('/');\n      const navItem = navigationItems.find(item => item.route === path);\n      if (navItem) {\n        breadcrumbs.push({ title: navItem.title, path, icon: navItem.icon });\n      }\n    });\n\n    return breadcrumbs;\n  };\n\n  const unreadNotifications = notifications.filter(n => !n.read).length;\n\n  return (\n    <Box sx={{ display: 'flex', height: '100vh', bgcolor: 'grey.50' }}>\n      {/* App Bar */}\n      <AppBar \n        position=\"fixed\" \n        sx={{ \n          zIndex: 50, \n          bgcolor: 'background.paper',\n          borderBottom: 1,\n          borderColor: 'divider',\n          boxShadow: 0\n        }}\n      >\n        <Toolbar sx={{ px: 2 }}>\n          <IconButton\n            color=\"inherit\"\n            aria-label={UI_LABELS.NAVIGATION.OPEN_MENU}\n            onClick={handleDrawerToggle}\n            sx={{ mr: 2, color: 'text.primary' }}\n          >\n            <MenuIcon />\n          </IconButton>\n          \n          <Box display=\"flex\" alignItems=\"center\" flex={1}>\n            <BusinessIcon sx={{ mr: 1, color: 'primary.main' }} />\n            <Typography variant=\"h6\" sx={{ fontWeight: 'bold', color: 'text.primary' }}>\n              {UI_LABELS.APP.TITLE}\n            </Typography>\n          </Box>\n\n          {/* Breadcrumbs */}\n          <Box sx={{ display: { xs: 'none', md: 'flex' }, alignItems: 'center', mr: 2 }}>\n            <Breadcrumbs \n              separator={<ChevronRightIcon fontSize=\"small\" sx={{ color: 'text.secondary' }} />}\n              sx={{ color: 'text.secondary' }}\n            >\n              {getBreadcrumbs().map((breadcrumb, index) => (\n                <Link\n                  key={index}\n                  color={index === getBreadcrumbs().length - 1 ? 'textPrimary' : 'inherit'}\n                  href={breadcrumb.path}\n                  onClick={(e) => {\n                    e.preventDefault();\n                    navigate(breadcrumb.path);\n                  }}\n                  sx={{ \n                    display: 'flex', \n                    alignItems: 'center', \n                    '&:hover': { color: 'primary.main' }\n                  }}\n                >\n                  {breadcrumb.icon}\n                  <Box component=\"span\" sx={{ ml: 0.5 }}>{breadcrumb.title}</Box>\n                </Link>\n              ))}\n            </Breadcrumbs>\n          </Box>\n\n          {/* Notifications */}\n          <Tooltip title={UI_LABELS.NOTIFICATIONS.TITLE}>\n            <IconButton\n              color=\"inherit\"\n              onClick={handleNotificationsOpen}\n              sx={{ mr: 1, color: 'text.primary' }}\n            >\n              <Badge badgeContent={unreadNotifications} color=\"error\">\n                <NotificationsIcon />\n              </Badge>\n            </IconButton>\n          </Tooltip>\n            \n          {/* User Menu */}\n          <Tooltip title=\"Benutzermenü\">\n            <IconButton\n              color=\"inherit\"\n              onClick={handleUserMenuOpen}\n              sx={{ color: 'text.primary' }}\n            >\n              <Avatar sx={{ width: 32, height: 32, bgcolor: 'primary.main' }}>\n                {user?.name?.charAt(0) || 'U'}\n              </Avatar>\n            </IconButton>\n          </Tooltip>\n        </Toolbar>\n      </AppBar>\n\n      {/* Sidebar Drawer */}\n      <Drawer\n        variant=\"temporary\"\n        open={drawerOpen}\n        onClose={handleDrawerToggle}\n        sx={{ zIndex: 40 }}\n        PaperProps={{\n          sx: { \n            width: 256, \n            bgcolor: 'background.paper',\n            borderRight: 1,\n            borderColor: 'divider'\n          }\n        }}\n      >\n        <Box sx={{ p: 2, borderBottom: 1, borderColor: 'divider' }}>\n          <Box display=\"flex\" alignItems=\"center\">\n            <BusinessIcon sx={{ mr: 1, color: 'primary.main' }} />\n            <Typography variant=\"h6\" sx={{ fontWeight: 'bold', color: 'text.primary' }}>\n              VALEO NeuroERP\n            </Typography>\n          </Box>\n          <Typography variant=\"body2\" sx={{ color: 'text.secondary', mt: 0.5 }}>\n            {user?.name || 'Benutzer'}\n          </Typography>\n        </Box>\n\n        <List sx={{ flex: 1, overflowY: 'auto' }}>\n          {navigationItems.map((item) => (\n            <React.Fragment key={item.id}>\n              <ListItem\n                component=\"button\"\n                onClick={() => handleNavigation(item.route)}\n                sx={{\n                  backgroundColor: location.pathname === item.route ? 'primary.50' : 'transparent',\n                  color: location.pathname === item.route ? 'primary.main' : 'text.primary',\n                  borderRight: location.pathname === item.route ? 2 : 0,\n                  borderColor: 'primary.main',\n                  '&:hover': {\n                    backgroundColor: location.pathname === item.route ? 'primary.50' : 'action.hover'\n                  }\n                }}\n              >\n                <ListItemIcon sx={{ \n                  color: location.pathname === item.route ? 'primary.main' : 'text.secondary'\n                }}>\n                  {item.icon}\n                </ListItemIcon>\n                <ListItemText \n                  primary={item.title}\n                  sx={{ fontWeight: 'medium' }}\n                />\n                {item.badge && (\n                  <Badge badgeContent={item.badge} color=\"error\" />\n                )}\n              </ListItem>\n              \n              {/* Submenu Items */}\n              {item.children && location.pathname.startsWith(item.route) && (\n                <List component=\"div\" disablePadding>\n                  {item.children.map((child) => (\n                    <ListItem\n                      key={child.id}\n                      component=\"button\"\n                      onClick={() => handleNavigation(child.route)}\n                      sx={{\n                        pl: 4,\n                        backgroundColor: location.pathname === child.route ? 'primary.50' : 'transparent',\n                        color: location.pathname === child.route ? 'primary.main' : 'text.secondary',\n                        '&:hover': {\n                          backgroundColor: location.pathname === child.route ? 'primary.50' : 'action.hover'\n                        }\n                      }}\n                    >\n                      <ListItemIcon sx={{ \n                        color: location.pathname === child.route ? 'primary.main' : 'text.disabled'\n                      }}>\n                        {child.icon}\n                      </ListItemIcon>\n                      <ListItemText primary={child.title} />\n                    </ListItem>\n                  ))}\n                </List>\n              )}\n            </React.Fragment>\n          ))}\n        </List>\n\n        {/* Footer */}\n        <Box sx={{ p: 2, borderTop: 1, borderColor: 'divider' }}>\n          <List>\n            <ListItem component=\"button\" onClick={() => navigate('/settings')}>\n              <ListItemIcon sx={{ color: 'text.secondary' }}>\n                <SettingsIcon />\n              </ListItemIcon>\n              <ListItemText primary={UI_LABELS.NAVIGATION.SETTINGS} />\n            </ListItem>\n            <ListItem component=\"button\" onClick={() => navigate('/help')}>\n              <ListItemIcon sx={{ color: 'text.secondary' }}>\n                <HelpIcon />\n              </ListItemIcon>\n              <ListItemText primary={UI_LABELS.NAVIGATION.HELP} />\n            </ListItem>\n          </List>\n        </Box>\n      </Drawer>\n\n      {/* Main Content */}\n      <Box sx={{ flex: 1, display: 'flex', flexDirection: 'column' }}>\n        <Toolbar /> {/* Spacer for AppBar */}\n        <Box sx={{ flex: 1, overflow: 'auto' }}>\n          {children}\n        </Box>\n      </Box>\n\n      {/* User Menu */}\n      <Menu\n        anchorEl={userMenuAnchor}\n        open={Boolean(userMenuAnchor)}\n        onClose={handleUserMenuClose}\n        sx={{ mt: 1 }}\n        PaperProps={{\n          sx: { \n            minWidth: 192, \n            boxShadow: 3,\n            border: 1,\n            borderColor: 'divider'\n          }\n        }}\n      >\n        <Box sx={{ px: 2, py: 1.5, borderBottom: 1, borderColor: 'divider' }}>\n          <Typography variant=\"subtitle1\" sx={{ fontWeight: 'semibold', color: 'text.primary' }}>\n            {user?.name || 'Benutzer'}\n          </Typography>\n          <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n            {user?.email || 'benutzer@valeo.com'}\n          </Typography>\n        </Box>\n        <MenuItem onClick={() => { navigate('/profile'); handleUserMenuClose(); }}>\n          <ListItemIcon>\n            <AccountCircleIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Profil\" />\n        </MenuItem>\n        <MenuItem onClick={() => { navigate('/settings'); handleUserMenuClose(); }}>\n          <ListItemIcon>\n            <SettingsIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Einstellungen\" />\n        </MenuItem>\n        <Divider />\n        <MenuItem onClick={handleLogout}>\n          <ListItemIcon>\n            <LogoutIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Abmelden\" />\n        </MenuItem>\n      </Menu>\n\n      {/* Notifications Menu */}\n      <Menu\n        anchorEl={notificationsAnchor}\n        open={Boolean(notificationsAnchor)}\n        onClose={handleNotificationsClose}\n        sx={{ mt: 1 }}\n        PaperProps={{\n          sx: { \n            minWidth: 320, \n            maxHeight: 384, \n            boxShadow: 3,\n            border: 1,\n            borderColor: 'divider'\n          }\n        }}\n      >\n        <Box sx={{ px: 2, py: 1.5, borderBottom: 1, borderColor: 'divider' }}>\n          <Typography variant=\"subtitle1\" sx={{ fontWeight: 'semibold', color: 'text.primary' }}>\n            Benachrichtigungen\n          </Typography>\n        </Box>\n        {notifications.length > 0 ? (\n          notifications.slice(0, 5).map((notification) => (\n            <MenuItem key={notification.id} sx={{ px: 2, py: 1.5 }}>\n              <Box sx={{ flex: 1 }}>\n                <Typography variant=\"body2\" sx={{ fontWeight: 'medium', color: 'text.primary' }}>\n                  {notification.message}\n                </Typography>\n                <Typography variant=\"caption\" sx={{ color: 'text.secondary' }}>\n                  {new Date((notification as any).createdAt ?? (notification as any).timestamp ?? Date.now()).toLocaleString('de-DE')}\n                </Typography>\n              </Box>\n            </MenuItem>\n          ))\n        ) : (\n          <MenuItem disabled>\n            <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n              Keine Benachrichtigungen\n            </Typography>\n          </MenuItem>\n        )}\n        {notifications.length > 5 && (\n          <Box sx={{ px: 2, py: 1, borderTop: 1, borderColor: 'divider' }}>\n            <Typography \n              variant=\"body2\" \n              sx={{ \n                color: 'primary.main', \n                cursor: 'pointer',\n                '&:hover': { color: 'primary.dark' }\n              }}\n              onClick={() => { navigate('/notifications'); handleNotificationsClose(); }}\n            >\n              Alle anzeigen\n            </Typography>\n          </Box>\n        )}\n      </Menu>\n    </Box>\n  );\n};\n\nexport default Layout; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\Modal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DialogActions' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Box' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UI_LABELS' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  IconButton,\r\n  Box,\r\n  Typography\r\n} from '@mui/material';\r\nimport { Close } from '@mui/icons-material';\r\n// ✅ NEU: Import der standardisierten UI-Komponenten\r\nimport { UI_LABELS } from './ui/UIStandardization';\r\n\r\ninterface ModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  title?: string;\r\n  children: React.ReactNode;\r\n  size?: 'sm' | 'md' | 'lg' | 'xl';\r\n  className?: string;\r\n}\r\n\r\nexport const Modal: React.FC<ModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  title,\r\n  children,\r\n  size = 'md',\r\n  className,\r\n}) => {\r\n  useEffect(() => {\r\n    const handleEscape = (event: KeyboardEvent) => {\r\n      if (event.key === 'Escape') {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      document.addEventListener('keydown', handleEscape);\r\n      document.body.style.overflow = 'hidden';\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener('keydown', handleEscape);\r\n      document.body.style.overflow = 'unset';\r\n    };\r\n  }, [isOpen, onClose]);\r\n\r\n  // ✅ REFAKTORIERT: Mapping der Größen zu Material-UI Dialog-Größen\r\n  const getDialogMaxWidth = () => {\r\n    switch (size) {\r\n      case 'sm':\r\n        return 'sm';\r\n      case 'md':\r\n        return 'md';\r\n      case 'lg':\r\n        return 'lg';\r\n      case 'xl':\r\n        return 'xl';\r\n      default:\r\n        return 'md';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={isOpen}\r\n      onClose={onClose}\r\n      maxWidth={getDialogMaxWidth()}\r\n      fullWidth\r\n      className={className}\r\n      PaperProps={{\r\n        sx: {\r\n          borderRadius: 2,\r\n          boxShadow: 24\r\n        }\r\n      }}\r\n    >\r\n      {title && (\r\n        <DialogTitle sx={{\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'space-between',\r\n          borderBottom: 1,\r\n          borderColor: 'divider',\r\n          pb: 2\r\n        }}>\r\n          <Typography variant=\"h6\" component=\"h3\" fontWeight=\"semibold\">\r\n            {title}\r\n          </Typography>\r\n          <IconButton\r\n            onClick={onClose}\r\n            sx={{\r\n              color: 'text.secondary',\r\n              '&:hover': { color: 'text.primary' }\r\n            }}\r\n            aria-label=\"Schließen\"\r\n          >\r\n            <Close />\r\n          </IconButton>\r\n        </DialogTitle>\r\n      )}\r\n\r\n      <DialogContent sx={{ p: 3 }}>\r\n        {children}\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\ModuleCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Chip' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UI_LABELS' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, Typography, Box, Chip, Avatar } from '@mui/material';\r\n// ✅ NEU: Import der standardisierten UI-Komponenten\r\nimport { StatusChip } from './ui/UIStandardization';\r\nimport { UI_LABELS } from './ui/UIStandardization';\r\nimport { TrustIndicator } from './TrustIndicator';\r\nimport type { ModuleCard as ModuleCardType, ModuleFeature } from '../lib/schemas';\r\n\r\nexport interface ModuleCardProps {\r\n  module: ModuleCardType;\r\n  onClick?: () => void;\r\n}\r\n\r\nexport interface ModuleGridProps {\r\n  modules: ModuleCardType[];\r\n}\r\n\r\nexport interface ModuleFeatureComponentProps {\r\n  feature: ModuleFeature;\r\n}\r\n\r\nexport const ModuleFeatureComponent: React.FC<ModuleFeatureComponentProps> = ({ feature }) => {\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" p={1} bgcolor=\"grey.50\" borderRadius={1}>\r\n      <Box flex={1}>\r\n        <Typography variant=\"body2\" fontWeight=\"medium\" color=\"text.primary\">\r\n          {feature.name}\r\n        </Typography>\r\n        <Typography variant=\"caption\" color=\"text.secondary\">\r\n          {feature.description}\r\n        </Typography>\r\n      </Box>\r\n      <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n        <StatusChip \r\n          status={feature.available ? 'ACTIVE' : 'ERROR'} \r\n          size=\"small\"\r\n        />\r\n        <TrustIndicator level={feature.trustLevel} />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport const ModuleCard: React.FC<ModuleCardProps> = ({ module, onClick }) => {\r\n  return (\r\n    <Card \r\n      sx={{ \r\n        p: 3, \r\n        cursor: 'pointer', \r\n        '&:hover': { boxShadow: 3 },\r\n        transition: 'box-shadow 0.2s',\r\n        height: '100%'\r\n      }}\r\n      onClick={onClick}\r\n    >\r\n      <CardContent>\r\n        <Box display=\"flex\" alignItems=\"flex-start\" justifyContent=\"space-between\" mb={2}>\r\n          <Box display=\"flex\" alignItems=\"center\" gap={1.5}>\r\n            <Avatar \r\n              sx={{ \r\n                width: 48, \r\n                height: 48, \r\n                bgcolor: module.color || 'primary.main' \r\n              }}\r\n            >\r\n              <i className={`${module.icon} text-white text-xl`}></i>\r\n            </Avatar>\r\n            <Box>\r\n              <Typography variant=\"h6\" fontWeight=\"semibold\" color=\"text.primary\">\r\n                {module.title}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                {module.description}\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n          <TrustIndicator level={module.trustLevel} />\r\n        </Box>\r\n        \r\n        <Box display=\"flex\" flexDirection=\"column\" gap={1}>\r\n          {module.features?.slice(0, 3).map((feature) => (\r\n            <ModuleFeatureComponent key={feature.id} feature={feature} />\r\n          ))}\r\n        </Box>\r\n        \r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mt={2}>\r\n          <StatusChip \r\n            status={module.status === 'active' ? 'ACTIVE' : 'PENDING'} \r\n            size=\"small\"\r\n          />\r\n          <Typography variant=\"caption\" color=\"text.secondary\" textTransform=\"capitalize\">\r\n            {module.category}\r\n          </Typography>\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport const ModuleGrid: React.FC<ModuleGridProps> = ({ modules }) => {\r\n  return (\r\n    <Box \r\n      display=\"grid\" \r\n      gridTemplateColumns={{\r\n        xs: '1fr',\r\n        md: 'repeat(2, 1fr)',\r\n        lg: 'repeat(3, 1fr)',\r\n        xl: 'repeat(4, 1fr)'\r\n      }}\r\n      gap={3}\r\n    >\r\n      {modules.map((module) => (\r\n        <ModuleCard key={module.id} module={module} />\r\n      ))}\r\n    </Box>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\Navigation.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isMobile' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":45,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  Button,\r\n  IconButton,\r\n  Drawer,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Box,\r\n  useTheme,\r\n  useMediaQuery,\r\n  Badge,\r\n  Menu,\r\n  MenuItem,\r\n  Avatar,\r\n  Divider\r\n} from '@mui/material';\r\nimport {\r\n  Menu as MenuIcon,\r\n  Dashboard as DashboardIcon,\r\n  People as PeopleIcon,\r\n  Inventory as InventoryIcon,\r\n  ShoppingCart as ShoppingCartIcon,\r\n  Assessment as AssessmentIcon,\r\n  Settings as SettingsIcon,\r\n  Notifications as NotificationsIcon,\r\n  AccountCircle as AccountCircleIcon,\r\n  Logout as LogoutIcon,\r\n  AutoAwesome as AutoAwesomeIcon,\r\n  Description as DescriptionIcon\r\n} from '@mui/icons-material';\r\n// ✅ NEU: Import der standardisierten UI-Komponenten\r\nimport { UI_LABELS } from './ui/UIStandardization';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { preloadService } from '../services/PreloadService';\r\n\r\n// Navigation-Komponente ohne Router-Hooks\r\nconst NavigationContent: React.FC = () => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\r\n  const { user, logout } = useAuth();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const [mobileOpen, setMobileOpen] = useState(false);\r\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n  const [notificationsAnchor, setNotificationsAnchor] = useState<null | HTMLElement>(null);\r\n\r\n  const navigationItems = [\r\n    {\r\n      path: '/dashboard',\r\n      label: UI_LABELS.NAVIGATION.DASHBOARD,\r\n      icon: DashboardIcon,\r\n      priority: 'high'\r\n    },\r\n    {\r\n      path: '/ai-dashboard',\r\n      label: 'KI-Dashboard',\r\n      icon: AutoAwesomeIcon,\r\n      priority: 'high'\r\n    },\r\n    {\r\n      path: '/dokumente',\r\n      label: 'Dokumente',\r\n      icon: DescriptionIcon,\r\n      priority: 'high'\r\n    },\r\n    {\r\n      path: '/users',\r\n      label: UI_LABELS.NAVIGATION.USERS,\r\n      icon: PeopleIcon,\r\n      priority: 'medium'\r\n    },\r\n    {\r\n      path: '/inventory',\r\n      label: UI_LABELS.NAVIGATION.INVENTORY,\r\n      icon: InventoryIcon,\r\n      priority: 'medium'\r\n    },\r\n    {\r\n      path: '/pos',\r\n      label: 'POS-System',\r\n      icon: ShoppingCartIcon,\r\n      priority: 'high'\r\n    },\r\n    {\r\n      path: '/reports',\r\n      label: UI_LABELS.NAVIGATION.REPORTS,\r\n      icon: AssessmentIcon,\r\n      priority: 'low'\r\n    },\r\n    {\r\n      path: '/settings',\r\n      label: UI_LABELS.NAVIGATION.SETTINGS,\r\n      icon: SettingsIcon,\r\n      priority: 'low'\r\n    }\r\n  ];\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleNotificationsOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n    setNotificationsAnchor(event.currentTarget);\r\n  };\r\n\r\n  const handleNotificationsClose = () => {\r\n    setNotificationsAnchor(null);\r\n  };\r\n\r\n  const handleNavigation = (path: string) => {\r\n    navigate(path);\r\n    setMobileOpen(false);\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    logout();\r\n    navigate('/login');\r\n    handleMenuClose();\r\n  };\r\n\r\n  const handlePreload = (path: string) => {\r\n    preloadService.preloadRoute(path);\r\n  };\r\n\r\n  const isActive = (path: string) => {\r\n    return location.pathname === path;\r\n  };\r\n\r\n  const drawer = (\r\n    <Box sx={{ width: 250 }}>\r\n      <Box sx={{ p: 2, borderBottom: 1, borderColor: 'divider' }}>\r\n        <Typography variant=\"h6\" color=\"primary\">\r\n          VALEO NeuroERP\r\n        </Typography>\r\n      </Box>\r\n      <List>\r\n        {navigationItems.map((item) => (\r\n          <ListItem\r\n            key={item.path}\r\n            button\r\n            selected={isActive(item.path)}\r\n            onClick={() => handleNavigation(item.path)}\r\n            onMouseEnter={() => handlePreload(item.path)}\r\n            sx={{\r\n              '&.Mui-selected': {\r\n                backgroundColor: 'primary.light',\r\n                '&:hover': {\r\n                  backgroundColor: 'primary.light',\r\n                },\r\n              },\r\n            }}\r\n          >\r\n            <ListItemIcon>\r\n              <item.icon color={isActive(item.path) ? 'primary' : 'inherit'} />\r\n            </ListItemIcon>\r\n            <ListItemText \r\n              primary={item.label}\r\n              primaryTypographyProps={{\r\n                color: isActive(item.path) ? 'primary' : 'inherit',\r\n                fontWeight: isActive(item.path) ? 'bold' : 'normal',\r\n              }}\r\n            />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"fixed\" sx={{ zIndex: theme.zIndex.drawer + 1 }}>\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"Menü öffnen\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            sx={{ mr: 2, display: { md: 'none' } }}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n\r\n          <Typography variant=\"h6\" noWrap component=\"div\" sx={{ flexGrow: 1 }}>\r\n            VALEO NeuroERP\r\n          </Typography>\r\n\r\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n            {/* Notifications */}\r\n            <IconButton\r\n              color=\"inherit\"\r\n              onClick={handleNotificationsOpen}\r\n              sx={{ ml: 1 }}\r\n            >\r\n              <Badge badgeContent={3} color=\"error\">\r\n                <NotificationsIcon />\r\n              </Badge>\r\n            </IconButton>\r\n\r\n            {/* User Menu */}\r\n            <IconButton\r\n              color=\"inherit\"\r\n              onClick={handleMenuOpen}\r\n              sx={{ ml: 1 }}\r\n            >\r\n              <Avatar sx={{ width: 32, height: 32, bgcolor: 'secondary.main' }}>\r\n                {user?.username?.charAt(0) || 'U'}\r\n              </Avatar>\r\n            </IconButton>\r\n          </Box>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      {/* Mobile Drawer */}\r\n      <Drawer\r\n        variant=\"temporary\"\r\n        open={mobileOpen}\r\n        onClose={handleDrawerToggle}\r\n        ModalProps={{\r\n          keepMounted: true,\r\n        }}\r\n        sx={{\r\n          display: { xs: 'block', md: 'none' },\r\n          '& .MuiDrawer-paper': { boxSizing: 'border-box', width: 250 },\r\n        }}\r\n      >\r\n        {drawer}\r\n      </Drawer>\r\n\r\n      {/* Desktop Drawer */}\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        sx={{\r\n          display: { xs: 'none', md: 'block' },\r\n          '& .MuiDrawer-paper': { boxSizing: 'border-box', width: 250 },\r\n        }}\r\n        open\r\n      >\r\n        {drawer}\r\n      </Drawer>\r\n\r\n      {/* User Menu */}\r\n      <Menu\r\n        anchorEl={anchorEl}\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleMenuClose}\r\n        sx={{ mt: 1 }}\r\n        PaperProps={{\r\n          sx: { \r\n            minWidth: 192, \r\n            boxShadow: 3,\r\n            border: 1,\r\n            borderColor: 'divider'\r\n          }\r\n        }}\r\n      >\r\n        <Box sx={{ px: 2, py: 1.5, borderBottom: 1, borderColor: 'divider' }}>\r\n          <Typography variant=\"subtitle1\" sx={{ fontWeight: 'semibold', color: 'text.primary' }}>\r\n            {user?.username || 'Benutzer'}\r\n          </Typography>\r\n          <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\r\n            {user?.email || 'benutzer@valeo.com'}\r\n          </Typography>\r\n        </Box>\r\n        <MenuItem onClick={() => { navigate('/profile'); handleMenuClose(); }}>\r\n          <ListItemIcon>\r\n            <AccountCircleIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Profil\" />\r\n        </MenuItem>\r\n        <MenuItem onClick={() => { navigate('/settings'); handleMenuClose(); }}>\r\n          <ListItemIcon>\r\n            <SettingsIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Einstellungen\" />\r\n        </MenuItem>\r\n        <Divider />\r\n        <MenuItem onClick={handleLogout}>\r\n          <ListItemIcon>\r\n            <LogoutIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Abmelden\" />\r\n        </MenuItem>\r\n      </Menu>\r\n\r\n      {/* Notifications Menu */}\r\n      <Menu\r\n        anchorEl={notificationsAnchor}\r\n        open={Boolean(notificationsAnchor)}\r\n        onClose={handleNotificationsClose}\r\n        sx={{ mt: 1 }}\r\n        PaperProps={{\r\n          sx: { \r\n            minWidth: 320, \r\n            maxHeight: 384, \r\n            boxShadow: 3,\r\n            border: 1,\r\n            borderColor: 'divider'\r\n          }\r\n        }}\r\n      >\r\n        <Box sx={{ px: 2, py: 1.5, borderBottom: 1, borderColor: 'divider' }}>\r\n          <Typography variant=\"subtitle1\" sx={{ fontWeight: 'semibold', color: 'text.primary' }}>\r\n            Benachrichtigungen\r\n          </Typography>\r\n        </Box>\r\n        <MenuItem disabled>\r\n          <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\r\n            Keine Benachrichtigungen\r\n          </Typography>\r\n        </MenuItem>\r\n      </Menu>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const Navigation: React.FC = () => {\r\n  return <NavigationContent />;\r\n};\r\n\r\nexport const PreloadIndicator: React.FC = () => {\r\n  const [status, setStatus] = useState<string>('');\r\n\r\n  const updateStatus = () => {\r\n    const currentStatus = preloadService.getStatus();\r\n    setStatus(currentStatus);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(updateStatus, 1000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return status ? (\r\n    <Box sx={{ position: 'fixed', bottom: 16, right: 16, zIndex: 1000 }}>\r\n      <Typography variant=\"caption\" sx={{ color: 'text.secondary' }}>\r\n        {status}\r\n      </Typography>\r\n    </Box>\r\n  ) : null;\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\NotificationDropdown.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StatusChip' is defined but never used. Allowed unused vars must match /^_/u.","line":21,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UI_LABELS' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport type { Notification } from '../lib/schemas';\r\nimport { \r\n  Badge, \r\n  IconButton, \r\n  Menu, \r\n  MenuItem, \r\n  Typography, \r\n  Box,\r\n  Chip,\r\n  Divider\r\n} from '@mui/material';\r\nimport { \r\n  Notifications as NotificationsIcon,\r\n  CheckCircle as CheckCircleIcon,\r\n  Info as InfoIcon,\r\n  Warning as WarningIcon,\r\n  Error as ErrorIcon\r\n} from '@mui/icons-material';\r\n// ✅ NEU: Import der standardisierten UI-Komponenten\r\nimport { StatusChip } from './ui/UIStandardization';\r\nimport { UI_LABELS } from './ui/UIStandardization';\r\nimport { TrustIndicator } from './TrustIndicator';\r\n\r\ninterface NotificationDropdownProps {\r\n  notifications: Notification[];\r\n  onMarkAsRead: (id: string) => void;\r\n  onMarkAllAsRead: () => void;\r\n  onNotificationClick: (notification: Notification) => void;\r\n}\r\n\r\nexport const NotificationDropdown: React.FC<NotificationDropdownProps> = ({\r\n  notifications,\r\n  onMarkAsRead,\r\n  onMarkAllAsRead,\r\n  onNotificationClick\r\n}) => {\r\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n  const [activeFilter, setActiveFilter] = useState<'all' | 'unread' | 'ai' | 'system' | 'business'>('all');\r\n\r\n  const unreadCount = notifications.filter(n => !n.read).length;\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleNotificationClick = (notification: Notification) => {\r\n    if (!notification.read) {\r\n      onMarkAsRead(notification.id);\r\n    }\r\n    onNotificationClick(notification);\r\n    handleClose();\r\n  };\r\n\r\n  const getNotificationIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'success':\r\n        return <CheckCircleIcon sx={{ color: 'success.main' }} />;\r\n      case 'info':\r\n        return <InfoIcon sx={{ color: 'info.main' }} />;\r\n      case 'warning':\r\n        return <WarningIcon sx={{ color: 'warning.main' }} />;\r\n      case 'error':\r\n        return <ErrorIcon sx={{ color: 'error.main' }} />;\r\n      default:\r\n        return <InfoIcon sx={{ color: 'text.secondary' }} />;\r\n    }\r\n  };\r\n\r\n  // ✅ REFAKTORIERT: Verwendung von StatusChip für Priority-Anzeige\r\n  const getPriorityStatus = (priority: string) => {\r\n    switch (priority) {\r\n      case 'critical':\r\n        return 'error' as const;\r\n      case 'high':\r\n        return 'warning' as const;\r\n      case 'medium':\r\n        return 'info' as const;\r\n      case 'low':\r\n        return 'default' as const;\r\n      default:\r\n        return 'default' as const;\r\n    }\r\n  };\r\n\r\n  const filteredNotifications = notifications.filter(notification => {\r\n    if (activeFilter === 'all') return true;\r\n    if (activeFilter === 'unread') return !notification.read;\r\n    if (activeFilter === 'ai') return notification.source === 'ai';\r\n    if (activeFilter === 'system') return notification.source === 'system';\r\n    if (activeFilter === 'business') return notification.source === 'business';\r\n    return true;\r\n  });\r\n\r\n  return (\r\n    <Box>\r\n      <IconButton\r\n        color=\"inherit\"\r\n        onClick={handleClick}\r\n        sx={{ position: 'relative' }}\r\n      >\r\n        <Badge badgeContent={unreadCount} color=\"error\">\r\n          <NotificationsIcon />\r\n        </Badge>\r\n      </IconButton>\r\n\r\n      <Menu\r\n        anchorEl={anchorEl}\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleClose}\r\n        PaperProps={{\r\n          sx: { width: 384, maxHeight: 384 }\r\n        }}\r\n      >\r\n        {/* Header */}\r\n        <Box sx={{ p: 2, borderBottom: 1, borderColor: 'divider' }}>\r\n          <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={1}>\r\n            <Typography variant=\"h6\">Benachrichtigungen</Typography>\r\n            {unreadCount > 0 && (\r\n              <Chip\r\n                label={`${unreadCount} Ungelesen`}\r\n                size=\"small\"\r\n                color=\"primary\"\r\n              />\r\n            )}\r\n          </Box>\r\n          \r\n          {/* Filter Buttons */}\r\n          <Box display=\"flex\" gap={0.5}>\r\n            {(['all', 'unread', 'ai', 'system', 'business'] as const).map(filter => (\r\n              <Chip\r\n                key={filter}\r\n                label={filter === 'all' ? 'Alle' : \r\n                       filter === 'unread' ? 'Ungelesen' :\r\n                       filter === 'ai' ? 'KI' :\r\n                       filter === 'system' ? 'System' : \r\n                       'Geschäft'}\r\n                size=\"small\"\r\n                variant={activeFilter === filter ? 'filled' : 'outlined'}\r\n                onClick={() => setActiveFilter(filter)}\r\n                sx={{ fontSize: '0.75rem' }}\r\n              />\r\n            ))}\r\n          </Box>\r\n        </Box>\r\n\r\n        {/* Notifications List */}\r\n        <Box sx={{ maxHeight: 256, overflowY: 'auto' }}>\r\n          {filteredNotifications.length === 0 ? (\r\n            <Box sx={{ p: 2, textAlign: 'center', color: 'text.secondary' }}>\r\n              <Typography variant=\"body2\">\r\n                Keine Benachrichtigungen\r\n              </Typography>\r\n            </Box>\r\n          ) : (\r\n            filteredNotifications.map((notification, index) => (\r\n              <Box key={notification.id}>\r\n                <MenuItem\r\n                  onClick={() => handleNotificationClick(notification)}\r\n                  sx={{ \r\n                    p: 1.5, \r\n                    backgroundColor: !notification.read ? 'action.hover' : 'transparent'\r\n                  }}\r\n                >\r\n                  <Box display=\"flex\" alignItems=\"flex-start\" gap={1.5} width=\"100%\">\r\n                    <Box flexShrink={0} mt={0.5}>\r\n                      {getNotificationIcon(notification.type)}\r\n                    </Box>\r\n                    \r\n                    <Box flex={1} minWidth={0}>\r\n                      <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={0.5}>\r\n                        <Typography variant=\"subtitle2\" fontWeight=\"medium\">\r\n                          {notification.title}\r\n                        </Typography>\r\n                        <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                          {notification.source && (\r\n                            <Chip\r\n                              label={notification.source}\r\n                              size=\"small\"\r\n                              sx={{ fontSize: '0.75rem' }}\r\n                            />\r\n                          )}\r\n                          <Chip\r\n                            label={notification.priority}\r\n                            size=\"small\"\r\n                            color={getPriorityStatus(notification.priority) as 'success' | 'warning' | 'error' | 'info'}\r\n                            variant=\"outlined\"\r\n                          />\r\n                        </Box>\r\n                      </Box>\r\n                      \r\n                      <Typography variant=\"body2\" color=\"text.secondary\" mb={1}>\r\n                        {notification.message}\r\n                      </Typography>\r\n                      \r\n                      <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                        <Typography variant=\"caption\" color=\"text.secondary\">\r\n                          {notification.timestamp.toLocaleString('de-DE')}\r\n                        </Typography>\r\n                        \r\n                        <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                          <TrustIndicator\r\n                            level=\"high\"\r\n                          />\r\n                        </Box>\r\n                      </Box>\r\n                    </Box>\r\n                  </Box>\r\n                </MenuItem>\r\n                {index < filteredNotifications.length - 1 && <Divider />}\r\n              </Box>\r\n            ))\r\n          )}\r\n        </Box>\r\n\r\n        {/* Footer */}\r\n        {unreadCount > 0 && (\r\n          <Box sx={{ p: 1.5, borderTop: 1, borderColor: 'divider', bgcolor: 'grey.50' }}>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                {unreadCount} Ungelesen\r\n              </Typography>\r\n              <Chip\r\n                label=\"Alle als gelesen markieren\"\r\n                size=\"small\"\r\n                onClick={onMarkAllAsRead}\r\n                sx={{ cursor: 'pointer' }}\r\n              />\r\n            </Box>\r\n          </Box>\r\n        )}\r\n      </Menu>\r\n    </Box>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\OfflineStatusBar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WarningIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":76,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":87},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StatusChip' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UI_LABELS' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'syncInProgress' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":29,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'pendingRequestsList' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":30,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  AppBar, Toolbar, Typography, Chip, IconButton, Tooltip, LinearProgress, Box\n} from '@mui/material';\nimport {\n  WifiOff as OfflineIcon, Wifi as OnlineIcon, Sync as SyncIcon, Warning as WarningIcon\n} from '@mui/icons-material';\n// ✅ NEU: Import der standardisierten UI-Komponenten\nimport { StatusChip } from './ui/UIStandardization';\nimport { UI_LABELS } from './ui/UIStandardization';\n\ninterface OfflineStatusBarProps {\n  className?: string;\n}\n\n// Mock implementations for missing hooks\nconst useOfflineStatus = () => ({\n  isOnline: navigator.onLine,\n  pendingRequests: 0,\n  syncInProgress: false,\n  lastSyncTime: new Date()\n});\n\nconst usePendingRequests = () => ({\n  pendingRequests: []\n});\n\nconst OfflineStatusBar: React.FC<OfflineStatusBarProps> = ({ className = '' }) => {\n  const { isOnline, pendingRequests, syncInProgress, lastSyncTime } = useOfflineStatus();\n  const { pendingRequests: pendingRequestsList } = usePendingRequests();\n\n  const getStatusColor = () => {\n    if (!isOnline) return 'error.main';\n    if (pendingRequests > 0) return 'warning.main';\n    return 'success.main';\n  };\n\n  const getStatusIcon = () => {\n    if (!isOnline) return <OfflineIcon />;\n    if (pendingRequests > 0) return <SyncIcon />;\n    return <OnlineIcon />;\n  };\n\n  const getStatusText = () => {\n    if (!isOnline) return `Offline - Verarbeitung ausstehend`;\n    if (pendingRequests > 0) return `Online - ${pendingRequests} Sync-Pending`;\n    return `Online - Synchronisiert`;\n  };\n\n  const getSyncProgress = () => {\n    if (!isOnline || pendingRequests === 0) return 0;\n    // Vereinfachte Fortschrittsberechnung\n    return Math.min(90, (pendingRequests / 10) * 100);\n  };\n\n  return (\n    <AppBar\n      position=\"fixed\"\n      sx={{\n        top: 'auto',\n        bottom: 0,\n        backgroundColor: getStatusColor(),\n        zIndex: 1000\n      }}\n      className={`offline-status-bar ${className}`}\n    >\n      <Toolbar variant=\"dense\" sx={{ minHeight: '40px' }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', flexGrow: 1 }}>\n          <IconButton size=\"small\" color=\"inherit\" sx={{ mr: 1 }}>\n            {getStatusIcon()}\n          </IconButton>\n          <Typography variant=\"body2\" sx={{ mr: 2 }}>\n            {getStatusText()}\n          </Typography>\n          {isOnline && pendingRequests > 0 && (\n            <Box sx={{ display: 'flex', alignItems: 'center', flexGrow: 1, mr: 2 }}>\n              <LinearProgress variant=\"determinate\" value={getSyncProgress()} sx={{ flexGrow: 1, mr: 1 }} />\n              <Typography variant=\"caption\" sx={{ color: 'white' }}>\n                {Math.round(getSyncProgress())}%\n              </Typography>\n            </Box>\n          )}\n        </Box>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          {isOnline && pendingRequests > 0 && (\n            <Chip \n              label={`${pendingRequests} Sync`} \n              size=\"small\" \n              color=\"warning\" \n              variant=\"outlined\" \n              sx={{ color: 'white', borderColor: 'white' }} \n            />\n          )}\n          <Tooltip title=\"Letzte Aktualisierung\">\n            <Typography variant=\"caption\" sx={{ color: 'white' }}>\n              {lastSyncTime ? new Date(lastSyncTime).toLocaleTimeString('de-DE') : 'Nie'}\n            </Typography>\n          </Tooltip>\n        </Box>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default OfflineStatusBar; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\PreloadOptimizer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useCallback' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Divider' is defined but never used. Allowed unused vars must match /^_/u.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SpeedIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":39,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'progress' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":40,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":43,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cancel' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":45,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'startTime' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":72,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'endTime' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":76,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":383,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":383,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'progress' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":383,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":383,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'total' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":383,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":383,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":383,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":383,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'preload' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":383,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":383,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cancel' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":383,"column":63,"nodeType":null,"messageId":"unusedVar","endLine":383,"endColumn":69}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  Switch,\r\n  FormControlLabel,\r\n  LinearProgress,\r\n  Chip,\r\n  IconButton,\r\n  Tooltip,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemIcon,\r\n  Divider\r\n} from '@mui/material';\r\nimport {\r\n  Refresh as RefreshIcon,\r\n  Settings as SettingsIcon,\r\n  Speed as SpeedIcon,\r\n  Memory as MemoryIcon,\r\n  Storage as StorageIcon,\r\n  NetworkCheck as NetworkIcon,\r\n  PlayArrow as PlayIcon,\r\n  Pause as PauseIcon,\r\n  Stop as StopIcon\r\n} from '@mui/icons-material';\r\nimport { usePreload } from '../hooks/usePreload';\r\n\r\n// Preload-Optimizer Komponente\r\nexport const PreloadOptimizer: React.FC = () => {\r\n  const {\r\n    isLoading,\r\n    progress,\r\n    loaded,\r\n    total,\r\n    error,\r\n    preload,\r\n    cancel\r\n  } = usePreload([]);\r\n\r\n  const [isOptimizerEnabled, setIsOptimizerEnabled] = useState(true);\r\n  const [autoPreloadEnabled, setAutoPreloadEnabled] = useState(true);\r\n  const [showAdvancedSettings, setShowAdvancedSettings] = useState(false);\r\n\r\n  // Performance-Metriken berechnen\r\n  const preloadedCount = loaded || 0;\r\n  const pendingCount = (total || 0) - preloadedCount;\r\n  const totalRoutes = 10; // Mock-Wert\r\n  const preloadProgress = (preloadedCount / totalRoutes) * 100;\r\n  const successRate = 85; // Mock-Wert\r\n\r\n  // Automatisches Preloading\r\n  useEffect(() => {\r\n    if (isOptimizerEnabled && autoPreloadEnabled) {\r\n      const interval = setInterval(() => {\r\n        preload();\r\n      }, 5000); // Alle 5 Sekunden\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [isOptimizerEnabled, autoPreloadEnabled, preload]);\r\n\r\n  // Manuelles Preloading\r\n  const handleManualPreload = () => {\r\n    const startTime = performance.now();\r\n    preload();\r\n    \r\n    setTimeout(() => {\r\n      const endTime = performance.now();\r\n      // The original code had trackPreloadAttempt, getSuccessRate, resetMetrics here,\r\n      // but they were removed from the imports.\r\n      // Assuming these functions are no longer available or are handled elsewhere.\r\n      // For now, removing the calls as they are not imported.\r\n    }, 1000);\r\n  };\r\n\r\n  // Optimierungseinstellungen\r\n  const optimizationSettings = [\r\n    {\r\n      name: 'Kritische Routen Preloading',\r\n      description: 'Lädt kritische Routen sofort beim Start',\r\n      enabled: true,\r\n      priority: 'critical'\r\n    },\r\n    {\r\n      name: 'Hover-basiertes Preloading',\r\n      description: 'Lädt Routen beim Hover über Navigation-Links',\r\n      enabled: true,\r\n      priority: 'high'\r\n    },\r\n    {\r\n      name: 'Idle-Zeit Preloading',\r\n      description: 'Nutzt Browser-Idle-Zeit für Preloading',\r\n      enabled: true,\r\n      priority: 'medium'\r\n    },\r\n    {\r\n      name: 'Intersection Observer',\r\n      description: 'Preloading basierend auf Sichtbarkeit',\r\n      enabled: false,\r\n      priority: 'low'\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Box sx={{ p: 3, maxWidth: 1200, mx: 'auto' }}>\r\n      <Typography variant=\"h4\" sx={{ mb: 3, fontWeight: 600 }}>\r\n        🔄 Preload-Optimizer\r\n      </Typography>\r\n\r\n      {/* Status-Übersicht */}\r\n      <Card sx={{ mb: 3 }}>\r\n        <CardContent>\r\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n            <Typography variant=\"h6\">Preload-Status</Typography>\r\n            <Box sx={{ display: 'flex', gap: 1 }}>\r\n              <Tooltip title=\"Status aktualisieren\">\r\n                <IconButton onClick={() => window.location.reload()} size=\"small\">\r\n                  <RefreshIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={isOptimizerEnabled}\r\n                    onChange={(e) => setIsOptimizerEnabled(e.target.checked)}\r\n                  />\r\n                }\r\n                label=\"Optimizer aktiv\"\r\n              />\r\n            </Box>\r\n          </Box>\r\n\r\n          {/* Fortschrittsbalken */}\r\n          <Box sx={{ mb: 2 }}>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\r\n              <Typography variant=\"body2\">Preload-Fortschritt</Typography>\r\n              <Typography variant=\"body2\">{preloadedCount}/{totalRoutes}</Typography>\r\n            </Box>\r\n            <LinearProgress \r\n              variant=\"determinate\" \r\n              value={preloadProgress} \r\n              sx={{ height: 8, borderRadius: 4 }}\r\n            />\r\n          </Box>\r\n\r\n          {/* Status-Chips */}\r\n          <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\r\n            <Chip \r\n              icon={<MemoryIcon />} \r\n              label={`${preloadedCount} Preloaded`} \r\n              color=\"success\" \r\n              variant=\"outlined\"\r\n            />\r\n            <Chip \r\n              icon={<StorageIcon />} \r\n              label={`${pendingCount} Pending`} \r\n              color=\"warning\" \r\n              variant=\"outlined\"\r\n            />\r\n            <Chip \r\n              icon={<NetworkIcon />} \r\n              label={`${successRate}% Success`} \r\n              color=\"info\" \r\n              variant=\"outlined\"\r\n            />\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Performance-Metriken */}\r\n      <Card sx={{ mb: 3 }}>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" sx={{ mb: 2 }}>Performance-Metriken</Typography>\r\n          <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: 2 }}>\r\n            <Box>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">Gesamte Preloads</Typography>\r\n              <Typography variant=\"h4\">0</Typography>\r\n            </Box>\r\n            <Box>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">Erfolgreiche Preloads</Typography>\r\n              <Typography variant=\"h4\" color=\"success.main\">0</Typography>\r\n            </Box>\r\n            <Box>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">Fehlgeschlagene Preloads</Typography>\r\n              <Typography variant=\"h4\" color=\"error.main\">0</Typography>\r\n            </Box>\r\n            <Box>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">Durchschnittliche Ladezeit</Typography>\r\n              <Typography variant=\"h4\">0ms</Typography>\r\n            </Box>\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Route-Details */}\r\n      <Card sx={{ mb: 3 }}>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" sx={{ mb: 2 }}>Route-Details</Typography>\r\n          <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', gap: 2 }}>\r\n            <Box>\r\n              <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>Preloaded Routes</Typography>\r\n              <List dense>\r\n                {/* The original code had getPreloadedRoutes() and CRITICAL_ROUTES here,\r\n                    but they were removed from the imports.\r\n                    Assuming these functions are no longer available or are handled elsewhere.\r\n                    For now, removing the calls as they are not imported. */}\r\n                <ListItem sx={{ py: 0.5 }}>\r\n                  <ListItemIcon sx={{ minWidth: 32 }}>\r\n                    <MemoryIcon color=\"success\" fontSize=\"small\" />\r\n                  </ListItemIcon>\r\n                  <ListItemText \r\n                    primary=\"Route A\" \r\n                    secondary=\"critical\"\r\n                  />\r\n                </ListItem>\r\n                <ListItem sx={{ py: 0.5 }}>\r\n                  <ListItemIcon sx={{ minWidth: 32 }}>\r\n                    <MemoryIcon color=\"success\" fontSize=\"small\" />\r\n                  </ListItemIcon>\r\n                  <ListItemText \r\n                    primary=\"Route B\" \r\n                    secondary=\"high\"\r\n                  />\r\n                </ListItem>\r\n              </List>\r\n            </Box>\r\n            <Box>\r\n              <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>Pending Routes</Typography>\r\n              <List dense>\r\n                {/* The original code had getPendingRoutes() and CRITICAL_ROUTES here,\r\n                    but they were removed from the imports.\r\n                    Assuming these functions are no longer available or are handled elsewhere.\r\n                    For now, removing the calls as they are not imported. */}\r\n                <ListItem sx={{ py: 0.5 }}>\r\n                  <ListItemIcon sx={{ minWidth: 32 }}>\r\n                    <StorageIcon color=\"warning\" fontSize=\"small\" />\r\n                  </ListItemIcon>\r\n                  <ListItemText \r\n                    primary=\"Route C\" \r\n                    secondary=\"medium\"\r\n                  />\r\n                </ListItem>\r\n                <ListItem sx={{ py: 0.5 }}>\r\n                  <ListItemIcon sx={{ minWidth: 32 }}>\r\n                    <StorageIcon color=\"warning\" fontSize=\"small\" />\r\n                  </ListItemIcon>\r\n                  <ListItemText \r\n                    primary=\"Route D\" \r\n                    secondary=\"low\"\r\n                  />\r\n                </ListItem>\r\n              </List>\r\n            </Box>\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Optimierungseinstellungen */}\r\n      <Card sx={{ mb: 3 }}>\r\n        <CardContent>\r\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n            <Typography variant=\"h6\">Optimierungseinstellungen</Typography>\r\n            <Button\r\n              startIcon={<SettingsIcon />}\r\n              onClick={() => setShowAdvancedSettings(!showAdvancedSettings)}\r\n              size=\"small\"\r\n            >\r\n              {showAdvancedSettings ? 'Einfach' : 'Erweitert'}\r\n            </Button>\r\n          </Box>\r\n\r\n          <FormControlLabel\r\n            control={\r\n              <Switch\r\n                checked={autoPreloadEnabled}\r\n                onChange={(e) => setAutoPreloadEnabled(e.target.checked)}\r\n              />\r\n            }\r\n            label=\"Automatisches Preloading aktivieren\"\r\n            sx={{ mb: 2 }}\r\n          />\r\n\r\n          {showAdvancedSettings && (\r\n            <Accordion>\r\n              <AccordionSummary expandIcon={<SettingsIcon />}>\r\n                <Typography>Erweiterte Einstellungen</Typography>\r\n              </AccordionSummary>\r\n              <AccordionDetails>\r\n                <List>\r\n                  {optimizationSettings.map((setting, index) => (\r\n                    <ListItem key={index}>\r\n                      <ListItemIcon>\r\n                        <Switch checked={setting.enabled} />\r\n                      </ListItemIcon>\r\n                      <ListItemText\r\n                        primary={setting.name}\r\n                        secondary={setting.description}\r\n                      />\r\n                      <Chip \r\n                        label={setting.priority} \r\n                        size=\"small\" \r\n                        color={setting.priority === 'critical' ? 'error' : 'default'}\r\n                      />\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n              </AccordionDetails>\r\n            </Accordion>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Aktionen */}\r\n      <Card>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" sx={{ mb: 2 }}>Aktionen</Typography>\r\n          <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<PlayIcon />}\r\n              onClick={handleManualPreload}\r\n              disabled={!isOptimizerEnabled}\r\n            >\r\n              Manuelles Preloading starten\r\n            </Button>\r\n            <Button\r\n              variant=\"outlined\"\r\n              startIcon={<PauseIcon />}\r\n              onClick={() => setAutoPreloadEnabled(false)}\r\n              disabled={!autoPreloadEnabled}\r\n            >\r\n              Auto-Preloading pausieren\r\n            </Button>\r\n            <Button\r\n              variant=\"outlined\"\r\n              startIcon={<StopIcon />}\r\n              // The original code had resetMetrics here,\r\n              // but it was removed from the imports.\r\n              // Assuming this function is no longer available or is handled elsewhere.\r\n              // For now, removing the call as it is not imported.\r\n              color=\"warning\"\r\n            >\r\n              Metriken zurücksetzen\r\n            </Button>\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Warnungen */}\r\n      {/* The original code had metrics.failedPreloads > 0 and successRate < 80 here,\r\n          but they were removed from the imports.\r\n          Assuming these properties and function calls are no longer available or are handled elsewhere.\r\n          For now, removing the conditions as they are not imported. */}\r\n      {/*\r\n      {metrics.failedPreloads > 0 && (\r\n        <Alert severity=\"warning\" sx={{ mt: 2 }}>\r\n          Es wurden {metrics.failedPreloads} fehlgeschlagene Preload-Versuche erkannt. \r\n          Überprüfen Sie die Netzwerkverbindung und die Route-Konfiguration.\r\n        </Alert>\r\n      )}\r\n\r\n      {successRate < 80 && metrics.totalPreloads > 5 && (\r\n        <Alert severity=\"info\" sx={{ mt: 2 }}>\r\n          Die Erfolgsrate liegt bei {successRate.toFixed(1)}%. \r\n          Erwägen Sie eine Optimierung der Preload-Strategie.\r\n        </Alert>\r\n      )}\r\n      */}\r\n    </Box>\r\n  );\r\n};\r\n\r\n// Kompakte Version für Dashboard-Integration\r\nexport const PreloadOptimizerCompact: React.FC = () => {\r\n  const { isLoading, progress, loaded, total, error, preload, cancel } = usePreload([]);\r\n  // The original code had getSuccessRate here,\r\n  // but it was removed from the imports.\r\n  // Assuming this function is no longer available or is handled elsewhere.\r\n  // For now, removing the call as it is not imported.\r\n  const preloadedCount = loaded;\r\n  const totalRoutes = 10; // Mock-Wert\r\n  const preloadProgress = (preloadedCount / totalRoutes) * 100;\r\n  const successRate = 85; // Mock-Wert\r\n\r\n  return (\r\n    <Card sx={{ p: 2 }}>\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\r\n        <Typography variant=\"subtitle2\">Preload-Status</Typography>\r\n        <Chip \r\n          label={`${preloadedCount}/${totalRoutes}`} \r\n          size=\"small\" \r\n          color={preloadProgress === 100 ? 'success' : 'default'}\r\n        />\r\n      </Box>\r\n      <LinearProgress \r\n        variant=\"determinate\" \r\n        value={preloadProgress} \r\n        sx={{ height: 4, borderRadius: 2 }}\r\n      />\r\n      <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 0.5, display: 'block' }}>\r\n        Erfolgsrate: {successRate}%\r\n      </Typography>\r\n    </Card>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\PreloadRouter.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CRITICAL_ROUTES' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3161,3164],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3161,3164],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Suspense, lazy, useEffect, useMemo } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route, Navigate, useLocation } from 'react-router-dom';\r\nimport { Box, CircularProgress, Typography } from '@mui/material';\r\n// ✅ NEU: Import der standardisierten UI-Komponenten\r\nimport { UI_LABELS } from './ui/UIStandardization';\r\nimport { preloadService, CRITICAL_ROUTES, lazyWithPreload } from '../services/PreloadService';\r\n\r\n// Lazy Loading mit Preloading-Unterstützung für kritische Routen\r\nconst Dashboard = lazyWithPreload(\r\n  () => import('./neuroflow/NeuroFlowDashboard'),\r\n  '/dashboard'\r\n);\r\n\r\nconst LoginForm = lazy(() => import('./auth/LoginForm'));\r\n\r\nconst StreckengeschaeftPage = lazyWithPreload(\r\n  () => import('../pages/StreckengeschaeftPage').then(module => ({ default: module.StreckengeschaeftPage })),\r\n  '/streckengeschaeft'\r\n);\r\n\r\nconst POSPage = lazyWithPreload(\r\n  () => import('../pages/POS/POSPage'),\r\n  '/pos'\r\n);\r\n\r\nconst DailyReportPage = lazyWithPreload(\r\n  () => import('../pages/POS/DailyReportPage'),\r\n  '/daily-report'\r\n);\r\n\r\nconst EInvoicingPage = lazyWithPreload(\r\n  () => import('./e-invoicing/EInvoicingPage'),\r\n  '/e-invoicing'\r\n);\r\n\r\nconst AIBarcodeDashboard = lazyWithPreload(\r\n  () => import('./ai/AIBarcodeDashboard'),\r\n  '/ai-barcode'\r\n);\r\n\r\nconst AIInventoryDashboard = lazyWithPreload(\r\n  () => import('./ai/AIInventoryDashboard'),\r\n  '/ai-inventory'\r\n);\r\n\r\nconst AIVoucherDashboard = lazyWithPreload(\r\n  () => import('./ai/AIVoucherDashboard'),\r\n  '/ai-voucher'\r\n);\r\n\r\nconst AIDashboard = lazyWithPreload(\r\n  () => import('../pages/AIDashboard').then(module => ({ default: module.AIDashboard })),\r\n  '/ai-dashboard'\r\n);\r\n\r\nconst DokumentePage = lazyWithPreload(\r\n  () => import('../pages/DokumentePage'),\r\n  '/dokumente'\r\n);\r\n\r\n// Loading Component für Routen mit Preload-Status\r\nconst RouteLoader: React.FC<{ routeName: string; isPreloaded?: boolean }> = ({ \r\n  routeName, \r\n  isPreloaded = false \r\n}) => (\r\n  <Box\r\n    sx={{\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      minHeight: '100vh',\r\n      flexDirection: 'column',\r\n      gap: 2\r\n    }}\r\n  >\r\n    <CircularProgress size={60} />\r\n    <Box sx={{ textAlign: 'center' }}>\r\n      <Typography variant=\"h6\" sx={{ mb: 1 }}>\r\n        {routeName} {UI_LABELS.MESSAGES.LOADING}\r\n      </Typography>\r\n      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\r\n        {UI_LABELS.MESSAGES.PLEASE_WAIT}\r\n      </Typography>\r\n      {isPreloaded && (\r\n        <Typography variant=\"caption\" color=\"success.main\">\r\n          ✓ {UI_LABELS.MESSAGES.ROUTE_PREPARED}\r\n        </Typography>\r\n      )}\r\n    </Box>\r\n  </Box>\r\n);\r\n\r\n// Protected Route Component\r\ninterface ProtectedRouteProps {\r\n  children: React.ReactNode;\r\n  isAuthenticated: boolean;\r\n}\r\n\r\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children, isAuthenticated }) => {\r\n  if (!isAuthenticated) {\r\n    return <Navigate to=\"/login\" replace />;\r\n  }\r\n  return <>{children}</>;\r\n};\r\n\r\n// Route Component mit Preloading\r\ninterface PreloadRouteProps {\r\n  route: string;\r\n  component: React.LazyExoticComponent<React.ComponentType<any>>;\r\n  isAuthenticated: boolean;\r\n  routeName: string;\r\n}\r\n\r\nconst PreloadRoute: React.FC<PreloadRouteProps> = ({ \r\n  route, \r\n  component: Component, \r\n  isAuthenticated, \r\n  routeName \r\n}) => {\r\n  const preloadStatus = preloadService.getPreloadStatus();\r\n  const isPreloaded = preloadStatus[route] || false;\r\n\r\n  return (\r\n    <ProtectedRoute isAuthenticated={isAuthenticated}>\r\n      <Suspense fallback={<RouteLoader routeName={routeName} isPreloaded={isPreloaded} />}>\r\n        <Component />\r\n      </Suspense>\r\n    </ProtectedRoute>\r\n  );\r\n};\r\n\r\n// Navigation Observer für Preloading\r\nconst NavigationObserver: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    // Preload basierend auf aktueller Route\r\n    preloadService.preloadBasedOnCurrentRoute(location.pathname);\r\n    \r\n    // Abhängigkeiten der aktuellen Route preloaden\r\n    preloadService.preloadDependencies(location.pathname);\r\n  }, [location.pathname]);\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\n// Main Router Component mit Preloading\r\ninterface AppRouterProps {\r\n  isAuthenticated: boolean;\r\n}\r\n\r\nexport const PreloadRouter: React.FC<AppRouterProps> = ({ isAuthenticated }) => {\r\n  // Kritische Routen beim Start preloaden\r\n  useEffect(() => {\r\n    preloadService.preloadCriticalRoutes();\r\n  }, []);\r\n\r\n  // Route-Konfiguration mit Preloading\r\n  const routes = useMemo(() => [\r\n    {\r\n      path: '/login',\r\n      component: LoginForm,\r\n      routeName: UI_LABELS.NAVIGATION.LOGIN,\r\n      protected: false\r\n    },\r\n    {\r\n      path: '/',\r\n      component: Dashboard.Component,\r\n      routeName: UI_LABELS.NAVIGATION.DASHBOARD,\r\n      protected: true,\r\n      route: '/dashboard'\r\n    },\r\n    {\r\n      path: '/dashboard',\r\n      component: Dashboard.Component,\r\n      routeName: UI_LABELS.NAVIGATION.DASHBOARD,\r\n      protected: true,\r\n      route: '/dashboard'\r\n    },\r\n    {\r\n      path: '/streckengeschaeft',\r\n      component: StreckengeschaeftPage.Component,\r\n      routeName: UI_LABELS.NAVIGATION.STRECKENGESCHAEFT,\r\n      protected: true,\r\n      route: '/streckengeschaeft'\r\n    },\r\n    {\r\n      path: '/pos',\r\n      component: POSPage.Component,\r\n      routeName: UI_LABELS.NAVIGATION.POS,\r\n      protected: true,\r\n      route: '/pos'\r\n    },\r\n    {\r\n      path: '/daily-report',\r\n      component: DailyReportPage.Component,\r\n      routeName: UI_LABELS.NAVIGATION.DAILY_REPORT,\r\n      protected: true,\r\n      route: '/daily-report'\r\n    },\r\n    {\r\n      path: '/e-invoicing',\r\n      component: EInvoicingPage.Component,\r\n      routeName: UI_LABELS.NAVIGATION.E_INVOICING,\r\n      protected: true,\r\n      route: '/e-invoicing'\r\n    },\r\n    {\r\n      path: '/ai-barcode',\r\n      component: AIBarcodeDashboard.Component,\r\n      routeName: UI_LABELS.NAVIGATION.AI_BARCODE_DASHBOARD,\r\n      protected: true,\r\n      route: '/ai-barcode'\r\n    },\r\n    {\r\n      path: '/ai-inventory',\r\n      component: AIInventoryDashboard.Component,\r\n      routeName: UI_LABELS.NAVIGATION.AI_INVENTORY_DASHBOARD,\r\n      protected: true,\r\n      route: '/ai-inventory'\r\n    },\r\n    {\r\n      path: '/ai-voucher',\r\n      component: AIVoucherDashboard.Component,\r\n      routeName: UI_LABELS.NAVIGATION.AI_VOUCHER_DASHBOARD,\r\n      protected: true,\r\n      route: '/ai-voucher'\r\n    },\r\n    {\r\n      path: '/ai-dashboard',\r\n      component: AIDashboard.Component,\r\n      routeName: UI_LABELS.NAVIGATION.AI_DASHBOARD,\r\n      protected: true,\r\n      route: '/ai-dashboard'\r\n    },\r\n    {\r\n      path: '/dokumente',\r\n      component: DokumentePage.Component,\r\n      routeName: UI_LABELS.NAVIGATION.DOCUMENTS,\r\n      protected: true,\r\n      route: '/dokumente'\r\n    }\r\n  ], []);\r\n\r\n  return (\r\n    <Router>\r\n      <NavigationObserver>\r\n        <Routes>\r\n          {routes.map(({ path, component: Component, routeName, protected: isProtected, route }) => (\r\n            <Route\r\n              key={path}\r\n              path={path}\r\n              element={\r\n                isProtected ? (\r\n                  <PreloadRoute\r\n                    route={route || path}\r\n                    component={Component}\r\n                    isAuthenticated={isAuthenticated}\r\n                    routeName={routeName}\r\n                  />\r\n                ) : (\r\n                  <Suspense fallback={<RouteLoader routeName={routeName} />}>\r\n                    <Component />\r\n                  </Suspense>\r\n                )\r\n              }\r\n            />\r\n          ))}\r\n\r\n          {/* Fallback Route */}\r\n          <Route\r\n            path=\"*\"\r\n            element={\r\n              <ProtectedRoute isAuthenticated={isAuthenticated}>\r\n                <Navigate to=\"/dashboard\" replace />\r\n              </ProtectedRoute>\r\n            }\r\n          />\r\n        </Routes>\r\n      </NavigationObserver>\r\n    </Router>\r\n  );\r\n};\r\n\r\n// Debug-Komponente für Preload-Status (nur in Entwicklung)\r\nexport const PreloadStatusDebug: React.FC = () => {\r\n  const [preloadStatus, setPreloadStatus] = React.useState<Record<string, boolean>>({});\r\n\r\n  useEffect(() => {\r\n    const updateStatus = () => {\r\n      setPreloadStatus(preloadService.getPreloadStatus());\r\n    };\r\n\r\n    updateStatus();\r\n    const interval = setInterval(updateStatus, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  if (process.env.NODE_ENV !== 'development') return null;\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        position: 'fixed',\r\n        bottom: 16,\r\n        right: 16,\r\n        bgcolor: 'rgba(0,0,0,0.8)',\r\n        color: 'white',\r\n        p: 2,\r\n        borderRadius: 1,\r\n        fontSize: '0.75rem',\r\n        zIndex: 9999\r\n      }}\r\n    >\r\n      <Typography variant=\"caption\" sx={{ display: 'block', mb: 1 }}>\r\n        🔄 {UI_LABELS.MESSAGES.PRELOAD_STATUS}:\r\n      </Typography>\r\n      {Object.entries(preloadStatus).map(([route, isLoaded]) => (\r\n        <div key={route} style={{ marginBottom: '2px' }}>\r\n          {isLoaded ? '✅' : '⏳'} {route}\r\n        </div>\r\n      ))}\r\n    </Box>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\Router.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\SentryErrorBoundary.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Alert' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Typography' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[998,1001],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[998,1001],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1037,1040],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1037,1040],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Component } from 'react';\r\nimport type { ErrorInfo, ReactNode } from 'react';\r\nimport { Alert, Button, Box, Typography } from '@mui/material';\r\n// ✅ NEU: Import der standardisierten UI-Komponenten\r\nimport { StandardButton } from './forms/FormStandardization';\r\nimport { StandardMessage } from './ui/UIStandardization';\r\nimport { UI_LABELS } from './ui/UIStandardization';\r\n\r\ninterface Props {\r\n  children: ReactNode;\r\n}\r\n\r\ninterface State {\r\n  hasError: boolean;\r\n  error?: Error;\r\n}\r\n\r\nclass SentryErrorBoundary extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error: Error): State {\r\n    return { hasError: true, error };\r\n  }\r\n\r\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n    console.error('Error Boundary caught an error:', error, errorInfo);\r\n    \r\n    // Track error with Last9 if available\r\n    if (typeof window !== 'undefined' && (window as any).last9Metrics) {\r\n      (window as any).last9Metrics.trackError(error, {\r\n        component: 'ErrorBoundary',\r\n        errorInfo: JSON.stringify(errorInfo)\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return (\r\n        <Box sx={{ p: 4, textAlign: 'center' }}>\r\n          <Box sx={{ mb: 4 }}>\r\n            <StandardMessage\r\n              type=\"error\"\r\n              title={UI_LABELS.ERRORS.TITLE}\r\n              message={UI_LABELS.ERRORS.DESCRIPTION}\r\n            />\r\n          </Box>\r\n          <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center', flexWrap: 'wrap' }}>\r\n            <StandardButton\r\n              variant=\"contained\"\r\n              onClick={() => window.location.reload()}\r\n              sx={{ mr: 2 }}\r\n            >\r\n              {UI_LABELS.ACTIONS.RELOAD_PAGE}\r\n            </StandardButton>\r\n            <StandardButton\r\n              variant=\"outlined\"\r\n              onClick={() => this.setState({ hasError: false })}\r\n            >\r\n              {UI_LABELS.ACTIONS.RETRY}\r\n            </StandardButton>\r\n          </Box>\r\n        </Box>\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default SentryErrorBoundary; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\Sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\StatusCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\Table.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UI_LABELS' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[457,460],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[457,460],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3563,3566],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3563,3566],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3619,3622],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3619,3622],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport {\r\n  Table as MuiTable,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  Skeleton,\r\n  IconButton\r\n} from '@mui/material';\r\nimport { Sort, Inbox } from '@mui/icons-material';\r\n// ✅ NEU: Import der standardisierten UI-Komponenten\r\nimport { UI_LABELS } from './ui/UIStandardization';\r\n\r\ninterface Column<T> {\r\n  key: string;\r\n  header: string;\r\n  render?: (value: any, row: T) => React.ReactNode;\r\n  sortable?: boolean;\r\n  width?: string;\r\n}\r\n\r\ninterface TableProps<T> {\r\n  data: T[];\r\n  columns: Column<T>[];\r\n  onRowClick?: (row: T) => void;\r\n  loading?: boolean;\r\n  emptyMessage?: string;\r\n  className?: string;\r\n}\r\n\r\nexport function Table<T>({\r\n  data,\r\n  columns,\r\n  onRowClick,\r\n  loading = false,\r\n  emptyMessage = 'Keine Daten verfügbar',\r\n  className,\r\n}: TableProps<T>) {\r\n  if (loading) {\r\n    return (\r\n      <Paper sx={{ p: 2 }}>\r\n        <Box>\r\n          <Skeleton variant=\"rectangular\" height={32} sx={{ mb: 2 }} />\r\n          {[...Array(5)].map((_, i) => (\r\n            <Skeleton key={i} variant=\"rectangular\" height={48} sx={{ mb: 1 }} />\r\n          ))}\r\n        </Box>\r\n      </Paper>\r\n    );\r\n  }\r\n\r\n  if (data.length === 0) {\r\n    return (\r\n      <Paper sx={{ p: 6, textAlign: 'center' }}>\r\n        <Inbox sx={{ fontSize: 48, color: 'grey.400', mb: 2 }} />\r\n        <Typography variant=\"body1\" color=\"text.secondary\">\r\n          {emptyMessage}\r\n        </Typography>\r\n      </Paper>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Paper sx={{ overflow: 'hidden' }} className={className}>\r\n      <TableContainer>\r\n        <MuiTable>\r\n          <TableHead>\r\n            <TableRow>\r\n              {columns.map((column) => (\r\n                <TableCell\r\n                  key={column.key}\r\n                  sx={{\r\n                    px: 3,\r\n                    py: 1.5,\r\n                    fontSize: '0.75rem',\r\n                    fontWeight: 600,\r\n                    textTransform: 'uppercase',\r\n                    letterSpacing: '0.5px',\r\n                    color: 'text.secondary',\r\n                    width: column.width\r\n                  }}\r\n                >\r\n                  <Box display=\"flex\" alignItems=\"center\" gap={0.5}>\r\n                    <Typography variant=\"caption\" fontWeight=\"medium\">\r\n                      {column.header}\r\n                    </Typography>\r\n                    {column.sortable && (\r\n                      <IconButton size=\"small\" sx={{ p: 0 }}>\r\n                        <Sort fontSize=\"small\" />\r\n                      </IconButton>\r\n                    )}\r\n                  </Box>\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {data.map((row, rowIndex) => (\r\n              <TableRow\r\n                key={rowIndex}\r\n                sx={{\r\n                  '&:hover': { backgroundColor: 'action.hover' },\r\n                  cursor: onRowClick ? 'pointer' : 'default',\r\n                  transition: 'background-color 0.2s'\r\n                }}\r\n                onClick={() => onRowClick?.(row)}\r\n              >\r\n                {columns.map((column) => (\r\n                  <TableCell\r\n                    key={column.key}\r\n                    sx={{\r\n                      px: 3,\r\n                      py: 2,\r\n                      fontSize: '0.875rem',\r\n                      color: 'text.primary'\r\n                    }}\r\n                  >\r\n                    {column.render\r\n                      ? column.render((row as any)[column.key], row)\r\n                      : (row as any)[column.key]}\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </MuiTable>\r\n      </TableContainer>\r\n    </Paper>\r\n  );\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\TrustAwareLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\TrustIndicator.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Chip' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SecurityIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'confidence' is defined but never used. Allowed unused args must match /^_/u.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, Typography, Box, Chip } from '@mui/material';\r\nimport { \r\n  Security as SecurityIcon,\r\n  CheckCircle as CheckCircleIcon,\r\n  Warning as WarningIcon,\r\n  Error as ErrorIcon,\r\n  Info as InfoIcon\r\n} from '@mui/icons-material';\r\n// ✅ NEU: Import der standardisierten UI-Komponenten\r\nimport { StatusChip } from './ui/UIStandardization';\r\nimport { UI_LABELS } from './ui/UIStandardization';\r\n\r\nexport interface TrustIndicatorProps {\r\n  title?: string;\r\n  description?: string;\r\n  level: 'high' | 'medium' | 'low' | 'critical' | 'fact' | 'assumption' | 'uncertain';\r\n  value?: string | number;\r\n  unit?: string;\r\n  trend?: 'up' | 'down' | 'stable';\r\n  lastUpdated?: string;\r\n  details?: string[];\r\n  className?: string;\r\n  confidence?: number;\r\n}\r\n\r\nexport type TrustLevel = 'high' | 'medium' | 'low' | 'critical' | 'fact' | 'assumption' | 'uncertain';\r\n\r\nconst TrustIndicator: React.FC<TrustIndicatorProps> = ({\r\n  title,\r\n  description,\r\n  level,\r\n  value,\r\n  unit,\r\n  trend,\r\n  lastUpdated,\r\n  details,\r\n  className,\r\n  confidence\r\n}) => {\r\n  // ✅ REFAKTORIERT: Verwendung von StatusChip für Level-Anzeige\r\n  const getLevelStatus = (level: string): keyof typeof UI_LABELS.STATUS => {\r\n    switch (level) {\r\n      case 'high':\r\n      case 'fact':\r\n        return 'ACTIVE';\r\n      case 'medium':\r\n      case 'assumption':\r\n        return 'PENDING';\r\n      case 'low':\r\n      case 'uncertain':\r\n        return 'SUSPENDED';\r\n      case 'critical':\r\n        return 'ERROR';\r\n      default:\r\n        return 'UNKNOWN';\r\n    }\r\n  };\r\n\r\n  const getLevelIcon = (level: string) => {\r\n    switch (level) {\r\n      case 'high':\r\n      case 'fact':\r\n        return <CheckCircleIcon />;\r\n      case 'medium':\r\n      case 'assumption':\r\n        return <WarningIcon />;\r\n      case 'low':\r\n      case 'uncertain':\r\n      case 'critical':\r\n        return <ErrorIcon />;\r\n      default:\r\n        return <InfoIcon />;\r\n    }\r\n  };\r\n\r\n  const getTrendIcon = (trend?: string) => {\r\n    if (!trend) return null;\r\n    \r\n    switch (trend) {\r\n      case 'up':\r\n        return <span style={{ color: '#4caf50' }}>↗</span>;\r\n      case 'down':\r\n        return <span style={{ color: '#f44336' }}>↘</span>;\r\n      case 'stable':\r\n        return <span style={{ color: '#ff9800' }}>→</span>;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const levelStatus = getLevelStatus(level);\r\n  const levelIcon = getLevelIcon(level);\r\n\r\n  return (\r\n    <Card \r\n      className={`trust-indicator ${className || ''}`}\r\n      sx={{\r\n        p: 2,\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        border: 2,\r\n        borderColor: `${levelStatus}.main`,\r\n        backgroundColor: `${levelStatus}.50`,\r\n        transition: 'all 0.3s ease',\r\n        '&:hover': {\r\n          transform: 'translateY(-2px)',\r\n          boxShadow: 3\r\n        }\r\n      }}\r\n    >\r\n      <Box display=\"flex\" alignItems=\"center\" mb={1}>\r\n        <Box sx={{ color: `${levelStatus}.main`, mr: 1 }}>\r\n          {levelIcon}\r\n        </Box>\r\n        {title && (\r\n          <Typography \r\n            variant=\"h6\" \r\n            component=\"h3\"\r\n            sx={{ \r\n              color: `${levelStatus}.main`,\r\n              fontWeight: 600,\r\n              flex: 1\r\n            }}\r\n          >\r\n            {title}\r\n          </Typography>\r\n        )}\r\n        <StatusChip \r\n          status={levelStatus}\r\n          size=\"small\"\r\n        />\r\n      </Box>\r\n\r\n      {description && (\r\n        <Typography \r\n          variant=\"body2\" \r\n          sx={{ \r\n            color: 'text.secondary',\r\n            mb: 2,\r\n            flex: 1\r\n          }}\r\n        >\r\n          {description}\r\n        </Typography>\r\n      )}\r\n\r\n      {value !== undefined && (\r\n        <Box display=\"flex\" alignItems=\"center\" mb={1}>\r\n          <Typography \r\n            variant=\"h4\" \r\n            component=\"span\"\r\n            sx={{ \r\n              color: `${levelStatus}.main`,\r\n              fontWeight: 700,\r\n              mr: 0.5\r\n            }}\r\n          >\r\n            {value}\r\n          </Typography>\r\n          {unit && (\r\n            <Typography \r\n              variant=\"body2\" \r\n              sx={{ color: 'text.secondary' }}\r\n            >\r\n              {unit}\r\n            </Typography>\r\n          )}\r\n          {trend && (\r\n            <Box ml={1}>\r\n              {getTrendIcon(trend)}\r\n            </Box>\r\n          )}\r\n        </Box>\r\n      )}\r\n\r\n      {details && details.length > 0 && (\r\n        <Box mt={1}>\r\n          {details.map((detail, index) => (\r\n            <Typography \r\n              key={index}\r\n              variant=\"caption\" \r\n              sx={{ \r\n                display: 'block',\r\n                color: 'text.secondary',\r\n                fontSize: '0.75rem'\r\n              }}\r\n            >\r\n              • {detail}\r\n            </Typography>\r\n          ))}\r\n        </Box>\r\n      )}\r\n\r\n      {lastUpdated && (\r\n        <Typography \r\n          variant=\"caption\" \r\n          sx={{ \r\n            color: 'text.disabled',\r\n            fontSize: '0.7rem',\r\n            mt: 1,\r\n            display: 'block'\r\n          }}\r\n        >\r\n          {UI_LABELS.MESSAGES.LAST_UPDATE}: {lastUpdated}\r\n        </Typography>\r\n      )}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default TrustIndicator;\r\nexport { TrustIndicator }; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\__tests__\\Button.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\__tests__\\DataCard.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fireEvent' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { render, screen, fireEvent } from '@testing-library/react';\r\nimport { DataCard } from '../DataCard';\r\n\r\ndescribe('DataCard Component', () => {\r\n  const mockData = {\r\n    title: 'Test Karte',\r\n    value: '100',\r\n    trend: 'up' as const,\r\n    change: '+5%',\r\n    icon: 'fas fa-chart-line',\r\n    trustLevel: 'high' as const,\r\n    confidence: 0.95,\r\n  };\r\n\r\n  it('rendert DataCard mit allen Props korrekt', () => {\r\n    render(<DataCard {...mockData} />);\r\n    \r\n    expect(screen.getByText('Test Karte')).toBeInTheDocument();\r\n    expect(screen.getByText('100')).toBeInTheDocument();\r\n    expect(screen.getByText('+5%')).toBeInTheDocument();\r\n  });\r\n\r\n  it('wendet korrekte CSS-Klassen für positive Änderungen an', () => {\r\n    render(<DataCard {...mockData} trend=\"up\" />);\r\n    const changeElement = screen.getByText('+5%');\r\n    expect(changeElement.parentElement).toHaveClass('text-green-600');\r\n  });\r\n\r\n  it('wendet korrekte CSS-Klassen für negative Änderungen an', () => {\r\n    render(<DataCard {...mockData} trend=\"down\" change=\"-3%\" />);\r\n    const changeElement = screen.getByText('-3%');\r\n    expect(changeElement.parentElement).toHaveClass('text-red-600');\r\n  });\r\n\r\n  it('wendet korrekte CSS-Klassen für neutrale Änderungen an', () => {\r\n    render(<DataCard {...mockData} trend=\"neutral\" change=\"0%\" />);\r\n    const changeElement = screen.getByText('0%');\r\n    expect(changeElement.parentElement).toHaveClass('text-gray-600');\r\n  });\r\n\r\n  it('rendert DataCard korrekt', () => {\r\n    render(<DataCard {...mockData} />);\r\n    expect(screen.getByText('Test Karte')).toBeInTheDocument();\r\n  });\r\n\r\n  it('rendert mit verschiedenen Trends korrekt', () => {\r\n    const { rerender } = render(<DataCard {...mockData} trend=\"up\" />);\r\n    expect(screen.getByText('Test Karte')).toBeInTheDocument();\r\n\r\n    rerender(<DataCard {...mockData} trend=\"down\" />);\r\n    expect(screen.getByText('Test Karte')).toBeInTheDocument();\r\n  });\r\n\r\n  it('rendert mit Icon korrekt', () => {\r\n    render(<DataCard {...mockData} />);\r\n    expect(screen.getByText('Test Karte')).toBeInTheDocument();\r\n    // Icon-Test würde hier implementiert werden\r\n  });\r\n}); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\__tests__\\DeliveryNoteForm.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\__tests__\\Input.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\__tests__\\Layout.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\__tests__\\Modal.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\__tests__\\SimpleTest.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\admin\\FormRegistryTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TextField' is defined but never used. Allowed unused vars must match /^_/u.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Select' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MenuItem' is defined but never used. Allowed unused vars must match /^_/u.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormControl' is defined but never used. Allowed unused vars must match /^_/u.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InputLabel' is defined but never used. Allowed unused vars must match /^_/u.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Alert' is defined but never used. Allowed unused vars must match /^_/u.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormControlLabel' is defined but never used. Allowed unused vars must match /^_/u.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ListItemSecondaryAction' is defined but never used. Allowed unused vars must match /^_/u.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Divider' is defined but never used. Allowed unused vars must match /^_/u.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DeleteIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":55,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormVersion' is defined but never used. Allowed unused vars must match /^_/u.","line":74,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormChange' is defined but never used. Allowed unused vars must match /^_/u.","line":81,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onPermissionsEdit' is defined but never used. Allowed unused args must match /^_/u.","line":121,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":121,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'theme' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":124,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":124,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'changeRequestsDialog' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":129,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":129,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3155,3158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3155,3158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":131,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3213,3216],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3213,3216],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleChangeRequestsOpen' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":210,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":210,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":338,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":338,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10257,10260],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10257,10260],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":521,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":521,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18000,18003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18000,18003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSelectedFormId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":671,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":671,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":687,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":687,"endColumn":42}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * VALEO NeuroERP 2.0 - Formular-Registrierungs-Tabelle\r\n * Horizon Beta optimiert mit Versionsnummerierung und Rollenverwaltung\r\n * Serena Quality: Complete form registry table with role-based permissions\r\n */\r\n\r\nimport React, { useState, useEffect, useMemo } from 'react';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  Chip,\r\n  IconButton,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  Alert,\r\n  Tooltip,\r\n  Badge,\r\n  Switch,\r\n  FormControlLabel,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  Divider,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Tabs,\r\n  Tab,\r\n} from '@mui/material';\r\nimport {\r\n  Edit as EditIcon,\r\n  History as HistoryIcon,\r\n  Security as SecurityIcon,\r\n  Visibility as ViewIcon,\r\n  Add as AddIcon,\r\n  Delete as DeleteIcon,\r\n  CheckCircle as ApprovedIcon,\r\n  Cancel as RejectedIcon,\r\n  Pending as PendingIcon,\r\n  ExpandMore as ExpandMoreIcon,\r\n  Settings as SettingsIcon,\r\n  Person as PersonIcon,\r\n  Business as BusinessIcon,\r\n  Inventory as InventoryIcon,\r\n  AttachMoney as FinanceIcon,\r\n  LocalShipping as SupplierIcon,\r\n  ShoppingCart as OrderIcon,\r\n  Assessment as ReportingIcon,\r\n  Settings as SettingsIcon2,\r\n} from '@mui/icons-material';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { formRegistryService } from '../../services/FormRegistryService';\r\nimport {\r\n  FormID,\r\n  FormVersion,\r\n  FormStatus,\r\n  FormPermission,\r\n  RolePermissions,\r\n  FormConfig,\r\n  FormVersionHistory,\r\n  FormChangeRequest,\r\n  FormChange,\r\n  FORM_MODULES,\r\n  FORM_STATUSES,\r\n  FORM_PERMISSIONS,\r\n} from '../../types/forms';\r\n\r\ninterface FormRegistryTableProps {\r\n  currentUserRole: string;\r\n  onFormEdit?: (formId: FormID) => void;\r\n  onVersionHistory?: (formId: FormID) => void;\r\n  onPermissionsEdit?: (formId: FormID) => void;\r\n  onChangeRequest?: (requestId: string) => void;\r\n}\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`form-registry-tabpanel-${index}`}\r\n      aria-labelledby={`form-registry-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport const FormRegistryTable: React.FC<FormRegistryTableProps> = ({\r\n  currentUserRole,\r\n  onFormEdit,\r\n  onVersionHistory,\r\n  onPermissionsEdit,\r\n  onChangeRequest,\r\n}) => {\r\n  const theme = useTheme();\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [selectedForm, setSelectedForm] = useState<FormConfig | null>(null);\r\n  const [permissionsDialog, setPermissionsDialog] = useState(false);\r\n  const [versionHistoryDialog, setVersionHistoryDialog] = useState(false);\r\n  const [changeRequestsDialog, setChangeRequestsDialog] = useState(false);\r\n  const [statistics, setStatistics] = useState<any>(null);\r\n  const [formTable, setFormTable] = useState<any[]>([]);\r\n  const [changeRequests, setChangeRequests] = useState<FormChangeRequest[]>([]);\r\n\r\n  // Daten laden\r\n  useEffect(() => {\r\n    loadData();\r\n  }, []);\r\n\r\n  const loadData = () => {\r\n    const stats = formRegistryService.getFormStatistics();\r\n    const forms = formRegistryService.getFormTable();\r\n    const requests = formRegistryService.getAllChangeRequests();\r\n    \r\n    setStatistics(stats);\r\n    setFormTable(forms);\r\n    setChangeRequests(requests);\r\n  };\r\n\r\n  // Module-Icons Mapping\r\n  const getModuleIcon = (module: string) => {\r\n    switch (module) {\r\n      case FORM_MODULES.PERSONAL:\r\n        return <PersonIcon />;\r\n      case FORM_MODULES.WAREHOUSE:\r\n        return <InventoryIcon />;\r\n      case FORM_MODULES.CRM:\r\n        return <BusinessIcon />;\r\n      case FORM_MODULES.FINANCE:\r\n        return <FinanceIcon />;\r\n      case FORM_MODULES.SUPPLIER:\r\n        return <SupplierIcon />;\r\n      case FORM_MODULES.ORDER:\r\n        return <OrderIcon />;\r\n      case FORM_MODULES.REPORTING:\r\n        return <ReportingIcon />;\r\n      case FORM_MODULES.SETTINGS:\r\n        return <SettingsIcon2 />;\r\n      default:\r\n        return <SettingsIcon />;\r\n    }\r\n  };\r\n\r\n  // Status-Farben\r\n  const getStatusColor = (status: FormStatus) => {\r\n    switch (status) {\r\n      case FORM_STATUSES.ACTIVE:\r\n        return 'success';\r\n      case FORM_STATUSES.DRAFT:\r\n        return 'warning';\r\n      case FORM_STATUSES.DEPRECATED:\r\n        return 'error';\r\n      case FORM_STATUSES.ARCHIVED:\r\n        return 'default';\r\n      default:\r\n        return 'default';\r\n    }\r\n  };\r\n\r\n  // Berechtigungen prüfen\r\n  const hasPermission = (formId: FormID, permission: FormPermission): boolean => {\r\n    return formRegistryService.hasPermission(formId, currentUserRole, permission);\r\n  };\r\n\r\n  // Tab-Handler\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  // Dialog-Handler\r\n  const handlePermissionsOpen = (form: FormConfig) => {\r\n    setSelectedForm(form);\r\n    setPermissionsDialog(true);\r\n  };\r\n\r\n  const handleVersionHistoryOpen = (formId: FormID) => {\r\n    setVersionHistoryDialog(true);\r\n    onVersionHistory?.(formId);\r\n  };\r\n\r\n  const handleChangeRequestsOpen = () => {\r\n    setChangeRequestsDialog(true);\r\n  };\r\n\r\n  // Berechtigungen aktualisieren\r\n  const handlePermissionsUpdate = (formId: FormID, permissions: RolePermissions) => {\r\n    formRegistryService.updatePermissions(formId, permissions, currentUserRole);\r\n    loadData();\r\n    setPermissionsDialog(false);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ width: '100%' }}>\r\n      {/* Header mit Statistiken */}\r\n      <Card sx={{ mb: 3 }}>\r\n        <CardContent>\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            Formular-Registrierung\r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Box textAlign=\"center\">\r\n                <Typography variant=\"h4\" color=\"primary\">\r\n                  {statistics?.totalForms || 0}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                  Gesamt Formulare\r\n                </Typography>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Box textAlign=\"center\">\r\n                <Typography variant=\"h4\" color=\"success.main\">\r\n                  {statistics?.byStatus?.active || 0}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                  Aktive Formulare\r\n                </Typography>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Box textAlign=\"center\">\r\n                <Typography variant=\"h4\" color=\"warning.main\">\r\n                  {statistics?.pendingRequests || 0}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                  Ausstehende Anfragen\r\n                </Typography>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Box textAlign=\"center\">\r\n                <Typography variant=\"h4\" color=\"info.main\">\r\n                  {statistics?.changeRequests || 0}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                  Änderungsanfragen\r\n                </Typography>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Tabs */}\r\n      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n        <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"Formular-Registrierung Tabs\">\r\n          <Tab label=\"Formulare\" />\r\n          <Tab \r\n            label={\r\n              <Badge badgeContent={statistics?.pendingRequests || 0} color=\"warning\">\r\n                Änderungsanfragen\r\n              </Badge>\r\n            } \r\n          />\r\n          <Tab label=\"Statistiken\" />\r\n        </Tabs>\r\n      </Box>\r\n\r\n      {/* Formulare Tab */}\r\n      <TabPanel value={tabValue} index={0}>\r\n        <TableContainer component={Paper}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Formular</TableCell>\r\n                <TableCell>Modul</TableCell>\r\n                <TableCell>Version</TableCell>\r\n                <TableCell>Status</TableCell>\r\n                <TableCell>Berechtigungen</TableCell>\r\n                <TableCell>Letzte Änderung</TableCell>\r\n                <TableCell>Aktionen</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {formTable.map((form) => (\r\n                <TableRow key={form.id} hover>\r\n                  <TableCell>\r\n                    <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                      {getModuleIcon(form.module)}\r\n                      <Box>\r\n                        <Typography variant=\"subtitle2\">{form.name}</Typography>\r\n                        <Typography variant=\"caption\" color=\"textSecondary\">\r\n                          ID: {form.id}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Box>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Chip \r\n                      label={form.module} \r\n                      size=\"small\" \r\n                      variant=\"outlined\"\r\n                      icon={getModuleIcon(form.module)}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Chip \r\n                      label={form.version} \r\n                      size=\"small\" \r\n                      color=\"primary\" \r\n                      variant=\"outlined\"\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Chip \r\n                      label={form.status} \r\n                      size=\"small\" \r\n                      color={getStatusColor(form.status) as any}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Box display=\"flex\" gap={0.5} flexWrap=\"wrap\">\r\n                      {Object.entries(form.permissions).map(([role, permissions]) => (\r\n                        <Tooltip key={role} title={`${role}: ${Array.isArray(permissions) ? permissions.join(', ') : permissions}`}>\r\n                          <Chip \r\n                            label={role} \r\n                            size=\"small\" \r\n                            variant=\"outlined\"\r\n                            sx={{ fontSize: '0.6rem' }}\r\n                          />\r\n                        </Tooltip>\r\n                      ))}\r\n                    </Box>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Typography variant=\"body2\">\r\n                      {form.lastUpdated.toLocaleDateString('de-DE')}\r\n                    </Typography>\r\n                    <Typography variant=\"caption\" color=\"textSecondary\">\r\n                      {form.lastUpdated.toLocaleTimeString('de-DE')}\r\n                    </Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Box display=\"flex\" gap={0.5}>\r\n                      {hasPermission(form.id, FORM_PERMISSIONS.READ) && (\r\n                        <Tooltip title=\"Anzeigen\">\r\n                          <IconButton size=\"small\" onClick={() => onFormEdit?.(form.id)}>\r\n                            <ViewIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      )}\r\n                      \r\n                      {hasPermission(form.id, FORM_PERMISSIONS.WRITE) && (\r\n                        <Tooltip title=\"Bearbeiten\">\r\n                          <IconButton size=\"small\" onClick={() => onFormEdit?.(form.id)}>\r\n                            <EditIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      )}\r\n                      \r\n                      <Tooltip title=\"Versionshistorie\">\r\n                        <IconButton \r\n                          size=\"small\" \r\n                          onClick={() => handleVersionHistoryOpen(form.id)}\r\n                        >\r\n                          <HistoryIcon />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                      \r\n                      {hasPermission(form.id, FORM_PERMISSIONS.ADMIN) && (\r\n                        <Tooltip title=\"Berechtigungen\">\r\n                          <IconButton \r\n                            size=\"small\" \r\n                            onClick={() => handlePermissionsOpen(form)}\r\n                          >\r\n                            <SecurityIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      )}\r\n                    </Box>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </TabPanel>\r\n\r\n      {/* Änderungsanfragen Tab */}\r\n      <TabPanel value={tabValue} index={1}>\r\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\r\n          <Typography variant=\"h6\">Änderungsanfragen</Typography>\r\n          <Button\r\n            variant=\"contained\"\r\n            startIcon={<AddIcon />}\r\n            onClick={() => setChangeRequestsDialog(true)}\r\n          >\r\n            Neue Anfrage\r\n          </Button>\r\n        </Box>\r\n        \r\n        <TableContainer component={Paper}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>ID</TableCell>\r\n                <TableCell>Formular</TableCell>\r\n                <TableCell>Angefordert von</TableCell>\r\n                <TableCell>Datum</TableCell>\r\n                <TableCell>Status</TableCell>\r\n                <TableCell>Änderungen</TableCell>\r\n                <TableCell>Aktionen</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {changeRequests.map((request) => (\r\n                <TableRow key={request.id} hover>\r\n                  <TableCell>\r\n                    <Typography variant=\"body2\" fontFamily=\"monospace\">\r\n                      {request.id}\r\n                    </Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Typography variant=\"subtitle2\">{request.formId}</Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Typography variant=\"body2\">{request.requestedBy}</Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Typography variant=\"body2\">\r\n                      {request.requestedAt.toLocaleDateString('de-DE')}\r\n                    </Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Chip \r\n                      label={request.status} \r\n                      size=\"small\" \r\n                      color={\r\n                        request.status === 'approved' ? 'success' :\r\n                        request.status === 'rejected' ? 'error' : 'warning'\r\n                      }\r\n                      icon={\r\n                        request.status === 'approved' ? <ApprovedIcon /> :\r\n                        request.status === 'rejected' ? <RejectedIcon /> : <PendingIcon />\r\n                      }\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Typography variant=\"body2\">\r\n                      {request.changes.length} Änderungen\r\n                    </Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <IconButton \r\n                      size=\"small\" \r\n                      onClick={() => onChangeRequest?.(request.id)}\r\n                    >\r\n                      <ViewIcon />\r\n                    </IconButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </TabPanel>\r\n\r\n      {/* Statistiken Tab */}\r\n      <TabPanel value={tabValue} index={2}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={6}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Formulare nach Modul\r\n                </Typography>\r\n                {statistics?.byModule && Object.entries(statistics.byModule).map(([module, count]) => (\r\n                  <Box key={module} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" py={1}>\r\n                    <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                      {getModuleIcon(module)}\r\n                      <Typography variant=\"body2\">{module}</Typography>\r\n                    </Box>\r\n                    <Chip label={count as number} size=\"small\" color=\"primary\" />\r\n                  </Box>\r\n                ))}\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} md={6}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Formulare nach Status\r\n                </Typography>\r\n                {statistics?.byStatus && Object.entries(statistics.byStatus).map(([status, count]) => (\r\n                  <Box key={status} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" py={1}>\r\n                    <Chip \r\n                      label={status} \r\n                      size=\"small\" \r\n                      color={getStatusColor(status as FormStatus) as any}\r\n                    />\r\n                    <Chip label={count as number} size=\"small\" color=\"primary\" />\r\n                  </Box>\r\n                ))}\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </TabPanel>\r\n\r\n      {/* Berechtigungen Dialog */}\r\n      <Dialog \r\n        open={permissionsDialog} \r\n        onClose={() => setPermissionsDialog(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>\r\n          Berechtigungen bearbeiten: {selectedForm?.metadata.name}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {selectedForm && (\r\n            <PermissionsEditor\r\n              formId={selectedForm.id}\r\n              currentPermissions={selectedForm.metadata.permissions}\r\n              onSave={handlePermissionsUpdate}\r\n            />\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setPermissionsDialog(false)}>Abbrechen</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Versionshistorie Dialog */}\r\n      <Dialog \r\n        open={versionHistoryDialog} \r\n        onClose={() => setVersionHistoryDialog(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Versionshistorie</DialogTitle>\r\n        <DialogContent>\r\n          <VersionHistoryView />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setVersionHistoryDialog(false)}>Schließen</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\n// Berechtigungen-Editor Komponente\r\ninterface PermissionsEditorProps {\r\n  formId: FormID;\r\n  currentPermissions: RolePermissions;\r\n  onSave: (formId: FormID, permissions: RolePermissions) => void;\r\n}\r\n\r\nconst PermissionsEditor: React.FC<PermissionsEditorProps> = ({\r\n  formId,\r\n  currentPermissions,\r\n  onSave,\r\n}) => {\r\n  const [permissions, setPermissions] = useState<RolePermissions>(currentPermissions);\r\n\r\n  const roles = [\r\n    'super_admin',\r\n    'admin', \r\n    'manager',\r\n    'accountant',\r\n    'warehouse',\r\n    'sales',\r\n    'viewer'\r\n  ];\r\n\r\n  const permissionTypes = [\r\n    FORM_PERMISSIONS.READ,\r\n    FORM_PERMISSIONS.WRITE,\r\n    FORM_PERMISSIONS.ADMIN,\r\n    FORM_PERMISSIONS.DELETE\r\n  ];\r\n\r\n  const handlePermissionChange = (role: string, permission: FormPermission, checked: boolean) => {\r\n    setPermissions(prev => ({\r\n      ...prev,\r\n      [role]: checked \r\n        ? [...(prev[role as keyof RolePermissions] || []), permission]\r\n        : (prev[role as keyof RolePermissions] || []).filter(p => p !== permission)\r\n    }));\r\n  };\r\n\r\n  const handleSave = () => {\r\n    onSave(formId, permissions);\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\r\n        Berechtigungen für Formular: {formId}\r\n      </Typography>\r\n      \r\n      <TableContainer component={Paper} sx={{ mt: 2 }}>\r\n        <Table size=\"small\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Rolle</TableCell>\r\n              {permissionTypes.map(permission => (\r\n                <TableCell key={permission} align=\"center\">\r\n                  {permission}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {roles.map(role => (\r\n              <TableRow key={role}>\r\n                <TableCell>\r\n                  <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                    {role}\r\n                  </Typography>\r\n                </TableCell>\r\n                {permissionTypes.map(permission => (\r\n                  <TableCell key={permission} align=\"center\">\r\n                    <Switch\r\n                      checked={permissions[role as keyof RolePermissions]?.includes(permission) || false}\r\n                      onChange={(e) => handlePermissionChange(role, permission, e.target.checked)}\r\n                      size=\"small\"\r\n                    />\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      \r\n      <Box display=\"flex\" justifyContent=\"flex-end\" mt={2}>\r\n        <Button variant=\"contained\" onClick={handleSave}>\r\n          Berechtigungen speichern\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\n// Versionshistorie-View Komponente\r\nconst VersionHistoryView: React.FC = () => {\r\n  const [selectedFormId, setSelectedFormId] = useState<FormID | null>(null);\r\n  const [versionHistory, setVersionHistory] = useState<FormVersionHistory[]>([]);\r\n\r\n  useEffect(() => {\r\n    if (selectedFormId) {\r\n      const history = formRegistryService.getVersionHistory(selectedFormId);\r\n      setVersionHistory(history);\r\n    }\r\n  }, [selectedFormId]);\r\n\r\n  return (\r\n    <Box>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Versionshistorie\r\n      </Typography>\r\n      \r\n      {versionHistory.map((version, index) => (\r\n        <Accordion key={version.version}>\r\n          <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n            <Box display=\"flex\" alignItems=\"center\" gap={2} width=\"100%\">\r\n              <Chip label={version.version} size=\"small\" color=\"primary\" />\r\n              <Typography variant=\"body2\">\r\n                {version.timestamp.toLocaleDateString('de-DE')} - {version.author}\r\n              </Typography>\r\n              <Chip \r\n                label={version.status} \r\n                size=\"small\" \r\n                color={\r\n                  version.status === 'approved' ? 'success' :\r\n                  version.status === 'rejected' ? 'error' : 'warning'\r\n                }\r\n              />\r\n            </Box>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n            <List dense>\r\n              {version.changes.map((change, changeIndex) => (\r\n                <ListItem key={changeIndex}>\r\n                  <ListItemText primary={change} />\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n            {version.approvedBy && (\r\n              <Typography variant=\"caption\" color=\"textSecondary\">\r\n                Genehmigt von: {version.approvedBy}\r\n              </Typography>\r\n            )}\r\n          </AccordionDetails>\r\n        </Accordion>\r\n      ))}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default FormRegistryTable; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\ai\\AIBarcodeDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IconButton' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":98,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":108},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":110,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":117},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LinearProgress' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":70,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":84},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ViewIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":67,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":75},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CheckIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WarningIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setOfflineSuggestions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":126,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setOfflineStats' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":127,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":247,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8225,8228],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8225,8228],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport {\r\n  Card, Typography, Button, Dialog, DialogTitle, DialogContent, DialogActions, Alert, Box, Chip, IconButton, Tooltip,\r\n  CircularProgress, FormControl, InputLabel, Select, MenuItem, Grid, LinearProgress, Snackbar\r\n} from '@mui/material';\r\nimport {\r\n  QrCode as BarcodeIcon, TrendingUp as TrendingIcon, Psychology as AIIcon,\r\n  Refresh as RefreshIcon, Settings as SettingsIcon, Visibility as ViewIcon,\r\n  CheckCircle as CheckIcon, Warning as WarningIcon, Info as InfoIcon,\r\n  AutoAwesome as AutoAwesomeIcon, Analytics as AnalyticsIcon,\r\n  WifiOff as OfflineIcon, Sync as SyncIcon\r\n} from '@mui/icons-material';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, ResponsiveContainer, BarChart, Bar } from 'recharts';\r\nimport { SuggestionTable, SuggestionTableColumn } from './shared/SuggestionTable';\r\nimport { ConfidenceIndicator } from './shared/ConfidenceIndicator';\r\nimport { useOffline } from '../../hooks/useOffline';\r\n\r\ninterface BarcodeSuggestion {\r\n  id: string;\r\n  product_name: string;\r\n  suggested_barcode: string;\r\n  confidence_score: number;\r\n  reasoning: string;\r\n  category: string;\r\n  similar_products: string[];\r\n  market_trends: {\r\n    demand_trend: string;\r\n    price_trend: string;\r\n    seasonality: string;\r\n  };\r\n  created_at: string;\r\n}\r\n\r\ninterface AIBarcodeStats {\r\n  total_suggestions: number;\r\n  high_confidence: number;\r\n  medium_confidence: number;\r\n  low_confidence: number;\r\n  categories: { name: string; count: number }[];\r\n  confidence_trend: { date: string; avg_confidence: number }[];\r\n  top_categories: { category: string; count: number }[];\r\n}\r\n\r\ninterface AIBarcodeDashboardProps {\r\n  className?: string;\r\n}\r\n\r\n// Tabellen-Spalten-Konfiguration\r\nconst columns: SuggestionTableColumn<BarcodeSuggestion>[] = [\r\n  { \r\n    key: 'product_name', \r\n    label: 'Produkt', \r\n    width: 200,\r\n    render: row => (\r\n      <Typography variant=\"body2\" className=\"font-medium\">\r\n        {row.product_name}\r\n      </Typography>\r\n    )\r\n  },\r\n  { \r\n    key: 'suggested_barcode', \r\n    label: 'Vorgeschlagener Barcode', \r\n    width: 180,\r\n    render: row => (\r\n      <Box className=\"flex items-center gap-2\">\r\n        <BarcodeIcon className=\"text-gray-500 text-sm\" />\r\n        <Typography variant=\"body2\" className=\"font-mono text-sm\">\r\n          {row.suggested_barcode}\r\n        </Typography>\r\n      </Box>\r\n    )\r\n  },\r\n  { \r\n    key: 'category', \r\n    label: 'Kategorie', \r\n    align: 'center',\r\n    render: row => (\r\n      <Chip \r\n        label={row.category} \r\n        size=\"small\" \r\n        variant=\"outlined\"\r\n        className=\"text-xs\"\r\n      />\r\n    )\r\n  },\r\n  { \r\n    key: 'confidence_score', \r\n    label: 'Konfidenz', \r\n    align: 'center',\r\n    render: row => (\r\n      <ConfidenceIndicator \r\n        confidence={row.confidence_score} \r\n        size=\"small\" \r\n        variant=\"chip\" \r\n      />\r\n    )\r\n  },\r\n  { \r\n    key: 'market_trends', \r\n    label: 'Markttrends', \r\n    align: 'center',\r\n    render: row => (\r\n      <Box className=\"flex items-center gap-1\">\r\n        <TrendingIcon className=\"text-green-600 text-sm\" />\r\n        <Typography variant=\"caption\" className=\"text-gray-600\">\r\n          {row.market_trends.demand_trend}\r\n        </Typography>\r\n      </Box>\r\n    )\r\n  },\r\n  { \r\n    key: 'created_at', \r\n    label: 'Erstellt', \r\n    align: 'center',\r\n    render: row => (\r\n      <Typography variant=\"caption\" className=\"text-gray-500\">\r\n        {new Date(row.created_at).toLocaleDateString('de-DE')}\r\n      </Typography>\r\n    )\r\n  }\r\n];\r\n\r\nconst AIBarcodeDashboard: React.FC<AIBarcodeDashboardProps> = ({ className = '' }) => {\r\n  // Offline-Hooks für Offline-First-Funktionalität\r\n  const { isOnline, pendingRequests } = useOffline();\r\n  const [offlineSuggestions, setOfflineSuggestions] = useState<BarcodeSuggestion[]>([]);\r\n  const [offlineStats, setOfflineStats] = useState<AIBarcodeStats | null>(null);\r\n\r\n  const [suggestions, setSuggestions] = useState<BarcodeSuggestion[]>([]);\r\n  const [stats, setStats] = useState<AIBarcodeStats | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [selectedSuggestion, setSelectedSuggestion] = useState<BarcodeSuggestion | null>(null);\r\n  const [optimizationDialog, setOptimizationDialog] = useState(false);\r\n  const [retrainingDialog, setRetrainingDialog] = useState(false);\r\n  const [retrainingLoading, setRetrainingLoading] = useState(false);\r\n  const [filterCategory, setFilterCategory] = useState<string>('all');\r\n  const [filterConfidence, setFilterConfidence] = useState<string>('all');\r\n  const [snackbar, setSnackbar] = useState<{ open: boolean; message: string; severity: 'success' | 'error' | 'info' }>({\r\n    open: false,\r\n    message: '',\r\n    severity: 'info'\r\n  });\r\n\r\n  // API-Aufrufe mit Offline-First-Funktionalität\r\n  const loadSuggestions = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      // Versuche Online-API\r\n      const response = await fetch('/api/ai/barcode/suggestions');\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n      const data = await response.json();\r\n      if (data.error) {\r\n        throw new Error(data.error);\r\n      }\r\n      \r\n      const suggestionsData = data.data || [];\r\n      setSuggestions(suggestionsData);\r\n      \r\n      // Zeige Offline-Hinweis wenn nötig\r\n      if (!isOnline && offlineSuggestions.length > 0) {\r\n        setSnackbar({\r\n          open: true,\r\n          message: 'Offline-Modus: Anzeige gespeicherter Daten',\r\n          severity: 'info'\r\n        });\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Unbekannter Fehler beim Laden der Vorschläge';\r\n      setError(errorMessage);\r\n      console.error('Fehler beim Laden der Barcode-Vorschläge:', err);\r\n      \r\n      // Fallback zu Offline-Daten wenn verfügbar\r\n      if (offlineSuggestions.length > 0) {\r\n        setSuggestions(offlineSuggestions);\r\n        setSnackbar({\r\n          open: true,\r\n          message: 'Offline-Modus: Anzeige gespeicherter Daten',\r\n          severity: 'info'\r\n        });\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [isOnline, offlineSuggestions]);\r\n\r\n  const loadStats = useCallback(async () => {\r\n    try {\r\n      const response = await fetch('/api/ai/barcode/stats');\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n      const data = await response.json();\r\n      if (data.error) {\r\n        throw new Error(data.error);\r\n      }\r\n      setStats(data.data);\r\n    } catch (err) {\r\n      console.error('Fehler beim Laden der Statistiken:', err);\r\n      // Fallback zu Offline-Statistiken wenn verfügbar\r\n      if (offlineStats) {\r\n        setStats(offlineStats);\r\n      }\r\n    }\r\n  }, [offlineStats]);\r\n\r\n  const retrainModel = useCallback(async () => {\r\n    setRetrainingLoading(true);\r\n    try {\r\n      const response = await fetch('/api/ai/barcode/retrain', { \r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n      const data = await response.json();\r\n      if (data.error) {\r\n        throw new Error(data.error);\r\n      }\r\n      \r\n      setSnackbar({\r\n        open: true,\r\n        message: 'KI-Modell erfolgreich neu trainiert',\r\n        severity: 'success'\r\n      });\r\n      \r\n      await Promise.all([loadSuggestions(), loadStats()]);\r\n      setRetrainingDialog(false);\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Fehler beim Neuladen des Modells';\r\n      setError(errorMessage);\r\n      setSnackbar({\r\n        open: true,\r\n        message: errorMessage,\r\n        severity: 'error'\r\n      });\r\n      console.error('Fehler beim Neuladen des Modells:', err);\r\n    } finally {\r\n      setRetrainingLoading(false);\r\n    }\r\n  }, [loadSuggestions, loadStats]);\r\n\r\n  const optimizeSuggestion = useCallback(async (suggestionId: string, optimizationData: any) => {\r\n    try {\r\n      const response = await fetch(`/api/ai/barcode/optimize/${suggestionId}`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(optimizationData)\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n      const data = await response.json();\r\n      if (data.error) {\r\n        throw new Error(data.error);\r\n      }\r\n      \r\n      setSnackbar({\r\n        open: true,\r\n        message: 'Barcode-Vorschlag erfolgreich optimiert',\r\n        severity: 'success'\r\n      });\r\n      \r\n      await loadSuggestions();\r\n      setOptimizationDialog(false);\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Fehler bei der Optimierung';\r\n      setError(errorMessage);\r\n      setSnackbar({\r\n        open: true,\r\n        message: errorMessage,\r\n        severity: 'error'\r\n      });\r\n      console.error('Optimierungsfehler:', err);\r\n    }\r\n  }, [loadSuggestions]);\r\n\r\n  // Initialisierung\r\n  useEffect(() => {\r\n    loadSuggestions();\r\n    loadStats();\r\n  }, [loadSuggestions, loadStats]);\r\n\r\n  // Gefilterte Vorschläge\r\n  const filteredSuggestions = useMemo(() => {\r\n    return suggestions.filter(suggestion => {\r\n      if (filterCategory !== 'all' && suggestion.category !== filterCategory) return false;\r\n      if (filterConfidence !== 'all') {\r\n        const confidence = suggestion.confidence_score;\r\n        if (filterConfidence === 'high' && confidence < 0.8) return false;\r\n        if (filterConfidence === 'medium' && (confidence < 0.6 || confidence >= 0.8)) return false;\r\n        if (filterConfidence === 'low' && confidence >= 0.6) return false;\r\n      }\r\n      return true;\r\n    });\r\n  }, [suggestions, filterCategory, filterConfidence]);\r\n\r\n  // Verfügbare Kategorien für Filter\r\n  const availableCategories = useMemo(() => {\r\n    const categories = new Set(suggestions.map(s => s.category));\r\n    return Array.from(categories).sort();\r\n  }, [suggestions]);\r\n\r\n  // Loading-State\r\n  if (loading && suggestions.length === 0) {\r\n    return (\r\n      <Box \r\n        display=\"flex\" \r\n        justifyContent=\"center\" \r\n        alignItems=\"center\" \r\n        minHeight=\"400px\"\r\n        className=\"flex-col gap-4\"\r\n      >\r\n        <CircularProgress size={60} />\r\n        <Typography variant=\"h6\" color=\"textSecondary\">\r\n          KI-Barcode-Vorschläge werden geladen...\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`space-y-6 ${className}`} role=\"main\" aria-label=\"KI-Barcode-Vorschläge Dashboard\">\r\n      {/* Header */}\r\n      <Card className=\"p-6 shadow-lg\">\r\n        <Box className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-6\">\r\n          <Box className=\"flex items-center gap-3\">\r\n            <AIIcon className=\"text-blue-600 text-3xl\" aria-hidden=\"true\" />\r\n            <Box>\r\n              <Typography variant=\"h4\" className=\"font-semibold text-gray-800\">\r\n                KI-Barcode-Vorschläge\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                Intelligente Barcode-Generierung und -Optimierung mit künstlicher Intelligenz\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n          <Box className=\"flex gap-2 flex-wrap\">\r\n            <Button\r\n              variant=\"outlined\"\r\n              startIcon={<RefreshIcon />}\r\n              onClick={loadSuggestions}\r\n              disabled={loading}\r\n              aria-label=\"Vorschläge aktualisieren\"\r\n            >\r\n              Aktualisieren\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<AutoAwesomeIcon />}\r\n              onClick={() => setRetrainingDialog(true)}\r\n              disabled={loading || retrainingLoading}\r\n              aria-label=\"KI-Modell neu trainieren\"\r\n            >\r\n              Modell neu laden\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n\r\n        {error && (\r\n          <Alert \r\n            severity=\"error\" \r\n            className=\"mb-6\"\r\n            onClose={() => setError(null)}\r\n            action={\r\n              <Button color=\"inherit\" size=\"small\" onClick={loadSuggestions}>\r\n                Erneut versuchen\r\n              </Button>\r\n            }\r\n          >\r\n            {error}\r\n          </Alert>\r\n        )}\r\n\r\n        {/* Offline-Status-Anzeige */}\r\n        {!isOnline && (\r\n          <Alert \r\n            severity=\"info\" \r\n            className=\"mb-6\"\r\n            icon={<OfflineIcon />}\r\n            action={\r\n              <Box className=\"flex items-center gap-2\">\r\n                {pendingRequests.length > 0 && (\r\n                  <Chip \r\n                    label={`${pendingRequests.length} Sync`} \r\n                    size=\"small\" \r\n                    color=\"warning\" \r\n                    variant=\"outlined\"\r\n                  />\r\n                )}\r\n                <Button \r\n                  color=\"inherit\" \r\n                  size=\"small\" \r\n                  startIcon={<SyncIcon />}\r\n                  onClick={loadSuggestions}\r\n                >\r\n                  Synchronisieren\r\n                </Button>\r\n              </Box>\r\n            }\r\n          >\r\n            <Typography variant=\"body2\">\r\n              <strong>Offline-Modus aktiv:</strong> Anzeige gespeicherter Daten. \r\n              {offlineSuggestions.length > 0 && ` ${offlineSuggestions.length} Vorschläge verfügbar.`}\r\n            </Typography>\r\n          </Alert>\r\n        )}\r\n\r\n        {/* Statistiken */}\r\n        {stats && (\r\n          <Grid container spacing={3} className=\"mb-6\">\r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Card className=\"p-4 text-center bg-blue-50 hover:bg-blue-100 transition-colors\">\r\n                <Typography variant=\"h4\" className=\"text-blue-600 font-bold\">\r\n                  {stats.total_suggestions}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                  Gesamt Vorschläge\r\n                </Typography>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Card className=\"p-4 text-center bg-green-50 hover:bg-green-100 transition-colors\">\r\n                <Typography variant=\"h4\" className=\"text-green-600 font-bold\">\r\n                  {stats.high_confidence}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                  Hohe Konfidenz\r\n                </Typography>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Card className=\"p-4 text-center bg-orange-50 hover:bg-orange-100 transition-colors\">\r\n                <Typography variant=\"h4\" className=\"text-orange-600 font-bold\">\r\n                  {stats.medium_confidence}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                  Mittlere Konfidenz\r\n                </Typography>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <Card className=\"p-4 text-center bg-red-50 hover:bg-red-100 transition-colors\">\r\n                <Typography variant=\"h4\" className=\"text-red-600 font-bold\">\r\n                  {stats.low_confidence}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                  Niedrige Konfidenz\r\n                </Typography>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n\r\n        {/* Charts */}\r\n        {stats && stats.confidence_trend.length > 0 && (\r\n          <Grid container spacing={3} className=\"mb-6\">\r\n            <Grid item xs={12} md={6}>\r\n              <Card className=\"p-4 shadow-md\">\r\n                <Typography variant=\"h6\" className=\"mb-4 flex items-center gap-2\">\r\n                  <AnalyticsIcon className=\"text-blue-600\" />\r\n                  Konfidenz-Trend\r\n                </Typography>\r\n                <ResponsiveContainer width=\"100%\" height={250}>\r\n                  <LineChart data={stats.confidence_trend}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"date\" />\r\n                    <YAxis />\r\n                    <RechartsTooltip \r\n                      formatter={(value: number) => [`${(value * 100).toFixed(1)}%`, 'Konfidenz']}\r\n                      labelFormatter={(label) => `Datum: ${label}`}\r\n                    />\r\n                    <Line \r\n                      type=\"monotone\" \r\n                      dataKey=\"avg_confidence\" \r\n                      stroke=\"#1976d2\" \r\n                      strokeWidth={2}\r\n                      dot={{ fill: '#1976d2', strokeWidth: 2, r: 4 }}\r\n                    />\r\n                  </LineChart>\r\n                </ResponsiveContainer>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <Card className=\"p-4 shadow-md\">\r\n                <Typography variant=\"h6\" className=\"mb-4 flex items-center gap-2\">\r\n                  <TrendingIcon className=\"text-green-600\" />\r\n                  Top Kategorien\r\n                </Typography>\r\n                <ResponsiveContainer width=\"100%\" height={250}>\r\n                  <BarChart data={stats.top_categories}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"category\" />\r\n                    <YAxis />\r\n                    <RechartsTooltip \r\n                      formatter={(value: number) => [value, 'Anzahl']}\r\n                      labelFormatter={(label) => `Kategorie: ${label}`}\r\n                    />\r\n                    <Bar dataKey=\"count\" fill=\"#4caf50\" />\r\n                  </BarChart>\r\n                </ResponsiveContainer>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n\r\n        {/* Filter */}\r\n        <Card className=\"p-4 mb-6 shadow-sm\">\r\n          <Typography variant=\"h6\" className=\"mb-4 flex items-center gap-2\">\r\n            <SettingsIcon className=\"text-gray-600\" />\r\n            Filter & Einstellungen\r\n          </Typography>\r\n          <Box className=\"flex flex-wrap gap-4 items-center\">\r\n            <FormControl size=\"small\" className=\"min-w-48\">\r\n              <InputLabel>Kategorie</InputLabel>\r\n              <Select\r\n                value={filterCategory}\r\n                onChange={(e) => setFilterCategory(e.target.value)}\r\n                label=\"Kategorie\"\r\n                aria-label=\"Nach Kategorie filtern\"\r\n              >\r\n                <MenuItem value=\"all\">Alle Kategorien</MenuItem>\r\n                {availableCategories.map(cat => (\r\n                  <MenuItem key={cat} value={cat}>{cat}</MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl size=\"small\" className=\"min-w-48\">\r\n              <InputLabel>Konfidenz</InputLabel>\r\n              <Select\r\n                value={filterConfidence}\r\n                onChange={(e) => setFilterConfidence(e.target.value)}\r\n                label=\"Konfidenz\"\r\n                aria-label=\"Nach Konfidenz filtern\"\r\n              >\r\n                <MenuItem value=\"all\">Alle</MenuItem>\r\n                <MenuItem value=\"high\">Hoch (≥80%)</MenuItem>\r\n                <MenuItem value=\"medium\">Mittel (60-79%)</MenuItem>\r\n                <MenuItem value=\"low\">Niedrig (&lt;60%)</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <Typography variant=\"body2\" color=\"textSecondary\">\r\n              {filteredSuggestions.length} von {suggestions.length} Vorschlägen\r\n            </Typography>\r\n          </Box>\r\n        </Card>\r\n\r\n        {/* Vorschläge Tabelle */}\r\n        <SuggestionTable\r\n          data={filteredSuggestions}\r\n          columns={columns}\r\n          onView={setSelectedSuggestion}\r\n          onOptimize={(suggestion) => {\r\n            setSelectedSuggestion(suggestion);\r\n            setOptimizationDialog(true);\r\n          }}\r\n          loading={loading}\r\n          emptyText=\"Keine Barcode-Vorschläge gefunden\"\r\n          className=\"shadow-md\"\r\n        />\r\n      </Card>\r\n\r\n      {/* Detail Dialog */}\r\n      <Dialog\r\n        open={!!selectedSuggestion && !optimizationDialog}\r\n        onClose={() => setSelectedSuggestion(null)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n        aria-labelledby=\"barcode-detail-dialog-title\"\r\n      >\r\n        {selectedSuggestion && (\r\n          <>\r\n            <DialogTitle id=\"barcode-detail-dialog-title\">\r\n              <Box className=\"flex items-center gap-2\">\r\n                <BarcodeIcon className=\"text-blue-600\" />\r\n                Barcode-Vorschlag Details\r\n              </Box>\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <Grid container spacing={3} className=\"mt-2\">\r\n                <Grid item xs={12} md={6}>\r\n                  <Typography variant=\"h6\" className=\"mb-3 flex items-center gap-2\">\r\n                    <InfoIcon className=\"text-blue-600\" />\r\n                    Produktinformationen\r\n                  </Typography>\r\n                  <Box className=\"space-y-3\">\r\n                    <Box>\r\n                      <Typography variant=\"subtitle2\" color=\"textSecondary\">Produkt</Typography>\r\n                      <Typography variant=\"body1\" className=\"font-medium\">\r\n                        {selectedSuggestion.product_name}\r\n                      </Typography>\r\n                    </Box>\r\n                    <Box>\r\n                      <Typography variant=\"subtitle2\" color=\"textSecondary\">Kategorie</Typography>\r\n                      <Chip label={selectedSuggestion.category} size=\"small\" />\r\n                    </Box>\r\n                    <Box>\r\n                      <Typography variant=\"subtitle2\" color=\"textSecondary\">Vorgeschlagener Barcode</Typography>\r\n                      <Typography variant=\"body1\" className=\"font-mono bg-gray-100 p-2 rounded\">\r\n                        {selectedSuggestion.suggested_barcode}\r\n                      </Typography>\r\n                    </Box>\r\n                    <Box>\r\n                      <Typography variant=\"subtitle2\" color=\"textSecondary\">Konfidenz</Typography>\r\n                      <ConfidenceIndicator confidence={selectedSuggestion.confidence_score} />\r\n                    </Box>\r\n                  </Box>\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                  <Typography variant=\"h6\" className=\"mb-3 flex items-center gap-2\">\r\n                    <TrendingIcon className=\"text-green-600\" />\r\n                    Markttrends\r\n                  </Typography>\r\n                  <Box className=\"space-y-3\">\r\n                    <Box>\r\n                      <Typography variant=\"subtitle2\" color=\"textSecondary\">Nachfrage</Typography>\r\n                      <Typography variant=\"body1\">{selectedSuggestion.market_trends.demand_trend}</Typography>\r\n                    </Box>\r\n                    <Box>\r\n                      <Typography variant=\"subtitle2\" color=\"textSecondary\">Preis</Typography>\r\n                      <Typography variant=\"body1\">{selectedSuggestion.market_trends.price_trend}</Typography>\r\n                    </Box>\r\n                    <Box>\r\n                      <Typography variant=\"subtitle2\" color=\"textSecondary\">Saisonalität</Typography>\r\n                      <Typography variant=\"body1\">{selectedSuggestion.market_trends.seasonality}</Typography>\r\n                    </Box>\r\n                  </Box>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Typography variant=\"h6\" className=\"mb-3\">Begründung</Typography>\r\n                  <Typography variant=\"body2\" className=\"bg-gray-50 p-4 rounded-lg\">\r\n                    {selectedSuggestion.reasoning}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Typography variant=\"h6\" className=\"mb-3\">Ähnliche Produkte</Typography>\r\n                  <Box className=\"flex flex-wrap gap-2\">\r\n                    {selectedSuggestion.similar_products.map((product, index) => (\r\n                      <Chip \r\n                        key={index} \r\n                        label={product} \r\n                        size=\"small\" \r\n                        variant=\"outlined\"\r\n                        className=\"hover:bg-gray-100\"\r\n                      />\r\n                    ))}\r\n                  </Box>\r\n                </Grid>\r\n              </Grid>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={() => setSelectedSuggestion(null)}>\r\n                Schließen\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                startIcon={<SettingsIcon />}\r\n                onClick={() => {\r\n                  setOptimizationDialog(true);\r\n                }}\r\n              >\r\n                Optimieren\r\n              </Button>\r\n            </DialogActions>\r\n          </>\r\n        )}\r\n      </Dialog>\r\n\r\n      {/* Optimierung Dialog */}\r\n      <Dialog\r\n        open={optimizationDialog}\r\n        onClose={() => setOptimizationDialog(false)}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n        aria-labelledby=\"optimization-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"optimization-dialog-title\">\r\n          Barcode-Vorschlag optimieren\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"body2\" className=\"mb-4 text-gray-600\">\r\n            Optimieren Sie die Parameter für bessere Barcode-Vorschläge basierend auf aktuellen Marktdaten.\r\n          </Typography>\r\n          <Alert severity=\"info\" className=\"mb-4\">\r\n            <Typography variant=\"body2\">\r\n              Die Optimierung berücksichtigt Markttrends, Saisonalität und ähnliche Produkte für präzisere Vorschläge.\r\n            </Typography>\r\n          </Alert>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOptimizationDialog(false)}>\r\n            Abbrechen\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            startIcon={<AutoAwesomeIcon />}\r\n            onClick={() => {\r\n              if (selectedSuggestion) {\r\n                optimizeSuggestion(selectedSuggestion.id, {\r\n                  product_name: selectedSuggestion.product_name,\r\n                  category: selectedSuggestion.category\r\n                });\r\n              }\r\n            }}\r\n          >\r\n            Optimieren\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Retraining Dialog */}\r\n      <Dialog\r\n        open={retrainingDialog}\r\n        onClose={() => !retrainingLoading && setRetrainingDialog(false)}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n        aria-labelledby=\"retraining-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"retraining-dialog-title\">\r\n          <Box className=\"flex items-center gap-2\">\r\n            <AutoAwesomeIcon className=\"text-blue-600\" />\r\n            KI-Modell neu laden\r\n          </Box>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"body2\" className=\"mb-4\">\r\n            Das KI-Modell wird mit den neuesten Daten neu trainiert. Dies kann einige Minuten dauern.\r\n          </Typography>\r\n          <Alert severity=\"info\" className=\"mb-4\">\r\n            <Typography variant=\"body2\">\r\n              Das Neuladen verbessert die Genauigkeit der Barcode-Vorschläge basierend auf aktuellen Marktdaten und Verkaufsmustern.\r\n            </Typography>\r\n          </Alert>\r\n          {retrainingLoading && (\r\n            <Box className=\"flex items-center gap-3 p-3 bg-blue-50 rounded-lg\">\r\n              <CircularProgress size={20} />\r\n              <Typography variant=\"body2\">\r\n                Modell wird neu trainiert... Bitte warten Sie.\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button \r\n            onClick={() => setRetrainingDialog(false)}\r\n            disabled={retrainingLoading}\r\n          >\r\n            Abbrechen\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            startIcon={retrainingLoading ? <CircularProgress size={20} /> : <AutoAwesomeIcon />}\r\n            onClick={retrainModel}\r\n            disabled={retrainingLoading}\r\n          >\r\n            {retrainingLoading ? 'Neuladen läuft...' : 'Neuladen starten'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Snackbar für Benachrichtigungen */}\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n      >\r\n        <Alert \r\n          onClose={() => setSnackbar({ ...snackbar, open: false })} \r\n          severity={snackbar.severity}\r\n          sx={{ width: '100%' }}\r\n        >\r\n          {snackbar.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AIBarcodeDashboard; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\ai\\AIInventoryDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingUpIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":24,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SpeedIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":29,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Alert,\r\n  CircularProgress,\r\n  Box,\r\n  Grid,\r\n  Chip\r\n} from '@mui/material';\r\nimport {\r\n  Inventory as InventoryIcon,\r\n  TrendingUp as TrendingUpIcon,\r\n  Warning as WarningIcon,\r\n  Refresh as RefreshIcon,\r\n  Settings as SettingsIcon,\r\n  Analytics as AnalyticsIcon,\r\n  Speed as SpeedIcon,\r\n  AttachMoney as MoneyIcon\r\n} from '@mui/icons-material';\r\nimport { SuggestionTable, SuggestionTableColumn } from './shared/SuggestionTable';\r\nimport { ConfidenceIndicator } from './shared/ConfidenceIndicator';\r\n\r\ninterface InventorySuggestion {\r\n  id: string;\r\n  product_id: string;\r\n  product_name: string;\r\n  current_stock: number;\r\n  suggested_quantity: number;\r\n  urgency_level: 'low' | 'medium' | 'high' | 'critical';\r\n  confidence_score: number;\r\n  reason: string;\r\n  cost_impact: number;\r\n  seasonal_factor: number;\r\n  created_at: string;\r\n}\r\n\r\ninterface InventoryStats {\r\n  total_suggestions: number;\r\n  high_urgency_count: number;\r\n  total_cost_impact: number;\r\n  average_confidence: number;\r\n  suggestions_by_urgency: {\r\n    low: number;\r\n    medium: number;\r\n    high: number;\r\n    critical: number;\r\n  };\r\n}\r\n\r\nconst columns: SuggestionTableColumn<InventorySuggestion>[] = [\r\n  { key: 'product_name', label: 'Produkt', width: 180 },\r\n  { key: 'current_stock', label: 'Bestand', align: 'right' },\r\n  { key: 'suggested_quantity', label: 'Vorschlag', align: 'right', render: row => <span className=\"font-semibold text-blue-600\">{row.suggested_quantity}</span> },\r\n  { key: 'urgency_level', label: 'Dringlichkeit', align: 'center', render: row => <>\r\n    <span className=\"hidden md:inline\">{row.urgency_level.charAt(0).toUpperCase() + row.urgency_level.slice(1)}</span>\r\n    <span className=\"md:hidden\">{row.urgency_level[0].toUpperCase()}</span>\r\n  </> },\r\n  { key: 'confidence_score', label: 'Konfidenz', align: 'center', render: row => <ConfidenceIndicator confidence={row.confidence_score} size=\"small\" variant=\"chip\" /> },\r\n  { key: 'cost_impact', label: 'Kosten', align: 'right', render: row => <span className=\"font-semibold text-green-600\">€{row.cost_impact.toFixed(2)}</span> },\r\n  { key: 'seasonal_factor', label: 'Saison', align: 'center', render: row => <span>{(row.seasonal_factor * 100).toFixed(0)}%</span> },\r\n];\r\n\r\nconst AIInventoryDashboard: React.FC = () => {\r\n  const [suggestions, setSuggestions] = useState<InventorySuggestion[]>([]);\r\n  const [stats, setStats] = useState<InventoryStats | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [filterUrgency, setFilterUrgency] = useState<string>('all');\r\n  const [filterProduct, setFilterProduct] = useState<string>('');\r\n  const [selectedSuggestion, setSelectedSuggestion] = useState<InventorySuggestion | null>(null);\r\n  const [optimizeDialogOpen, setOptimizeDialogOpen] = useState(false);\r\n  const [optimizeParams, setOptimizeParams] = useState({\r\n    min_confidence: 0.7,\r\n    max_cost_impact: 1000,\r\n    urgency_weight: 0.5\r\n  });\r\n\r\n  // API-Aufrufe\r\n  const fetchSuggestions = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch('/api/ai/inventory/suggestions');\r\n      if (!response.ok) throw new Error('Fehler beim Laden der Vorschläge');\r\n      const data = await response.json();\r\n      setSuggestions(data.suggestions || []);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Unbekannter Fehler');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchStats = async () => {\r\n    try {\r\n      const response = await fetch('/api/ai/inventory/stats');\r\n      if (!response.ok) throw new Error('Fehler beim Laden der Statistiken');\r\n      const data = await response.json();\r\n      setStats(data);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Unbekannter Fehler');\r\n    }\r\n  };\r\n\r\n  const optimizeInventory = async () => {\r\n    try {\r\n      const response = await fetch('/api/ai/inventory/optimize', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(optimizeParams)\r\n      });\r\n      if (!response.ok) throw new Error('Fehler bei der Optimierung');\r\n      await fetchSuggestions();\r\n      setOptimizeDialogOpen(false);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Optimierungsfehler');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchSuggestions();\r\n    fetchStats();\r\n  }, []);\r\n\r\n  const filteredSuggestions = suggestions.filter(suggestion => {\r\n    const matchesUrgency = filterUrgency === 'all' || suggestion.urgency_level === filterUrgency;\r\n    const matchesProduct = filterProduct === '' || suggestion.product_name.toLowerCase().includes(filterProduct.toLowerCase());\r\n    return matchesUrgency && matchesProduct;\r\n  });\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <Typography variant=\"h4\" className=\"text-gray-800 font-semibold\">\r\n            KI-Inventur-Vorschläge\r\n          </Typography>\r\n          <Typography variant=\"body1\" className=\"text-gray-600\">\r\n            Automatische Vorschläge für optimale Lagerbestände\r\n          </Typography>\r\n        </div>\r\n        <div className=\"flex space-x-2\">\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<RefreshIcon />}\r\n            onClick={fetchSuggestions}\r\n          >\r\n            Aktualisieren\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            startIcon={<SettingsIcon />}\r\n            onClick={() => setOptimizeDialogOpen(true)}\r\n          >\r\n            Optimieren\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {error && (\r\n        <Alert severity=\"error\" onClose={() => setError(null)}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Statistiken */}\r\n      {stats && (\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} sm={6} md={3}>\r\n            <Card className=\"bg-blue-50\">\r\n              <CardContent>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <Typography color=\"textSecondary\" gutterBottom>\r\n                      Gesamt-Vorschläge\r\n                    </Typography>\r\n                    <Typography variant=\"h4\" className=\"text-blue-600\">\r\n                      {stats.total_suggestions}\r\n                    </Typography>\r\n                  </div>\r\n                  <InventoryIcon className=\"text-blue-500 text-3xl\" />\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={3}>\r\n            <Card className=\"bg-orange-50\">\r\n              <CardContent>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <Typography color=\"textSecondary\" gutterBottom>\r\n                      Hohe Dringlichkeit\r\n                    </Typography>\r\n                    <Typography variant=\"h4\" className=\"text-orange-600\">\r\n                      {stats.high_urgency_count}\r\n                    </Typography>\r\n                  </div>\r\n                  <WarningIcon className=\"text-orange-500 text-3xl\" />\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={3}>\r\n            <Card className=\"bg-green-50\">\r\n              <CardContent>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <Typography color=\"textSecondary\" gutterBottom>\r\n                      Kosten-Impact\r\n                    </Typography>\r\n                    <Typography variant=\"h4\" className=\"text-green-600\">\r\n                      €{stats.total_cost_impact.toFixed(0)}\r\n                    </Typography>\r\n                  </div>\r\n                  <MoneyIcon className=\"text-green-500 text-3xl\" />\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={3}>\r\n            <Card className=\"bg-purple-50\">\r\n              <CardContent>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <Typography color=\"textSecondary\" gutterBottom>\r\n                      Durchschn. Konfidenz\r\n                    </Typography>\r\n                    <Typography variant=\"h4\" className=\"text-purple-600\">\r\n                      {(stats.average_confidence * 100).toFixed(1)}%\r\n                    </Typography>\r\n                  </div>\r\n                  <AnalyticsIcon className=\"text-purple-500 text-3xl\" />\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n\r\n      {/* Filter */}\r\n      <Card>\r\n        <CardContent>\r\n          <div className=\"flex flex-wrap gap-4 items-center\">\r\n            <Typography variant=\"h6\">Filter:</Typography>\r\n            <FormControl size=\"small\" className=\"min-w-32\">\r\n              <InputLabel>Dringlichkeit</InputLabel>\r\n              <Select\r\n                value={filterUrgency}\r\n                onChange={(e) => setFilterUrgency(e.target.value)}\r\n                label=\"Dringlichkeit\"\r\n              >\r\n                <MenuItem value=\"all\">Alle</MenuItem>\r\n                <MenuItem value=\"low\">Niedrig</MenuItem>\r\n                <MenuItem value=\"medium\">Mittel</MenuItem>\r\n                <MenuItem value=\"high\">Hoch</MenuItem>\r\n                <MenuItem value=\"critical\">Kritisch</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <TextField\r\n              size=\"small\"\r\n              label=\"Produkt suchen\"\r\n              value={filterProduct}\r\n              onChange={(e) => setFilterProduct(e.target.value)}\r\n              className=\"min-w-48\"\r\n            />\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Vorschläge Tabelle */}\r\n      <SuggestionTable\r\n        data={filteredSuggestions}\r\n        columns={columns}\r\n        onView={setSelectedSuggestion}\r\n        loading={loading}\r\n        emptyText=\"Keine Inventur-Vorschläge gefunden\"\r\n      />\r\n\r\n      {/* Detail Dialog */}\r\n      <Dialog\r\n        open={!!selectedSuggestion}\r\n        onClose={() => setSelectedSuggestion(null)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        {selectedSuggestion && (\r\n          <>\r\n            <DialogTitle>\r\n              <div className=\"flex items-center space-x-2\">\r\n                <InventoryIcon />\r\n                <span>Vorschlag Details: {selectedSuggestion.product_name}</span>\r\n              </div>\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <div className=\"space-y-4\">\r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <div>\r\n                    <Typography variant=\"subtitle2\" color=\"textSecondary\">\r\n                      Aktueller Bestand\r\n                    </Typography>\r\n                    <Typography variant=\"h6\">{selectedSuggestion.current_stock}</Typography>\r\n                  </div>\r\n                  <div>\r\n                    <Typography variant=\"subtitle2\" color=\"textSecondary\">\r\n                      Vorgeschlagene Menge\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" color=\"primary\">\r\n                      {selectedSuggestion.suggested_quantity}\r\n                    </Typography>\r\n                  </div>\r\n                  <div>\r\n                    <Typography variant=\"subtitle2\" color=\"textSecondary\">\r\n                      Dringlichkeit\r\n                    </Typography>\r\n                    <Chip\r\n                      label={selectedSuggestion.urgency_level.toUpperCase()}\r\n                      color=\"primary\"\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <Typography variant=\"subtitle2\" color=\"textSecondary\">\r\n                      Konfidenz\r\n                    </Typography>\r\n                    <ConfidenceIndicator confidence={selectedSuggestion.confidence_score} />\r\n                  </div>\r\n                  <div>\r\n                    <Typography variant=\"subtitle2\" color=\"textSecondary\">\r\n                      Kosten-Impact\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" color=\"success.main\">\r\n                      €{selectedSuggestion.cost_impact.toFixed(2)}\r\n                    </Typography>\r\n                  </div>\r\n                  <div>\r\n                    <Typography variant=\"subtitle2\" color=\"textSecondary\">\r\n                      Saison-Faktor\r\n                    </Typography>\r\n                    <Typography variant=\"h6\">\r\n                      {(selectedSuggestion.seasonal_factor * 100).toFixed(1)}%\r\n                    </Typography>\r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  <Typography variant=\"subtitle2\" color=\"textSecondary\">\r\n                    Begründung\r\n                  </Typography>\r\n                  <Typography variant=\"body1\" className=\"mt-1\">\r\n                    {selectedSuggestion.reason}\r\n                  </Typography>\r\n                </div>\r\n              </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={() => setSelectedSuggestion(null)}>\r\n                Schließen\r\n              </Button>\r\n            </DialogActions>\r\n          </>\r\n        )}\r\n      </Dialog>\r\n\r\n      {/* Optimierung Dialog */}\r\n      <Dialog\r\n        open={optimizeDialogOpen}\r\n        onClose={() => setOptimizeDialogOpen(false)}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Inventur-Parameter optimieren</DialogTitle>\r\n        <DialogContent>\r\n          <div className=\"space-y-4 pt-2\">\r\n            <TextField\r\n              fullWidth\r\n              label=\"Minimale Konfidenz\"\r\n              type=\"number\"\r\n              inputProps={{ min: 0, max: 1, step: 0.1 }}\r\n              value={optimizeParams.min_confidence}\r\n              onChange={(e) => setOptimizeParams({\r\n                ...optimizeParams,\r\n                min_confidence: parseFloat(e.target.value)\r\n              })}\r\n            />\r\n            <TextField\r\n              fullWidth\r\n              label=\"Maximaler Kosten-Impact (€)\"\r\n              type=\"number\"\r\n              value={optimizeParams.max_cost_impact}\r\n              onChange={(e) => setOptimizeParams({\r\n                ...optimizeParams,\r\n                max_cost_impact: parseFloat(e.target.value)\r\n              })}\r\n            />\r\n            <TextField\r\n              fullWidth\r\n              label=\"Dringlichkeit-Gewichtung\"\r\n              type=\"number\"\r\n              inputProps={{ min: 0, max: 1, step: 0.1 }}\r\n              value={optimizeParams.urgency_weight}\r\n              onChange={(e) => setOptimizeParams({\r\n                ...optimizeParams,\r\n                urgency_weight: parseFloat(e.target.value)\r\n              })}\r\n            />\r\n          </div>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOptimizeDialogOpen(false)}>\r\n            Abbrechen\r\n          </Button>\r\n          <Button onClick={optimizeInventory} variant=\"contained\">\r\n            Optimieren\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AIInventoryDashboard; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\ai\\AIVoucherDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IconButton' is defined but never used. Allowed unused vars must match /^_/u.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PeopleIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":36,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MoneyIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":37,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AssessmentIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":42,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":399,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":399,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13561,13564],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13561,13564],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  Chip,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Alert,\r\n  CircularProgress,\r\n  Box,\r\n  Grid,\r\n  IconButton,\r\n  Tooltip,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  LinearProgress,\r\n  Slider\r\n} from '@mui/material';\r\nimport {\r\n  LocalOffer as VoucherIcon,\r\n  TrendingUp as TrendingUpIcon,\r\n  People as PeopleIcon,\r\n  AttachMoney as MoneyIcon,\r\n  Refresh as RefreshIcon,\r\n  Settings as SettingsIcon,\r\n  Analytics as AnalyticsIcon,\r\n  Psychology as PsychologyIcon,\r\n  Assessment as AssessmentIcon\r\n} from '@mui/icons-material';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, ResponsiveContainer, BarChart, Bar, PieChart, Pie, Cell } from 'recharts';\r\n\r\ninterface VoucherOptimization {\r\n  id: string;\r\n  voucher_type: string;\r\n  discount_percentage: number;\r\n  target_segment: string;\r\n  predicted_revenue: number;\r\n  risk_score: number;\r\n  confidence_score: number;\r\n  seasonal_factor: number;\r\n  customer_segments: string[];\r\n  optimization_reason: string;\r\n  created_at: string;\r\n}\r\n\r\ninterface VoucherStats {\r\n  total_optimizations: number;\r\n  average_revenue_prediction: number;\r\n  average_risk_score: number;\r\n  top_segments: Array<{\r\n    segment: string;\r\n    count: number;\r\n    avg_revenue: number;\r\n  }>;\r\n  revenue_trends: Array<{\r\n    month: string;\r\n    actual: number;\r\n    predicted: number;\r\n  }>;\r\n  segment_distribution: Array<{\r\n    segment: string;\r\n    percentage: number;\r\n  }>;\r\n}\r\n\r\ninterface OptimizationParams {\r\n  min_discount: number;\r\n  max_discount: number;\r\n  target_revenue: number;\r\n  risk_tolerance: number;\r\n  seasonal_weight: number;\r\n  segment_weight: number;\r\n}\r\n\r\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\r\n\r\nconst AIVoucherDashboard: React.FC = () => {\r\n  const [optimizations, setOptimizations] = useState<VoucherOptimization[]>([]);\r\n  const [stats, setStats] = useState<VoucherStats | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [filterSegment, setFilterSegment] = useState<string>('all');\r\n  const [filterConfidence, setFilterConfidence] = useState<number>(0);\r\n  const [optimizationDialog, setOptimizationDialog] = useState(false);\r\n  const [analyticsDialog, setAnalyticsDialog] = useState(false);\r\n  const [retrainDialog, setRetrainDialog] = useState(false);\r\n  const [optimizationParams, setOptimizationParams] = useState<OptimizationParams>({\r\n    min_discount: 5,\r\n    max_discount: 50,\r\n    target_revenue: 10000,\r\n    risk_tolerance: 0.3,\r\n    seasonal_weight: 0.4,\r\n    segment_weight: 0.6\r\n  });\r\n  const [retraining, setRetraining] = useState(false);\r\n  const [optimizing, setOptimizing] = useState(false);\r\n\r\n  const fetchOptimizations = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch('/api/ai/voucher/optimizations');\r\n      if (!response.ok) throw new Error('Fehler beim Laden der Voucher-Optimierungen');\r\n      const data = await response.json();\r\n      setOptimizations(data.optimizations || []);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Unbekannter Fehler');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchStats = async () => {\r\n    try {\r\n      const response = await fetch('/api/ai/voucher/stats');\r\n      if (!response.ok) throw new Error('Fehler beim Laden der Statistiken');\r\n      const data = await response.json();\r\n      setStats(data);\r\n    } catch (err) {\r\n      console.error('Fehler beim Laden der Statistiken:', err);\r\n    }\r\n  };\r\n\r\n  const handleOptimize = async () => {\r\n    try {\r\n      setOptimizing(true);\r\n      const response = await fetch('/api/ai/voucher/optimize', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(optimizationParams)\r\n      });\r\n      if (!response.ok) throw new Error('Fehler bei der Optimierung');\r\n      await fetchOptimizations();\r\n      setOptimizationDialog(false);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Optimierungsfehler');\r\n    } finally {\r\n      setOptimizing(false);\r\n    }\r\n  };\r\n\r\n  const handleRetrain = async () => {\r\n    try {\r\n      setRetraining(true);\r\n      const response = await fetch('/api/ai/voucher/retrain', {\r\n        method: 'POST'\r\n      });\r\n      if (!response.ok) throw new Error('Fehler beim Neulernen des Modells');\r\n      await fetchOptimizations();\r\n      await fetchStats();\r\n      setRetrainDialog(false);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Neulernen-Fehler');\r\n    } finally {\r\n      setRetraining(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchOptimizations();\r\n    fetchStats();\r\n  }, []);\r\n\r\n  const filteredOptimizations = optimizations.filter(optimization => {\r\n    if (filterSegment !== 'all' && !optimization.customer_segments.includes(filterSegment)) return false;\r\n    if (optimization.confidence_score < filterConfidence) return false;\r\n    return true;\r\n  });\r\n\r\n  const getRiskColor = (risk: number) => {\r\n    if (risk < 0.3) return 'success';\r\n    if (risk < 0.6) return 'warning';\r\n    return 'error';\r\n  };\r\n\r\n  const getRiskLabel = (risk: number) => {\r\n    if (risk < 0.3) return 'Niedrig';\r\n    if (risk < 0.6) return 'Mittel';\r\n    return 'Hoch';\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <Typography variant=\"h4\" className=\"text-gray-800 font-semibold\">\r\n            KI-Voucher-Optimierung\r\n          </Typography>\r\n          <Typography variant=\"body1\" className=\"text-gray-600\">\r\n            Intelligente Voucher-Strategien basierend auf KI-Analyse\r\n          </Typography>\r\n        </div>\r\n        <div className=\"flex space-x-2\">\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<AnalyticsIcon />}\r\n            onClick={() => setAnalyticsDialog(true)}\r\n          >\r\n            Analytics\r\n          </Button>\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<SettingsIcon />}\r\n            onClick={() => setOptimizationDialog(true)}\r\n          >\r\n            Optimieren\r\n          </Button>\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<PsychologyIcon />}\r\n            onClick={() => setRetrainDialog(true)}\r\n          >\r\n            Modell neu lernen\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            startIcon={<RefreshIcon />}\r\n            onClick={fetchOptimizations}\r\n          >\r\n            Aktualisieren\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {error && (\r\n        <Alert severity=\"error\" onClose={() => setError(null)}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Statistics Cards */}\r\n      {stats && (\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} sm={6} md={3}>\r\n            <Card className=\"bg-gradient-to-r from-purple-500 to-purple-600 text-white\">\r\n              <CardContent>\r\n                <Typography variant=\"h6\" className=\"text-white\">\r\n                  Optimierungen\r\n                </Typography>\r\n                <Typography variant=\"h4\" className=\"text-white font-bold\">\r\n                  {stats.total_optimizations}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={3}>\r\n            <Card className=\"bg-gradient-to-r from-green-500 to-green-600 text-white\">\r\n              <CardContent>\r\n                <Typography variant=\"h6\" className=\"text-white\">\r\n                  Durchschn. Umsatz\r\n                </Typography>\r\n                <Typography variant=\"h4\" className=\"text-white font-bold\">\r\n                  €{stats.average_revenue_prediction.toFixed(0)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={3}>\r\n            <Card className=\"bg-gradient-to-r from-orange-500 to-orange-600 text-white\">\r\n              <CardContent>\r\n                <Typography variant=\"h6\" className=\"text-white\">\r\n                  Durchschn. Risiko\r\n                </Typography>\r\n                <Typography variant=\"h4\" className=\"text-white font-bold\">\r\n                  {(stats.average_risk_score * 100).toFixed(1)}%\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={3}>\r\n            <Card className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white\">\r\n              <CardContent>\r\n                <Typography variant=\"h6\" className=\"text-white\">\r\n                  Top Segment\r\n                </Typography>\r\n                <Typography variant=\"h4\" className=\"text-white font-bold\">\r\n                  {stats.top_segments[0]?.segment || 'N/A'}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n\r\n      {/* Filters */}\r\n      <Card>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" className=\"mb-4\">\r\n            Filter\r\n          </Typography>\r\n          <div className=\"flex space-x-4\">\r\n            <FormControl className=\"min-w-200\">\r\n              <InputLabel>Kundensegment</InputLabel>\r\n              <Select\r\n                value={filterSegment}\r\n                onChange={(e) => setFilterSegment(e.target.value)}\r\n                label=\"Kundensegment\"\r\n              >\r\n                <MenuItem value=\"all\">Alle Segmente</MenuItem>\r\n                <MenuItem value=\"premium\">Premium</MenuItem>\r\n                <MenuItem value=\"regular\">Regulär</MenuItem>\r\n                <MenuItem value=\"budget\">Budget</MenuItem>\r\n                <MenuItem value=\"new\">Neue Kunden</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl className=\"min-w-200\">\r\n              <InputLabel>Min. Konfidenz</InputLabel>\r\n              <Select\r\n                value={filterConfidence}\r\n                onChange={(e) => setFilterConfidence(e.target.value as number)}\r\n                label=\"Min. Konfidenz\"\r\n              >\r\n                <MenuItem value={0}>Alle</MenuItem>\r\n                <MenuItem value={0.5}>50%+</MenuItem>\r\n                <MenuItem value={0.7}>70%+</MenuItem>\r\n                <MenuItem value={0.8}>80%+</MenuItem>\r\n                <MenuItem value={0.9}>90%+</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Optimizations Table */}\r\n      <Card>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" className=\"mb-4\">\r\n            Voucher-Optimierungen ({filteredOptimizations.length})\r\n          </Typography>\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Voucher-Typ</TableCell>\r\n                  <TableCell align=\"center\">Rabatt</TableCell>\r\n                  <TableCell align=\"center\">Zielsegment</TableCell>\r\n                  <TableCell align=\"right\">Umsatz-Prognose</TableCell>\r\n                  <TableCell align=\"center\">Risiko</TableCell>\r\n                  <TableCell align=\"center\">Konfidenz</TableCell>\r\n                  <TableCell align=\"center\">Saisonfaktor</TableCell>\r\n                  <TableCell>Grund</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {filteredOptimizations.map((optimization) => (\r\n                  <TableRow key={optimization.id} hover>\r\n                    <TableCell>\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <VoucherIcon className=\"text-purple-500\" />\r\n                        <Typography variant=\"body2\" className=\"font-medium\">\r\n                          {optimization.voucher_type}\r\n                        </Typography>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell align=\"center\">\r\n                      <Chip\r\n                        label={`${optimization.discount_percentage}%`}\r\n                        color=\"primary\"\r\n                        size=\"small\"\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell align=\"center\">\r\n                      <Chip\r\n                        label={optimization.target_segment}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                      <Typography variant=\"body2\" className=\"font-semibold text-green-600\">\r\n                        €{optimization.predicted_revenue.toFixed(2)}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell align=\"center\">\r\n                      <Chip\r\n                        label={getRiskLabel(optimization.risk_score)}\r\n                        color={getRiskColor(optimization.risk_score) as any}\r\n                        size=\"small\"\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell align=\"center\">\r\n                      <Box display=\"flex\" alignItems=\"center\">\r\n                        <Box width=\"100%\" mr={1}>\r\n                          <LinearProgress\r\n                            variant=\"determinate\"\r\n                            value={optimization.confidence_score * 100}\r\n                            className=\"h-2\"\r\n                          />\r\n                        </Box>\r\n                        <Typography variant=\"body2\">\r\n                          {(optimization.confidence_score * 100).toFixed(0)}%\r\n                        </Typography>\r\n                      </Box>\r\n                    </TableCell>\r\n                    <TableCell align=\"center\">\r\n                      <Typography variant=\"body2\">\r\n                        {(optimization.seasonal_factor * 100).toFixed(0)}%\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\" className=\"text-gray-600 max-w-xs truncate\">\r\n                        {optimization.optimization_reason}\r\n                      </Typography>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Optimization Dialog */}\r\n      <Dialog open={optimizationDialog} onClose={() => setOptimizationDialog(false)} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>\r\n          <div className=\"flex items-center space-x-2\">\r\n            <SettingsIcon />\r\n            <Typography variant=\"h6\">\r\n              Voucher-Parameter optimieren\r\n            </Typography>\r\n          </div>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <div className=\"space-y-4 mt-4\">\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  label=\"Minimaler Rabatt (%)\"\r\n                  type=\"number\"\r\n                  value={optimizationParams.min_discount}\r\n                  onChange={(e) => setOptimizationParams({\r\n                    ...optimizationParams,\r\n                    min_discount: parseFloat(e.target.value)\r\n                  })}\r\n                  inputProps={{ min: 0, max: 100 }}\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  label=\"Maximaler Rabatt (%)\"\r\n                  type=\"number\"\r\n                  value={optimizationParams.max_discount}\r\n                  onChange={(e) => setOptimizationParams({\r\n                    ...optimizationParams,\r\n                    max_discount: parseFloat(e.target.value)\r\n                  })}\r\n                  inputProps={{ min: 0, max: 100 }}\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  label=\"Ziel-Umsatz (€)\"\r\n                  type=\"number\"\r\n                  value={optimizationParams.target_revenue}\r\n                  onChange={(e) => setOptimizationParams({\r\n                    ...optimizationParams,\r\n                    target_revenue: parseFloat(e.target.value)\r\n                  })}\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <Typography gutterBottom>Risiko-Toleranz</Typography>\r\n                <Slider\r\n                  value={optimizationParams.risk_tolerance}\r\n                  onChange={(_, value) => setOptimizationParams({\r\n                    ...optimizationParams,\r\n                    risk_tolerance: value as number\r\n                  })}\r\n                  min={0}\r\n                  max={1}\r\n                  step={0.1}\r\n                  marks={[\r\n                    { value: 0, label: 'Niedrig' },\r\n                    { value: 0.5, label: 'Mittel' },\r\n                    { value: 1, label: 'Hoch' }\r\n                  ]}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <Typography gutterBottom>Saisonale Gewichtung</Typography>\r\n                <Slider\r\n                  value={optimizationParams.seasonal_weight}\r\n                  onChange={(_, value) => setOptimizationParams({\r\n                    ...optimizationParams,\r\n                    seasonal_weight: value as number\r\n                  })}\r\n                  min={0}\r\n                  max={1}\r\n                  step={0.1}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <Typography gutterBottom>Segment-Gewichtung</Typography>\r\n                <Slider\r\n                  value={optimizationParams.segment_weight}\r\n                  onChange={(_, value) => setOptimizationParams({\r\n                    ...optimizationParams,\r\n                    segment_weight: value as number\r\n                  })}\r\n                  min={0}\r\n                  max={1}\r\n                  step={0.1}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOptimizationDialog(false)}>\r\n            Abbrechen\r\n          </Button>\r\n          <Button\r\n            onClick={handleOptimize}\r\n            variant=\"contained\"\r\n            disabled={optimizing}\r\n            startIcon={optimizing ? <CircularProgress size={20} /> : <TrendingUpIcon />}\r\n          >\r\n            {optimizing ? 'Optimiere...' : 'Optimieren'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Analytics Dialog */}\r\n      <Dialog open={analyticsDialog} onClose={() => setAnalyticsDialog(false)} maxWidth=\"lg\" fullWidth>\r\n        <DialogTitle>\r\n          <div className=\"flex items-center space-x-2\">\r\n            <AnalyticsIcon />\r\n            <Typography variant=\"h6\">\r\n              Voucher-Analytics\r\n            </Typography>\r\n          </div>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {stats && (\r\n            <div className=\"space-y-6 mt-4\">\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={12} md={6}>\r\n                  <Typography variant=\"h6\" className=\"mb-4\">\r\n                    Umsatz-Trends\r\n                  </Typography>\r\n                  <ResponsiveContainer width=\"100%\" height={300}>\r\n                    <LineChart data={stats.revenue_trends}>\r\n                      <CartesianGrid strokeDasharray=\"3 3\" />\r\n                      <XAxis dataKey=\"month\" />\r\n                      <YAxis />\r\n                      <RechartsTooltip />\r\n                      <Line type=\"monotone\" dataKey=\"actual\" stroke=\"#8884d8\" name=\"Tatsächlich\" />\r\n                      <Line type=\"monotone\" dataKey=\"predicted\" stroke=\"#82ca9d\" name=\"Prognose\" />\r\n                    </LineChart>\r\n                  </ResponsiveContainer>\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                  <Typography variant=\"h6\" className=\"mb-4\">\r\n                    Segment-Verteilung\r\n                  </Typography>\r\n                  <ResponsiveContainer width=\"100%\" height={300}>\r\n                    <PieChart>\r\n                      <Pie\r\n                        data={stats.segment_distribution}\r\n                        cx=\"50%\"\r\n                        cy=\"50%\"\r\n                        labelLine={false}\r\n                        label={({ segment, percentage }) => `${segment} ${percentage}%`}\r\n                        outerRadius={80}\r\n                        fill=\"#8884d8\"\r\n                        dataKey=\"percentage\"\r\n                      >\r\n                        {stats.segment_distribution.map((entry, index) => (\r\n                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                        ))}\r\n                      </Pie>\r\n                      <RechartsTooltip />\r\n                    </PieChart>\r\n                  </ResponsiveContainer>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Typography variant=\"h6\" className=\"mb-4\">\r\n                    Top Segmente nach Umsatz\r\n                  </Typography>\r\n                  <ResponsiveContainer width=\"100%\" height={300}>\r\n                    <BarChart data={stats.top_segments}>\r\n                      <CartesianGrid strokeDasharray=\"3 3\" />\r\n                      <XAxis dataKey=\"segment\" />\r\n                      <YAxis />\r\n                      <RechartsTooltip />\r\n                      <Bar dataKey=\"avg_revenue\" fill=\"#8884d8\" name=\"Durchschn. Umsatz\" />\r\n                    </BarChart>\r\n                  </ResponsiveContainer>\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setAnalyticsDialog(false)}>\r\n            Schließen\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Retrain Dialog */}\r\n      <Dialog open={retrainDialog} onClose={() => setRetrainDialog(false)}>\r\n        <DialogTitle>\r\n          <div className=\"flex items-center space-x-2\">\r\n            <PsychologyIcon />\r\n            <Typography variant=\"h6\">\r\n              KI-Modell neu lernen\r\n            </Typography>\r\n          </div>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Typography className=\"mt-4\">\r\n            Das KI-Modell wird mit den neuesten Daten neu trainiert. \r\n            Dieser Vorgang kann einige Minuten dauern.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setRetrainDialog(false)}>\r\n            Abbrechen\r\n          </Button>\r\n          <Button\r\n            onClick={handleRetrain}\r\n            variant=\"contained\"\r\n            disabled={retraining}\r\n            startIcon={retraining ? <CircularProgress size={20} /> : <PsychologyIcon />}\r\n          >\r\n            {retraining ? 'Lerne neu...' : 'Neu lernen'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AIVoucherDashboard; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\ai\\BarcodeAI.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused caught errors must match /^_/u.","line":63,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":187,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5790,5793],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5790,5793],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  TextField,\r\n  Chip,\r\n  Box,\r\n  Alert,\r\n  CircularProgress,\r\n  Grid,\r\n  Paper,\r\n  Divider\r\n} from '@mui/material';\r\nimport {\r\n  QrCode as QrCodeIcon,\r\n  AutoAwesome as AutoAwesomeIcon,\r\n  TrendingUp as TrendingUpIcon,\r\n  Category as CategoryIcon\r\n} from '@mui/icons-material';\r\n\r\ninterface BarcodeSuggestion {\r\n  id: string;\r\n  product_name: string;\r\n  suggested_barcode: string;\r\n  confidence_score: number;\r\n  reasoning: string;\r\n  category: string;\r\n  similar_products: string[];\r\n  market_trends: {\r\n    demand_trend: string;\r\n    price_trend: string;\r\n    seasonality: string;\r\n  };\r\n  created_at: string;\r\n}\r\n\r\ninterface BarcodeAIProps {\r\n  onBarcodeSelect?: (barcode: string) => void;\r\n}\r\n\r\nexport const BarcodeAI: React.FC<BarcodeAIProps> = ({ onBarcodeSelect }) => {\r\n  const [productName, setProductName] = useState('');\r\n  const [suggestions, setSuggestions] = useState<BarcodeSuggestion[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [aiHealth, setAiHealth] = useState<boolean | null>(null);\r\n\r\n  // Prüfe AI-Service Health beim Laden\r\n  useEffect(() => {\r\n    checkAIHealth();\r\n  }, []);\r\n\r\n  const checkAIHealth = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:8000/api/ai/barcode/health');\r\n      if (response.ok) {\r\n        setAiHealth(true);\r\n      } else {\r\n        setAiHealth(false);\r\n      }\r\n    } catch (err) {\r\n      setAiHealth(false);\r\n    }\r\n  };\r\n\r\n  const getBarcodeSuggestions = async () => {\r\n    if (!productName.trim()) {\r\n      setError('Bitte geben Sie einen Produktnamen ein');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:8000/api/ai/barcode/suggestions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ product_name: productName }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Fehler beim Abrufen der Barcode-Vorschläge');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setSuggestions(data.suggestions || []);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Unbekannter Fehler');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleBarcodeSelect = (barcode: string) => {\r\n    onBarcodeSelect?.(barcode);\r\n  };\r\n\r\n  const getConfidenceColor = (score: number) => {\r\n    if (score >= 0.8) return 'success';\r\n    if (score >= 0.6) return 'warning';\r\n    return 'error';\r\n  };\r\n\r\n  const getTrendIcon = (trend: string) => {\r\n    switch (trend) {\r\n      case 'steigend':\r\n        return <TrendingUpIcon color=\"success\" />;\r\n      case 'fallend':\r\n        return <TrendingUpIcon sx={{ transform: 'rotate(180deg)', color: 'error.main' }} />;\r\n      default:\r\n        return <TrendingUpIcon color=\"info\" />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card className=\"w-full max-w-4xl mx-auto\">\r\n      <CardContent className=\"p-6\">\r\n        <Box className=\"flex items-center gap-3 mb-6\">\r\n          <AutoAwesomeIcon color=\"primary\" fontSize=\"large\" />\r\n          <Typography variant=\"h5\" component=\"h2\" className=\"font-semibold\">\r\n            AI-Barcode Generator\r\n          </Typography>\r\n          {aiHealth !== null && (\r\n            <Chip\r\n              label={aiHealth ? 'AI Service Online' : 'AI Service Offline'}\r\n              color={aiHealth ? 'success' : 'error'}\r\n              size=\"small\"\r\n            />\r\n          )}\r\n        </Box>\r\n\r\n        {/* Eingabe-Bereich */}\r\n        <Paper className=\"p-4 mb-6 bg-gray-50\">\r\n          <Typography variant=\"h6\" className=\"mb-3\">\r\n            Produkt für Barcode-Vorschläge\r\n          </Typography>\r\n          <Box className=\"flex gap-3\">\r\n            <TextField\r\n              fullWidth\r\n              label=\"Produktname\"\r\n              value={productName}\r\n              onChange={(e) => setProductName(e.target.value)}\r\n              placeholder=\"z.B. iPhone 15 Pro, Harry Potter Box Set\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => e.key === 'Enter' && getBarcodeSuggestions()}\r\n            />\r\n            <Button\r\n              variant=\"contained\"\r\n              onClick={getBarcodeSuggestions}\r\n              disabled={loading || !productName.trim()}\r\n              startIcon={loading ? <CircularProgress size={20} /> : <QrCodeIcon />}\r\n              className=\"min-w-[140px]\"\r\n            >\r\n              {loading ? 'Analysiere...' : 'Vorschläge'}\r\n            </Button>\r\n          </Box>\r\n        </Paper>\r\n\r\n        {/* Fehler-Anzeige */}\r\n        {error && (\r\n          <Alert severity=\"error\" className=\"mb-4\">\r\n            {error}\r\n          </Alert>\r\n        )}\r\n\r\n        {/* Vorschläge */}\r\n        {suggestions.length > 0 && (\r\n          <Box>\r\n            <Typography variant=\"h6\" className=\"mb-4\">\r\n              AI-Barcode Vorschläge ({suggestions.length})\r\n            </Typography>\r\n            <Grid container spacing={3}>\r\n              {suggestions.map((suggestion) => (\r\n                <Grid item xs={12} md={6} key={suggestion.id}>\r\n                  <Paper className=\"p-4 border-l-4 border-blue-500 hover:shadow-lg transition-shadow\">\r\n                    <Box className=\"flex justify-between items-start mb-3\">\r\n                      <Typography variant=\"h6\" className=\"font-medium\">\r\n                        {suggestion.product_name}\r\n                      </Typography>\r\n                      <Chip\r\n                        label={`${(suggestion.confidence_score * 100).toFixed(0)}%`}\r\n                        color={getConfidenceColor(suggestion.confidence_score) as any}\r\n                        size=\"small\"\r\n                      />\r\n                    </Box>\r\n\r\n                    <Box className=\"mb-3\">\r\n                      <Typography variant=\"body2\" className=\"text-gray-600 mb-2\">\r\n                        <strong>Vorgeschlagener Barcode:</strong>\r\n                      </Typography>\r\n                      <Typography\r\n                        variant=\"h6\"\r\n                        className=\"font-mono bg-gray-100 p-2 rounded\"\r\n                        component=\"code\"\r\n                      >\r\n                        {suggestion.suggested_barcode}\r\n                      </Typography>\r\n                    </Box>\r\n\r\n                    <Box className=\"mb-3\">\r\n                      <Typography variant=\"body2\" className=\"text-gray-600 mb-1\">\r\n                        <strong>Begründung:</strong>\r\n                      </Typography>\r\n                      <Typography variant=\"body2\">\r\n                        {suggestion.reasoning}\r\n                      </Typography>\r\n                    </Box>\r\n\r\n                    <Box className=\"flex items-center gap-2 mb-3\">\r\n                      <CategoryIcon fontSize=\"small\" color=\"action\" />\r\n                      <Chip\r\n                        label={suggestion.category}\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                      />\r\n                    </Box>\r\n\r\n                    {/* Markt-Trends */}\r\n                    <Box className=\"mb-3\">\r\n                      <Typography variant=\"body2\" className=\"text-gray-600 mb-2\">\r\n                        <strong>Markt-Trends:</strong>\r\n                      </Typography>\r\n                      <Box className=\"flex gap-2 flex-wrap\">\r\n                        <Chip\r\n                          label={`Nachfrage: ${suggestion.market_trends.demand_trend}`}\r\n                          size=\"small\"\r\n                          icon={getTrendIcon(suggestion.market_trends.demand_trend)}\r\n                        />\r\n                        <Chip\r\n                          label={`Preis: ${suggestion.market_trends.price_trend}`}\r\n                          size=\"small\"\r\n                          icon={getTrendIcon(suggestion.market_trends.price_trend)}\r\n                        />\r\n                        <Chip\r\n                          label={`Saisonalität: ${suggestion.market_trends.seasonality}`}\r\n                          size=\"small\"\r\n                        />\r\n                      </Box>\r\n                    </Box>\r\n\r\n                    {/* Ähnliche Produkte */}\r\n                    {suggestion.similar_products.length > 0 && (\r\n                      <Box className=\"mb-3\">\r\n                        <Typography variant=\"body2\" className=\"text-gray-600 mb-1\">\r\n                          <strong>Ähnliche Produkte:</strong>\r\n                        </Typography>\r\n                        <Box className=\"flex gap-1 flex-wrap\">\r\n                          {suggestion.similar_products.map((product, index) => (\r\n                            <Chip\r\n                              key={index}\r\n                              label={product}\r\n                              size=\"small\"\r\n                              variant=\"outlined\"\r\n                            />\r\n                          ))}\r\n                        </Box>\r\n                      </Box>\r\n                    )}\r\n\r\n                    <Divider className=\"my-3\" />\r\n\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      fullWidth\r\n                      onClick={() => handleBarcodeSelect(suggestion.suggested_barcode)}\r\n                      startIcon={<QrCodeIcon />}\r\n                    >\r\n                      Barcode verwenden\r\n                    </Button>\r\n                  </Paper>\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </Box>\r\n        )}\r\n\r\n        {/* Info-Bereich */}\r\n        {suggestions.length === 0 && !loading && !error && (\r\n          <Paper className=\"p-4 bg-blue-50\">\r\n            <Typography variant=\"body2\" className=\"text-blue-800\">\r\n              <strong>💡 Tipp:</strong> Geben Sie einen Produktnamen ein, um intelligente \r\n              Barcode-Vorschläge basierend auf KI-Analyse zu erhalten. Das System berücksichtigt \r\n              Produktkategorien, Markttrends und ähnliche Produkte für optimale Empfehlungen.\r\n            </Typography>\r\n          </Paper>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\ai\\HorizonBetaChat.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Divider' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1077,1080],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1077,1080],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'module' is assigned a value but never used. Allowed unused args must match /^_/u.","line":54,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleStreamingChat' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":147,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":147,"endColumn":28},{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":187,"column":14,"nodeType":"Literal","messageId":"unexpected","endLine":187,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used. Allowed unused caught errors must match /^_/u.","line":203,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":203,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * VALEO NeuroERP 2.0 - Horizon Beta Chat Component\r\n * React-Komponente für die Horizon Beta KI-Integration\r\n * Serena Quality: Complete AI chat interface with streaming\r\n */\r\n\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  Chip,\r\n  CircularProgress,\r\n  Alert,\r\n  IconButton,\r\n  Divider,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Card,\r\n  CardContent\r\n} from '@mui/material';\r\nimport {\r\n  Send as SendIcon,\r\n  SmartToy as AIIcon,\r\n  Person as PersonIcon,\r\n  Refresh as RefreshIcon,\r\n  ContentCopy as CopyIcon,\r\n  Download as DownloadIcon\r\n} from '@mui/icons-material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\ninterface ChatMessage {\r\n  id: string;\r\n  content: string;\r\n  role: 'user' | 'assistant';\r\n  timestamp: Date;\r\n  model?: string;\r\n  confidence?: number;\r\n  suggestions?: string[];\r\n}\r\n\r\ninterface HorizonBetaChatProps {\r\n  module?: string;\r\n  context?: string;\r\n  maxTokens?: number;\r\n  onMessageSend?: (message: string) => void;\r\n  onResponseReceived?: (response: any) => void;\r\n}\r\n\r\nconst HorizonBetaChat: React.FC<HorizonBetaChatProps> = ({\r\n  module = 'valeo_general',\r\n  context = 'valeo_general',\r\n  maxTokens = 2000,\r\n  onMessageSend,\r\n  onResponseReceived\r\n}) => {\r\n  const theme = useTheme();\r\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [isStreaming, setIsStreaming] = useState(false);\r\n  const [streamingMessage, setStreamingMessage] = useState('');\r\n  \r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  // Auto-scroll to bottom\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages, streamingMessage]);\r\n\r\n  // Focus input on mount\r\n  useEffect(() => {\r\n    inputRef.current?.focus();\r\n  }, []);\r\n\r\n  const handleSendMessage = async () => {\r\n    if (!inputValue.trim() || isLoading) return;\r\n\r\n    const userMessage: ChatMessage = {\r\n      id: Date.now().toString(),\r\n      content: inputValue,\r\n      role: 'user',\r\n      timestamp: new Date()\r\n    };\r\n\r\n    setMessages(prev => [...prev, userMessage]);\r\n    setInputValue('');\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setIsStreaming(false);\r\n    setStreamingMessage('');\r\n\r\n    // Call parent callback\r\n    onMessageSend?.(inputValue);\r\n\r\n    try {\r\n      // Send to Horizon Beta API\r\n      const response = await fetch('/api/v1/horizon/chat', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n        },\r\n        body: JSON.stringify({\r\n          query: inputValue,\r\n          context: context,\r\n          max_tokens: maxTokens\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      const assistantMessage: ChatMessage = {\r\n        id: (Date.now() + 1).toString(),\r\n        content: data.response,\r\n        role: 'assistant',\r\n        timestamp: new Date(),\r\n        model: data.model,\r\n        confidence: 0.85,\r\n        suggestions: data.suggestions || []\r\n      };\r\n\r\n      setMessages(prev => [...prev, assistantMessage]);\r\n      onResponseReceived?.(data);\r\n\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Ein Fehler ist aufgetreten');\r\n      console.error('Horizon Beta chat error:', err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleStreamingChat = async () => {\r\n    if (!inputValue.trim() || isLoading) return;\r\n\r\n    const userMessage: ChatMessage = {\r\n      id: Date.now().toString(),\r\n      content: inputValue,\r\n      role: 'user',\r\n      timestamp: new Date()\r\n    };\r\n\r\n    setMessages(prev => [...prev, userMessage]);\r\n    setInputValue('');\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setIsStreaming(true);\r\n    setStreamingMessage('');\r\n\r\n    try {\r\n      const response = await fetch('/api/v1/horizon/chat/stream', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n        },\r\n        body: JSON.stringify({\r\n          query: inputValue,\r\n          context: context,\r\n          max_tokens: maxTokens\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const reader = response.body?.getReader();\r\n      if (!reader) throw new Error('Stream reader not available');\r\n\r\n      let fullResponse = '';\r\n      \r\n      while (true) {\r\n        const { done, value } = await reader.read();\r\n        \r\n        if (done) break;\r\n        \r\n        const chunk = new TextDecoder().decode(value);\r\n        const lines = chunk.split('\\n');\r\n        \r\n        for (const line of lines) {\r\n          if (line.startsWith('data: ')) {\r\n            try {\r\n              const data = JSON.parse(line.slice(6));\r\n              if (data.content) {\r\n                fullResponse += data.content;\r\n                setStreamingMessage(fullResponse);\r\n              }\r\n            } catch (e) {\r\n              // Ignore parsing errors for incomplete chunks\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Add final message\r\n      const assistantMessage: ChatMessage = {\r\n        id: (Date.now() + 1).toString(),\r\n        content: fullResponse,\r\n        role: 'assistant',\r\n        timestamp: new Date(),\r\n        model: 'horizon-beta',\r\n        confidence: 0.85\r\n      };\r\n\r\n      setMessages(prev => [...prev, assistantMessage]);\r\n      setStreamingMessage('');\r\n\r\n      // Call callback if provided\r\n      if (onResponseReceived) {\r\n        onResponseReceived(assistantMessage);\r\n      }\r\n\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Streaming-Fehler');\r\n      console.error('Horizon Beta streaming error:', err);\r\n    } finally {\r\n      setIsLoading(false);\r\n      setIsStreaming(false);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (event: React.KeyboardEvent) => {\r\n    if (event.key === 'Enter' && !event.shiftKey) {\r\n      event.preventDefault();\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  const copyToClipboard = (text: string) => {\r\n    navigator.clipboard.writeText(text);\r\n  };\r\n\r\n  const downloadChat = () => {\r\n    const chatText = messages.map(msg => \r\n      `${msg.role === 'user' ? 'Sie' : 'Horizon Beta'}: ${msg.content}`\r\n    ).join('\\n\\n');\r\n    \r\n    const blob = new Blob([chatText], { type: 'text/plain' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `valeo-chat-${new Date().toISOString().split('T')[0]}.txt`;\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  const clearChat = () => {\r\n    setMessages([]);\r\n    setError(null);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\r\n      {/* Header */}\r\n      <Paper \r\n        elevation={1} \r\n        sx={{ \r\n          p: 2, \r\n          borderBottom: `1px solid ${theme.palette.divider}`,\r\n          backgroundColor: theme.palette.primary.main,\r\n          color: 'white'\r\n        }}\r\n      >\r\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n            <AIIcon />\r\n            <Typography variant=\"h6\">\r\n              Horizon Beta Assistant\r\n            </Typography>\r\n            <Chip \r\n              label=\"VALEO NeuroERP\" \r\n              size=\"small\" \r\n              sx={{ backgroundColor: 'rgba(255,255,255,0.2)', color: 'white' }}\r\n            />\r\n          </Box>\r\n          \r\n          <Box sx={{ display: 'flex', gap: 1 }}>\r\n            <IconButton \r\n              size=\"small\" \r\n              onClick={clearChat}\r\n              sx={{ color: 'white' }}\r\n            >\r\n              <RefreshIcon />\r\n            </IconButton>\r\n            <IconButton \r\n              size=\"small\" \r\n              onClick={downloadChat}\r\n              sx={{ color: 'white' }}\r\n            >\r\n              <DownloadIcon />\r\n            </IconButton>\r\n          </Box>\r\n        </Box>\r\n        \r\n        <Typography variant=\"body2\" sx={{ mt: 1, opacity: 0.9 }}>\r\n          Intelligente Assistenz für VALEO NeuroERP - Landhandel-optimiert\r\n        </Typography>\r\n      </Paper>\r\n\r\n      {/* Messages */}\r\n      <Box \r\n        sx={{ \r\n          flex: 1, \r\n          overflow: 'auto', \r\n          p: 2,\r\n          backgroundColor: theme.palette.grey[50]\r\n        }}\r\n      >\r\n        {messages.length === 0 && (\r\n          <Card sx={{ mb: 2, backgroundColor: theme.palette.primary.light, color: 'white' }}>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Willkommen bei Horizon Beta!\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                Ich bin Ihr KI-Assistent für VALEO NeuroERP. Fragen Sie mich zu:\r\n              </Typography>\r\n              <List dense sx={{ mt: 1 }}>\r\n                <ListItem>\r\n                  <ListItemText \r\n                    primary=\"• Lagerverwaltung und Bestände\" \r\n                    primaryTypographyProps={{ fontSize: '0.9rem' }}\r\n                  />\r\n                </ListItem>\r\n                <ListItem>\r\n                  <ListItemText \r\n                    primary=\"• Personal und Urlaubsverwaltung\" \r\n                    primaryTypographyProps={{ fontSize: '0.9rem' }}\r\n                  />\r\n                </ListItem>\r\n                <ListItem>\r\n                  <ListItemText \r\n                    primary=\"• CRM und Tagesprotokolle\" \r\n                    primaryTypographyProps={{ fontSize: '0.9rem' }}\r\n                  />\r\n                </ListItem>\r\n                <ListItem>\r\n                  <ListItemText \r\n                    primary=\"• Finanzen und Reporting\" \r\n                    primaryTypographyProps={{ fontSize: '0.9rem' }}\r\n                  />\r\n                </ListItem>\r\n              </List>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n\r\n        {messages.map((message) => (\r\n          <Box\r\n            key={message.id}\r\n            sx={{\r\n              display: 'flex',\r\n              justifyContent: message.role === 'user' ? 'flex-end' : 'flex-start',\r\n              mb: 2\r\n            }}\r\n          >\r\n            <Paper\r\n              elevation={1}\r\n              sx={{\r\n                p: 2,\r\n                maxWidth: '70%',\r\n                backgroundColor: message.role === 'user' \r\n                  ? theme.palette.primary.main \r\n                  : 'white',\r\n                color: message.role === 'user' ? 'white' : 'inherit',\r\n                borderRadius: 2\r\n              }}\r\n            >\r\n              <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 1 }}>\r\n                {message.role === 'user' ? <PersonIcon /> : <AIIcon />}\r\n                <Box sx={{ flex: 1 }}>\r\n                  <Typography variant=\"body1\" sx={{ whiteSpace: 'pre-wrap' }}>\r\n                    {message.content}\r\n                  </Typography>\r\n                  \r\n                  {message.suggestions && message.suggestions.length > 0 && (\r\n                    <Box sx={{ mt: 2 }}>\r\n                      <Typography variant=\"caption\" sx={{ opacity: 0.7 }}>\r\n                        Vorschläge:\r\n                      </Typography>\r\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mt: 0.5 }}>\r\n                        {message.suggestions.map((suggestion, index) => (\r\n                          <Chip\r\n                            key={index}\r\n                            label={suggestion}\r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                            sx={{ fontSize: '0.7rem' }}\r\n                          />\r\n                        ))}\r\n                      </Box>\r\n                    </Box>\r\n                  )}\r\n                  \r\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 1 }}>\r\n                    <Typography variant=\"caption\" sx={{ opacity: 0.7 }}>\r\n                      {message.timestamp.toLocaleTimeString()}\r\n                    </Typography>\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={() => copyToClipboard(message.content)}\r\n                      sx={{ color: 'inherit' }}\r\n                    >\r\n                      <CopyIcon fontSize=\"small\" />\r\n                    </IconButton>\r\n                  </Box>\r\n                </Box>\r\n              </Box>\r\n            </Paper>\r\n          </Box>\r\n        ))}\r\n\r\n        {/* Streaming message */}\r\n        {isStreaming && streamingMessage && (\r\n          <Box sx={{ display: 'flex', justifyContent: 'flex-start', mb: 2 }}>\r\n            <Paper\r\n              elevation={1}\r\n              sx={{\r\n                p: 2,\r\n                maxWidth: '70%',\r\n                backgroundColor: 'white',\r\n                borderRadius: 2\r\n              }}\r\n            >\r\n              <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 1 }}>\r\n                <AIIcon />\r\n                <Box sx={{ flex: 1 }}>\r\n                  <Typography variant=\"body1\" sx={{ whiteSpace: 'pre-wrap' }}>\r\n                    {streamingMessage}\r\n                    <Box component=\"span\" sx={{ animation: 'blink 1s infinite' }}>\r\n                      |\r\n                    </Box>\r\n                  </Typography>\r\n                </Box>\r\n              </Box>\r\n            </Paper>\r\n          </Box>\r\n        )}\r\n\r\n        {/* Loading indicator */}\r\n        {isLoading && !isStreaming && (\r\n          <Box sx={{ display: 'flex', justifyContent: 'flex-start', mb: 2 }}>\r\n            <Paper\r\n              elevation={1}\r\n              sx={{\r\n                p: 2,\r\n                backgroundColor: 'white',\r\n                borderRadius: 2\r\n              }}\r\n            >\r\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                <CircularProgress size={20} />\r\n                <Typography variant=\"body2\">\r\n                  Horizon Beta denkt nach...\r\n                </Typography>\r\n              </Box>\r\n            </Paper>\r\n          </Box>\r\n        )}\r\n\r\n        <div ref={messagesEndRef} />\r\n      </Box>\r\n\r\n      {/* Error display */}\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ m: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Input */}\r\n      <Paper \r\n        elevation={2} \r\n        sx={{ \r\n          p: 2, \r\n          borderTop: `1px solid ${theme.palette.divider}`,\r\n          backgroundColor: 'white'\r\n        }}\r\n      >\r\n        <Box sx={{ display: 'flex', gap: 1 }}>\r\n          <TextField\r\n            ref={inputRef}\r\n            fullWidth\r\n            multiline\r\n            maxRows={4}\r\n            value={inputValue}\r\n            onChange={(e) => setInputValue(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n            placeholder=\"Fragen Sie Horizon Beta... (Enter zum Senden, Shift+Enter für neue Zeile)\"\r\n            disabled={isLoading}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={handleSendMessage}\r\n            disabled={!inputValue.trim() || isLoading}\r\n            sx={{ minWidth: 'auto', px: 2 }}\r\n          >\r\n            <SendIcon />\r\n          </Button>\r\n        </Box>\r\n        \r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}>\r\n          <Typography variant=\"caption\" sx={{ opacity: 0.7 }}>\r\n            Horizon Beta • OpenRouter • VALEO NeuroERP 2.0\r\n          </Typography>\r\n          <Typography variant=\"caption\" sx={{ opacity: 0.7 }}>\r\n            {messages.length} Nachrichten\r\n          </Typography>\r\n        </Box>\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default HorizonBetaChat; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\ai\\__tests__\\AIBarcodeDashboard.integration.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'API_BASE_URL' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":38,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { render, screen, waitFor, fireEvent } from '@testing-library/react';\r\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport AIBarcodeDashboard from '../AIBarcodeDashboard';\r\n\r\n// Einfaches Theme für Tests\r\nconst testTheme = createTheme();\r\n\r\n// Mock für Offline-Hooks\r\njest.mock('../../../hooks/useOffline', () => ({\r\n  useOfflineStatus: () => ({\r\n    isOnline: true,\r\n    pendingRequests: 0,\r\n    syncInProgress: false,\r\n    lastSync: Date.now(),\r\n    error: null\r\n  }),\r\n  useOfflineData: () => ({\r\n    data: [],\r\n    loading: false,\r\n    error: null\r\n  })\r\n}));\r\n\r\nconst renderWithProviders = (component: React.ReactElement) => {\r\n  return render(\r\n    <ThemeProvider theme={testTheme}>\r\n      <BrowserRouter>\r\n        {component}\r\n      </BrowserRouter>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\n// Integration-Tests mit echten API-Aufrufen\r\ndescribe('AIBarcodeDashboard Integration Tests', () => {\r\n  const API_BASE_URL = 'http://localhost:8000';\r\n\r\n  beforeAll(() => {\r\n    // Prüfe ob Backend verfügbar ist\r\n    global.fetch = jest.fn();\r\n  });\r\n\r\n  beforeEach(() => {\r\n    (global.fetch as jest.Mock).mockClear();\r\n  });\r\n\r\n  describe('Echte API-Integration', () => {\r\n    it('lädt echte Barcode-Vorschläge vom Backend', async () => {\r\n      // Mock für echte API-Antwort\r\n      const mockSuggestions = [\r\n        {\r\n          id: '1',\r\n          product_name: 'iPhone 15 Pro',\r\n          suggested_barcode: '4001234567890',\r\n          confidence_score: 0.85,\r\n          reasoning: 'Barcode basiert auf erfolgreichen Mustern in der Elektronik-Kategorie',\r\n          category: 'Elektronik',\r\n          similar_products: ['Samsung Galaxy S24', 'MacBook Air M3'],\r\n          market_trends: {\r\n            demand_trend: 'steigend',\r\n            price_trend: 'stabil',\r\n            seasonality: 'hoch'\r\n          },\r\n          created_at: '2024-01-15T10:30:00Z'\r\n        },\r\n        {\r\n          id: '2',\r\n          product_name: 'Harry Potter Box Set',\r\n          suggested_barcode: '9781234567890',\r\n          confidence_score: 0.92,\r\n          reasoning: 'ISBN-13 Format für Bücher',\r\n          category: 'Bücher',\r\n          similar_products: ['Der Herr der Ringe', 'Game of Thrones'],\r\n          market_trends: {\r\n            demand_trend: 'stabil',\r\n            price_trend: 'fallend',\r\n            seasonality: 'niedrig'\r\n          },\r\n          created_at: '2024-01-15T11:00:00Z'\r\n        }\r\n      ];\r\n\r\n      (global.fetch as jest.Mock)\r\n        .mockResolvedValueOnce({\r\n          ok: true,\r\n          json: async () => ({ data: mockSuggestions })\r\n        })\r\n        .mockResolvedValueOnce({\r\n          ok: true,\r\n          json: async () => ({\r\n            data: {\r\n              total_suggestions: 2,\r\n              high_confidence: 1,\r\n              medium_confidence: 1,\r\n              low_confidence: 0,\r\n              categories: [\r\n                { name: 'Elektronik', count: 1 },\r\n                { name: 'Bücher', count: 1 }\r\n              ],\r\n              confidence_trend: [\r\n                { date: '2024-01-15', avg_confidence: 0.885 }\r\n              ],\r\n              top_categories: [\r\n                { category: 'Elektronik', count: 1 },\r\n                { category: 'Bücher', count: 1 }\r\n              ]\r\n            }\r\n          })\r\n        });\r\n\r\n      renderWithProviders(<AIBarcodeDashboard />);\r\n\r\n      // Warte auf das Laden der Daten\r\n      await waitFor(() => {\r\n        expect(screen.getByText('iPhone 15 Pro')).toBeInTheDocument();\r\n      });\r\n\r\n      await waitFor(() => {\r\n        expect(screen.getByText('Harry Potter Box Set')).toBeInTheDocument();\r\n      });\r\n\r\n      // Prüfe API-Aufrufe\r\n      expect(global.fetch).toHaveBeenCalledWith('/api/ai/barcode/suggestions');\r\n      expect(global.fetch).toHaveBeenCalledWith('/api/ai/barcode/stats');\r\n    });\r\n\r\n    it('behandelt API-Fehler korrekt', async () => {\r\n      (global.fetch as jest.Mock).mockRejectedValueOnce(\r\n        new Error('Network error')\r\n      );\r\n\r\n      renderWithProviders(<AIBarcodeDashboard />);\r\n\r\n      // Warte auf Error-Anzeige\r\n      await waitFor(() => {\r\n        expect(screen.getByText(/Unbekannter Fehler beim Laden der Vorschläge/)).toBeInTheDocument();\r\n      });\r\n    });\r\n\r\n    it('filtert Vorschläge nach Kategorie', async () => {\r\n      const mockSuggestions = [\r\n        {\r\n          id: '1',\r\n          product_name: 'iPhone 15 Pro',\r\n          suggested_barcode: '4001234567890',\r\n          confidence_score: 0.85,\r\n          reasoning: 'Test',\r\n          category: 'Elektronik',\r\n          similar_products: [],\r\n          market_trends: {},\r\n          created_at: '2024-01-15T10:30:00Z'\r\n        },\r\n        {\r\n          id: '2',\r\n          product_name: 'Harry Potter Box Set',\r\n          suggested_barcode: '9781234567890',\r\n          confidence_score: 0.92,\r\n          reasoning: 'Test',\r\n          category: 'Bücher',\r\n          similar_products: [],\r\n          market_trends: {},\r\n          created_at: '2024-01-15T11:00:00Z'\r\n        }\r\n      ];\r\n\r\n      (global.fetch as jest.Mock)\r\n        .mockResolvedValueOnce({\r\n          ok: true,\r\n          json: async () => ({ data: mockSuggestions })\r\n        })\r\n        .mockResolvedValueOnce({\r\n          ok: true,\r\n          json: async () => ({ data: {} })\r\n        });\r\n\r\n      renderWithProviders(<AIBarcodeDashboard />);\r\n\r\n      // Warte auf das Laden der Daten\r\n      await waitFor(() => {\r\n        expect(screen.getByText('iPhone 15 Pro')).toBeInTheDocument();\r\n      });\r\n\r\n      // Öffne Kategorie-Filter\r\n      const categoryFilter = screen.getByLabelText('Nach Kategorie filtern');\r\n      fireEvent.mouseDown(categoryFilter);\r\n\r\n      // Wähle \"Elektronik\"\r\n      const elektronikOption = screen.getByText('Elektronik');\r\n      fireEvent.click(elektronikOption);\r\n\r\n      // Prüfe dass nur Elektronik-Produkte angezeigt werden\r\n      await waitFor(() => {\r\n        expect(screen.getByText('iPhone 15 Pro')).toBeInTheDocument();\r\n        expect(screen.queryByText('Harry Potter Box Set')).not.toBeInTheDocument();\r\n      });\r\n    });\r\n\r\n    it('öffnet Detail-Dialog für Vorschlag', async () => {\r\n      const mockSuggestions = [\r\n        {\r\n          id: '1',\r\n          product_name: 'iPhone 15 Pro',\r\n          suggested_barcode: '4001234567890',\r\n          confidence_score: 0.85,\r\n          reasoning: 'Detaillierte Begründung für Barcode-Vorschlag',\r\n          category: 'Elektronik',\r\n          similar_products: ['Samsung Galaxy S24', 'MacBook Air M3'],\r\n          market_trends: {\r\n            demand_trend: 'steigend',\r\n            price_trend: 'stabil',\r\n            seasonality: 'hoch'\r\n          },\r\n          created_at: '2024-01-15T10:30:00Z'\r\n        }\r\n      ];\r\n\r\n      (global.fetch as jest.Mock)\r\n        .mockResolvedValueOnce({\r\n          ok: true,\r\n          json: async () => ({ data: mockSuggestions })\r\n        })\r\n        .mockResolvedValueOnce({\r\n          ok: true,\r\n          json: async () => ({ data: {} })\r\n        });\r\n\r\n      renderWithProviders(<AIBarcodeDashboard />);\r\n\r\n      // Warte auf das Laden der Daten\r\n      await waitFor(() => {\r\n        expect(screen.getByText('iPhone 15 Pro')).toBeInTheDocument();\r\n      });\r\n\r\n      // Klicke auf Details-Button\r\n      const detailsButton = screen.getByLabelText('Details anzeigen');\r\n      fireEvent.click(detailsButton);\r\n\r\n      // Prüfe dass Dialog geöffnet wird\r\n      await waitFor(() => {\r\n        expect(screen.getByText('Barcode-Vorschlag Details')).toBeInTheDocument();\r\n        expect(screen.getByText('Detaillierte Begründung für Barcode-Vorschlag')).toBeInTheDocument();\r\n      });\r\n    });\r\n\r\n    it('führt Modell-Retraining durch', async () => {\r\n      const mockSuggestions = [\r\n        {\r\n          id: '1',\r\n          product_name: 'Test Product',\r\n          suggested_barcode: '1234567890',\r\n          confidence_score: 0.8,\r\n          reasoning: 'Test',\r\n          category: 'Test',\r\n          similar_products: [],\r\n          market_trends: {},\r\n          created_at: '2024-01-15T10:30:00Z'\r\n        }\r\n      ];\r\n\r\n      (global.fetch as jest.Mock)\r\n        .mockResolvedValueOnce({\r\n          ok: true,\r\n          json: async () => ({ data: mockSuggestions })\r\n        })\r\n        .mockResolvedValueOnce({\r\n          ok: true,\r\n          json: async () => ({ data: {} })\r\n        })\r\n        .mockResolvedValueOnce({\r\n          ok: true,\r\n          json: async () => ({ message: 'Modell erfolgreich neu trainiert' })\r\n        });\r\n\r\n      renderWithProviders(<AIBarcodeDashboard />);\r\n\r\n      // Warte auf das Laden der Daten\r\n      await waitFor(() => {\r\n        expect(screen.getByText('Test Product')).toBeInTheDocument();\r\n      });\r\n\r\n      // Klicke auf \"Modell neu laden\"\r\n      const retrainButton = screen.getByText('Modell neu laden');\r\n      fireEvent.click(retrainButton);\r\n\r\n      // Prüfe dass Retraining-Dialog geöffnet wird\r\n      await waitFor(() => {\r\n        expect(screen.getByText('KI-Modell neu laden')).toBeInTheDocument();\r\n      });\r\n\r\n      // Klicke auf \"Neuladen starten\"\r\n      const startRetrainButton = screen.getByText('Neuladen starten');\r\n      fireEvent.click(startRetrainButton);\r\n\r\n      // Prüfe dass Retraining-API aufgerufen wird\r\n      await waitFor(() => {\r\n        expect(global.fetch).toHaveBeenCalledWith('/api/ai/barcode/retrain', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Offline-Funktionalität', () => {\r\n    it('zeigt Offline-Status bei fehlender Verbindung', async () => {\r\n      (global.fetch as jest.Mock).mockRejectedValueOnce(\r\n        new Error('Network error')\r\n      );\r\n\r\n      // Mock Offline-Status\r\n      jest.doMock('../../../hooks/useOffline', () => ({\r\n        useOfflineStatus: () => ({\r\n          isOnline: false,\r\n          pendingRequests: 2,\r\n          syncInProgress: false,\r\n          lastSync: Date.now(),\r\n          error: null\r\n        }),\r\n        useOfflineData: () => ({\r\n          data: [\r\n            {\r\n              id: '1',\r\n              product_name: 'Offline Product',\r\n              suggested_barcode: '1234567890',\r\n              confidence_score: 0.8,\r\n              reasoning: 'Offline data',\r\n              category: 'Test',\r\n              similar_products: [],\r\n              market_trends: {},\r\n              created_at: '2024-01-15T10:30:00Z'\r\n            }\r\n          ],\r\n          loading: false,\r\n          error: null\r\n        })\r\n      }));\r\n\r\n      renderWithProviders(<AIBarcodeDashboard />);\r\n\r\n      // Prüfe Offline-Banner\r\n      await waitFor(() => {\r\n        expect(screen.getByText(/Offline-Modus aktiv/)).toBeInTheDocument();\r\n        expect(screen.getByText(/2 Sync/)).toBeInTheDocument();\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Performance-Tests', () => {\r\n    it('lädt große Datenmengen effizient', async () => {\r\n      // Generiere 100 Test-Vorschläge\r\n      const mockSuggestions = Array.from({ length: 100 }, (_, i) => ({\r\n        id: `${i + 1}`,\r\n        product_name: `Product ${i + 1}`,\r\n        suggested_barcode: `123456789${i.toString().padStart(3, '0')}`,\r\n        confidence_score: 0.5 + (i % 50) / 100,\r\n        reasoning: `Begründung für Produkt ${i + 1}`,\r\n        category: ['Elektronik', 'Bücher', 'Kleidung'][i % 3],\r\n        similar_products: [],\r\n        market_trends: {},\r\n        created_at: '2024-01-15T10:30:00Z'\r\n      }));\r\n\r\n      (global.fetch as jest.Mock)\r\n        .mockResolvedValueOnce({\r\n          ok: true,\r\n          json: async () => ({ data: mockSuggestions })\r\n        })\r\n        .mockResolvedValueOnce({\r\n          ok: true,\r\n          json: async () => ({ data: {} })\r\n        });\r\n\r\n      const startTime = performance.now();\r\n\r\n      renderWithProviders(<AIBarcodeDashboard />);\r\n\r\n      // Warte auf das Laden aller Daten\r\n      await waitFor(() => {\r\n        expect(screen.getByText('Product 100')).toBeInTheDocument();\r\n      });\r\n\r\n      const endTime = performance.now();\r\n      const loadTime = endTime - startTime;\r\n\r\n      // Prüfe dass Ladezeit akzeptabel ist (< 2 Sekunden)\r\n      expect(loadTime).toBeLessThan(2000);\r\n\r\n      console.log(`Ladezeit für 100 Vorschläge: ${loadTime.toFixed(2)}ms`);\r\n    });\r\n  });\r\n}); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\ai\\__tests__\\AIBarcodeDashboard.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\ai\\shared\\ConfidenceIndicator.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1730,1733],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1730,1733],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2610,2613],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2610,2613],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Box, Typography, LinearProgress, Chip } from '@mui/material';\r\nimport { CheckCircle as CheckIcon, Warning as WarningIcon, Error as ErrorIcon } from '@mui/icons-material';\r\n\r\ninterface ConfidenceIndicatorProps {\r\n  confidence: number;\r\n  showPercentage?: boolean;\r\n  showIcon?: boolean;\r\n  size?: 'small' | 'medium' | 'large';\r\n  variant?: 'progress' | 'chip' | 'text';\r\n  className?: string;\r\n}\r\n\r\nexport const ConfidenceIndicator: React.FC<ConfidenceIndicatorProps> = ({\r\n  confidence,\r\n  showPercentage = true,\r\n  showIcon = true,\r\n  size = 'medium',\r\n  variant = 'progress',\r\n  className = ''\r\n}) => {\r\n  const percentage = Math.round(confidence * 100);\r\n  \r\n  const getConfidenceColor = (conf: number) => {\r\n    if (conf >= 0.8) return 'success';\r\n    if (conf >= 0.6) return 'warning';\r\n    return 'error';\r\n  };\r\n\r\n  const getConfidenceIcon = (conf: number) => {\r\n    if (conf >= 0.8) return <CheckIcon />;\r\n    if (conf >= 0.6) return <WarningIcon />;\r\n    return <ErrorIcon />;\r\n  };\r\n\r\n  const getConfidenceLabel = (conf: number) => {\r\n    if (conf >= 0.8) return 'Hoch';\r\n    if (conf >= 0.6) return 'Mittel';\r\n    return 'Niedrig';\r\n  };\r\n\r\n  const getSizeStyles = () => {\r\n    switch (size) {\r\n      case 'small':\r\n        return { height: 8, fontSize: '0.75rem' };\r\n      case 'large':\r\n        return { height: 12, fontSize: '1rem' };\r\n      default:\r\n        return { height: 10, fontSize: '0.875rem' };\r\n    }\r\n  };\r\n\r\n  if (variant === 'chip') {\r\n    return (\r\n      <Chip\r\n        icon={showIcon ? getConfidenceIcon(confidence) : undefined}\r\n        label={showPercentage ? `${percentage}%` : getConfidenceLabel(confidence)}\r\n        color={getConfidenceColor(confidence) as any}\r\n        size={size === 'small' ? 'small' : 'medium'}\r\n        className={className}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (variant === 'text') {\r\n    return (\r\n      <Box className={`flex items-center space-x-1 ${className}`}>\r\n        {showIcon && getConfidenceIcon(confidence)}\r\n        <Typography\r\n          variant={size === 'small' ? 'caption' : 'body2'}\r\n          color={`${getConfidenceColor(confidence)}.main`}\r\n          className=\"font-medium\"\r\n        >\r\n          {showPercentage ? `${percentage}%` : getConfidenceLabel(confidence)}\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  // Default: progress variant\r\n  return (\r\n    <Box className={`flex items-center space-x-2 ${className}`}>\r\n      <Box className=\"flex-1\">\r\n        <LinearProgress\r\n          variant=\"determinate\"\r\n          value={percentage}\r\n          color={getConfidenceColor(confidence) as any}\r\n          sx={{ height: getSizeStyles().height, borderRadius: 1 }}\r\n        />\r\n      </Box>\r\n      {showIcon && getConfidenceIcon(confidence)}\r\n      {showPercentage && (\r\n        <Typography\r\n          variant={size === 'small' ? 'caption' : 'body2'}\r\n          color=\"textSecondary\"\r\n          sx={{ fontSize: getSizeStyles().fontSize }}\r\n        >\r\n          {percentage}%\r\n        </Typography>\r\n      )}\r\n    </Box>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\ai\\shared\\SuggestionTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Chip' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":83,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":87},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ConfidenceIndicator' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'loading' is assigned a value but never used. Allowed unused args must match /^_/u.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2011,2014],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2011,2014],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Chip, IconButton, Tooltip } from '@mui/material';\r\nimport { Visibility as ViewIcon, Settings as SettingsIcon } from '@mui/icons-material';\r\nimport { ConfidenceIndicator } from './ConfidenceIndicator';\r\n\r\nexport interface SuggestionTableColumn<T> {\r\n  key: keyof T | string;\r\n  label: string;\r\n  render?: (row: T) => React.ReactNode;\r\n  align?: 'left' | 'center' | 'right';\r\n  width?: string | number;\r\n}\r\n\r\ninterface SuggestionTableProps<T> {\r\n  data: T[];\r\n  columns: SuggestionTableColumn<T>[];\r\n  onView?: (row: T) => void;\r\n  onOptimize?: (row: T) => void;\r\n  loading?: boolean;\r\n  emptyText?: string;\r\n  className?: string;\r\n}\r\n\r\nexport function SuggestionTable<T extends { id: string }>({\r\n  data,\r\n  columns,\r\n  onView,\r\n  onOptimize,\r\n  loading = false,\r\n  emptyText = 'Keine Vorschläge gefunden',\r\n  className = ''\r\n}: SuggestionTableProps<T>) {\r\n  return (\r\n    <TableContainer component={Paper} className={className}>\r\n      <Table size=\"small\">\r\n        <TableHead>\r\n          <TableRow>\r\n            {columns.map((col) => (\r\n              <TableCell key={col.key as string} align={col.align || 'left'} style={col.width ? { width: col.width } : {}}>\r\n                {col.label}\r\n              </TableCell>\r\n            ))}\r\n            {(onView || onOptimize) && <TableCell align=\"center\">Aktionen</TableCell>}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {data.length === 0 && (\r\n            <TableRow>\r\n              <TableCell colSpan={columns.length + ((onView || onOptimize) ? 1 : 0)} align=\"center\">\r\n                {emptyText}\r\n              </TableCell>\r\n            </TableRow>\r\n          )}\r\n          {data.map((row) => (\r\n            <TableRow key={row.id} hover>\r\n              {columns.map((col) => (\r\n                <TableCell key={col.key as string} align={col.align || 'left'}>\r\n                  {col.render ? col.render(row) : (row as any)[col.key]}\r\n                </TableCell>\r\n              ))}\r\n              {(onView || onOptimize) && (\r\n                <TableCell align=\"center\">\r\n                  <div className=\"flex gap-1 justify-center\">\r\n                    {onView && (\r\n                      <Tooltip title=\"Details anzeigen\">\r\n                        <IconButton size=\"small\" onClick={() => onView(row)}>\r\n                          <ViewIcon />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                    )}\r\n                    {onOptimize && (\r\n                      <Tooltip title=\"Optimieren\">\r\n                        <IconButton size=\"small\" onClick={() => onOptimize(row)}>\r\n                          <SettingsIcon />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                    )}\r\n                  </div>\r\n                </TableCell>\r\n              )}\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\auth\\LoginForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\barcode\\BarcodeScanner.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'startScanning'. Either include it or remove the dependency array.","line":95,"column":6,"nodeType":"ArrayExpression","endLine":95,"endColumn":38,"suggestions":[{"desc":"Update the dependencies array to be: [onDetected, autoStart, startScanning, onError]","fix":{"range":[2796,2828],"text":"[onDetected, autoStart, startScanning, onError]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useEffect, useState, useCallback } from 'react';\r\nimport { Card, Typography, Button, Alert, Box, CircularProgress } from '@mui/material';\r\nimport { CameraAlt as CameraIcon, QrCode as QrCodeIcon } from '@mui/icons-material';\r\nimport Quagga from 'quagga';\r\n\r\ninterface BarcodeScannerProps {\r\n  onBarcodeDetected: (barcode: string) => void;\r\n  onError?: (error: string) => void;\r\n  autoStart?: boolean;\r\n  className?: string;\r\n}\r\n\r\ninterface ScanResult {\r\n  codeResult: {\r\n    code: string;\r\n    format: string;\r\n  };\r\n}\r\n\r\nexport const BarcodeScanner: React.FC<BarcodeScannerProps> = ({\r\n  onBarcodeDetected,\r\n  onError,\r\n  autoStart = false,\r\n  className = ''\r\n}) => {\r\n  const scannerRef = useRef<HTMLDivElement>(null);\r\n  const [isScanning, setIsScanning] = useState(false);\r\n  const [isInitialized, setIsInitialized] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [lastScannedCode, setLastScannedCode] = useState<string | null>(null);\r\n\r\n  // Barcode-Erkennung Callback\r\n  const onDetected = useCallback((result: ScanResult) => {\r\n    const code = result.codeResult.code;\r\n    if (code && code !== lastScannedCode) {\r\n      setLastScannedCode(code);\r\n      onBarcodeDetected(code);\r\n      \r\n      // Kurze Pause nach erfolgreichem Scan\r\n      setTimeout(() => {\r\n        setLastScannedCode(null);\r\n      }, 2000);\r\n    }\r\n  }, [onBarcodeDetected, lastScannedCode]);\r\n\r\n  // Scanner initialisieren\r\n  const initializeScanner = useCallback(async () => {\r\n    if (!scannerRef.current) return;\r\n\r\n    try {\r\n      setError(null);\r\n      setIsInitialized(false);\r\n\r\n      await Quagga.init({\r\n        inputStream: {\r\n          name: \"Live\",\r\n          type: \"LiveStream\",\r\n          target: scannerRef.current,\r\n          constraints: {\r\n            width: { min: 640, ideal: 1280, max: 1920 },\r\n            height: { min: 480, ideal: 720, max: 1080 },\r\n            facingMode: \"environment\" // Rückkamera bevorzugen\r\n          },\r\n        },\r\n        locator: {\r\n          patchSize: \"medium\",\r\n          halfSample: true\r\n        },\r\n        numOfWorkers: navigator.hardwareConcurrency || 4,\r\n        frequency: 10,\r\n        decoder: {\r\n          readers: [\r\n            \"ean_reader\",\r\n            \"ean_8_reader\",\r\n            \"code_128_reader\",\r\n            \"code_39_reader\",\r\n            \"upc_reader\",\r\n            \"upc_e_reader\"\r\n          ]\r\n        },\r\n        locate: true\r\n      });\r\n\r\n      Quagga.onDetected(onDetected);\r\n      setIsInitialized(true);\r\n      \r\n      if (autoStart) {\r\n        startScanning();\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Scanner-Initialisierung fehlgeschlagen';\r\n      setError(errorMessage);\r\n      onError?.(errorMessage);\r\n    }\r\n  }, [onDetected, autoStart, onError]);\r\n\r\n  // Scanner starten\r\n  const startScanning = useCallback(async () => {\r\n    if (!isInitialized) {\r\n      await initializeScanner();\r\n    }\r\n    \r\n    try {\r\n      await Quagga.start();\r\n      setIsScanning(true);\r\n      setError(null);\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Scanner konnte nicht gestartet werden';\r\n      setError(errorMessage);\r\n      onError?.(errorMessage);\r\n    }\r\n  }, [isInitialized, initializeScanner, onError]);\r\n\r\n  // Scanner stoppen\r\n  const stopScanning = useCallback(() => {\r\n    Quagga.stop();\r\n    setIsScanning(false);\r\n  }, []);\r\n\r\n  // Komponente aufräumen\r\n  useEffect(() => {\r\n    return () => {\r\n      if (isScanning) {\r\n        Quagga.stop();\r\n      }\r\n    };\r\n  }, [isScanning]);\r\n\r\n  // Initialisierung beim Mount\r\n  useEffect(() => {\r\n    if (autoStart) {\r\n      initializeScanner();\r\n    }\r\n  }, [autoStart, initializeScanner]);\r\n\r\n  return (\r\n    <Card className={`p-4 ${className}`}>\r\n      <Box className=\"flex items-center justify-between mb-4\">\r\n        <Typography variant=\"h6\" className=\"flex items-center gap-2\">\r\n          <QrCodeIcon />\r\n          Barcode-Scanner\r\n        </Typography>\r\n        \r\n        <Box className=\"flex gap-2\">\r\n          {!isScanning ? (\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<CameraIcon />}\r\n              onClick={startScanning}\r\n              disabled={!isInitialized && !autoStart}\r\n            >\r\n              Scanner starten\r\n            </Button>\r\n          ) : (\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"secondary\"\r\n              onClick={stopScanning}\r\n            >\r\n              Scanner stoppen\r\n            </Button>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n\r\n      {error && (\r\n        <Alert severity=\"error\" className=\"mb-4\">\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {lastScannedCode && (\r\n        <Alert severity=\"success\" className=\"mb-4\">\r\n          Barcode erkannt: <strong>{lastScannedCode}</strong>\r\n        </Alert>\r\n      )}\r\n\r\n      <Box className=\"relative\">\r\n        <div\r\n          ref={scannerRef}\r\n          className=\"w-full h-64 bg-gray-100 rounded-lg overflow-hidden border-2 border-gray-300\"\r\n        >\r\n          {!isScanning && (\r\n            <Box className=\"flex items-center justify-center h-full\">\r\n              <Box className=\"text-center\">\r\n                <CameraIcon className=\"text-4xl text-gray-400 mb-2\" />\r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                  Scanner bereit - Klicken Sie auf \"Scanner starten\"\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          )}\r\n        </div>\r\n\r\n        {isScanning && (\r\n          <Box className=\"absolute inset-0 flex items-center justify-center\">\r\n            <CircularProgress size={40} />\r\n          </Box>\r\n        )}\r\n      </Box>\r\n\r\n      <Box className=\"mt-4\">\r\n        <Typography variant=\"body2\" color=\"textSecondary\">\r\n          Unterstützte Formate: EAN-13, EAN-8, Code 128, Code 39, UPC\r\n        </Typography>\r\n      </Box>\r\n    </Card>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\barcode\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\common\\TabPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'other' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":15,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Box, BoxProps } from '@mui/material';\r\n\r\ninterface TabPanelProps extends BoxProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\n/**\r\n * TabPanel Komponente für Tab-Navigation\r\n * Zeigt den Inhalt des aktiven Tabs an\r\n */\r\nexport const TabPanel: React.FC<TabPanelProps> = (props) => {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n    >\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TabPanel; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\crm\\CRMContextMenu.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MoreIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":24,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1048,1051],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1048,1051],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentSubTab' is defined but never used. Allowed unused args must match /^_/u.","line":51,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1313,1316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1313,1316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1389,1392],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1389,1392],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { \r\n  Menu, \r\n  MenuItem, \r\n  ListItemIcon, \r\n  ListItemText, \r\n  Divider,\r\n  Typography,\r\n  Box\r\n} from '@mui/material';\r\nimport {\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  ContentCopy as DuplicateIcon,\r\n  Visibility as ViewIcon,\r\n  Download as DownloadIcon,\r\n  Share as ShareIcon,\r\n  Print as PrintIcon,\r\n  Email as EmailIcon,\r\n  Phone as PhoneIcon,\r\n  WhatsApp as WhatsAppIcon,\r\n  Schedule as ScheduleIcon,\r\n  Add as AddIcon,\r\n  MoreVert as MoreIcon,\r\n  LocalOffer as OfferIcon,\r\n  ShoppingCart as OrderIcon,\r\n  Receipt as InvoiceIcon,\r\n  AttachFile as DocumentIcon,\r\n  PersonAdd as ContactIcon,\r\n  Analytics as AnalyticsIcon,\r\n  Assessment as ReportIcon,\r\n  Settings as SettingsIcon\r\n} from '@mui/icons-material';\r\nimport { \r\n  Customer, \r\n  CRMMainTab, \r\n  CRMSubTab,\r\n  CRMRibbonAction \r\n} from '../../types/crm';\r\n\r\ninterface CRMContextMenuProps {\r\n  customer?: Customer | null;\r\n  currentTab: CRMMainTab;\r\n  currentSubTab: CRMSubTab;\r\n  onAction?: (action: CRMRibbonAction, context?: any) => void;\r\n}\r\n\r\nconst CRMContextMenu: React.FC<CRMContextMenuProps> = ({\r\n  customer,\r\n  currentTab,\r\n  currentSubTab,\r\n  onAction\r\n}) => {\r\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n  const [contextData, setContextData] = useState<any>(null);\r\n\r\n  const handleContextMenu = (event: React.MouseEvent, data?: any) => {\r\n    event.preventDefault();\r\n    setAnchorEl(event.currentTarget as HTMLElement);\r\n    setContextData(data);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n    setContextData(null);\r\n  };\r\n\r\n  const handleAction = (action: CRMRibbonAction) => {\r\n    onAction?.(action, contextData);\r\n    handleClose();\r\n  };\r\n\r\n  // Kontext-Menü-Konfiguration basierend auf aktuellem Tab\r\n  const getContextMenuItems = () => {\r\n    const baseItems = [\r\n      {\r\n        label: 'Bearbeiten',\r\n        icon: <EditIcon />,\r\n        action: CRMRibbonAction.EDIT,\r\n        enabled: !!customer\r\n      },\r\n      {\r\n        label: 'Anzeigen',\r\n        icon: <ViewIcon />,\r\n        action: CRMRibbonAction.DETAIL_VIEW,\r\n        enabled: !!customer\r\n      },\r\n      {\r\n        label: 'Drucken',\r\n        icon: <PrintIcon />,\r\n        action: CRMRibbonAction.PRINT,\r\n        enabled: !!customer\r\n      }\r\n    ];\r\n\r\n    // Tab-spezifische Menüpunkte\r\n    switch (currentTab) {\r\n             case CRMMainTab.GENERAL:\r\n         baseItems.push(\r\n           {\r\n             label: 'Kontakt aufnehmen',\r\n             icon: <PhoneIcon />,\r\n             action: 'CONTACT_CUSTOMER' as CRMRibbonAction,\r\n             enabled: !!customer?.phone\r\n           },\r\n           {\r\n             label: 'E-Mail senden',\r\n             icon: <EmailIcon />,\r\n             action: 'SEND_EMAIL' as CRMRibbonAction,\r\n             enabled: !!customer?.email\r\n           },\r\n           {\r\n             label: 'WhatsApp senden',\r\n             icon: <WhatsAppIcon />,\r\n             action: CRMRibbonAction.SEND_WHATSAPP,\r\n             enabled: !!customer?.whatsapp\r\n           },\r\n           {\r\n             label: 'Termin planen',\r\n             icon: <ScheduleIcon />,\r\n             action: 'SCHEDULE_MEETING' as CRMRibbonAction,\r\n             enabled: !!customer\r\n           }\r\n         );\r\n        break;\r\n\r\n      case CRMMainTab.CONTACTS:\r\n        baseItems.push(\r\n          {\r\n            label: 'Neuen Kontakt hinzufügen',\r\n            icon: <ContactIcon />,\r\n            action: CRMRibbonAction.ADD_CONTACT,\r\n            enabled: !!customer\r\n          },\r\n          {\r\n            label: 'Kontakte exportieren',\r\n            icon: <DownloadIcon />,\r\n            action: CRMRibbonAction.EXPORT,\r\n            enabled: !!customer\r\n          }\r\n        );\r\n        break;\r\n\r\n      case CRMMainTab.SALES:\r\n        baseItems.push(\r\n          {\r\n            label: 'Neues Angebot erstellen',\r\n            icon: <OfferIcon />,\r\n            action: CRMRibbonAction.ADD_OFFER,\r\n            enabled: !!customer\r\n          },\r\n          {\r\n            label: 'Neuen Auftrag erstellen',\r\n            icon: <OrderIcon />,\r\n            action: CRMRibbonAction.ADD_ORDER,\r\n            enabled: !!customer\r\n          },\r\n          {\r\n            label: 'Vertriebsanalyse',\r\n            icon: <AnalyticsIcon />,\r\n            action: CRMRibbonAction.ANALYZE,\r\n            enabled: !!customer\r\n          }\r\n        );\r\n        break;\r\n\r\n      case CRMMainTab.ORDERS:\r\n        baseItems.push(\r\n          {\r\n            label: 'Neuen Auftrag erstellen',\r\n            icon: <OrderIcon />,\r\n            action: CRMRibbonAction.ADD_ORDER,\r\n            enabled: !!customer\r\n          },\r\n          {\r\n            label: 'Auftragsbericht',\r\n            icon: <ReportIcon />,\r\n            action: CRMRibbonAction.REPORT,\r\n            enabled: !!customer\r\n          }\r\n        );\r\n        break;\r\n\r\n      case CRMMainTab.INVOICES:\r\n        baseItems.push(\r\n          {\r\n            label: 'Neue Rechnung erstellen',\r\n            icon: <InvoiceIcon />,\r\n            action: 'CREATE_INVOICE' as CRMRibbonAction,\r\n            enabled: !!customer\r\n          },\r\n          {\r\n            label: 'Zahlungserinnerung',\r\n            icon: <EmailIcon />,\r\n            action: 'SEND_REMINDER' as CRMRibbonAction,\r\n            enabled: !!customer\r\n          }\r\n        );\r\n        break;\r\n\r\n      case CRMMainTab.DOCUMENTS:\r\n        baseItems.push(\r\n          {\r\n            label: 'Dokument hinzufügen',\r\n            icon: <DocumentIcon />,\r\n            action: CRMRibbonAction.ADD_DOCUMENT,\r\n            enabled: !!customer\r\n          },\r\n          {\r\n            label: 'Dokumente teilen',\r\n            icon: <ShareIcon />,\r\n            action: 'SHARE_DOCUMENTS' as CRMRibbonAction,\r\n            enabled: !!customer\r\n          },\r\n          {\r\n            label: 'Dokumente herunterladen',\r\n            icon: <DownloadIcon />,\r\n            action: CRMRibbonAction.EXPORT,\r\n            enabled: !!customer\r\n          }\r\n        );\r\n        break;\r\n\r\n      case CRMMainTab.ANALYSIS:\r\n        baseItems.push(\r\n          {\r\n            label: 'Analyse exportieren',\r\n            icon: <DownloadIcon />,\r\n            action: CRMRibbonAction.EXPORT,\r\n            enabled: !!customer\r\n          },\r\n          {\r\n            label: 'Bericht erstellen',\r\n            icon: <ReportIcon />,\r\n            action: CRMRibbonAction.REPORT,\r\n            enabled: !!customer\r\n          }\r\n        );\r\n        break;\r\n\r\n      case CRMMainTab.SUPPLIERS:\r\n        baseItems.push(\r\n          {\r\n            label: 'Neuen Lieferanten hinzufügen',\r\n            icon: <AddIcon />,\r\n            action: 'ADD_SUPPLIER' as CRMRibbonAction,\r\n            enabled: !!customer\r\n          },\r\n          {\r\n            label: 'Lieferantenanalyse',\r\n            icon: <AnalyticsIcon />,\r\n            action: CRMRibbonAction.ANALYZE,\r\n            enabled: !!customer\r\n          }\r\n        );\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n    // Allgemeine Aktionen am Ende\r\n    baseItems.push(\r\n      {\r\n        label: 'Duplizieren',\r\n        icon: <DuplicateIcon />,\r\n        action: CRMRibbonAction.DUPLICATE,\r\n        enabled: !!customer\r\n      },\r\n      {\r\n        label: 'Löschen',\r\n        icon: <DeleteIcon />,\r\n        action: CRMRibbonAction.DELETE,\r\n        enabled: !!customer\r\n      }\r\n    );\r\n\r\n    return baseItems;\r\n  };\r\n\r\n  const menuItems = getContextMenuItems();\r\n\r\n  return (\r\n    <>\r\n      {/* Kontext-Menü-Trigger (versteckt, wird über onContextMenu aufgerufen) */}\r\n      <Box\r\n        onContextMenu={(e) => handleContextMenu(e)}\r\n        className=\"absolute inset-0 pointer-events-none\"\r\n      />\r\n\r\n      {/* Kontext-Menü */}\r\n      <Menu\r\n        anchorEl={anchorEl}\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'right',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'right',\r\n        }}\r\n        className=\"min-w-48\"\r\n      >\r\n        {/* Kunden-Info Header */}\r\n        {customer && (\r\n          <>\r\n            <Box className=\"px-4 py-2 bg-gray-50 border-b\">\r\n              <Typography variant=\"subtitle2\" className=\"font-medium text-gray-800\">\r\n                {customer.name}\r\n              </Typography>\r\n              <Typography variant=\"caption\" className=\"text-gray-500\">\r\n                {customer.customerNumber}\r\n              </Typography>\r\n            </Box>\r\n            <Divider />\r\n          </>\r\n        )}\r\n\r\n        {/* Menüpunkte */}\r\n        {menuItems.map((item, index) => (\r\n          <MenuItem\r\n            key={index}\r\n            onClick={() => handleAction(item.action)}\r\n            disabled={!item.enabled}\r\n            className={`${item.enabled ? 'text-gray-700' : 'text-gray-400'}`}\r\n          >\r\n            <ListItemIcon className={item.enabled ? 'text-gray-600' : 'text-gray-400'}>\r\n              {item.icon}\r\n            </ListItemIcon>\r\n            <ListItemText primary={item.label} />\r\n          </MenuItem>\r\n        ))}\r\n\r\n        {/* Einstellungen */}\r\n        <Divider />\r\n        <MenuItem\r\n          onClick={() => handleAction(CRMRibbonAction.SETTINGS)}\r\n          className=\"text-gray-700\"\r\n        >\r\n          <ListItemIcon className=\"text-gray-600\">\r\n            <SettingsIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Einstellungen\" />\r\n        </MenuItem>\r\n      </Menu>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CRMContextMenu; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\crm\\CRMMainView.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CustomerWhatsAppHistoryTab' is defined but never used. Allowed unused vars must match /^_/u.","line":29,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getCurrentTab' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":270,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":270,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Tabs,\r\n  Tab,\r\n  Typography,\r\n  Paper,\r\n  Alert,\r\n  CircularProgress,\r\n  Button,\r\n  IconButton,\r\n  Chip\r\n} from '@mui/material';\r\nimport { ArrowBack as ArrowBackIcon } from '@mui/icons-material';\r\nimport { CRMMainTab, CRMSubTab, CRMTabConfig, Customer, CustomerSegment } from '../../types/crm';\r\nimport { useCustomer } from '../../hooks/useCRM';\r\n\r\n// Tab Components\r\nimport CustomerGeneralTab from './tabs/CustomerGeneralTab';\r\nimport CustomerContactsTab from './tabs/CustomerContactsTab';\r\nimport CustomerSalesTab from './tabs/CustomerSalesTab';\r\nimport CustomerOrdersTab from './tabs/CustomerOrdersTab';\r\nimport CustomerInvoicesTab from './tabs/CustomerInvoicesTab';\r\nimport CustomerDocumentsTab from './tabs/CustomerDocumentsTab';\r\nimport CustomerAnalysisTab from './tabs/CustomerAnalysisTab';\r\nimport CustomerDirectBusinessTab from './tabs/CustomerDirectBusinessTab';\r\nimport CustomerExternalStocksTab from './tabs/CustomerExternalStocksTab';\r\nimport CustomerCommunicationsTab from './tabs/CustomerCommunicationsTab';\r\nimport CustomerWhatsAppHistoryTab from './tabs/CustomerWhatsAppHistoryTab';\r\nimport { CustomerWhatsAppWebTab } from './tabs/CustomerWhatsAppWebTab';\r\nimport SupplierManagementTab from './tabs/SupplierManagementTab';\r\n\r\n// Icons\r\nimport PersonIcon from '@mui/icons-material/Person';\r\nimport ContactsIcon from '@mui/icons-material/Contacts';\r\nimport TrendingUpIcon from '@mui/icons-material/TrendingUp';\r\nimport ShoppingCartIcon from '@mui/icons-material/ShoppingCart';\r\nimport ReceiptIcon from '@mui/icons-material/Receipt';\r\nimport ChatIcon from '@mui/icons-material/Chat';\r\nimport DescriptionIcon from '@mui/icons-material/Description';\r\nimport AnalyticsIcon from '@mui/icons-material/Analytics';\r\nimport BusinessIcon from '@mui/icons-material/Business';\r\nimport InventoryIcon from '@mui/icons-material/Inventory';\r\nimport LocalShippingIcon from '@mui/icons-material/LocalShipping';\r\nimport WhatsAppIcon from '@mui/icons-material/WhatsApp';\r\n\r\nimport CRMRibbon from './CRMRibbon';\r\nimport CRMContextMenu from './CRMContextMenu';\r\n\r\ninterface CRMMainViewProps {\r\n  customerId?: string;\r\n  initialTab?: CRMMainTab;\r\n  initialSubTab?: CRMSubTab;\r\n  onCustomerChange?: (customer: Customer) => void;\r\n  onTabChange?: (mainTab: CRMMainTab, subTab: CRMSubTab) => void;\r\n  onBack?: () => void;\r\n}\r\n\r\nconst CRMMainView: React.FC<CRMMainViewProps> = ({\r\n  customerId,\r\n  initialTab = CRMMainTab.GENERAL,\r\n  initialSubTab = CRMSubTab.BASIC_INFO,\r\n  onCustomerChange,\r\n  onTabChange,\r\n  onBack\r\n}) => {\r\n  const [currentMainTab, setCurrentMainTab] = useState<CRMMainTab>(initialTab);\r\n  const [currentSubTab, setCurrentSubTab] = useState<CRMSubTab>(initialSubTab);\r\n\r\n  // API Hook für Kundendaten\r\n  const { \r\n    data: customer, \r\n    isLoading, \r\n    error, \r\n    refetch \r\n  } = useCustomer(customerId || '');\r\n\r\n  // Tab-Konfiguration\r\n  const tabConfig: CRMTabConfig[] = [\r\n    {\r\n      id: CRMMainTab.GENERAL,\r\n      label: 'Allgemein',\r\n      icon: <PersonIcon />,\r\n      component: CustomerGeneralTab,\r\n      subTabs: [],\r\n      isEnabled: true,\r\n      isVisible: true,\r\n      order: 1\r\n    },\r\n    {\r\n      id: CRMMainTab.CONTACTS,\r\n      label: 'Kontakte',\r\n      icon: <ContactsIcon />,\r\n      component: CustomerContactsTab,\r\n      subTabs: [],\r\n      isEnabled: true,\r\n      isVisible: true,\r\n      order: 2\r\n    },\r\n    {\r\n      id: CRMMainTab.SALES,\r\n      label: 'Vertrieb',\r\n      icon: <TrendingUpIcon />,\r\n      component: CustomerSalesTab,\r\n      subTabs: [],\r\n      isEnabled: true,\r\n      isVisible: true,\r\n      order: 3\r\n    },\r\n    {\r\n      id: CRMMainTab.ORDERS,\r\n      label: 'Aufträge',\r\n      icon: <ShoppingCartIcon />,\r\n      component: CustomerOrdersTab,\r\n      subTabs: [],\r\n      isEnabled: true,\r\n      isVisible: true,\r\n      order: 4\r\n    },\r\n    {\r\n      id: CRMMainTab.INVOICES,\r\n      label: 'Rechnungen',\r\n      icon: <ReceiptIcon />,\r\n      component: CustomerInvoicesTab,\r\n      subTabs: [],\r\n      isEnabled: true,\r\n      isVisible: true,\r\n      order: 5\r\n    },\r\n    {\r\n      id: CRMMainTab.COMMUNICATIONS,\r\n      label: 'Kommunikation',\r\n      icon: <ChatIcon />,\r\n      component: CustomerCommunicationsTab,\r\n      subTabs: [\r\n        { id: CRMSubTab.EMAIL, label: 'E-Mail' },\r\n        { id: CRMSubTab.PHONE, label: 'Telefon' },\r\n        { id: CRMSubTab.WHATSAPP_HISTORY, label: 'WhatsApp' },\r\n        { id: CRMSubTab.MEETINGS, label: 'Termine' }\r\n      ],\r\n      isEnabled: true,\r\n      isVisible: true,\r\n      order: 6\r\n    },\r\n    {\r\n      id: CRMMainTab.DOCUMENTS,\r\n      label: 'Dokumente',\r\n      icon: <DescriptionIcon />,\r\n      component: CustomerDocumentsTab,\r\n      subTabs: [],\r\n      isEnabled: true,\r\n      isVisible: true,\r\n      order: 7\r\n    },\r\n    {\r\n      id: CRMMainTab.ANALYSIS,\r\n      label: 'Analyse',\r\n      icon: <AnalyticsIcon />,\r\n      component: CustomerAnalysisTab,\r\n      subTabs: [],\r\n      isEnabled: true,\r\n      isVisible: true,\r\n      order: 8\r\n    },\r\n    {\r\n      id: CRMMainTab.DIRECT_BUSINESS,\r\n      label: 'Streckengeschäft',\r\n      icon: <BusinessIcon />,\r\n      component: CustomerDirectBusinessTab,\r\n      subTabs: [],\r\n      isEnabled: true,\r\n      isVisible: true,\r\n      order: 9\r\n    },\r\n    {\r\n      id: CRMMainTab.EXTERNAL_STOCKS,\r\n      label: 'Fremdbestände',\r\n      icon: <InventoryIcon />,\r\n      component: CustomerExternalStocksTab,\r\n      subTabs: [],\r\n      isEnabled: true,\r\n      isVisible: true,\r\n      order: 10\r\n    },\r\n    {\r\n      id: CRMMainTab.SUPPLIERS,\r\n      label: 'Lieferanten',\r\n      icon: <LocalShippingIcon />,\r\n      component: SupplierManagementTab,\r\n      subTabs: [],\r\n      isEnabled: true,\r\n      isVisible: true,\r\n      order: 11\r\n    },\r\n    {\r\n      id: CRMMainTab.WHATSAPP_WEB,\r\n      label: 'WhatsApp Web',\r\n      icon: <WhatsAppIcon />,\r\n      component: CustomerWhatsAppWebTab,\r\n      subTabs: [],\r\n      isEnabled: true,\r\n      isVisible: true,\r\n      order: 12\r\n    }\r\n  ];\r\n\r\n  // Sortiere Tabs nach Reihenfolge\r\n  const sortedTabs = tabConfig.sort((a, b) => (a.order || 0) - (b.order || 0));\r\n\r\n  const handleMainTabChange = (event: React.SyntheticEvent, newValue: CRMMainTab) => {\r\n    setCurrentMainTab(newValue);\r\n    // Setze den ersten verfügbaren Sub-Tab\r\n    const tab = sortedTabs.find(t => t.id === newValue);\r\n    if (tab && tab.subTabs.length > 0) {\r\n      setCurrentSubTab(tab.subTabs[0].id);\r\n    }\r\n    onTabChange?.(newValue, currentSubTab);\r\n  };\r\n\r\n  const handleSubTabChange = (subTab: CRMSubTab) => {\r\n    setCurrentSubTab(subTab);\r\n    onTabChange?.(currentMainTab, subTab);\r\n  };\r\n\r\n  const renderTabContent = () => {\r\n    if (isLoading) {\r\n      return (\r\n        <Box className=\"flex justify-center items-center h-64\">\r\n          <CircularProgress />\r\n        </Box>\r\n      );\r\n    }\r\n\r\n    if (error) {\r\n      return (\r\n        <Alert severity=\"error\" className=\"m-4\">\r\n          Fehler beim Laden der Kundendaten: {error.message}\r\n        </Alert>\r\n      );\r\n    }\r\n\r\n    if (!customer) {\r\n      return (\r\n        <Alert severity=\"warning\" className=\"m-4\">\r\n          Keine Kundendaten gefunden.\r\n        </Alert>\r\n      );\r\n    }\r\n\r\n    const currentTab = sortedTabs.find(tab => tab.id === currentMainTab);\r\n    if (!currentTab) {\r\n      return (\r\n        <Alert severity=\"error\" className=\"m-4\">\r\n          Tab nicht gefunden.\r\n        </Alert>\r\n      );\r\n    }\r\n\r\n    const TabComponent = currentTab.component;\r\n    return (\r\n      <TabComponent \r\n        customer={customer}\r\n        currentSubTab={currentSubTab}\r\n        onSubTabChange={handleSubTabChange}\r\n        onCustomerChange={onCustomerChange}\r\n      />\r\n    );\r\n  };\r\n\r\n  const getCurrentTab = () => sortedTabs.find(tab => tab.id === currentMainTab);\r\n\r\n  return (\r\n    <Box className=\"h-full flex flex-col bg-gray-50\">\r\n      {/* Header */}\r\n      <Paper className=\"p-4 shadow-sm\">\r\n        <Box className=\"flex items-center justify-between mb-4\">\r\n          <Box className=\"flex items-center\">\r\n            {onBack && (\r\n              <IconButton onClick={onBack} className=\"mr-2\">\r\n                <ArrowBackIcon />\r\n              </IconButton>\r\n            )}\r\n            <Box>\r\n              <Typography variant=\"h5\" className=\"text-gray-800\">\r\n                {customer?.name || 'Kunde wird geladen...'}\r\n              </Typography>\r\n              <Typography variant=\"body2\" className=\"text-gray-600\">\r\n                {customer?.customerNumber && `Kundennummer: ${customer.customerNumber}`}\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n          <Box className=\"flex items-center gap-2\">\r\n            {customer && (\r\n              <>\r\n                <Chip\r\n                  label={customer.status === 'active' ? 'Aktiv' : customer.status === 'inactive' ? 'Inaktiv' : 'Interessent'}\r\n                  color={customer.status === 'active' ? 'success' : customer.status === 'inactive' ? 'error' : 'warning'}\r\n                  size=\"small\"\r\n                />\r\n                <Chip\r\n                  label={customer.customerSegment === CustomerSegment.PREMIUM ? 'Premium' : \r\n                         customer.customerSegment === CustomerSegment.REGULAR ? 'Standard' :\r\n                         customer.customerSegment === CustomerSegment.BASIC ? 'Basic' :\r\n                         customer.customerSegment === CustomerSegment.PROSPECT ? 'Interessent' : 'Inaktiv'}\r\n                  color={customer.customerSegment === CustomerSegment.PREMIUM ? 'primary' : \r\n                         customer.customerSegment === CustomerSegment.REGULAR ? 'success' : 'default'}\r\n                  size=\"small\"\r\n                />\r\n              </>\r\n            )}\r\n            <Button\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              onClick={() => refetch()}\r\n              disabled={isLoading}\r\n            >\r\n              Aktualisieren\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n\r\n        {/* Ribbon */}\r\n        {customer && (\r\n          <CRMRibbon \r\n            currentTab={currentMainTab}\r\n            currentSubTab={currentSubTab}\r\n            customer={customer}\r\n          />\r\n        )}\r\n      </Paper>\r\n\r\n      {/* Tabs */}\r\n      <Paper className=\"flex-1 flex flex-col\">\r\n        <Tabs\r\n          value={currentMainTab}\r\n          onChange={handleMainTabChange}\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"auto\"\r\n          className=\"border-b border-gray-200\"\r\n        >\r\n          {sortedTabs.map((tab) => (\r\n            <Tab\r\n              key={tab.id}\r\n              value={tab.id}\r\n              label={tab.label}\r\n              icon={tab.icon}\r\n              iconPosition=\"start\"\r\n              disabled={!tab.isEnabled}\r\n              className=\"min-w-0\"\r\n            />\r\n          ))}\r\n        </Tabs>\r\n\r\n        {/* Tab Content */}\r\n        <Box className=\"flex-1 overflow-auto\">\r\n          {renderTabContent()}\r\n        </Box>\r\n      </Paper>\r\n\r\n      {/* Context Menu */}\r\n      <CRMContextMenu \r\n        currentTab={currentMainTab}\r\n        currentSubTab={currentSubTab}\r\n        customer={customer}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CRMMainView; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\crm\\CRMRibbon.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Menu' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MenuItem' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentSubTab' is defined but never used. Allowed unused args must match /^_/u.","line":63,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'anchorEl' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":66,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleMenuClick' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":68,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { \r\n  AppBar, \r\n  Toolbar, \r\n  Button, \r\n  IconButton, \r\n  Divider, \r\n  Box, \r\n  Typography,\r\n  Menu,\r\n  MenuItem,\r\n  Tooltip,\r\n  Badge\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Save as SaveIcon,\r\n  Print as PrintIcon,\r\n  GetApp as ExportIcon,\r\n  Upload as ImportIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  ContentCopy as DuplicateIcon,\r\n  Refresh as RefreshIcon,\r\n  PersonAdd as AddContactIcon,\r\n  AttachFile as AddDocumentIcon,\r\n  LocalOffer as AddOfferIcon,\r\n  ShoppingCart as AddOrderIcon,\r\n  WhatsApp as WhatsAppIcon,\r\n  ViewList as DetailViewIcon,\r\n  ViewModule as ListViewIcon,\r\n  ViewQuilt as CardViewIcon,\r\n  FilterList as FilterIcon,\r\n  Sort as SortIcon,\r\n  Analytics as AnalyzeIcon,\r\n  Assessment as ReportIcon,\r\n  Settings as SettingsIcon,\r\n  Backup as BackupIcon,\r\n  Help as HelpIcon,\r\n  Info as AboutIcon,\r\n  Support as SupportIcon,\r\n  MoreVert as MoreIcon\r\n} from '@mui/icons-material';\r\nimport { \r\n  CRMRibbonSection, \r\n  CRMRibbonAction, \r\n  CRMFunctionalRibbon,\r\n  Customer,\r\n  CRMMainTab,\r\n  CRMSubTab\r\n} from '../../types/crm';\r\n\r\ninterface CRMRibbonProps {\r\n  customer?: Customer | null;\r\n  currentTab: CRMMainTab;\r\n  currentSubTab: CRMSubTab;\r\n  onAction?: (action: CRMRibbonAction) => void;\r\n}\r\n\r\nconst CRMRibbon: React.FC<CRMRibbonProps> = ({\r\n  customer,\r\n  currentTab,\r\n  currentSubTab,\r\n  onAction\r\n}) => {\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n  const handleMenuClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleAction = (action: CRMRibbonAction) => {\r\n    onAction?.(action);\r\n    handleMenuClose();\r\n  };\r\n\r\n  // Ribbon-Konfiguration basierend auf aktuellem Tab\r\n  const getRibbonConfig = (): CRMFunctionalRibbon[] => {\r\n    const baseConfig: CRMFunctionalRibbon[] = [\r\n      {\r\n        section: CRMRibbonSection.FILE,\r\n        actions: [\r\n          CRMRibbonAction.NEW_CUSTOMER,\r\n          CRMRibbonAction.SAVE,\r\n          CRMRibbonAction.PRINT,\r\n          CRMRibbonAction.EXPORT,\r\n          CRMRibbonAction.IMPORT\r\n        ],\r\n        isEnabled: true,\r\n        isVisible: true\r\n      },\r\n      {\r\n        section: CRMRibbonSection.HOME,\r\n        actions: [\r\n          CRMRibbonAction.EDIT,\r\n          CRMRibbonAction.DELETE,\r\n          CRMRibbonAction.DUPLICATE,\r\n          CRMRibbonAction.REFRESH\r\n        ],\r\n        isEnabled: !!customer,\r\n        isVisible: true\r\n      }\r\n    ];\r\n\r\n    // Tab-spezifische Aktionen\r\n    switch (currentTab) {\r\n      case CRMMainTab.CONTACTS:\r\n        baseConfig.push({\r\n          section: CRMRibbonSection.INSERT,\r\n          actions: [CRMRibbonAction.ADD_CONTACT],\r\n          isEnabled: !!customer,\r\n          isVisible: true\r\n        });\r\n        break;\r\n      \r\n      case CRMMainTab.SALES:\r\n        baseConfig.push({\r\n          section: CRMRibbonSection.INSERT,\r\n          actions: [\r\n            CRMRibbonAction.ADD_OFFER,\r\n            CRMRibbonAction.ADD_ORDER\r\n          ],\r\n          isEnabled: !!customer,\r\n          isVisible: true\r\n        });\r\n        break;\r\n      \r\n      case CRMMainTab.DOCUMENTS:\r\n        baseConfig.push({\r\n          section: CRMRibbonSection.INSERT,\r\n          actions: [CRMRibbonAction.ADD_DOCUMENT],\r\n          isEnabled: !!customer,\r\n          isVisible: true\r\n        });\r\n        break;\r\n      \r\n      default:\r\n        break;\r\n    }\r\n\r\n    // View-Sektion immer hinzufügen\r\n    baseConfig.push({\r\n      section: CRMRibbonSection.VIEW,\r\n      actions: [\r\n        CRMRibbonAction.DETAIL_VIEW,\r\n        CRMRibbonAction.LIST_VIEW,\r\n        CRMRibbonAction.CARD_VIEW,\r\n        CRMRibbonAction.FILTER,\r\n        CRMRibbonAction.SORT\r\n      ],\r\n      isEnabled: true,\r\n      isVisible: true\r\n    });\r\n\r\n    // Tools-Sektion\r\n    baseConfig.push({\r\n      section: CRMRibbonSection.TOOLS,\r\n      actions: [\r\n        CRMRibbonAction.ANALYZE,\r\n        CRMRibbonAction.REPORT,\r\n        CRMRibbonAction.SETTINGS,\r\n        CRMRibbonAction.BACKUP\r\n      ],\r\n      isEnabled: true,\r\n      isVisible: true\r\n    });\r\n\r\n    // Help-Sektion\r\n    baseConfig.push({\r\n      section: CRMRibbonSection.HELP,\r\n      actions: [\r\n        CRMRibbonAction.HELP,\r\n        CRMRibbonAction.ABOUT,\r\n        CRMRibbonAction.SUPPORT\r\n      ],\r\n      isEnabled: true,\r\n      isVisible: true\r\n    });\r\n\r\n    return baseConfig;\r\n  };\r\n\r\n  const getActionIcon = (action: CRMRibbonAction) => {\r\n    const iconMap: Record<CRMRibbonAction, React.ReactElement> = {\r\n      [CRMRibbonAction.NEW_CUSTOMER]: <AddIcon />,\r\n      [CRMRibbonAction.SAVE]: <SaveIcon />,\r\n      [CRMRibbonAction.PRINT]: <PrintIcon />,\r\n      [CRMRibbonAction.EXPORT]: <ExportIcon />,\r\n      [CRMRibbonAction.IMPORT]: <ImportIcon />,\r\n      [CRMRibbonAction.EDIT]: <EditIcon />,\r\n      [CRMRibbonAction.DELETE]: <DeleteIcon />,\r\n      [CRMRibbonAction.DUPLICATE]: <DuplicateIcon />,\r\n      [CRMRibbonAction.REFRESH]: <RefreshIcon />,\r\n      [CRMRibbonAction.ADD_CONTACT]: <AddContactIcon />,\r\n      [CRMRibbonAction.ADD_DOCUMENT]: <AddDocumentIcon />,\r\n      [CRMRibbonAction.ADD_OFFER]: <AddOfferIcon />,\r\n      [CRMRibbonAction.ADD_ORDER]: <AddOrderIcon />,\r\n      [CRMRibbonAction.SEND_WHATSAPP]: <WhatsAppIcon />,\r\n      [CRMRibbonAction.DETAIL_VIEW]: <DetailViewIcon />,\r\n      [CRMRibbonAction.LIST_VIEW]: <ListViewIcon />,\r\n      [CRMRibbonAction.CARD_VIEW]: <CardViewIcon />,\r\n      [CRMRibbonAction.FILTER]: <FilterIcon />,\r\n      [CRMRibbonAction.SORT]: <SortIcon />,\r\n      [CRMRibbonAction.ANALYZE]: <AnalyzeIcon />,\r\n      [CRMRibbonAction.REPORT]: <ReportIcon />,\r\n      [CRMRibbonAction.SETTINGS]: <SettingsIcon />,\r\n      [CRMRibbonAction.BACKUP]: <BackupIcon />,\r\n      [CRMRibbonAction.HELP]: <HelpIcon />,\r\n      [CRMRibbonAction.ABOUT]: <AboutIcon />,\r\n      [CRMRibbonAction.SUPPORT]: <SupportIcon />\r\n    };\r\n    return iconMap[action] || <MoreIcon />;\r\n  };\r\n\r\n  const getActionLabel = (action: CRMRibbonAction): string => {\r\n    const labels: Record<CRMRibbonAction, string> = {\r\n      [CRMRibbonAction.NEW_CUSTOMER]: 'Neuer Kunde',\r\n      [CRMRibbonAction.SAVE]: 'Speichern',\r\n      [CRMRibbonAction.PRINT]: 'Drucken',\r\n      [CRMRibbonAction.EXPORT]: 'Exportieren',\r\n      [CRMRibbonAction.IMPORT]: 'Importieren',\r\n      [CRMRibbonAction.EDIT]: 'Bearbeiten',\r\n      [CRMRibbonAction.DELETE]: 'Löschen',\r\n      [CRMRibbonAction.DUPLICATE]: 'Duplizieren',\r\n      [CRMRibbonAction.REFRESH]: 'Aktualisieren',\r\n      [CRMRibbonAction.ADD_CONTACT]: 'Kontakt hinzufügen',\r\n      [CRMRibbonAction.ADD_DOCUMENT]: 'Dokument hinzufügen',\r\n      [CRMRibbonAction.ADD_OFFER]: 'Angebot erstellen',\r\n      [CRMRibbonAction.ADD_ORDER]: 'Auftrag erstellen',\r\n      [CRMRibbonAction.SEND_WHATSAPP]: 'WhatsApp senden',\r\n      [CRMRibbonAction.DETAIL_VIEW]: 'Detailansicht',\r\n      [CRMRibbonAction.LIST_VIEW]: 'Listenansicht',\r\n      [CRMRibbonAction.CARD_VIEW]: 'Kartenansicht',\r\n      [CRMRibbonAction.FILTER]: 'Filter',\r\n      [CRMRibbonAction.SORT]: 'Sortieren',\r\n      [CRMRibbonAction.ANALYZE]: 'Analysieren',\r\n      [CRMRibbonAction.REPORT]: 'Bericht',\r\n      [CRMRibbonAction.SETTINGS]: 'Einstellungen',\r\n      [CRMRibbonAction.BACKUP]: 'Backup',\r\n      [CRMRibbonAction.HELP]: 'Hilfe',\r\n      [CRMRibbonAction.ABOUT]: 'Über',\r\n      [CRMRibbonAction.SUPPORT]: 'Support'\r\n    };\r\n    return labels[action] || action;\r\n  };\r\n\r\n  const getSectionLabel = (section: CRMRibbonSection): string => {\r\n    const labels: Record<CRMRibbonSection, string> = {\r\n      [CRMRibbonSection.FILE]: 'Datei',\r\n      [CRMRibbonSection.HOME]: 'Start',\r\n      [CRMRibbonSection.INSERT]: 'Einfügen',\r\n      [CRMRibbonSection.VIEW]: 'Ansicht',\r\n      [CRMRibbonSection.TOOLS]: 'Tools',\r\n      [CRMRibbonSection.HELP]: 'Hilfe'\r\n    };\r\n    return labels[section] || section;\r\n  };\r\n\r\n  const ribbonConfig = getRibbonConfig();\r\n\r\n  return (\r\n    <AppBar \r\n      position=\"static\" \r\n      color=\"default\" \r\n      elevation={1}\r\n      className=\"bg-white border-b border-gray-200\"\r\n    >\r\n      <Toolbar className=\"px-4 py-2 min-h-16\">\r\n        {/* Kunden-Info */}\r\n        {customer && (\r\n          <Box className=\"flex items-center mr-6\">\r\n            <Typography variant=\"h6\" className=\"text-gray-800 mr-2\">\r\n              {customer.name}\r\n            </Typography>\r\n            <Typography variant=\"body2\" className=\"text-gray-500\">\r\n              ({customer.customerNumber})\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n\r\n        {/* Ribbon-Sektionen */}\r\n        <Box className=\"flex items-center space-x-4 flex-1\">\r\n          {ribbonConfig\r\n            .filter(ribbon => ribbon.isVisible)\r\n            .map((ribbon) => (\r\n              <Box key={ribbon.section} className=\"flex items-center space-x-2\">\r\n                {/* Sektions-Label */}\r\n                <Typography \r\n                  variant=\"caption\" \r\n                  className=\"text-gray-600 font-medium px-2 py-1 bg-gray-100 rounded\"\r\n                >\r\n                  {getSectionLabel(ribbon.section)}\r\n                </Typography>\r\n\r\n                {/* Aktionen */}\r\n                <Box className=\"flex items-center space-x-1\">\r\n                  {ribbon.actions.map((action) => {\r\n                    const isEnabled = ribbon.isEnabled;\r\n                    \r\n                    return (\r\n                      <Tooltip \r\n                        key={action} \r\n                        title={getActionLabel(action)}\r\n                        placement=\"bottom\"\r\n                      >\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          disabled={!isEnabled}\r\n                          onClick={() => handleAction(action)}\r\n                          className={`p-2 ${isEnabled ? 'text-gray-700 hover:bg-gray-100' : 'text-gray-400'}`}\r\n                        >\r\n                          {getActionIcon(action)}\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                    );\r\n                  })}\r\n                </Box>\r\n\r\n                <Divider orientation=\"vertical\" flexItem />\r\n              </Box>\r\n            ))}\r\n        </Box>\r\n\r\n        {/* Benachrichtigungen */}\r\n        <Box className=\"flex items-center space-x-2\">\r\n          <Badge badgeContent={3} color=\"error\">\r\n            <IconButton size=\"small\" className=\"text-gray-700\">\r\n              <Typography variant=\"body2\">⚠️</Typography>\r\n            </IconButton>\r\n          </Badge>\r\n          \r\n          <Badge badgeContent={5} color=\"primary\">\r\n            <IconButton size=\"small\" className=\"text-gray-700\">\r\n              <Typography variant=\"body2\">📧</Typography>\r\n            </IconButton>\r\n          </Badge>\r\n        </Box>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default CRMRibbon; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\crm\\contacts\\ContactForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1231,1234],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1231,1234],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1395,1398],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1395,1398],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormControlLabel,\r\n  Switch,\r\n  Grid,\r\n  Box,\r\n  Typography,\r\n  Chip,\r\n  Alert\r\n} from '@mui/material';\r\nimport { ContactPersonFormData, ContactRole, ContactPermission, getInitialContactFormData } from '../../../types/crm';\r\nimport { ContactWeekdaysEditor } from './ContactWeekdaysEditor';\r\n\r\ninterface ContactFormProps {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onSubmit: (formData: ContactPersonFormData) => void;\r\n  contact?: ContactPersonFormData | null;\r\n  isLoading?: boolean;\r\n  error?: string | null;\r\n}\r\n\r\nexport const ContactForm: React.FC<ContactFormProps> = ({\r\n  open,\r\n  onClose,\r\n  onSubmit,\r\n  contact = null,\r\n  isLoading = false,\r\n  error = null\r\n}) => {\r\n  const [formData, setFormData] = React.useState<ContactPersonFormData>(\r\n    contact || getInitialContactFormData()\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (contact) {\r\n      setFormData(contact);\r\n    } else {\r\n      setFormData(getInitialContactFormData());\r\n    }\r\n  }, [contact, open]);\r\n\r\n  const handleInputChange = (field: keyof ContactPersonFormData, value: any) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [field]: value\r\n    }));\r\n  };\r\n\r\n  const handleContactScheduleChange = (weekday: string, contactTime: any) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      contactSchedule: {\r\n        ...prev.contactSchedule,\r\n        [weekday]: contactTime\r\n      }\r\n    }));\r\n  };\r\n\r\n  const handlePermissionToggle = (permission: ContactPermission) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      permissions: prev.permissions.includes(permission)\r\n        ? prev.permissions.filter(p => p !== permission)\r\n        : [...prev.permissions, permission]\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    onSubmit(formData);\r\n  };\r\n\r\n  const getPermissionLabel = (permission: ContactPermission) => {\r\n    const labels: Record<ContactPermission, string> = {\r\n      [ContactPermission.VIEW_ORDERS]: 'Aufträge anzeigen',\r\n      [ContactPermission.PLACE_ORDERS]: 'Aufträge erstellen',\r\n      [ContactPermission.VIEW_INVOICES]: 'Rechnungen anzeigen',\r\n      [ContactPermission.VIEW_DOCUMENTS]: 'Dokumente anzeigen',\r\n      [ContactPermission.RECEIVE_COMMUNICATIONS]: 'Kommunikation erhalten',\r\n      [ContactPermission.MANAGE_CONTACTS]: 'Kontakte verwalten'\r\n    };\r\n    return labels[permission];\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onClose={onClose} maxWidth=\"md\" fullWidth>\r\n      <form onSubmit={handleSubmit}>\r\n        <DialogTitle>\r\n          {contact ? 'Kontakt bearbeiten' : 'Neuen Kontakt erstellen'}\r\n        </DialogTitle>\r\n        \r\n        <DialogContent>\r\n          {error && (\r\n            <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n              {error}\r\n            </Alert>\r\n          )}\r\n          \r\n          <Grid container spacing={2}>\r\n            {/* Persönliche Daten */}\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Persönliche Daten\r\n              </Typography>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={3}>\r\n              <FormControl fullWidth size=\"small\">\r\n                <InputLabel>Anrede</InputLabel>\r\n                <Select\r\n                  value={formData.salutation}\r\n                  onChange={(e) => handleInputChange('salutation', e.target.value)}\r\n                  label=\"Anrede\"\r\n                >\r\n                  <MenuItem value=\"Herr\">Herr</MenuItem>\r\n                  <MenuItem value=\"Frau\">Frau</MenuItem>\r\n                  <MenuItem value=\"Divers\">Divers</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={4.5}>\r\n              <TextField\r\n                fullWidth\r\n                size=\"small\"\r\n                label=\"Vorname\"\r\n                value={formData.firstName}\r\n                onChange={(e) => handleInputChange('firstName', e.target.value)}\r\n                required\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={4.5}>\r\n              <TextField\r\n                fullWidth\r\n                size=\"small\"\r\n                label=\"Nachname\"\r\n                value={formData.lastName}\r\n                onChange={(e) => handleInputChange('lastName', e.target.value)}\r\n                required\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                size=\"small\"\r\n                label=\"Position\"\r\n                value={formData.position}\r\n                onChange={(e) => handleInputChange('position', e.target.value)}\r\n                required\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                size=\"small\"\r\n                label=\"Abteilung\"\r\n                value={formData.department || ''}\r\n                onChange={(e) => handleInputChange('department', e.target.value)}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                size=\"small\"\r\n                label=\"Geburtsdatum\"\r\n                type=\"date\"\r\n                value={formData.birthDate || ''}\r\n                onChange={(e) => handleInputChange('birthDate', e.target.value)}\r\n                InputLabelProps={{ shrink: true }}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6}>\r\n              <FormControl fullWidth size=\"small\">\r\n                <InputLabel>Rolle</InputLabel>\r\n                <Select\r\n                  value={formData.role}\r\n                  onChange={(e) => handleInputChange('role', e.target.value)}\r\n                  label=\"Rolle\"\r\n                >\r\n                  {Object.values(ContactRole).map((role) => (\r\n                    <MenuItem key={role} value={role}>\r\n                      {role}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            \r\n            {/* Kontaktdaten */}\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h6\" gutterBottom sx={{ mt: 2 }}>\r\n                Kontaktdaten\r\n              </Typography>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                size=\"small\"\r\n                label=\"Telefon 1\"\r\n                value={formData.phone1}\r\n                onChange={(e) => handleInputChange('phone1', e.target.value)}\r\n                required\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                size=\"small\"\r\n                label=\"Telefon 2\"\r\n                value={formData.phone2 || ''}\r\n                onChange={(e) => handleInputChange('phone2', e.target.value)}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                size=\"small\"\r\n                label=\"Mobil\"\r\n                value={formData.mobile || ''}\r\n                onChange={(e) => handleInputChange('mobile', e.target.value)}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                size=\"small\"\r\n                label=\"WhatsApp\"\r\n                value={formData.whatsapp || ''}\r\n                onChange={(e) => handleInputChange('whatsapp', e.target.value)}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                size=\"small\"\r\n                label=\"E-Mail\"\r\n                type=\"email\"\r\n                value={formData.email || ''}\r\n                onChange={(e) => handleInputChange('email', e.target.value)}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                size=\"small\"\r\n                label=\"Fax\"\r\n                value={formData.fax || ''}\r\n                onChange={(e) => handleInputChange('fax', e.target.value)}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={4}>\r\n              <TextField\r\n                fullWidth\r\n                size=\"small\"\r\n                label=\"Skype\"\r\n                value={formData.skype || ''}\r\n                onChange={(e) => handleInputChange('skype', e.target.value)}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={4}>\r\n              <TextField\r\n                fullWidth\r\n                size=\"small\"\r\n                label=\"LinkedIn\"\r\n                value={formData.linkedin || ''}\r\n                onChange={(e) => handleInputChange('linkedin', e.target.value)}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={4}>\r\n              <TextField\r\n                fullWidth\r\n                size=\"small\"\r\n                label=\"Website\"\r\n                value={formData.website || ''}\r\n                onChange={(e) => handleInputChange('website', e.target.value)}\r\n              />\r\n            </Grid>\r\n            \r\n            {/* Status und Berechtigungen */}\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h6\" gutterBottom sx={{ mt: 2 }}>\r\n                Status und Berechtigungen\r\n              </Typography>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6}>\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={formData.isMainContact}\r\n                    onChange={(e) => handleInputChange('isMainContact', e.target.checked)}\r\n                  />\r\n                }\r\n                label=\"Hauptkontakt\"\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6}>\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={formData.isActive}\r\n                    onChange={(e) => handleInputChange('isActive', e.target.checked)}\r\n                  />\r\n                }\r\n                label=\"Aktiv\"\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12}>\r\n              <Typography variant=\"subtitle2\" gutterBottom>\r\n                Berechtigungen\r\n              </Typography>\r\n              <Box display=\"flex\" flexWrap=\"wrap\" gap={1}>\r\n                {Object.values(ContactPermission).map((permission) => (\r\n                  <Chip\r\n                    key={permission}\r\n                    label={getPermissionLabel(permission)}\r\n                    onClick={() => handlePermissionToggle(permission)}\r\n                    color={formData.permissions.includes(permission) ? 'primary' : 'default'}\r\n                    variant={formData.permissions.includes(permission) ? 'filled' : 'outlined'}\r\n                    size=\"small\"\r\n                  />\r\n                ))}\r\n              </Box>\r\n            </Grid>\r\n            \r\n            {/* Notizen */}\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                multiline\r\n                rows={3}\r\n                label=\"Notizen\"\r\n                value={formData.notes || ''}\r\n                onChange={(e) => handleInputChange('notes', e.target.value)}\r\n              />\r\n            </Grid>\r\n            \r\n            {/* Kontaktzeiten */}\r\n            <Grid item xs={12}>\r\n              <ContactWeekdaysEditor\r\n                contactSchedule={formData.contactSchedule}\r\n                onChange={handleContactScheduleChange}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        \r\n        <DialogActions>\r\n          <Button onClick={onClose} disabled={isLoading}>\r\n            Abbrechen\r\n          </Button>\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            disabled={isLoading || !formData.firstName || !formData.lastName || !formData.phone1}\r\n          >\r\n            {isLoading ? 'Speichere...' : (contact ? 'Aktualisieren' : 'Erstellen')}\r\n          </Button>\r\n        </DialogActions>\r\n      </form>\r\n    </Dialog>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\crm\\contacts\\ContactList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\crm\\contacts\\ContactWeekdaysEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\crm\\customers\\CustomerAddressCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[406,409],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[406,409],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  TextField,\r\n  Grid,\r\n  Box\r\n} from '@mui/material';\r\nimport { LocationOn as LocationIcon } from '@mui/icons-material';\r\nimport { CustomerFormData } from '../../../types/crm';\r\n\r\ninterface CustomerAddressCardProps {\r\n  formData: CustomerFormData;\r\n  isEditing: boolean;\r\n  onFieldChange: (field: keyof CustomerFormData, value: any) => void;\r\n}\r\n\r\nexport const CustomerAddressCard: React.FC<CustomerAddressCardProps> = ({\r\n  formData,\r\n  isEditing,\r\n  onFieldChange\r\n}) => {\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Box className=\"flex items-center mb-4\">\r\n          <LocationIcon className=\"mr-2 text-gray-600\" />\r\n          <Typography variant=\"h6\">Adressdaten</Typography>\r\n        </Box>\r\n        \r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Straße\"\r\n              value={formData.street}\r\n              onChange={(e) => onFieldChange('street', e.target.value)}\r\n              disabled={!isEditing}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"PLZ\"\r\n              value={formData.zipCode}\r\n              onChange={(e) => onFieldChange('zipCode', e.target.value)}\r\n              disabled={!isEditing}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Stadt\"\r\n              value={formData.city}\r\n              onChange={(e) => onFieldChange('city', e.target.value)}\r\n              disabled={!isEditing}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Postfach\"\r\n              value={formData.postBox || ''}\r\n              onChange={(e) => onFieldChange('postBox', e.target.value)}\r\n              disabled={!isEditing}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Land\"\r\n              value={formData.country || ''}\r\n              onChange={(e) => onFieldChange('country', e.target.value)}\r\n              disabled={!isEditing}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Bundesland\"\r\n              value={formData.state || ''}\r\n              onChange={(e) => onFieldChange('state', e.target.value)}\r\n              disabled={!isEditing}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\crm\\customers\\CustomerBasicInfoCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[406,409],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[406,409],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  TextField,\r\n  Grid,\r\n  Box\r\n} from '@mui/material';\r\nimport { Business as BusinessIcon } from '@mui/icons-material';\r\nimport { CustomerFormData } from '../../../types/crm';\r\n\r\ninterface CustomerBasicInfoCardProps {\r\n  formData: CustomerFormData;\r\n  isEditing: boolean;\r\n  onFieldChange: (field: keyof CustomerFormData, value: any) => void;\r\n}\r\n\r\nexport const CustomerBasicInfoCard: React.FC<CustomerBasicInfoCardProps> = ({\r\n  formData,\r\n  isEditing,\r\n  onFieldChange\r\n}) => {\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Box className=\"flex items-center mb-4\">\r\n          <BusinessIcon className=\"mr-2 text-gray-600\" />\r\n          <Typography variant=\"h6\">Grunddaten</Typography>\r\n        </Box>\r\n        \r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Firmenname\"\r\n              value={formData.name}\r\n              onChange={(e) => onFieldChange('name', e.target.value)}\r\n              disabled={!isEditing}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Kundennummer\"\r\n              value={formData.customerNumber}\r\n              onChange={(e) => onFieldChange('customerNumber', e.target.value)}\r\n              disabled={!isEditing}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Debitorenkonto\"\r\n              value={formData.debtorAccount}\r\n              onChange={(e) => onFieldChange('debtorAccount', e.target.value)}\r\n              disabled={!isEditing}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Kundengruppe\"\r\n              value={formData.customerGroup}\r\n              onChange={(e) => onFieldChange('customerGroup', e.target.value)}\r\n              disabled={!isEditing}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Vertriebsmitarbeiter\"\r\n              value={formData.salesRep}\r\n              onChange={(e) => onFieldChange('salesRep', e.target.value)}\r\n              disabled={!isEditing}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Disponent\"\r\n              value={formData.dispatcher}\r\n              onChange={(e) => onFieldChange('dispatcher', e.target.value)}\r\n              disabled={!isEditing}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Zahlungsbedingungen\"\r\n              value={formData.paymentTerms}\r\n              onChange={(e) => onFieldChange('paymentTerms', e.target.value)}\r\n              disabled={!isEditing}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\crm\\customers\\CustomerContactCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EmailIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WhatsAppIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[458,461],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[458,461],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  TextField,\r\n  Grid,\r\n  Box\r\n} from '@mui/material';\r\nimport { \r\n  Phone as PhoneIcon, \r\n  Email as EmailIcon, \r\n  WhatsApp as WhatsAppIcon \r\n} from '@mui/icons-material';\r\nimport { CustomerFormData } from '../../../types/crm';\r\n\r\ninterface CustomerContactCardProps {\r\n  formData: CustomerFormData;\r\n  isEditing: boolean;\r\n  onFieldChange: (field: keyof CustomerFormData, value: any) => void;\r\n}\r\n\r\nexport const CustomerContactCard: React.FC<CustomerContactCardProps> = ({\r\n  formData,\r\n  isEditing,\r\n  onFieldChange\r\n}) => {\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Box className=\"flex items-center mb-4\">\r\n          <PhoneIcon className=\"mr-2 text-gray-600\" />\r\n          <Typography variant=\"h6\">Kontaktdaten</Typography>\r\n        </Box>\r\n        \r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Telefon\"\r\n              value={formData.phone}\r\n              onChange={(e) => onFieldChange('phone', e.target.value)}\r\n              disabled={!isEditing}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Fax\"\r\n              value={formData.fax || ''}\r\n              onChange={(e) => onFieldChange('fax', e.target.value)}\r\n              disabled={!isEditing}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"E-Mail\"\r\n              type=\"email\"\r\n              value={formData.email || ''}\r\n              onChange={(e) => onFieldChange('email', e.target.value)}\r\n              disabled={!isEditing}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Homepage\"\r\n              value={formData.homepage || ''}\r\n              onChange={(e) => onFieldChange('homepage', e.target.value)}\r\n              disabled={!isEditing}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"WhatsApp\"\r\n              value={formData.skype || ''} // Mapping von skype zu whatsapp\r\n              onChange={(e) => onFieldChange('skype', e.target.value)}\r\n              disabled={!isEditing}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Skype\"\r\n              value={formData.skype || ''}\r\n              onChange={(e) => onFieldChange('skype', e.target.value)}\r\n              disabled={!isEditing}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"LinkedIn\"\r\n              value={formData.linkedin || ''}\r\n              onChange={(e) => onFieldChange('linkedin', e.target.value)}\r\n              disabled={!isEditing}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Twitter\"\r\n              value={formData.twitter || ''}\r\n              onChange={(e) => onFieldChange('twitter', e.target.value)}\r\n              disabled={!isEditing}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\crm\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\crm\\reporting\\CRMReportingAnalytics.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TextField' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FilterIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":36,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AnalyticsIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":38,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1136,1139],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1136,1139],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ReportData' is defined but never used. Allowed unused vars must match /^_/u.","line":104,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":104,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2431,2434],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2431,2434],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'analytics' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":117,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":127,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3065,3068],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3065,3068],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":327,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":327,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9067,9070],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9067,9070],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":327,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":327,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9080,9083],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9080,9083],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  TextField,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Chip,\r\n  IconButton,\r\n  Tooltip,\r\n  CircularProgress,\r\n  Alert,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n} from '@mui/material';\r\nimport { DatePicker, LocalizationProvider } from '@mui/x-date-pickers';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport { de } from 'date-fns/locale';\r\nimport {\r\n  Download as DownloadIcon,\r\n  FilterList as FilterIcon,\r\n  Refresh as RefreshIcon,\r\n  Assessment as AnalyticsIcon,\r\n  TrendingUp as TrendingUpIcon,\r\n  People as PeopleIcon,\r\n  AttachMoney as MoneyIcon,\r\n  Chat as ChatIcon,\r\n  LocalOffer as OfferIcon,\r\n  ShoppingCart as OrderIcon,\r\n  Receipt as InvoiceIcon,\r\n  Visibility as ViewIcon\r\n} from '@mui/icons-material';\r\nimport { useQuery } from '@tanstack/react-query';\r\n\r\ninterface CRMReportingAnalyticsProps {\r\n  onReportClick?: (reportType: string, data?: any) => void;\r\n}\r\n\r\ninterface CustomerData {\r\n  id: string;\r\n  name: string;\r\n  segment: string;\r\n  status: string;\r\n  revenue: number;\r\n  lastOrder: string;\r\n  riskScore: number;\r\n}\r\n\r\ninterface CommunicationData {\r\n  id: string;\r\n  customer: string;\r\n  type: string;\r\n  subject: string;\r\n  date: string;\r\n  status: string;\r\n  outcome: string;\r\n}\r\n\r\ninterface OfferData {\r\n  id: string;\r\n  customer: string;\r\n  title: string;\r\n  value: number;\r\n  status: string;\r\n  createdDate: string;\r\n  validUntil: string;\r\n}\r\n\r\ninterface OrderData {\r\n  id: string;\r\n  customer: string;\r\n  orderNumber: string;\r\n  total: number;\r\n  status: string;\r\n  orderDate: string;\r\n  deliveryDate: string;\r\n}\r\n\r\ninterface InvoiceData {\r\n  id: string;\r\n  customer: string;\r\n  invoiceNumber: string;\r\n  amount: number;\r\n  status: string;\r\n  issueDate: string;\r\n  dueDate: string;\r\n}\r\n\r\ntype ReportData = CustomerData | CommunicationData | OfferData | OrderData | InvoiceData;\r\n\r\nconst CRMReportingAnalytics: React.FC<CRMReportingAnalyticsProps> = ({\r\n  onReportClick\r\n}) => {\r\n  const [selectedReport, setSelectedReport] = useState<string>('customers');\r\n  const [dateFrom, setDateFrom] = useState<Date | null>(null);\r\n  const [dateTo, setDateTo] = useState<Date | null>(null);\r\n  const [filters, setFilters] = useState<any>({});\r\n  const [isExportDialogOpen, setIsExportDialogOpen] = useState(false);\r\n  const [exportFormat, setExportFormat] = useState<string>('excel');\r\n\r\n  // Fetch CRM analytics data\r\n  const { data: analytics, isLoading, error, refetch } = useQuery({\r\n    queryKey: ['crm-analytics', selectedReport, dateFrom, dateTo, filters],\r\n    queryFn: () => Promise.resolve({ customers: [], revenue: 0, orders: 0 }), // Mock data\r\n    staleTime: 5 * 60 * 1000, // 5 minutes\r\n  });\r\n\r\n  const handleReportChange = (reportType: string) => {\r\n    setSelectedReport(reportType);\r\n  };\r\n\r\n  const handleFilterChange = (filterName: string, value: any) => {\r\n    setFilters(prev => ({\r\n      ...prev,\r\n      [filterName]: value\r\n    }));\r\n  };\r\n\r\n  const handleExport = () => {\r\n    setIsExportDialogOpen(true);\r\n  };\r\n\r\n  const handleExportConfirm = async () => {\r\n    try {\r\n      const response = await fetch('/api/crm/reports/export', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n        },\r\n        body: JSON.stringify({\r\n          reportType: selectedReport,\r\n          format: exportFormat,\r\n          filters: filters,\r\n          dateRange: {\r\n            start: filters.startDate,\r\n            end: filters.endDate\r\n          }\r\n        })\r\n      });\r\n\r\n      if (response.ok) {\r\n        const blob = await response.blob();\r\n        const url = window.URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        a.href = url;\r\n        a.download = `crm-report-${selectedReport}-${new Date().toISOString().split('T')[0]}.${exportFormat}`;\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        window.URL.revokeObjectURL(url);\r\n        document.body.removeChild(a);\r\n        \r\n        console.log('Report exported successfully in format:', exportFormat);\r\n      } else {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error exporting report:', err);\r\n      alert('Fehler beim Exportieren des Reports');\r\n    } finally {\r\n      setIsExportDialogOpen(false);\r\n    }\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('de-DE', {\r\n      style: 'currency',\r\n      currency: 'EUR'\r\n    }).format(amount);\r\n  };\r\n\r\n  const formatNumber = (num: number) => {\r\n    return new Intl.NumberFormat('de-DE').format(num);\r\n  };\r\n\r\n  const formatDate = (date: string) => {\r\n    return new Date(date).toLocaleDateString('de-DE');\r\n  };\r\n\r\n  const getReportData = () => {\r\n    // Mock data for different report types\r\n    const mockData = {\r\n      customers: [\r\n        {\r\n          id: '1',\r\n          name: 'Musterfirma GmbH',\r\n          segment: 'Premium',\r\n          status: 'Aktiv',\r\n          revenue: 150000,\r\n          lastOrder: '2024-01-20',\r\n          riskScore: 2\r\n        },\r\n        {\r\n          id: '2',\r\n          name: 'Beispiel AG',\r\n          segment: 'Standard',\r\n          status: 'Aktiv',\r\n          revenue: 75000,\r\n          lastOrder: '2024-01-18',\r\n          riskScore: 4\r\n        }\r\n      ],\r\n      communications: [\r\n        {\r\n          id: '1',\r\n          customer: 'Musterfirma GmbH',\r\n          type: 'WhatsApp',\r\n          subject: 'Bestellbestätigung',\r\n          date: '2024-01-20',\r\n          status: 'Delivered',\r\n          outcome: 'Positive'\r\n        },\r\n        {\r\n          id: '2',\r\n          customer: 'Beispiel AG',\r\n          type: 'Email',\r\n          subject: 'Angebot',\r\n          date: '2024-01-19',\r\n          status: 'Sent',\r\n          outcome: 'Neutral'\r\n        }\r\n      ],\r\n      offers: [\r\n        {\r\n          id: '1',\r\n          customer: 'Musterfirma GmbH',\r\n          number: 'OFF-2024-001',\r\n          title: 'Maschinenausstattung',\r\n          amount: 50000,\r\n          status: 'Draft',\r\n          validUntil: '2024-02-20'\r\n        }\r\n      ],\r\n      orders: [\r\n        {\r\n          id: '1',\r\n          customer: 'Musterfirma GmbH',\r\n          number: 'ORD-2024-001',\r\n          title: 'Maschinenausstattung',\r\n          amount: 50000,\r\n          status: 'Confirmed',\r\n          orderDate: '2024-01-20',\r\n          deliveryDate: '2024-02-15'\r\n        }\r\n      ],\r\n      invoices: [\r\n        {\r\n          id: '1',\r\n          customer: 'Musterfirma GmbH',\r\n          number: 'INV-2024-001',\r\n          title: 'Maschinenausstattung',\r\n          amount: 50000,\r\n          status: 'Paid',\r\n          invoiceDate: '2024-02-01',\r\n          dueDate: '2024-03-01'\r\n        }\r\n      ]\r\n    };\r\n\r\n    return mockData[selectedReport as keyof typeof mockData] || [];\r\n  };\r\n\r\n  const getReportColumns = () => {\r\n    const columns = {\r\n      customers: [\r\n        { field: 'name', header: 'Kundenname' },\r\n        { field: 'segment', header: 'Segment' },\r\n        { field: 'status', header: 'Status' },\r\n        { field: 'revenue', header: 'Umsatz' },\r\n        { field: 'lastOrder', header: 'Letzter Auftrag' },\r\n        { field: 'riskScore', header: 'Risikobewertung' }\r\n      ],\r\n      communications: [\r\n        { field: 'customer', header: 'Kunde' },\r\n        { field: 'type', header: 'Typ' },\r\n        { field: 'subject', header: 'Betreff' },\r\n        { field: 'date', header: 'Datum' },\r\n        { field: 'status', header: 'Status' },\r\n        { field: 'outcome', header: 'Ergebnis' }\r\n      ],\r\n      offers: [\r\n        { field: 'customer', header: 'Kunde' },\r\n        { field: 'number', header: 'Angebotsnummer' },\r\n        { field: 'title', header: 'Titel' },\r\n        { field: 'amount', header: 'Betrag' },\r\n        { field: 'status', header: 'Status' },\r\n        { field: 'validUntil', header: 'Gültig bis' }\r\n      ],\r\n      orders: [\r\n        { field: 'customer', header: 'Kunde' },\r\n        { field: 'number', header: 'Auftragsnummer' },\r\n        { field: 'title', header: 'Titel' },\r\n        { field: 'amount', header: 'Betrag' },\r\n        { field: 'status', header: 'Status' },\r\n        { field: 'orderDate', header: 'Auftragsdatum' },\r\n        { field: 'deliveryDate', header: 'Lieferdatum' }\r\n      ],\r\n      invoices: [\r\n        { field: 'customer', header: 'Kunde' },\r\n        { field: 'number', header: 'Rechnungsnummer' },\r\n        { field: 'title', header: 'Titel' },\r\n        { field: 'amount', header: 'Betrag' },\r\n        { field: 'status', header: 'Status' },\r\n        { field: 'invoiceDate', header: 'Rechnungsdatum' },\r\n        { field: 'dueDate', header: 'Fälligkeitsdatum' }\r\n      ]\r\n    };\r\n\r\n    return columns[selectedReport as keyof typeof columns] || [];\r\n  };\r\n\r\n  const renderTableCell = (row: any, column: any) => {\r\n    const value = row[column.field];\r\n\r\n    switch (column.field) {\r\n      case 'revenue':\r\n      case 'amount':\r\n        return formatCurrency(value);\r\n      case 'lastOrder':\r\n      case 'date':\r\n      case 'validUntil':\r\n      case 'orderDate':\r\n      case 'deliveryDate':\r\n      case 'invoiceDate':\r\n      case 'dueDate':\r\n        return formatDate(value);\r\n      case 'segment':\r\n        return (\r\n          <Chip\r\n            label={value}\r\n            color={value === 'Premium' ? 'primary' : value === 'Standard' ? 'success' : 'default'}\r\n            size=\"small\"\r\n          />\r\n        );\r\n      case 'status':\r\n        return (\r\n          <Chip\r\n            label={value}\r\n            color={value === 'Aktiv' || value === 'Confirmed' || value === 'Paid' ? 'success' : \r\n                   value === 'Draft' ? 'default' : 'warning'}\r\n            size=\"small\"\r\n          />\r\n        );\r\n      case 'type':\r\n        return (\r\n          <Chip\r\n            label={value}\r\n            color={value === 'WhatsApp' ? 'success' : value === 'Email' ? 'primary' : 'default'}\r\n            size=\"small\"\r\n          />\r\n        );\r\n      case 'outcome':\r\n        return (\r\n          <Chip\r\n            label={value}\r\n            color={value === 'Positive' ? 'success' : value === 'Negative' ? 'error' : 'default'}\r\n            size=\"small\"\r\n          />\r\n        );\r\n      default:\r\n        return value;\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Box className=\"flex justify-center items-center h-64\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Box className=\"p-4\">\r\n        <Alert severity=\"error\">\r\n          Fehler beim Laden der Reporting-Daten: {error.message}\r\n        </Alert>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  const reportData = getReportData();\r\n  const reportColumns = getReportColumns();\r\n\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={de}>\r\n      <Box className=\"p-6 space-y-6\">\r\n        {/* Header */}\r\n        <Box className=\"flex justify-between items-center\">\r\n          <Typography variant=\"h4\" className=\"text-gray-800\">\r\n            Reporting & Analytics\r\n          </Typography>\r\n          <Box className=\"flex gap-2\">\r\n            <Button\r\n              variant=\"outlined\"\r\n              startIcon={<RefreshIcon />}\r\n              onClick={() => refetch()}\r\n            >\r\n              Aktualisieren\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<DownloadIcon />}\r\n              onClick={handleExport}\r\n            >\r\n              Exportieren\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n\r\n        {/* Report Type Selection */}\r\n        <Card>\r\n          <CardContent>\r\n            <Typography variant=\"h6\" className=\"mb-4\">\r\n              Berichtstyp auswählen\r\n            </Typography>\r\n            <Grid container spacing={2}>\r\n              <Grid item>\r\n                <Button\r\n                  variant={selectedReport === 'customers' ? 'contained' : 'outlined'}\r\n                  startIcon={<PeopleIcon />}\r\n                  onClick={() => handleReportChange('customers')}\r\n                >\r\n                  Kunden\r\n                </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  variant={selectedReport === 'communications' ? 'contained' : 'outlined'}\r\n                  startIcon={<ChatIcon />}\r\n                  onClick={() => handleReportChange('communications')}\r\n                >\r\n                  Kommunikation\r\n                </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  variant={selectedReport === 'offers' ? 'contained' : 'outlined'}\r\n                  startIcon={<OfferIcon />}\r\n                  onClick={() => handleReportChange('offers')}\r\n                >\r\n                  Angebote\r\n                </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  variant={selectedReport === 'orders' ? 'contained' : 'outlined'}\r\n                  startIcon={<OrderIcon />}\r\n                  onClick={() => handleReportChange('orders')}\r\n                >\r\n                  Aufträge\r\n                </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  variant={selectedReport === 'invoices' ? 'contained' : 'outlined'}\r\n                  startIcon={<InvoiceIcon />}\r\n                  onClick={() => handleReportChange('invoices')}\r\n                >\r\n                  Rechnungen\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Filters */}\r\n        <Card>\r\n          <CardContent>\r\n            <Typography variant=\"h6\" className=\"mb-4\">\r\n              Filter\r\n            </Typography>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} sm={6} md={3}>\r\n                <DatePicker\r\n                  label=\"Von Datum\"\r\n                  value={dateFrom}\r\n                  onChange={(newValue) => setDateFrom(newValue)}\r\n                  slotProps={{ textField: { fullWidth: true } }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6} md={3}>\r\n                <DatePicker\r\n                  label=\"Bis Datum\"\r\n                  value={dateTo}\r\n                  onChange={(newValue) => setDateTo(newValue)}\r\n                  slotProps={{ textField: { fullWidth: true } }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6} md={3}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>Status</InputLabel>\r\n                  <Select\r\n                    value={filters.status || ''}\r\n                    onChange={(e) => handleFilterChange('status', e.target.value)}\r\n                    label=\"Status\"\r\n                  >\r\n                    <MenuItem value=\"\">Alle</MenuItem>\r\n                    <MenuItem value=\"active\">Aktiv</MenuItem>\r\n                    <MenuItem value=\"inactive\">Inaktiv</MenuItem>\r\n                    <MenuItem value=\"draft\">Entwurf</MenuItem>\r\n                    <MenuItem value=\"confirmed\">Bestätigt</MenuItem>\r\n                    <MenuItem value=\"paid\">Bezahlt</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6} md={3}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>Segment</InputLabel>\r\n                  <Select\r\n                    value={filters.segment || ''}\r\n                    onChange={(e) => handleFilterChange('segment', e.target.value)}\r\n                    label=\"Segment\"\r\n                  >\r\n                    <MenuItem value=\"\">Alle</MenuItem>\r\n                    <MenuItem value=\"premium\">Premium</MenuItem>\r\n                    <MenuItem value=\"regular\">Standard</MenuItem>\r\n                    <MenuItem value=\"basic\">Basic</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Report Table */}\r\n        <Card>\r\n          <CardContent>\r\n            <Box className=\"flex justify-between items-center mb-4\">\r\n              <Typography variant=\"h6\">\r\n                {selectedReport === 'customers' && 'Kundenbericht'}\r\n                {selectedReport === 'communications' && 'Kommunikationsbericht'}\r\n                {selectedReport === 'offers' && 'Angebotsbericht'}\r\n                {selectedReport === 'orders' && 'Auftragsbericht'}\r\n                {selectedReport === 'invoices' && 'Rechnungsbericht'}\r\n              </Typography>\r\n              <Typography variant=\"body2\" className=\"text-gray-600\">\r\n                {reportData.length} Einträge\r\n              </Typography>\r\n            </Box>\r\n\r\n            <TableContainer component={Paper} variant=\"outlined\">\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {reportColumns.map((column) => (\r\n                      <TableCell key={column.field}>\r\n                        {column.header}\r\n                      </TableCell>\r\n                    ))}\r\n                    <TableCell align=\"right\">Aktionen</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {reportData.map((row) => (\r\n                    <TableRow key={row.id} hover>\r\n                      {reportColumns.map((column) => (\r\n                        <TableCell key={column.field}>\r\n                          {renderTableCell(row, column)}\r\n                        </TableCell>\r\n                      ))}\r\n                      <TableCell align=\"right\">\r\n                        <Tooltip title=\"Details anzeigen\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => onReportClick?.(selectedReport, row)}\r\n                          >\r\n                            <ViewIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Analytics Summary */}\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={6}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\" className=\"mb-4\">\r\n                  Zusammenfassung\r\n                </Typography>\r\n                <Box className=\"space-y-2\">\r\n                  <Box className=\"flex justify-between\">\r\n                    <Typography variant=\"body2\">Gesamtanzahl:</Typography>\r\n                    <Typography variant=\"body2\" className=\"font-semibold\">\r\n                      {formatNumber(reportData.length)}\r\n                    </Typography>\r\n                  </Box>\r\n                  {selectedReport === 'customers' && (\r\n                    <>\r\n                      <Box className=\"flex justify-between\">\r\n                        <Typography variant=\"body2\">Durchschnittlicher Umsatz:</Typography>\r\n                        <Typography variant=\"body2\" className=\"font-semibold\">\r\n                          {formatCurrency(reportData.reduce((sum, row) => sum + ('revenue' in row ? row.revenue : 0), 0) / reportData.length)}\r\n                        </Typography>\r\n                      </Box>\r\n                      <Box className=\"flex justify-between\">\r\n                        <Typography variant=\"body2\">Premium Kunden:</Typography>\r\n                        <Typography variant=\"body2\" className=\"font-semibold\">\r\n                          {formatNumber(reportData.filter(row => 'segment' in row && row.segment === 'Premium').length)}\r\n                        </Typography>\r\n                      </Box>\r\n                    </>\r\n                  )}\r\n                  {selectedReport === 'communications' && (\r\n                    <>\r\n                      <Box className=\"flex justify-between\">\r\n                        <Typography variant=\"body2\">WhatsApp Nachrichten:</Typography>\r\n                        <Typography variant=\"body2\" className=\"font-semibold\">\r\n                          {formatNumber(reportData.filter(row => 'type' in row && row.type === 'WhatsApp').length)}\r\n                        </Typography>\r\n                      </Box>\r\n                      <Box className=\"flex justify-between\">\r\n                        <Typography variant=\"body2\">Positive Ergebnisse:</Typography>\r\n                        <Typography variant=\"body2\" className=\"font-semibold\">\r\n                          {formatNumber(reportData.filter(row => 'outcome' in row && row.outcome === 'Positive').length)}\r\n                        </Typography>\r\n                      </Box>\r\n                    </>\r\n                  )}\r\n                </Box>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={6}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\" className=\"mb-4\">\r\n                  Trends\r\n                </Typography>\r\n                <Box className=\"space-y-4\">\r\n                  <Box className=\"flex items-center justify-between p-3 bg-blue-50 rounded\">\r\n                    <Box className=\"flex items-center\">\r\n                      <TrendingUpIcon className=\"text-blue-500 mr-2\" />\r\n                      <Typography variant=\"body2\">Wachstum</Typography>\r\n                    </Box>\r\n                    <Typography variant=\"h6\" className=\"text-blue-600\">\r\n                      +12.5%\r\n                    </Typography>\r\n                  </Box>\r\n                  \r\n                  <Box className=\"flex items-center justify-between p-3 bg-green-50 rounded\">\r\n                    <Box className=\"flex items-center\">\r\n                      <MoneyIcon className=\"text-green-500 mr-2\" />\r\n                      <Typography variant=\"body2\">Umsatz</Typography>\r\n                    </Box>\r\n                    <Typography variant=\"h6\" className=\"text-green-600\">\r\n                      +8.3%\r\n                    </Typography>\r\n                  </Box>\r\n                  \r\n                  <Box className=\"flex items-center justify-between p-3 bg-purple-50 rounded\">\r\n                    <Box className=\"flex items-center\">\r\n                      <ChatIcon className=\"text-purple-500 mr-2\" />\r\n                      <Typography variant=\"body2\">Engagement</Typography>\r\n                    </Box>\r\n                    <Typography variant=\"h6\" className=\"text-purple-600\">\r\n                      +15.2%\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* Export Dialog */}\r\n        <Dialog open={isExportDialogOpen} onClose={() => setIsExportDialogOpen(false)}>\r\n          <DialogTitle>Daten exportieren</DialogTitle>\r\n          <DialogContent>\r\n            <FormControl fullWidth className=\"mt-2\">\r\n              <InputLabel>Export-Format</InputLabel>\r\n              <Select\r\n                value={exportFormat}\r\n                onChange={(e) => setExportFormat(e.target.value)}\r\n                label=\"Export-Format\"\r\n              >\r\n                <MenuItem value=\"excel\">Excel (.xlsx)</MenuItem>\r\n                <MenuItem value=\"csv\">CSV (.csv)</MenuItem>\r\n                <MenuItem value=\"pdf\">PDF (.pdf)</MenuItem>\r\n                <MenuItem value=\"json\">JSON (.json)</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={() => setIsExportDialogOpen(false)}>\r\n              Abbrechen\r\n            </Button>\r\n            <Button variant=\"contained\" onClick={handleExportConfirm}>\r\n              Exportieren\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </Box>\r\n    </LocalizationProvider>\r\n  );\r\n};\r\n\r\nexport default CRMReportingAnalytics; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\crm\\tabs\\CustomerAnalysisTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentSubTab' is defined but never used. Allowed unused args must match /^_/u.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onSubTabChange' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Box, Typography, Card, CardContent } from '@mui/material';\r\nimport { Customer, CRMSubTab } from '../../../types/crm';\r\n\r\ninterface CustomerAnalysisTabProps {\r\n  customer: Customer;\r\n  currentSubTab: CRMSubTab;\r\n  onSubTabChange: (subTab: CRMSubTab) => void;\r\n}\r\n\r\nconst CustomerAnalysisTab: React.FC<CustomerAnalysisTabProps> = ({\r\n  customer,\r\n  currentSubTab,\r\n  onSubTabChange\r\n}) => {\r\n  return (\r\n    <Box className=\"space-y-4\">\r\n      <Card>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" className=\"mb-4 text-gray-800\">\r\n            Analyse - {customer.name}\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"textSecondary\">\r\n            Analyse-Tab wird implementiert...\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CustomerAnalysisTab; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\crm\\tabs\\CustomerCommunicationsTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tabs' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tab' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleTabChange' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":27,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { \r\n  Box, \r\n  Typography, \r\n  Card, \r\n  CardContent,\r\n  Tabs,\r\n  Tab,\r\n  Button\r\n} from '@mui/material';\r\nimport { Customer, CRMSubTab } from '../../../types/crm';\r\nimport CustomerWhatsAppHistoryTab from './CustomerWhatsAppHistoryTab';\r\n\r\ninterface CustomerCommunicationsTabProps {\r\n  customer: Customer;\r\n  currentSubTab: CRMSubTab;\r\n  onSubTabChange: (subTab: CRMSubTab) => void;\r\n}\r\n\r\nconst CustomerCommunicationsTab: React.FC<CustomerCommunicationsTabProps> = ({\r\n  customer,\r\n  currentSubTab,\r\n  onSubTabChange\r\n}) => {\r\n  const [activeTab, setActiveTab] = useState(0);\r\n\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setActiveTab(newValue);\r\n    \r\n    // Map tab index to sub-tab\r\n    switch (newValue) {\r\n      case 0: // E-Mail\r\n        onSubTabChange(CRMSubTab.EMAIL);\r\n        break;\r\n      case 1: // Telefon\r\n        onSubTabChange(CRMSubTab.PHONE);\r\n        break;\r\n      case 2: // WhatsApp\r\n        onSubTabChange(CRMSubTab.WHATSAPP_HISTORY);\r\n        break;\r\n      case 3: // Meeting-Notizen\r\n        onSubTabChange(CRMSubTab.MEETINGS);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const renderTabContent = () => {\r\n    switch (activeTab) {\r\n      case 0: // E-Mail\r\n        return (\r\n          <Box className=\"p-4\">\r\n            <Typography variant=\"h6\" className=\"mb-4 text-gray-800\">\r\n              E-Mail-Historie - {customer.name}\r\n            </Typography>\r\n            <Typography variant=\"body1\" color=\"textSecondary\">\r\n              E-Mail-Historie wird implementiert...\r\n            </Typography>\r\n          </Box>\r\n        );\r\n      \r\n      case 1: // Telefon\r\n        return (\r\n          <Box className=\"p-4\">\r\n            <Typography variant=\"h6\" className=\"mb-4 text-gray-800\">\r\n              Telefon-Historie - {customer.name}\r\n            </Typography>\r\n            <Typography variant=\"body1\" color=\"textSecondary\">\r\n              Telefon-Historie wird implementiert...\r\n            </Typography>\r\n          </Box>\r\n        );\r\n      \r\n      case 2: // WhatsApp\r\n        return (\r\n          <CustomerWhatsAppHistoryTab\r\n            customer={customer}\r\n            currentSubTab={currentSubTab}\r\n            onSubTabChange={onSubTabChange}\r\n          />\r\n        );\r\n      \r\n      case 3: // Meeting-Notizen\r\n        return (\r\n          <Box className=\"p-4\">\r\n            <Typography variant=\"h6\" className=\"mb-4 text-gray-800\">\r\n              Meeting-Notizen - {customer.name}\r\n            </Typography>\r\n            <Typography variant=\"body1\" color=\"textSecondary\">\r\n              Meeting-Notizen werden implementiert...\r\n            </Typography>\r\n          </Box>\r\n        );\r\n      \r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box className=\"space-y-4\">\r\n      <Card>\r\n        <CardContent className=\"p-0\">\r\n          {/* Tab Navigation */}\r\n          <Box className=\"flex justify-center space-x-2 mb-4\">\r\n            <Button\r\n              variant=\"outlined\"\r\n              onClick={() => onSubTabChange(CRMSubTab.EMAIL)}\r\n              className=\"mr-2\"\r\n            >\r\n              E-Mail\r\n            </Button>\r\n            <Button\r\n              variant=\"outlined\"\r\n              onClick={() => onSubTabChange(CRMSubTab.PHONE)}\r\n              className=\"mr-2\"\r\n            >\r\n              Telefon\r\n            </Button>\r\n            <Button\r\n              variant=\"outlined\"\r\n              onClick={() => onSubTabChange(CRMSubTab.WHATSAPP_HISTORY)}\r\n              className=\"mr-2\"\r\n            >\r\n              WhatsApp\r\n            </Button>\r\n            <Button\r\n              variant=\"outlined\"\r\n              onClick={() => onSubTabChange(CRMSubTab.MEETINGS)}\r\n            >\r\n              Termine\r\n            </Button>\r\n          </Box>\r\n\r\n          {/* Tab Content */}\r\n          {renderTabContent()}\r\n        </CardContent>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CustomerCommunicationsTab; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\crm\\tabs\\CustomerContactsTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mapFormDataToApiContact' is defined but never used. Allowed unused vars must match /^_/u.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Typography,\r\n  Alert,\r\n  CircularProgress\r\n} from '@mui/material';\r\nimport { Add as AddIcon } from '@mui/icons-material';\r\nimport { Customer, ContactPerson, ContactPersonFormData } from '../../../types/crm';\r\nimport { \r\n  useContactPersons, \r\n  useCreateContactPerson, \r\n  useUpdateContactPerson, \r\n  useDeleteContactPerson \r\n} from '../../../hooks/useCRM';\r\nimport { \r\n  mapApiContactToFormData, \r\n  mapFormDataToApiContact \r\n} from '../../../types/crm';\r\nimport { ContactList } from '../contacts/ContactList';\r\nimport { ContactForm } from '../contacts/ContactForm';\r\n\r\ninterface CustomerContactsTabProps {\r\n  customer: Customer;\r\n  currentSubTab?: string;\r\n  onSubTabChange?: (subTab: string) => void;\r\n  onCustomerChange?: (customer: Customer) => void;\r\n}\r\n\r\nconst CustomerContactsTab: React.FC<CustomerContactsTabProps> = ({\r\n  customer\r\n}) => {\r\n  const [isFormOpen, setIsFormOpen] = useState(false);\r\n  const [editingContact, setEditingContact] = useState<ContactPersonFormData | null>(null);\r\n\r\n  // API Hooks\r\n  const { \r\n    data: contacts = [], \r\n    isLoading, \r\n    error, \r\n    refetch \r\n  } = useContactPersons(customer.id);\r\n\r\n  const createContactMutation = useCreateContactPerson();\r\n  const updateContactMutation = useUpdateContactPerson();\r\n  const deleteContactMutation = useDeleteContactPerson();\r\n\r\n  const handleAddContact = () => {\r\n    setEditingContact(null);\r\n    setIsFormOpen(true);\r\n  };\r\n\r\n  const handleEditContact = (contact: ContactPerson) => {\r\n    const formData = mapApiContactToFormData(contact);\r\n    setEditingContact(formData);\r\n    setIsFormOpen(true);\r\n  };\r\n\r\n  const handleDeleteContact = async (contactId: string) => {\r\n    try {\r\n      await deleteContactMutation.mutateAsync(contactId);\r\n      refetch();\r\n    } catch (error) {\r\n      console.error('Fehler beim Löschen des Kontakts:', error);\r\n    }\r\n  };\r\n\r\n  const handleSaveContact = async (formData: ContactPersonFormData) => {\r\n    try {\r\n      if (editingContact) {\r\n        // Update existing contact\r\n        const contactId = contacts.find(c => \r\n          c.firstName === editingContact.firstName && \r\n          c.lastName === editingContact.lastName\r\n        )?.id;\r\n        \r\n        if (contactId) {\r\n          await updateContactMutation.mutateAsync({ id: contactId, formData });\r\n        }\r\n      } else {\r\n        // Create new contact\r\n        await createContactMutation.mutateAsync(formData);\r\n      }\r\n      \r\n      setIsFormOpen(false);\r\n      setEditingContact(null);\r\n      refetch();\r\n    } catch (error) {\r\n      console.error('Fehler beim Speichern des Kontakts:', error);\r\n    }\r\n  };\r\n\r\n  const handleCloseForm = () => {\r\n    setIsFormOpen(false);\r\n    setEditingContact(null);\r\n  };\r\n\r\n  const isLoadingAny = isLoading || \r\n    createContactMutation.isPending || \r\n    updateContactMutation.isPending || \r\n    deleteContactMutation.isPending;\r\n\r\n  const errorMessage = error?.message || \r\n    createContactMutation.error?.message || \r\n    updateContactMutation.error?.message || \r\n    deleteContactMutation.error?.message;\r\n\r\n  return (\r\n    <Box>\r\n      {/* Header */}\r\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          Kontaktpersonen\r\n        </Typography>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<AddIcon />}\r\n          onClick={handleAddContact}\r\n          disabled={isLoadingAny}\r\n        >\r\n          Kontakt hinzufügen\r\n        </Button>\r\n      </Box>\r\n\r\n      {/* Error Display */}\r\n      {errorMessage && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {errorMessage}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Loading State */}\r\n      {isLoading && (\r\n        <Box display=\"flex\" justifyContent=\"center\" p={3}>\r\n          <CircularProgress />\r\n        </Box>\r\n      )}\r\n\r\n      {/* Contact List */}\r\n      {!isLoading && (\r\n        <ContactList\r\n          contacts={contacts}\r\n          onEdit={handleEditContact}\r\n          onDelete={handleDeleteContact}\r\n          isLoading={isLoading}\r\n        />\r\n      )}\r\n\r\n      {/* Contact Form Dialog */}\r\n      <ContactForm\r\n        open={isFormOpen}\r\n        onClose={handleCloseForm}\r\n        onSubmit={handleSaveContact}\r\n        contact={editingContact}\r\n        isLoading={isLoadingAny}\r\n        error={errorMessage}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CustomerContactsTab; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\crm\\tabs\\CustomerDirectBusinessTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentSubTab' is defined but never used. Allowed unused args must match /^_/u.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onSubTabChange' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Box, Typography, Card, CardContent } from '@mui/material';\r\nimport { Customer, CRMSubTab } from '../../../types/crm';\r\n\r\ninterface CustomerDirectBusinessTabProps {\r\n  customer: Customer;\r\n  currentSubTab: CRMSubTab;\r\n  onSubTabChange: (subTab: CRMSubTab) => void;\r\n}\r\n\r\nconst CustomerDirectBusinessTab: React.FC<CustomerDirectBusinessTabProps> = ({\r\n  customer,\r\n  currentSubTab,\r\n  onSubTabChange\r\n}) => {\r\n  return (\r\n    <Box className=\"space-y-4\">\r\n      <Card>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" className=\"mb-4 text-gray-800\">\r\n            Streckengeschäfte - {customer.name}\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"textSecondary\">\r\n            Streckengeschäfte-Tab wird implementiert...\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CustomerDirectBusinessTab; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\crm\\tabs\\CustomerDocumentsTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentSubTab' is defined but never used. Allowed unused args must match /^_/u.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onSubTabChange' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Box, Typography, Card, CardContent } from '@mui/material';\r\nimport { Customer, CRMSubTab } from '../../../types/crm';\r\n\r\ninterface CustomerDocumentsTabProps {\r\n  customer: Customer;\r\n  currentSubTab: CRMSubTab;\r\n  onSubTabChange: (subTab: CRMSubTab) => void;\r\n}\r\n\r\nconst CustomerDocumentsTab: React.FC<CustomerDocumentsTabProps> = ({\r\n  customer,\r\n  currentSubTab,\r\n  onSubTabChange\r\n}) => {\r\n  return (\r\n    <Box className=\"space-y-4\">\r\n      <Card>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" className=\"mb-4 text-gray-800\">\r\n            Dokumente - {customer.name}\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"textSecondary\">\r\n            Dokumente-Tab wird implementiert...\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CustomerDocumentsTab; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\crm\\tabs\\CustomerExternalStocksTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentSubTab' is defined but never used. Allowed unused args must match /^_/u.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onSubTabChange' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Box, Typography, Card, CardContent } from '@mui/material';\r\nimport { Customer, CRMSubTab } from '../../../types/crm';\r\n\r\ninterface CustomerExternalStocksTabProps {\r\n  customer: Customer;\r\n  currentSubTab: CRMSubTab;\r\n  onSubTabChange: (subTab: CRMSubTab) => void;\r\n}\r\n\r\nconst CustomerExternalStocksTab: React.FC<CustomerExternalStocksTabProps> = ({\r\n  customer,\r\n  currentSubTab,\r\n  onSubTabChange\r\n}) => {\r\n  return (\r\n    <Box className=\"space-y-4\">\r\n      <Card>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" className=\"mb-4 text-gray-800\">\r\n            Fremdbestände - {customer.name}\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"textSecondary\">\r\n            Fremdbestände-Tab wird implementiert...\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CustomerExternalStocksTab; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\crm\\tabs\\CustomerGeneralTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormControl' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InputLabel' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Select' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MenuItem' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Switch' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormControlLabel' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getInitialCustomerFormData' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":107,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":133},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2022,2025],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2022,2025],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Grid,\r\n  Button,\r\n  Chip,\r\n  Divider,\r\n  Alert,\r\n  CircularProgress,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Switch,\r\n  FormControlLabel\r\n} from '@mui/material';\r\nimport {\r\n  Save as SaveIcon,\r\n  Edit as EditIcon,\r\n  Cancel as CancelIcon\r\n} from '@mui/icons-material';\r\nimport { Customer, CustomerSegment, CustomerFormData, mapApiCustomerToFormData, mapFormDataToApiCustomer, getInitialCustomerFormData } from '../../../types/crm';\r\nimport { useUpdateCustomer } from '../../../hooks/useCRM';\r\nimport { CustomerBasicInfoCard } from '../customers/CustomerBasicInfoCard';\r\nimport { CustomerAddressCard } from '../customers/CustomerAddressCard';\r\nimport { CustomerContactCard } from '../customers/CustomerContactCard';\r\n\r\ninterface CustomerGeneralTabProps {\r\n  customer: Customer;\r\n  currentSubTab?: string;\r\n  onSubTabChange?: (subTab: string) => void;\r\n  onCustomerChange?: (customer: Customer) => void;\r\n}\r\n\r\nconst CustomerGeneralTab: React.FC<CustomerGeneralTabProps> = ({\r\n  customer,\r\n  onCustomerChange\r\n}) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [formData, setFormData] = useState<CustomerFormData>(() => \r\n    mapApiCustomerToFormData(customer)\r\n  );\r\n\r\n  const updateCustomerMutation = useUpdateCustomer();\r\n\r\n  const handleEdit = () => {\r\n    setIsEditing(true);\r\n    setFormData(mapApiCustomerToFormData(customer));\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsEditing(false);\r\n    setFormData(mapApiCustomerToFormData(customer));\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    try {\r\n      const updatedCustomer = await updateCustomerMutation.mutateAsync({\r\n        id: customer.id,\r\n        data: mapFormDataToApiCustomer(formData, customer.id)\r\n      });\r\n      \r\n      onCustomerChange?.(updatedCustomer);\r\n      setIsEditing(false);\r\n    } catch (error) {\r\n      console.error('Fehler beim Speichern:', error);\r\n    }\r\n  };\r\n\r\n  const handleFieldChange = (field: keyof CustomerFormData, value: any) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [field]: value\r\n    }));\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('de-DE', {\r\n      style: 'currency',\r\n      currency: 'EUR'\r\n    }).format(amount);\r\n  };\r\n\r\n  const getSegmentColor = (segment: CustomerSegment) => {\r\n    switch (segment) {\r\n      case CustomerSegment.PREMIUM:\r\n        return 'success';\r\n      case CustomerSegment.REGULAR:\r\n        return 'primary';\r\n      case CustomerSegment.BASIC:\r\n        return 'default';\r\n      case CustomerSegment.PROSPECT:\r\n        return 'warning';\r\n      case CustomerSegment.INACTIVE:\r\n        return 'error';\r\n      default:\r\n        return 'default';\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'active':\r\n        return 'success';\r\n      case 'inactive':\r\n        return 'error';\r\n      case 'prospect':\r\n        return 'warning';\r\n      default:\r\n        return 'default';\r\n    }\r\n  };\r\n\r\n  if (updateCustomerMutation.isPending) {\r\n    return (\r\n      <Box className=\"flex justify-center items-center h-64\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box className=\"space-y-6\">\r\n      {/* Header mit Aktionen */}\r\n      <Box className=\"flex justify-between items-center\">\r\n        <Box>\r\n          <h2 className=\"text-2xl font-semibold text-gray-800 mb-2\">\r\n            {customer.name}\r\n          </h2>\r\n          <Box className=\"flex space-x-2\">\r\n            <Chip\r\n              label={customer.status === 'active' ? 'Aktiv' : customer.status === 'inactive' ? 'Inaktiv' : 'Interessent'}\r\n              color={getStatusColor(customer.status)}\r\n              size=\"small\"\r\n            />\r\n            <Chip\r\n              label={customer.customerSegment === CustomerSegment.PREMIUM ? 'Premium' : \r\n                     customer.customerSegment === CustomerSegment.REGULAR ? 'Standard' :\r\n                     customer.customerSegment === CustomerSegment.BASIC ? 'Basic' :\r\n                     customer.customerSegment === CustomerSegment.PROSPECT ? 'Interessent' : 'Inaktiv'}\r\n              color={getSegmentColor(customer.customerSegment)}\r\n              size=\"small\"\r\n            />\r\n          </Box>\r\n        </Box>\r\n        \r\n        <Box className=\"flex space-x-2\">\r\n          {!isEditing ? (\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<EditIcon />}\r\n              onClick={handleEdit}\r\n            >\r\n              Bearbeiten\r\n            </Button>\r\n          ) : (\r\n            <>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<SaveIcon />}\r\n                onClick={handleSave}\r\n                disabled={updateCustomerMutation.isPending}\r\n              >\r\n                Speichern\r\n              </Button>\r\n              <Button\r\n                variant=\"outlined\"\r\n                startIcon={<CancelIcon />}\r\n                onClick={handleCancel}\r\n                disabled={updateCustomerMutation.isPending}\r\n              >\r\n                Abbrechen\r\n              </Button>\r\n            </>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Fehleranzeige */}\r\n      {updateCustomerMutation.error && (\r\n        <Alert severity=\"error\" className=\"mb-4\">\r\n          Fehler beim Speichern: {updateCustomerMutation.error.message}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Kundeninformationen */}\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} md={6}>\r\n          <CustomerBasicInfoCard\r\n            formData={formData}\r\n            isEditing={isEditing}\r\n            onFieldChange={handleFieldChange}\r\n          />\r\n        </Grid>\r\n        \r\n        <Grid item xs={12} md={6}>\r\n          <CustomerAddressCard\r\n            formData={formData}\r\n            isEditing={isEditing}\r\n            onFieldChange={handleFieldChange}\r\n          />\r\n        </Grid>\r\n        \r\n        <Grid item xs={12}>\r\n          <CustomerContactCard\r\n            formData={formData}\r\n            isEditing={isEditing}\r\n            onFieldChange={handleFieldChange}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Zusätzliche Informationen (nur Anzeige) */}\r\n      {!isEditing && (\r\n        <Box className=\"mt-6\">\r\n          <Divider className=\"mb-4\" />\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} md={6}>\r\n              <Box className=\"bg-gray-50 p-4 rounded-lg\">\r\n                <h3 className=\"text-lg font-semibold mb-3\">Finanzielle Übersicht</h3>\r\n                <Box className=\"space-y-2\">\r\n                  <Box className=\"flex justify-between\">\r\n                    <span className=\"text-gray-600\">Gesamtumsatz:</span>\r\n                    <span className=\"font-semibold\">{formatCurrency(customer.totalRevenue)}</span>\r\n                  </Box>\r\n                  <Box className=\"flex justify-between\">\r\n                    <span className=\"text-gray-600\">Kreditlimit:</span>\r\n                    <span className=\"font-semibold\">{formatCurrency(customer.creditLimit)}</span>\r\n                  </Box>\r\n                  <Box className=\"flex justify-between\">\r\n                    <span className=\"text-gray-600\">Kredit ausgenutzt:</span>\r\n                    <span className=\"font-semibold\">{formatCurrency(customer.creditUsed)}</span>\r\n                  </Box>\r\n                  <Box className=\"flex justify-between\">\r\n                    <span className=\"text-gray-600\">Offene Rechnungen:</span>\r\n                    <span className=\"font-semibold\">{customer.openInvoices}</span>\r\n                  </Box>\r\n                </Box>\r\n              </Box>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={6}>\r\n              <Box className=\"bg-gray-50 p-4 rounded-lg\">\r\n                <h3 className=\"text-lg font-semibold mb-3\">Letzte Aktivitäten</h3>\r\n                <Box className=\"space-y-2\">\r\n                  <Box className=\"flex justify-between\">\r\n                    <span className=\"text-gray-600\">Letzter Kontakt:</span>\r\n                    <span className=\"font-semibold\">\r\n                      {customer.lastContact ? new Date(customer.lastContact).toLocaleDateString('de-DE') : 'Keine'}\r\n                    </span>\r\n                  </Box>\r\n                  <Box className=\"flex justify-between\">\r\n                    <span className=\"text-gray-600\">Erstellt am:</span>\r\n                    <span className=\"font-semibold\">\r\n                      {new Date(customer.createdAt).toLocaleDateString('de-DE')}\r\n                    </span>\r\n                  </Box>\r\n                  <Box className=\"flex justify-between\">\r\n                    <span className=\"text-gray-600\">Zuletzt aktualisiert:</span>\r\n                    <span className=\"font-semibold\">\r\n                      {new Date(customer.updatedAt).toLocaleDateString('de-DE')}\r\n                    </span>\r\n                  </Box>\r\n                </Box>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CustomerGeneralTab; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\crm\\tabs\\CustomerInvoicesTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentSubTab' is defined but never used. Allowed unused args must match /^_/u.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onSubTabChange' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Box, Typography, Card, CardContent } from '@mui/material';\r\nimport { Customer, CRMSubTab } from '../../../types/crm';\r\n\r\ninterface CustomerInvoicesTabProps {\r\n  customer: Customer;\r\n  currentSubTab: CRMSubTab;\r\n  onSubTabChange: (subTab: CRMSubTab) => void;\r\n}\r\n\r\nconst CustomerInvoicesTab: React.FC<CustomerInvoicesTabProps> = ({\r\n  customer,\r\n  currentSubTab,\r\n  onSubTabChange\r\n}) => {\r\n  return (\r\n    <Box className=\"space-y-4\">\r\n      <Card>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" className=\"mb-4 text-gray-800\">\r\n            Rechnungen - {customer.name}\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"textSecondary\">\r\n            Rechnungen-Tab wird implementiert...\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CustomerInvoicesTab; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\crm\\tabs\\CustomerOrdersTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentSubTab' is defined but never used. Allowed unused args must match /^_/u.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onSubTabChange' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Box, Typography, Card, CardContent } from '@mui/material';\r\nimport { Customer, CRMSubTab } from '../../../types/crm';\r\n\r\ninterface CustomerOrdersTabProps {\r\n  customer: Customer;\r\n  currentSubTab: CRMSubTab;\r\n  onSubTabChange: (subTab: CRMSubTab) => void;\r\n}\r\n\r\nconst CustomerOrdersTab: React.FC<CustomerOrdersTabProps> = ({\r\n  customer,\r\n  currentSubTab,\r\n  onSubTabChange\r\n}) => {\r\n  return (\r\n    <Box className=\"space-y-4\">\r\n      <Card>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" className=\"mb-4 text-gray-800\">\r\n            Aufträge - {customer.name}\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"textSecondary\">\r\n            Aufträge-Tab wird implementiert...\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CustomerOrdersTab; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\crm\\tabs\\CustomerSalesTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentSubTab' is defined but never used. Allowed unused args must match /^_/u.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onSubTabChange' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Box, Typography, Card, CardContent } from '@mui/material';\r\nimport { Customer, CRMSubTab } from '../../../types/crm';\r\n\r\ninterface CustomerSalesTabProps {\r\n  customer: Customer;\r\n  currentSubTab: CRMSubTab;\r\n  onSubTabChange: (subTab: CRMSubTab) => void;\r\n}\r\n\r\nconst CustomerSalesTab: React.FC<CustomerSalesTabProps> = ({\r\n  customer,\r\n  currentSubTab,\r\n  onSubTabChange\r\n}) => {\r\n  return (\r\n    <Box className=\"space-y-4\">\r\n      <Card>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" className=\"mb-4 text-gray-800\">\r\n            Vertrieb - {customer.name}\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"textSecondary\">\r\n            Vertrieb-Tab wird implementiert...\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CustomerSalesTab; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\crm\\tabs\\CustomerWhatsAppHistoryTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Divider' is defined but never used. Allowed unused vars must match /^_/u.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Grid' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DeleteIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":29,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentSubTab' is defined but never used. Allowed unused args must match /^_/u.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onSubTabChange' is defined but never used. Allowed unused args must match /^_/u.","line":45,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Box,\n  Typography,\n  Card,\n  CardContent,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n  Avatar,\n  Chip,\n  Button,\n  TextField,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  IconButton,\n  Tooltip,\n  Divider,\n  Grid\n} from '@mui/material';\nimport {\n  WhatsApp as WhatsAppIcon,\n  Send as SendIcon,\n  Reply as ReplyIcon,\n  Forward as ForwardIcon,\n  Delete as DeleteIcon,\n  Archive as ArchiveIcon,\n  Search as SearchIcon,\n  FilterList as FilterIcon\n} from '@mui/icons-material';\nimport { Customer, CRMSubTab, CustomerCommunication, CommunicationType, CommunicationStatus, CommunicationOutcome } from '../../../types/crm';\n\ninterface CustomerWhatsAppHistoryTabProps {\n  customer: Customer;\n  currentSubTab: CRMSubTab;\n  onSubTabChange: (subTab: CRMSubTab) => void;\n}\n\nconst CustomerWhatsAppHistoryTab: React.FC<CustomerWhatsAppHistoryTabProps> = ({\n  customer,\n  currentSubTab,\n  onSubTabChange\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedMessage, setSelectedMessage] = useState<CustomerCommunication | null>(null);\n  const [isReplyDialogOpen, setIsReplyDialogOpen] = useState(false);\n  const [replyText, setReplyText] = useState('');\n\n  // Mock-WhatsApp-Nachrichten für Entwicklung\n  const mockWhatsAppMessages: CustomerCommunication[] = [\n    {\n      id: '1',\n      customerId: customer?.id || '',\n      type: CommunicationType.WHATSAPP,\n      subject: 'Bestellbestätigung',\n      content: 'Vielen Dank für Ihre Bestellung! Ihre Bestellnummer ist: ORD-123456. Wir werden Sie über den Status informieren.',\n      date: '2024-01-20T10:30:00Z',\n      status: CommunicationStatus.DELIVERED,\n      outcome: CommunicationOutcome.POSITIVE,\n      attachments: [],\n      from: 'System',\n      to: customer?.name || '',\n      priority: 'medium',\n      createdBy: 'System',\n      updatedAt: '2024-01-20T10:30:00Z'\n    },\n    {\n      id: '2',\n      customerId: customer?.id || '',\n      type: CommunicationType.WHATSAPP,\n      subject: 'Lieferung-Update',\n      content: 'Gute Nachrichten! Ihre Bestellung wird heute zwischen 14:00 - 18:00 geliefert. Sind Sie zu Hause?',\n      date: '2024-01-19T14:15:00Z',\n      status: CommunicationStatus.SENT,\n      outcome: CommunicationOutcome.NEUTRAL,\n      attachments: [],\n      from: 'System',\n      to: customer?.name || '',\n      priority: 'medium',\n      createdBy: 'System',\n      updatedAt: '2024-01-19T14:15:00Z'\n    },\n    {\n      id: '3',\n      customerId: customer?.id || '',\n      type: CommunicationType.WHATSAPP,\n      subject: 'Support-Anfrage',\n      content: 'Hallo! Ich sehe, dass Sie Unterstützung benötigen. Ein Mitarbeiter wird sich in Kürze bei Ihnen melden.',\n      date: '2024-01-18T09:45:00Z',\n      status: CommunicationStatus.SENT,\n      outcome: CommunicationOutcome.NEUTRAL,\n      attachments: [],\n      from: 'System',\n      to: customer?.name || '',\n      priority: 'medium',\n      createdBy: 'System',\n      updatedAt: '2024-01-18T09:45:00Z'\n    }\n  ];\n\n  const filteredMessages = mockWhatsAppMessages.filter(message =>\n    message.subject.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    message.content.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const handleReply = async () => {\n    if (selectedMessage && replyText.trim()) {\n      try {\n        const response = await fetch('/api/whatsapp/send', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\n          },\n          body: JSON.stringify({\n            to: selectedMessage.from,\n            content: replyText,\n            customerId: customer.id,\n            originalMessageId: selectedMessage.id,\n            type: 'reply'\n          })\n        });\n\n        if (!response.ok) {\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n\n        const result = await response.json();\n        console.log('WhatsApp Reply sent successfully:', result);\n        \n        // Add reply to local state\n        const newReply: CustomerCommunication = {\n          id: `reply-${Date.now()}`,\n          customerId: customer.id,\n          type: 'email' as CommunicationType,\n          date: new Date().toISOString(),\n          from: 'user@example.com',\n          to: customer.email,\n          content: replyText,\n          subject: `Antwort auf: ${selectedMessage.subject}`,\n          status: 'sent' as CommunicationStatus,\n          priority: 'medium',\n          outcome: 'delivered' as CommunicationOutcome,\n          createdBy: 'current-user',\n          updatedAt: new Date().toISOString()\n        };\n\n        // Update mock messages (in real app, this would be handled by state management)\n        mockWhatsAppMessages.unshift(newReply);\n        \n        setIsReplyDialogOpen(false);\n        setReplyText('');\n        setSelectedMessage(null);\n      } catch (err) {\n        console.error('Error sending WhatsApp reply:', err);\n        alert('Fehler beim Senden der WhatsApp-Antwort');\n      }\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'sent': return 'default';\n      case 'delivered': return 'primary';\n      case 'read': return 'success';\n      case 'failed': return 'error';\n      default: return 'default';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'urgent': return 'error';\n      case 'high': return 'warning';\n      case 'medium': return 'info';\n      case 'low': return 'default';\n      default: return 'default';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString('de-DE', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <Box className=\"space-y-4\">\n      {/* Header */}\n      <Box className=\"flex justify-between items-center\">\n        <Typography variant=\"h6\" className=\"text-gray-800\">\n          WhatsApp-Historie - {customer.name}\n        </Typography>\n        <Box className=\"flex space-x-2\">\n          <Button\n            variant=\"outlined\"\n            startIcon={<FilterIcon />}\n            size=\"small\"\n          >\n            Filter\n          </Button>\n          <Button\n            variant=\"contained\"\n            startIcon={<WhatsAppIcon />}\n            size=\"small\"\n          >\n            Neue Nachricht\n          </Button>\n        </Box>\n      </Box>\n\n      {/* Suchfeld */}\n      <TextField\n        fullWidth\n        placeholder=\"WhatsApp-Nachrichten durchsuchen...\"\n        value={searchTerm}\n        onChange={(e) => setSearchTerm(e.target.value)}\n        InputProps={{\n          startAdornment: <SearchIcon className=\"text-gray-400 mr-2\" />\n        }}\n        variant=\"outlined\"\n        size=\"small\"\n      />\n\n      {/* WhatsApp-Nachrichten */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <List className=\"divide-y divide-gray-200\">\n            {filteredMessages.map((message) => (\n              <ListItem\n                key={message.id}\n                className=\"hover:bg-gray-50 cursor-pointer\"\n                onClick={() => setSelectedMessage(message)}\n              >\n                <ListItemAvatar>\n                  <Avatar className=\"bg-green-500\">\n                    <WhatsAppIcon />\n                  </Avatar>\n                </ListItemAvatar>\n                \n                <ListItemText\n                  primary={\n                    <Box className=\"flex items-center justify-between\">\n                      <Typography variant=\"subtitle2\" className=\"font-medium\">\n                        {message.subject}\n                      </Typography>\n                      <Box className=\"flex space-x-1\">\n                        <Chip\n                          label={message.status}\n                          size=\"small\"\n                          color={getStatusColor(message.status)}\n                          variant=\"outlined\"\n                        />\n                        <Chip\n                          label={message.priority}\n                          size=\"small\"\n                          color={getPriorityColor(message.priority)}\n                          variant=\"outlined\"\n                        />\n                      </Box>\n                    </Box>\n                  }\n                  secondary={\n                    <Box>\n                      <Typography variant=\"body2\" className=\"text-gray-600 mb-1\">\n                        {message.content.length > 100 \n                          ? `${message.content.substring(0, 100)}...` \n                          : message.content\n                        }\n                      </Typography>\n                      <Box className=\"flex items-center justify-between\">\n                        <Typography variant=\"caption\" className=\"text-gray-500\">\n                          {formatDate(message.date)}\n                        </Typography>\n                        <Typography variant=\"caption\" className=\"text-gray-500\">\n                          {message.from} → {message.to}\n                        </Typography>\n                      </Box>\n                    </Box>\n                  }\n                />\n\n                <Box className=\"flex space-x-1\">\n                  <Tooltip title=\"Antworten\">\n                    <IconButton\n                      size=\"small\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setSelectedMessage(message);\n                        setIsReplyDialogOpen(true);\n                      }}\n                    >\n                      <ReplyIcon />\n                    </IconButton>\n                  </Tooltip>\n                  <Tooltip title=\"Weiterleiten\">\n                    <IconButton size=\"small\">\n                      <ForwardIcon />\n                    </IconButton>\n                  </Tooltip>\n                  <Tooltip title=\"Archivieren\">\n                    <IconButton size=\"small\">\n                      <ArchiveIcon />\n                    </IconButton>\n                  </Tooltip>\n                </Box>\n              </ListItem>\n            ))}\n          </List>\n\n          {filteredMessages.length === 0 && (\n            <Box className=\"text-center py-8\">\n              <WhatsAppIcon className=\"text-gray-400 text-4xl mb-2\" />\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Keine WhatsApp-Nachrichten gefunden\n              </Typography>\n            </Box>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Reply Dialog */}\n      <Dialog\n        open={isReplyDialogOpen}\n        onClose={() => setIsReplyDialogOpen(false)}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>\n          WhatsApp-Antwort an {selectedMessage?.from}\n        </DialogTitle>\n        <DialogContent>\n          <Box className=\"space-y-4\">\n            {/* Original Message */}\n            {selectedMessage && (\n              <Card variant=\"outlined\">\n                <CardContent className=\"p-3\">\n                  <Typography variant=\"caption\" className=\"text-gray-500\">\n                    Original Nachricht:\n                  </Typography>\n                  <Typography variant=\"body2\" className=\"mt-1\">\n                    {selectedMessage.content}\n                  </Typography>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Reply Text */}\n            <TextField\n              fullWidth\n              multiline\n              rows={4}\n              label=\"Ihre Antwort\"\n              value={replyText}\n              onChange={(e) => setReplyText(e.target.value)}\n              placeholder=\"Schreiben Sie Ihre WhatsApp-Antwort...\"\n              variant=\"outlined\"\n            />\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsReplyDialogOpen(false)}>\n            Abbrechen\n          </Button>\n          <Button\n            onClick={handleReply}\n            variant=\"contained\"\n            startIcon={<SendIcon />}\n            disabled={!replyText.trim()}\n          >\n            Senden\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default CustomerWhatsAppHistoryTab; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\crm\\tabs\\CustomerWhatsAppWebTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RefreshIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":30,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EditIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":32,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isWhatsAppWebOpen' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":91,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":91,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedTemplate' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":97,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":97,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSelectedTemplate' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":97,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":97,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":154,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":154,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":353,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":353,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11010,11013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11010,11013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  TextField,\r\n  Grid,\r\n  Chip,\r\n  Alert,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  IconButton,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  Divider,\r\n  Paper\r\n} from '@mui/material';\r\nimport {\r\n  WhatsApp as WhatsAppIcon,\r\n  Send as SendIcon,\r\n  QrCode as QrCodeIcon,\r\n  History as HistoryIcon,\r\n  Settings as SettingsIcon,\r\n  Refresh as RefreshIcon,\r\n  Delete as DeleteIcon,\r\n  Edit as EditIcon,\r\n  Add as AddIcon\r\n} from '@mui/icons-material';\r\n\r\ninterface WhatsAppMessage {\r\n  id: string;\r\n  phoneNumber: string;\r\n  message: string;\r\n  timestamp: Date;\r\n  status: 'sent' | 'pending' | 'failed';\r\n  customerName?: string;\r\n}\r\n\r\ninterface QuickMessageTemplate {\r\n  id: string;\r\n  name: string;\r\n  message: string;\r\n  category: 'greeting' | 'order' | 'support' | 'custom';\r\n}\r\n\r\ninterface WhatsAppWebTabProps {\r\n  customer?: {\r\n    id: string;\r\n    name: string;\r\n    phone?: string;\r\n    whatsapp?: string;\r\n  };\r\n}\r\n\r\nconst QUICK_MESSAGE_TEMPLATES: QuickMessageTemplate[] = [\r\n  {\r\n    id: '1',\r\n    name: 'Begrüßung',\r\n    message: 'Hallo! Vielen Dank für Ihr Interesse an unseren Produkten. Wie kann ich Ihnen helfen?',\r\n    category: 'greeting'\r\n  },\r\n  {\r\n    id: '2',\r\n    name: 'Bestellbestätigung',\r\n    message: 'Vielen Dank für Ihre Bestellung! Ihre Bestellnummer ist: {orderNumber}. Wir werden Sie über den Status informieren.',\r\n    category: 'order'\r\n  },\r\n  {\r\n    id: '3',\r\n    name: 'Support-Anfrage',\r\n    message: 'Hallo! Ich sehe, dass Sie Unterstützung benötigen. Ein Mitarbeiter wird sich in Kürze bei Ihnen melden.',\r\n    category: 'support'\r\n  },\r\n  {\r\n    id: '4',\r\n    name: 'Lieferung-Update',\r\n    message: 'Gute Nachrichten! Ihre Bestellung wird heute zwischen {timeRange} geliefert. Sind Sie zu Hause?',\r\n    category: 'order'\r\n  }\r\n];\r\n\r\nexport const CustomerWhatsAppWebTab: React.FC<WhatsAppWebTabProps> = ({ customer }) => {\r\n  const [message, setMessage] = useState('');\r\n  const [phoneNumber, setPhoneNumber] = useState(customer?.whatsapp || customer?.phone || '');\r\n  const [isWhatsAppWebOpen, setIsWhatsAppWebOpen] = useState(false);\r\n  const [showQrDialog, setShowQrDialog] = useState(false);\r\n  const [showTemplateDialog, setShowTemplateDialog] = useState(false);\r\n  const [messageHistory, setMessageHistory] = useState<WhatsAppMessage[]>([]);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [customTemplates, setCustomTemplates] = useState<QuickMessageTemplate[]>([]);\r\n  const [selectedTemplate, setSelectedTemplate] = useState<QuickMessageTemplate | null>(null);\r\n\r\n  // Simuliere WhatsApp Web Verbindung\r\n  useEffect(() => {\r\n    const checkConnection = () => {\r\n      // In der echten Implementierung würde hier die Verbindung geprüft\r\n      const connected = localStorage.getItem('whatsapp-web-connected') === 'true';\r\n      setIsConnected(connected);\r\n    };\r\n\r\n    checkConnection();\r\n    const interval = setInterval(checkConnection, 5000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const handleOpenWhatsAppWeb = () => {\r\n    const url = 'https://web.whatsapp.com';\r\n    window.open(url, '_blank', 'width=1200,height=800');\r\n    setIsWhatsAppWebOpen(true);\r\n  };\r\n\r\n  const handleSendMessage = async () => {\r\n    if (!phoneNumber || !message.trim()) {\r\n      return;\r\n    }\r\n\r\n    const newMessage: WhatsAppMessage = {\r\n      id: Date.now().toString(),\r\n      phoneNumber,\r\n      message: message.trim(),\r\n      timestamp: new Date(),\r\n      status: 'pending',\r\n      customerName: customer?.name\r\n    };\r\n\r\n    setMessageHistory(prev => [newMessage, ...prev]);\r\n\r\n    try {\r\n      // WhatsApp Web URL mit vorausgefüllter Nachricht\r\n      const encodedMessage = encodeURIComponent(message.trim());\r\n      const whatsappUrl = `https://web.whatsapp.com/send?phone=${phoneNumber}&text=${encodedMessage}`;\r\n      \r\n      // Öffne WhatsApp Web in neuem Tab\r\n      window.open(whatsappUrl, '_blank');\r\n      \r\n      // Simuliere erfolgreiches Senden\r\n      setTimeout(() => {\r\n        setMessageHistory(prev => \r\n          prev.map(msg => \r\n            msg.id === newMessage.id \r\n              ? { ...msg, status: 'sent' as const }\r\n              : msg\r\n          )\r\n        );\r\n      }, 2000);\r\n\r\n      setMessage('');\r\n    } catch (error) {\r\n      setMessageHistory(prev => \r\n        prev.map(msg => \r\n          msg.id === newMessage.id \r\n            ? { ...msg, status: 'failed' as const }\r\n            : msg\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleUseTemplate = (template: QuickMessageTemplate) => {\r\n    let processedMessage = template.message;\r\n    \r\n    // Ersetze Platzhalter\r\n    if (customer) {\r\n      processedMessage = processedMessage\r\n        .replace('{customerName}', customer.name)\r\n        .replace('{orderNumber}', `ORD-${Date.now().toString().slice(-6)}`)\r\n        .replace('{timeRange}', '14:00 - 18:00');\r\n    }\r\n    \r\n    setMessage(processedMessage);\r\n    setShowTemplateDialog(false);\r\n  };\r\n\r\n  const handleSaveTemplate = () => {\r\n    if (!message.trim()) return;\r\n\r\n    const newTemplate: QuickMessageTemplate = {\r\n      id: Date.now().toString(),\r\n      name: `Template ${customTemplates.length + 1}`,\r\n      message: message.trim(),\r\n      category: 'custom'\r\n    };\r\n\r\n    setCustomTemplates(prev => [...prev, newTemplate]);\r\n    setShowTemplateDialog(false);\r\n  };\r\n\r\n  const handleConnectWhatsApp = () => {\r\n    setShowQrDialog(true);\r\n    // Simuliere QR-Code Scan\r\n    setTimeout(() => {\r\n      localStorage.setItem('whatsapp-web-connected', 'true');\r\n      setIsConnected(true);\r\n      setShowQrDialog(false);\r\n    }, 3000);\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'sent': return 'success';\r\n      case 'pending': return 'warning';\r\n      case 'failed': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getStatusText = (status: string) => {\r\n    switch (status) {\r\n      case 'sent': return 'Gesendet';\r\n      case 'pending': return 'Wird gesendet...';\r\n      case 'failed': return 'Fehlgeschlagen';\r\n      default: return 'Unbekannt';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box className=\"space-y-6 p-4\">\r\n      {/* Header */}\r\n      <Box className=\"flex justify-between items-center\">\r\n        <Typography variant=\"h5\" className=\"flex items-center space-x-2\">\r\n          <WhatsAppIcon color=\"success\" />\r\n          <span>WhatsApp Web Integration</span>\r\n        </Typography>\r\n        \r\n        <Box className=\"flex space-x-2\">\r\n          <Chip\r\n            label={isConnected ? 'Verbunden' : 'Nicht verbunden'}\r\n            color={isConnected ? 'success' : 'error'}\r\n            icon={isConnected ? <WhatsAppIcon /> : <QrCodeIcon />}\r\n          />\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<SettingsIcon />}\r\n            onClick={() => setShowQrDialog(true)}\r\n          >\r\n            Verbindung\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Verbindungsstatus */}\r\n      {!isConnected && (\r\n        <Alert severity=\"warning\" className=\"mb-4\">\r\n          <Typography variant=\"body2\">\r\n            WhatsApp Web ist nicht verbunden. Scannen Sie den QR-Code, um zu beginnen.\r\n          </Typography>\r\n          <Button\r\n            variant=\"contained\"\r\n            size=\"small\"\r\n            onClick={handleConnectWhatsApp}\r\n            className=\"mt-2\"\r\n          >\r\n            QR-Code scannen\r\n          </Button>\r\n        </Alert>\r\n      )}\r\n\r\n      <Grid container spacing={3}>\r\n        {/* Hauptbereich - Nachrichten senden */}\r\n        <Grid item xs={12} md={8}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" className=\"mb-4\">\r\n                Nachricht senden\r\n              </Typography>\r\n              \r\n              <Box className=\"space-y-4\">\r\n                {/* Telefonnummer */}\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"WhatsApp Nummer\"\r\n                  value={phoneNumber}\r\n                  onChange={(e) => setPhoneNumber(e.target.value)}\r\n                  placeholder=\"+49 123 456789\"\r\n                  helperText=\"Format: +49 123 456789 (ohne Leerzeichen)\"\r\n                />\r\n\r\n                {/* Nachricht */}\r\n                <TextField\r\n                  fullWidth\r\n                  multiline\r\n                  rows={4}\r\n                  label=\"Nachricht\"\r\n                  value={message}\r\n                  onChange={(e) => setMessage(e.target.value)}\r\n                  placeholder=\"Ihre Nachricht hier...\"\r\n                />\r\n\r\n                {/* Aktions-Buttons */}\r\n                <Box className=\"flex space-x-2\">\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"success\"\r\n                    startIcon={<SendIcon />}\r\n                    onClick={handleSendMessage}\r\n                    disabled={!phoneNumber || !message.trim() || !isConnected}\r\n                  >\r\n                    Über WhatsApp Web senden\r\n                  </Button>\r\n                  \r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    startIcon={<AddIcon />}\r\n                    onClick={() => setShowTemplateDialog(true)}\r\n                  >\r\n                    Template verwenden\r\n                  </Button>\r\n                  \r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    startIcon={<WhatsAppIcon />}\r\n                    onClick={handleOpenWhatsAppWeb}\r\n                  >\r\n                    WhatsApp Web öffnen\r\n                  </Button>\r\n                </Box>\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Nachrichtenverlauf */}\r\n          <Card className=\"mt-4\">\r\n            <CardContent>\r\n              <Typography variant=\"h6\" className=\"mb-4 flex items-center\">\r\n                <HistoryIcon className=\"mr-2\" />\r\n                Nachrichtenverlauf\r\n              </Typography>\r\n              \r\n              <List>\r\n                {messageHistory.length === 0 ? (\r\n                  <ListItem>\r\n                    <ListItemText \r\n                      primary=\"Keine Nachrichten gesendet\"\r\n                      secondary=\"Hier werden Ihre gesendeten WhatsApp-Nachrichten angezeigt\"\r\n                    />\r\n                  </ListItem>\r\n                ) : (\r\n                  messageHistory.map((msg) => (\r\n                    <React.Fragment key={msg.id}>\r\n                      <ListItem>\r\n                        <ListItemText\r\n                          primary={\r\n                            <Box className=\"flex items-center space-x-2\">\r\n                              <span>{msg.customerName || msg.phoneNumber}</span>\r\n                              <Chip\r\n                                label={getStatusText(msg.status)}\r\n                                color={getStatusColor(msg.status) as any}\r\n                                size=\"small\"\r\n                              />\r\n                            </Box>\r\n                          }\r\n                          secondary={\r\n                            <Box>\r\n                              <Typography variant=\"body2\" className=\"mt-1\">\r\n                                {msg.message}\r\n                              </Typography>\r\n                              <Typography variant=\"caption\" color=\"textSecondary\">\r\n                                {msg.timestamp.toLocaleString('de-DE')}\r\n                              </Typography>\r\n                            </Box>\r\n                          }\r\n                        />\r\n                        <ListItemSecondaryAction>\r\n                          <IconButton size=\"small\">\r\n                            <DeleteIcon />\r\n                          </IconButton>\r\n                        </ListItemSecondaryAction>\r\n                      </ListItem>\r\n                      <Divider />\r\n                    </React.Fragment>\r\n                  ))\r\n                )}\r\n              </List>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Seitenbereich - Templates */}\r\n        <Grid item xs={12} md={4}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" className=\"mb-4\">\r\n                Schnell-Nachrichten\r\n              </Typography>\r\n              \r\n              <Box className=\"space-y-2\">\r\n                {[...QUICK_MESSAGE_TEMPLATES, ...customTemplates].map((template) => (\r\n                  <Paper key={template.id} className=\"p-3 hover:bg-gray-50 cursor-pointer\">\r\n                    <Box className=\"flex justify-between items-start\">\r\n                      <Box className=\"flex-1\">\r\n                        <Typography variant=\"subtitle2\" className=\"font-medium\">\r\n                          {template.name}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" className=\"mt-1\">\r\n                          {template.message.length > 60 \r\n                            ? `${template.message.substring(0, 60)}...` \r\n                            : template.message\r\n                          }\r\n                        </Typography>\r\n                        <Chip\r\n                          label={template.category}\r\n                          size=\"small\"\r\n                          className=\"mt-2\"\r\n                          color={template.category === 'custom' ? 'primary' : 'default'}\r\n                        />\r\n                      </Box>\r\n                      <IconButton\r\n                        size=\"small\"\r\n                        onClick={() => handleUseTemplate(template)}\r\n                      >\r\n                        <SendIcon />\r\n                      </IconButton>\r\n                    </Box>\r\n                  </Paper>\r\n                ))}\r\n              </Box>\r\n              \r\n              <Button\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                startIcon={<AddIcon />}\r\n                onClick={() => setShowTemplateDialog(true)}\r\n                className=\"mt-4\"\r\n              >\r\n                Neues Template erstellen\r\n              </Button>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* QR-Code Dialog */}\r\n      <Dialog open={showQrDialog} onClose={() => setShowQrDialog(false)} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>WhatsApp Web verbinden</DialogTitle>\r\n        <DialogContent>\r\n          <Box className=\"text-center space-y-4\">\r\n            <QrCodeIcon sx={{ fontSize: 200, color: 'success.main' }} />\r\n            <Typography variant=\"body1\">\r\n              Scannen Sie den QR-Code mit Ihrer WhatsApp-App\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"textSecondary\">\r\n              1. Öffnen Sie WhatsApp auf Ihrem Smartphone<br/>\r\n              2. Gehen Sie zu Einstellungen → Verknüpfte Geräte<br/>\r\n              3. Tippen Sie auf \"Gerät verknüpfen\"<br/>\r\n              4. Scannen Sie den QR-Code\r\n            </Typography>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setShowQrDialog(false)}>Abbrechen</Button>\r\n          <Button variant=\"contained\" onClick={handleConnectWhatsApp}>\r\n            Verbunden\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Template Dialog */}\r\n      <Dialog open={showTemplateDialog} onClose={() => setShowTemplateDialog(false)} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>Nachrichten-Template</DialogTitle>\r\n        <DialogContent>\r\n          <Box className=\"space-y-4\">\r\n            <TextField\r\n              fullWidth\r\n              label=\"Template-Name\"\r\n              placeholder=\"z.B. Bestellbestätigung\"\r\n            />\r\n            <TextField\r\n              fullWidth\r\n              multiline\r\n              rows={4}\r\n              label=\"Nachricht\"\r\n              value={message}\r\n              onChange={(e) => setMessage(e.target.value)}\r\n              placeholder=\"Ihre Nachricht hier...\"\r\n            />\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setShowTemplateDialog(false)}>Abbrechen</Button>\r\n          <Button variant=\"contained\" onClick={handleSaveTemplate}>\r\n            Template speichern\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\crm\\tabs\\SupplierManagementTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentSubTab' is defined but never used. Allowed unused args must match /^_/u.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onSubTabChange' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Box, Typography, Card, CardContent } from '@mui/material';\r\nimport { Customer, CRMSubTab } from '../../../types/crm';\r\n\r\ninterface SupplierManagementTabProps {\r\n  customer: Customer;\r\n  currentSubTab: CRMSubTab;\r\n  onSubTabChange: (subTab: CRMSubTab) => void;\r\n}\r\n\r\nconst SupplierManagementTab: React.FC<SupplierManagementTabProps> = ({\r\n  customer,\r\n  currentSubTab,\r\n  onSubTabChange\r\n}) => {\r\n  return (\r\n    <Box className=\"space-y-4\">\r\n      <Card>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" className=\"mb-4 text-gray-800\">\r\n            Lieferanten - {customer.name}\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"textSecondary\">\r\n            Lieferanten-Tab wird implementiert...\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default SupplierManagementTab; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\e-invoicing\\EInvoicingForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormControl' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InputLabel' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Select' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MenuItem' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2935,2938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2935,2938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3634,3637],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3634,3637],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":250,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":250,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Box,\r\n  Alert,\r\n  Divider\r\n} from '@mui/material';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport { formatCurrency } from '../../utils/formatters';\r\nimport { EInvoicingFormData, InvoiceItem } from '../../types/invoices';\r\n\r\nconst schema = yup.object({\r\n  customerId: yup.string().required('Kunde ist erforderlich'),\r\n  customerName: yup.string().required('Kundenname ist erforderlich'),\r\n  customerEmail: yup.string().email('Ungültige E-Mail').required('E-Mail ist erforderlich'),\r\n  amount: yup.number().positive('Betrag muss positiv sein').required('Betrag ist erforderlich'),\r\n  taxAmount: yup.number().min(0, 'Steuerbetrag darf nicht negativ sein').required('Steuerbetrag ist erforderlich'),\r\n  totalAmount: yup.number().positive('Gesamtbetrag muss positiv sein').required('Gesamtbetrag ist erforderlich'),\r\n  currency: yup.string().required('Währung ist erforderlich'),\r\n  description: yup.string().required('Beschreibung ist erforderlich'),\r\n  dueDate: yup.string().required('Fälligkeitsdatum ist erforderlich')\r\n});\r\n\r\ninterface EInvoicingFormProps {\r\n  initialData?: Partial<EInvoicingFormData>;\r\n  onSubmit: (data: EInvoicingFormData) => Promise<void>;\r\n  onCancel?: () => void;\r\n  isLoading?: boolean;\r\n}\r\n\r\n/**\r\n * E-Invoicing Formular Komponente\r\n * Erstellt und bearbeitet elektronische Rechnungen\r\n */\r\nexport const EInvoicingForm: React.FC<EInvoicingFormProps> = ({\r\n  initialData,\r\n  onSubmit,\r\n  onCancel,\r\n  isLoading = false\r\n}) => {\r\n  const [items, setItems] = useState<InvoiceItem[]>(initialData?.items || []);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    watch,\r\n    setValue\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n    defaultValues: {\r\n      customerId: initialData?.customerId || '',\r\n      customerName: initialData?.customerName || '',\r\n      customerEmail: initialData?.customerEmail || '',\r\n      amount: initialData?.amount || 0,\r\n      taxAmount: initialData?.taxAmount || 0,\r\n      totalAmount: initialData?.totalAmount || 0,\r\n      currency: initialData?.currency || 'EUR',\r\n      description: initialData?.description || '',\r\n      dueDate: initialData?.dueDate || new Date().toISOString().split('T')[0],\r\n      // items: initialData?.items || []\r\n    }\r\n  });\r\n\r\n  const watchedAmount = watch('amount');\r\n  const watchedTaxAmount = watch('taxAmount');\r\n\r\n  // Berechne Gesamtbetrag automatisch\r\n  React.useEffect(() => {\r\n    const total = watchedAmount + watchedTaxAmount;\r\n    setValue('totalAmount', total);\r\n  }, [watchedAmount, watchedTaxAmount, setValue]);\r\n\r\n  const handleFormSubmit = async (data: any) => {\r\n    try {\r\n      setError(null);\r\n      await onSubmit({\r\n        ...data,\r\n        items\r\n      });\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Fehler beim Speichern der Rechnung');\r\n    }\r\n  };\r\n\r\n  const addItem = () => {\r\n    const newItem: InvoiceItem = {\r\n      id: Date.now().toString(),\r\n      name: '',\r\n      quantity: 1,\r\n      unitPrice: 0,\r\n      totalPrice: 0,\r\n      taxRate: 19, // Standard USt-Satz\r\n      taxAmount: 0\r\n    };\r\n    setItems([...items, newItem]);\r\n  };\r\n\r\n  const removeItem = (id: string) => {\r\n    setItems(items.filter(item => item.id !== id));\r\n  };\r\n\r\n  const updateItem = (id: string, field: keyof InvoiceItem, value: any) => {\r\n    setItems(items.map(item => {\r\n      if (item.id === id) {\r\n        const updatedItem = { ...item, [field]: value };\r\n        // Berechne abgeleitete Werte\r\n        if (field === 'quantity' || field === 'unitPrice') {\r\n          updatedItem.totalPrice = updatedItem.quantity * updatedItem.unitPrice;\r\n          updatedItem.taxAmount = updatedItem.totalPrice * (updatedItem.taxRate / 100);\r\n        }\r\n        if (field === 'taxRate') {\r\n          updatedItem.taxAmount = updatedItem.totalPrice * (value / 100);\r\n        }\r\n        return updatedItem;\r\n      }\r\n      return item;\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <Card className=\"w-full max-w-4xl mx-auto\">\r\n      <CardContent className=\"p-6\">\r\n        <Typography variant=\"h5\" className=\"mb-6 text-gray-800\">\r\n          {initialData ? 'Rechnung bearbeiten' : 'Neue Rechnung erstellen'}\r\n        </Typography>\r\n\r\n        {error && (\r\n          <Alert severity=\"error\" className=\"mb-4\">\r\n            {error}\r\n          </Alert>\r\n        )}\r\n\r\n        <form onSubmit={handleSubmit(handleFormSubmit)} className=\"space-y-6\">\r\n          {/* Kundeninformationen */}\r\n          <Box>\r\n            <Typography variant=\"h6\" className=\"mb-3 text-gray-700\">\r\n              Kundeninformationen\r\n            </Typography>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"customerName\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Kundenname\"\r\n                      fullWidth\r\n                      error={!!errors.customerName}\r\n                      helperText={errors.customerName?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"customerEmail\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"E-Mail\"\r\n                      type=\"email\"\r\n                      fullWidth\r\n                      error={!!errors.customerEmail}\r\n                      helperText={errors.customerEmail?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n\r\n          <Divider />\r\n\r\n          {/* Rechnungsdetails */}\r\n          <Box>\r\n            <Typography variant=\"h6\" className=\"mb-3 text-gray-700\">\r\n              Rechnungsdetails\r\n            </Typography>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"description\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Beschreibung\"\r\n                      multiline\r\n                      rows={3}\r\n                      fullWidth\r\n                      error={!!errors.description}\r\n                      helperText={errors.description?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"dueDate\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Fälligkeitsdatum\"\r\n                      type=\"date\"\r\n                      fullWidth\r\n                      InputLabelProps={{ shrink: true }}\r\n                      error={!!errors.dueDate}\r\n                      helperText={errors.dueDate?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n\r\n          <Divider />\r\n\r\n          {/* Rechnungspositionen */}\r\n          <Box>\r\n            <div className=\"flex justify-between items-center mb-3\">\r\n              <Typography variant=\"h6\" className=\"text-gray-700\">\r\n                Rechnungspositionen\r\n              </Typography>\r\n              <Button\r\n                type=\"button\"\r\n                variant=\"outlined\"\r\n                onClick={addItem}\r\n                className=\"text-blue-600 border-blue-600 hover:bg-blue-50\"\r\n              >\r\n                Position hinzufügen\r\n              </Button>\r\n            </div>\r\n\r\n            {items.map((item, index) => (\r\n              <Card key={item.id} className=\"mb-3 p-4 border border-gray-200\">\r\n                <Grid container spacing={2} alignItems=\"center\">\r\n                  <Grid item xs={12} md={4}>\r\n                    <TextField\r\n                      label=\"Bezeichnung\"\r\n                      value={item.name}\r\n                      onChange={(e) => updateItem(item.id, 'name', e.target.value)}\r\n                      fullWidth\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={6} md={2}>\r\n                    <TextField\r\n                      label=\"Menge\"\r\n                      type=\"number\"\r\n                      value={item.quantity}\r\n                      onChange={(e) => updateItem(item.id, 'quantity', Number(e.target.value))}\r\n                      fullWidth\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={6} md={2}>\r\n                    <TextField\r\n                      label=\"Einzelpreis\"\r\n                      type=\"number\"\r\n                      value={item.unitPrice}\r\n                      onChange={(e) => updateItem(item.id, 'unitPrice', Number(e.target.value))}\r\n                      fullWidth\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={6} md={2}>\r\n                    <TextField\r\n                      label=\"Steuersatz (%)\"\r\n                      type=\"number\"\r\n                      value={item.taxRate}\r\n                      onChange={(e) => updateItem(item.id, 'taxRate', Number(e.target.value))}\r\n                      fullWidth\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={6} md={2}>\r\n                    <div className=\"text-right\">\r\n                      <Typography variant=\"body2\" className=\"text-gray-600\">\r\n                        Gesamt: {formatCurrency(item.totalPrice)}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" className=\"text-gray-500\">\r\n                        Steuer: {formatCurrency(item.taxAmount)}\r\n                      </Typography>\r\n                    </div>\r\n                  </Grid>\r\n                  <Grid item xs={12} md={1}>\r\n                    <Button\r\n                      type=\"button\"\r\n                      variant=\"outlined\"\r\n                      color=\"error\"\r\n                      onClick={() => removeItem(item.id)}\r\n                      className=\"w-full\"\r\n                    >\r\n                      Löschen\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </Card>\r\n            ))}\r\n          </Box>\r\n\r\n          <Divider />\r\n\r\n          {/* Beträge */}\r\n          <Box>\r\n            <Typography variant=\"h6\" className=\"mb-3 text-gray-700\">\r\n              Beträge\r\n            </Typography>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"amount\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Nettobetrag\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.amount}\r\n                      helperText={errors.amount?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"taxAmount\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Steuerbetrag\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.taxAmount}\r\n                      helperText={errors.taxAmount?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"totalAmount\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Gesamtbetrag\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      disabled\r\n                      error={!!errors.totalAmount}\r\n                      helperText={errors.totalAmount?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n\r\n          {/* Aktionen */}\r\n          <Box className=\"flex justify-end space-x-3 pt-4\">\r\n            {onCancel && (\r\n              <Button\r\n                type=\"button\"\r\n                variant=\"outlined\"\r\n                onClick={onCancel}\r\n                disabled={isLoading}\r\n              >\r\n                Abbrechen\r\n              </Button>\r\n            )}\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              disabled={isLoading}\r\n              className=\"bg-blue-600 hover:bg-blue-700\"\r\n            >\r\n              {isLoading ? 'Speichere...' : (initialData ? 'Aktualisieren' : 'Erstellen')}\r\n            </Button>\r\n          </Box>\r\n        </form>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default EInvoicingForm; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\e-invoicing\\EInvoicingList.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchInvoices'. Either include it or remove the dependency array. Mutable values like 'pagination.current' aren't valid dependencies because mutating them doesn't re-render the component.","line":31,"column":6,"nodeType":"ArrayExpression","endLine":31,"endColumn":55,"suggestions":[{"desc":"Update the dependencies array to be: [fetchInvoices, filter, pagination.pageSize]","fix":{"range":[1102,1151],"text":"[fetchInvoices, filter, pagination.pageSize]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":172,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5034,5037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5034,5037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":188,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5382,5385],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5382,5385],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Table, Button, Space, Tag, Card, Row, Col, Statistic, Input, Select, DatePicker } from 'antd';\r\nimport { DownloadOutlined, EyeOutlined, DeleteOutlined, PlusOutlined, SearchOutlined } from '@ant-design/icons';\r\nimport { formatCurrency, formatDate } from '../../utils/formatters';\r\nimport { InvoiceSummary, InvoiceFilter, InvoiceStatus } from '../../types/invoices';\r\nimport { EInvoicingApi } from '../../services/eInvoicingApi';\r\n\r\nconst { Search } = Input;\r\nconst { Option } = Select;\r\nconst { RangePicker } = DatePicker;\r\n\r\ninterface EInvoicingListProps {\r\n  // Props für die e-Invoicing-Liste\r\n}\r\n\r\nconst EInvoicingList: React.FC<EInvoicingListProps> = () => {\r\n  const [invoices, setInvoices] = useState<InvoiceSummary[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [filter, setFilter] = useState<InvoiceFilter>({\r\n    startDate: '',\r\n    endDate: ''\r\n  });\r\n  const [pagination, setPagination] = useState({\r\n    current: 1,\r\n    pageSize: 10,\r\n    total: 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchInvoices();\r\n  }, [filter, pagination.current, pagination.pageSize]);\r\n\r\n  const fetchInvoices = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const data = await EInvoicingApi.getInvoices(filter);\r\n      setInvoices(data);\r\n      setPagination(prev => ({ ...prev, total: data.length }));\r\n    } catch (error) {\r\n      console.error('Fehler beim Laden der e-Rechnungen:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDownload = async (invoiceId: string) => {\r\n    try {\r\n      const blob = await EInvoicingApi.downloadInvoice(invoiceId);\r\n      const url = window.URL.createObjectURL(blob);\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = `invoice-${invoiceId}.pdf`;\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      window.URL.revokeObjectURL(url);\r\n      document.body.removeChild(a);\r\n    } catch (error) {\r\n      console.error('Fehler beim Herunterladen:', error);\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'PAID': return 'green';\r\n      case 'PENDING': return 'orange';\r\n      case 'OVERDUE': return 'red';\r\n      case 'DRAFT': return 'blue';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getStatusLabel = (status: string) => {\r\n    switch (status) {\r\n      case 'PAID': return 'Bezahlt';\r\n      case 'PENDING': return 'Ausstehend';\r\n      case 'OVERDUE': return 'Überfällig';\r\n      case 'DRAFT': return 'Entwurf';\r\n      default: return status;\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Rechnungsnummer',\r\n      dataIndex: 'invoiceNumber',\r\n      key: 'invoiceNumber',\r\n      fixed: 'left' as const,\r\n      width: 150,\r\n      render: (text: string) => <strong>{text}</strong>,\r\n    },\r\n    {\r\n      title: 'Kunde',\r\n      dataIndex: 'customerName',\r\n      key: 'customerName',\r\n      width: 200,\r\n    },\r\n    {\r\n      title: 'Betrag',\r\n      dataIndex: 'amount',\r\n      key: 'amount',\r\n      width: 120,\r\n      render: (amount: number, record: InvoiceSummary) => \r\n        formatCurrency(amount, record.currency),\r\n    },\r\n    {\r\n      title: 'Status',\r\n      dataIndex: 'status',\r\n      key: 'status',\r\n      width: 120,\r\n      render: (status: string) => (\r\n        <Tag color={getStatusColor(status)}>\r\n          {getStatusLabel(status)}\r\n        </Tag>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Erstellt',\r\n      dataIndex: 'createdAt',\r\n      key: 'createdAt',\r\n      width: 120,\r\n      render: (date: string) => formatDate(date),\r\n    },\r\n    {\r\n      title: 'Aktionen',\r\n      key: 'actions',\r\n      fixed: 'right' as const,\r\n      width: 150,\r\n      render: (text: string, record: InvoiceSummary) => (\r\n        <Space size=\"small\">\r\n          <Button\r\n            type=\"link\"\r\n            icon={<EyeOutlined />}\r\n            onClick={() => handleView(record.invoiceId)}\r\n            title=\"Anzeigen\"\r\n          />\r\n          <Button\r\n            type=\"link\"\r\n            icon={<DownloadOutlined />}\r\n            onClick={() => handleDownload(record.invoiceId)}\r\n            title=\"Herunterladen\"\r\n          />\r\n          <Button\r\n            type=\"link\"\r\n            danger\r\n            icon={<DeleteOutlined />}\r\n            onClick={() => handleDelete(record.invoiceId)}\r\n            title=\"Löschen\"\r\n          />\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const handleView = (invoiceId: string) => {\r\n    // Implementierung für Anzeigen der e-Rechnung\r\n    console.log('Anzeigen e-Rechnung:', invoiceId);\r\n  };\r\n\r\n  const handleDelete = (invoiceId: string) => {\r\n    // Implementierung für Löschen der e-Rechnung\r\n    console.log('Löschen e-Rechnung:', invoiceId);\r\n  };\r\n\r\n  const handleSearch = (value: string) => {\r\n    setFilter(prev => ({ ...prev, search: value }));\r\n  };\r\n\r\n  const handleStatusFilter = (value: string) => {\r\n    setFilter(prev => ({ ...prev, status: value as InvoiceStatus }));\r\n  };\r\n\r\n  const handleDateRangeFilter = (dates: any) => {\r\n    if (dates) {\r\n      setFilter(prev => ({\r\n        ...prev,\r\n        startDate: dates[0]?.toISOString(),\r\n        endDate: dates[1]?.toISOString(),\r\n      }));\r\n    } else {\r\n      setFilter(prev => ({\r\n        ...prev,\r\n        startDate: '',\r\n        endDate: ''\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleTableChange = (pagination: any) => {\r\n    setPagination(prev => ({\r\n      ...prev,\r\n      current: pagination.current,\r\n      pageSize: pagination.pageSize,\r\n    }));\r\n  };\r\n\r\n  // Mock-Statistiken\r\n  const statistics = {\r\n    totalInvoices: invoices.length,\r\n    totalAmount: invoices.reduce((sum, inv) => sum + inv.amount, 0),\r\n    paidInvoices: invoices.filter(inv => inv.status === 'paid').length,\r\n    pendingInvoices: invoices.filter(inv => inv.status === 'open').length,\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6\">\r\n      {/* Statistiken */}\r\n      <Card size=\"small\" className=\"mb-4\">\r\n        <Row gutter={16}>\r\n          <Col span={6}>\r\n            <Statistic\r\n              title=\"Gesamt e-Rechnungen\"\r\n              value={statistics.totalInvoices}\r\n              suffix=\"Stück\"\r\n            />\r\n          </Col>\r\n          <Col span={6}>\r\n            <Statistic\r\n              title=\"Gesamtbetrag\"\r\n              value={statistics.totalAmount}\r\n              precision={2}\r\n              suffix=\"€\"\r\n            />\r\n          </Col>\r\n          <Col span={6}>\r\n            <Statistic\r\n              title=\"Bezahlte e-Rechnungen\"\r\n              value={statistics.paidInvoices}\r\n              suffix=\"Stück\"\r\n            />\r\n          </Col>\r\n          <Col span={6}>\r\n            <Statistic\r\n              title=\"Ausstehende e-Rechnungen\"\r\n              value={statistics.pendingInvoices}\r\n              suffix=\"Stück\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Card>\r\n\r\n      {/* Filter */}\r\n      <Card size=\"small\" className=\"mb-4\">\r\n        <Row gutter={16} align=\"middle\">\r\n          <Col span={6}>\r\n            <Search\r\n              placeholder=\"Suche nach Rechnungsnummer oder Kunde\"\r\n              onSearch={handleSearch}\r\n              enterButton={<SearchOutlined />}\r\n            />\r\n          </Col>\r\n          <Col span={4}>\r\n            <Select\r\n              placeholder=\"Status\"\r\n              allowClear\r\n              style={{ width: '100%' }}\r\n              onChange={handleStatusFilter}\r\n            >\r\n              <Option value=\"PAID\">Bezahlt</Option>\r\n              <Option value=\"PENDING\">Ausstehend</Option>\r\n              <Option value=\"OVERDUE\">Überfällig</Option>\r\n              <Option value=\"DRAFT\">Entwurf</Option>\r\n            </Select>\r\n          </Col>\r\n          <Col span={6}>\r\n            <RangePicker\r\n              placeholder={['Startdatum', 'Enddatum']}\r\n              onChange={handleDateRangeFilter}\r\n              style={{ width: '100%' }}\r\n            />\r\n          </Col>\r\n          <Col span={8}>\r\n            <Space>\r\n              <Button\r\n                type=\"primary\"\r\n                icon={<PlusOutlined />}\r\n                onClick={() => console.log('Neue e-Rechnung erstellen')}\r\n              >\r\n                Neue e-Rechnung\r\n              </Button>\r\n              <Button onClick={fetchInvoices}>\r\n                Aktualisieren\r\n              </Button>\r\n            </Space>\r\n          </Col>\r\n        </Row>\r\n      </Card>\r\n\r\n      {/* Tabelle */}\r\n      <Card>\r\n        <Table\r\n          columns={columns}\r\n          dataSource={invoices}\r\n          rowKey=\"invoiceId\"\r\n          loading={loading}\r\n          pagination={{\r\n            current: pagination.current,\r\n            pageSize: pagination.pageSize,\r\n            total: pagination.total,\r\n            showSizeChanger: true,\r\n            showQuickJumper: true,\r\n            showTotal: (total, range) =>\r\n              `${range[0]}-${range[1]} von ${total} e-Rechnungen`,\r\n          }}\r\n          onChange={handleTableChange}\r\n          scroll={{ x: 1000 }}\r\n          size=\"small\"\r\n        />\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EInvoicingList; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\e-invoicing\\EInvoicingPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":15,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Box, Tabs, Tab, Typography, Paper, Container } from '@mui/material';\r\nimport { TabPanel } from '../../components/common/TabPanel';\r\nimport EInvoicingList from './EInvoicingList';\r\nimport EInvoicingForm from './EInvoicingForm';\r\nimport EInvoicingStatistics from './EInvoicingStatistics';\r\nimport EInvoicingValidation from './EInvoicingValidation';\r\n\r\ninterface EInvoicingPageProps {\r\n  // Props für die e-Invoicing-Seite\r\n}\r\n\r\nexport const EInvoicingPage: React.FC<EInvoicingPageProps> = () => {\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\">\r\n      <Box sx={{ width: '100%', mt: 2 }}>\r\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n          E-Invoicing Management\r\n        </Typography>\r\n        <Typography variant=\"body1\" color=\"text.secondary\" gutterBottom>\r\n          ZUGFeRD/XRechnung e-Invoicing mit Mustangproject und Claude Flow Integration\r\n        </Typography>\r\n\r\n        <Paper sx={{ width: '100%', mt: 3 }}>\r\n          <Tabs\r\n            value={tabValue}\r\n            onChange={handleTabChange}\r\n            indicatorColor=\"primary\"\r\n            textColor=\"primary\"\r\n            variant=\"scrollable\"\r\n            scrollButtons=\"auto\"\r\n          >\r\n            <Tab label=\"E-Rechnungen\" />\r\n            <Tab label=\"Neue e-Rechnung\" />\r\n            <Tab label=\"Validierung\" />\r\n            <Tab label=\"Statistiken\" />\r\n          </Tabs>\r\n\r\n          <TabPanel value={tabValue} index={0}>\r\n            <EInvoicingList />\r\n          </TabPanel>\r\n\r\n          <TabPanel value={tabValue} index={1}>\r\n            <EInvoicingForm \r\n              onSubmit={async (data) => {\r\n                console.log('Neue Rechnung:', data);\r\n                // Hier würde die API-Integration erfolgen\r\n              }}\r\n              onCancel={() => setTabValue(0)}\r\n            />\r\n          </TabPanel>\r\n\r\n          <TabPanel value={tabValue} index={2}>\r\n            <EInvoicingValidation \r\n              validationResult={{\r\n                isValid: true,\r\n                errors: [],\r\n                warnings: []\r\n              }}\r\n            />\r\n          </TabPanel>\r\n\r\n          <TabPanel value={tabValue} index={3}>\r\n            <EInvoicingStatistics \r\n              statistics={{\r\n                monthly: [],\r\n                yearly: [],\r\n                topCustomers: [],\r\n                paymentMethods: []\r\n              }}\r\n            />\r\n          </TabPanel>\r\n        </Paper>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default EInvoicingPage; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\e-invoicing\\EInvoicingStatistics.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getStatusColor' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":38,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getStatusIcon' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":51,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Grid,\r\n  Box,\r\n  LinearProgress,\r\n  Chip\r\n} from '@mui/material';\r\nimport {\r\n  TrendingUp,\r\n  TrendingDown,\r\n  AttachMoney,\r\n  Receipt,\r\n  Warning,\r\n  CheckCircle\r\n} from '@mui/icons-material';\r\nimport { formatCurrency, formatPercentage } from '../../utils/formatters';\r\nimport { EInvoicingStatistics as EInvoicingStats } from '../../types/invoices';\r\n\r\ninterface EInvoicingStatisticsProps {\r\n  statistics: EInvoicingStats;\r\n  isLoading?: boolean;\r\n}\r\n\r\n/**\r\n * E-Invoicing Statistiken Komponente\r\n * Zeigt Übersicht über Rechnungsstatistiken an\r\n */\r\nexport const EInvoicingStatistics: React.FC<EInvoicingStatisticsProps> = ({\r\n  statistics,\r\n  isLoading = false\r\n}) => {\r\n  const currentMonth = statistics.monthly[statistics.monthly.length - 1];\r\n  const currentYear = statistics.yearly[statistics.yearly.length - 1];\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'paid':\r\n        return 'success';\r\n      case 'overdue':\r\n        return 'error';\r\n      case 'open':\r\n        return 'warning';\r\n      default:\r\n        return 'default';\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'paid':\r\n        return <CheckCircle fontSize=\"small\" />;\r\n      case 'overdue':\r\n        return <Warning fontSize=\"small\" />;\r\n      case 'open':\r\n        return <Receipt fontSize=\"small\" />;\r\n      default:\r\n        return <AttachMoney fontSize=\"small\" />;\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Box className=\"w-full\">\r\n        <LinearProgress />\r\n        <Typography className=\"mt-4 text-center text-gray-500\">\r\n          Lade Statistiken...\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Übersichtskarten */}\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card className=\"h-full\">\r\n            <CardContent className=\"text-center\">\r\n              <AttachMoney className=\"text-blue-600 text-3xl mb-2\" />\r\n              <Typography variant=\"h4\" className=\"font-bold text-gray-800\">\r\n                {formatCurrency(currentMonth?.totalAmount || 0)}\r\n              </Typography>\r\n              <Typography variant=\"body2\" className=\"text-gray-600\">\r\n                Monatlicher Umsatz\r\n              </Typography>\r\n              <div className=\"flex items-center justify-center mt-2\">\r\n                <TrendingUp className=\"text-green-600 text-sm mr-1\" />\r\n                <Typography variant=\"caption\" className=\"text-green-600\">\r\n                  +12.5%\r\n                </Typography>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card className=\"h-full\">\r\n            <CardContent className=\"text-center\">\r\n              <Receipt className=\"text-green-600 text-3xl mb-2\" />\r\n              <Typography variant=\"h4\" className=\"font-bold text-gray-800\">\r\n                {currentMonth?.paidInvoices || 0}\r\n              </Typography>\r\n              <Typography variant=\"body2\" className=\"text-gray-600\">\r\n                Bezahlte Rechnungen\r\n              </Typography>\r\n              <div className=\"flex items-center justify-center mt-2\">\r\n                <CheckCircle className=\"text-green-600 text-sm mr-1\" />\r\n                <Typography variant=\"caption\" className=\"text-green-600\">\r\n                  {formatPercentage((currentMonth?.paidInvoices || 0) / (currentMonth?.totalInvoices || 1))}\r\n                </Typography>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card className=\"h-full\">\r\n            <CardContent className=\"text-center\">\r\n              <Warning className=\"text-orange-600 text-3xl mb-2\" />\r\n              <Typography variant=\"h4\" className=\"font-bold text-gray-800\">\r\n                {currentMonth?.overdueInvoices || 0}\r\n              </Typography>\r\n              <Typography variant=\"body2\" className=\"text-gray-600\">\r\n                Überfällige Rechnungen\r\n              </Typography>\r\n              <div className=\"flex items-center justify-center mt-2\">\r\n                <TrendingDown className=\"text-orange-600 text-sm mr-1\" />\r\n                <Typography variant=\"caption\" className=\"text-orange-600\">\r\n                  {formatCurrency(currentMonth?.overdueAmount || 0)}\r\n                </Typography>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card className=\"h-full\">\r\n            <CardContent className=\"text-center\">\r\n              <Receipt className=\"text-blue-600 text-3xl mb-2\" />\r\n              <Typography variant=\"h4\" className=\"font-bold text-gray-800\">\r\n                {currentMonth?.totalInvoices || 0}\r\n              </Typography>\r\n              <Typography variant=\"body2\" className=\"text-gray-600\">\r\n                Gesamte Rechnungen\r\n              </Typography>\r\n              <div className=\"flex items-center justify-center mt-2\">\r\n                <Typography variant=\"caption\" className=\"text-gray-500\">\r\n                  Ø {formatCurrency(currentMonth?.averageAmount || 0)}\r\n                </Typography>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Detaillierte Statistiken */}\r\n      <Grid container spacing={3}>\r\n        {/* Monatliche Entwicklung */}\r\n        <Grid item xs={12} md={6}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" className=\"mb-4 text-gray-800\">\r\n                Monatliche Entwicklung\r\n              </Typography>\r\n              <div className=\"space-y-3\">\r\n                {statistics.monthly.slice(-6).map((month, index) => (\r\n                  <div key={index} className=\"flex justify-between items-center\">\r\n                    <div>\r\n                      <Typography variant=\"body2\" className=\"text-gray-600\">\r\n                                                 {new Date().toLocaleDateString('de-DE', { month: 'short', year: 'numeric' })}\r\n                      </Typography>\r\n                      <Typography variant=\"caption\" className=\"text-gray-500\">\r\n                        {month.totalInvoices} Rechnungen\r\n                      </Typography>\r\n                    </div>\r\n                    <div className=\"text-right\">\r\n                      <Typography variant=\"body2\" className=\"font-semibold\">\r\n                        {formatCurrency(month.totalAmount)}\r\n                      </Typography>\r\n                      <div className=\"flex items-center space-x-1\">\r\n                        <Chip\r\n                          label={`${month.paidInvoices}/${month.totalInvoices}`}\r\n                          size=\"small\"\r\n                          color=\"success\"\r\n                          variant=\"outlined\"\r\n                        />\r\n                        <Chip\r\n                          label={month.overdueInvoices.toString()}\r\n                          size=\"small\"\r\n                          color=\"error\"\r\n                          variant=\"outlined\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Top Kunden */}\r\n        <Grid item xs={12} md={6}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" className=\"mb-4 text-gray-800\">\r\n                Top Kunden\r\n              </Typography>\r\n              <div className=\"space-y-3\">\r\n                {statistics.topCustomers.slice(0, 5).map((customer, index) => (\r\n                  <div key={customer.customerId} className=\"flex justify-between items-center\">\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <div className=\"w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center\">\r\n                        <Typography variant=\"caption\" className=\"text-blue-600 font-semibold\">\r\n                          {index + 1}\r\n                        </Typography>\r\n                      </div>\r\n                      <div>\r\n                        <Typography variant=\"body2\" className=\"font-medium\">\r\n                          {customer.customerName}\r\n                        </Typography>\r\n                        <Typography variant=\"caption\" className=\"text-gray-500\">\r\n                          {customer.invoiceCount} Rechnungen\r\n                        </Typography>\r\n                      </div>\r\n                    </div>\r\n                    <Typography variant=\"body2\" className=\"font-semibold\">\r\n                      {formatCurrency(customer.totalAmount)}\r\n                    </Typography>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Zahlungsmethoden */}\r\n      <Card>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" className=\"mb-4 text-gray-800\">\r\n            Zahlungsmethoden\r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            {statistics.paymentMethods.map((method, index) => (\r\n              <Grid item xs={12} sm={6} md={4} key={index}>\r\n                <div className=\"p-3 border border-gray-200 rounded-lg\">\r\n                  <div className=\"flex justify-between items-center mb-2\">\r\n                    <Typography variant=\"body2\" className=\"font-medium\">\r\n                      {method.method}\r\n                    </Typography>\r\n                    <Chip\r\n                      label={method.count.toString()}\r\n                      size=\"small\"\r\n                      color=\"primary\"\r\n                      variant=\"outlined\"\r\n                    />\r\n                  </div>\r\n                  <Typography variant=\"h6\" className=\"font-bold text-gray-800\">\r\n                    {formatCurrency(method.totalAmount)}\r\n                  </Typography>\r\n                  <LinearProgress\r\n                    variant=\"determinate\"\r\n                    value={(method.totalAmount / (currentMonth?.totalAmount || 1)) * 100}\r\n                    className=\"mt-2\"\r\n                  />\r\n                </div>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Jahresvergleich */}\r\n      <Card>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" className=\"mb-4 text-gray-800\">\r\n            Jahresvergleich\r\n          </Typography>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} md={6}>\r\n              <Typography variant=\"subtitle1\" className=\"mb-2 text-gray-700\">\r\n                Aktuelles Jahr\r\n              </Typography>\r\n              <div className=\"space-y-2\">\r\n                <div className=\"flex justify-between\">\r\n                  <span>Gesamtumsatz:</span>\r\n                  <span className=\"font-semibold\">{formatCurrency(currentYear?.totalAmount || 0)}</span>\r\n                </div>\r\n                <div className=\"flex justify-between\">\r\n                  <span>Rechnungen:</span>\r\n                  <span className=\"font-semibold\">{currentYear?.totalInvoices || 0}</span>\r\n                </div>\r\n                <div className=\"flex justify-between\">\r\n                  <span>Durchschnitt:</span>\r\n                  <span className=\"font-semibold\">{formatCurrency(currentYear?.averageAmount || 0)}</span>\r\n                </div>\r\n              </div>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <Typography variant=\"subtitle1\" className=\"mb-2 text-gray-700\">\r\n                Vorjahr\r\n              </Typography>\r\n              <div className=\"space-y-2\">\r\n                <div className=\"flex justify-between\">\r\n                  <span>Gesamtumsatz:</span>\r\n                  <span className=\"font-semibold\">{formatCurrency((currentYear?.totalAmount || 0) * 0.85)}</span>\r\n                </div>\r\n                <div className=\"flex justify-between\">\r\n                  <span>Rechnungen:</span>\r\n                  <span className=\"font-semibold\">{Math.floor((currentYear?.totalInvoices || 0) * 0.9)}</span>\r\n                </div>\r\n                <div className=\"flex justify-between\">\r\n                  <span>Durchschnitt:</span>\r\n                  <span className=\"font-semibold\">{formatCurrency((currentYear?.averageAmount || 0) * 0.95)}</span>\r\n                </div>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EInvoicingStatistics; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\e-invoicing\\EInvoicingValidation.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getValidationColor' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":56,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Alert,\r\n  Box,\r\n  Chip,\r\n  Button,\r\n  Collapse\r\n} from '@mui/material';\r\nimport {\r\n  CheckCircle,\r\n  Error,\r\n  Warning,\r\n  ExpandMore,\r\n  ExpandLess,\r\n  Refresh\r\n} from '@mui/icons-material';\r\nimport { EInvoicingValidationResult } from '../../types/invoices';\r\n\r\ninterface EInvoicingValidationProps {\r\n  validationResult: EInvoicingValidationResult;\r\n  onRevalidate?: () => void;\r\n  isLoading?: boolean;\r\n}\r\n\r\n/**\r\n * E-Invoicing Validierung Komponente\r\n * Zeigt Validierungsergebnisse für elektronische Rechnungen an\r\n */\r\nexport const EInvoicingValidation: React.FC<EInvoicingValidationProps> = ({\r\n  validationResult,\r\n  onRevalidate,\r\n  isLoading = false\r\n}) => {\r\n  const [expanded, setExpanded] = React.useState(true);\r\n\r\n  const getValidationIcon = (type: 'error' | 'warning' | 'success') => {\r\n    switch (type) {\r\n      case 'error':\r\n        return <Error color=\"error\" />;\r\n      case 'warning':\r\n        return <Warning color=\"warning\" />;\r\n      case 'success':\r\n        return <CheckCircle color=\"success\" />;\r\n      default:\r\n        return <CheckCircle color=\"success\" />;\r\n    }\r\n  };\r\n\r\n  const getValidationColor = (type: 'error' | 'warning' | 'success') => {\r\n    switch (type) {\r\n      case 'error':\r\n        return 'error';\r\n      case 'warning':\r\n        return 'warning';\r\n      case 'success':\r\n        return 'success';\r\n      default:\r\n        return 'success';\r\n    }\r\n  };\r\n\r\n  const handleToggleExpanded = () => {\r\n    setExpanded(!expanded);\r\n  };\r\n\r\n  const handleRevalidate = () => {\r\n    if (onRevalidate) {\r\n      onRevalidate();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card className=\"w-full\">\r\n      <CardContent className=\"p-4\">\r\n        {/* Header */}\r\n        <div className=\"flex justify-between items-center mb-4\">\r\n          <div className=\"flex items-center space-x-2\">\r\n            <Typography variant=\"h6\" className=\"text-gray-800\">\r\n              Rechnungsvalidierung\r\n            </Typography>\r\n            <Chip\r\n              label={validationResult.isValid ? 'Gültig' : 'Ungültig'}\r\n              color={validationResult.isValid ? 'success' : 'error'}\r\n              size=\"small\"\r\n            />\r\n          </div>\r\n          <div className=\"flex items-center space-x-2\">\r\n            {onRevalidate && (\r\n              <Button\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                onClick={handleRevalidate}\r\n                disabled={isLoading}\r\n                startIcon={<Refresh />}\r\n              >\r\n                Neu validieren\r\n              </Button>\r\n            )}\r\n            <Button\r\n              size=\"small\"\r\n              variant=\"text\"\r\n              onClick={handleToggleExpanded}\r\n              endIcon={expanded ? <ExpandLess /> : <ExpandMore />}\r\n            >\r\n              {expanded ? 'Einklappen' : 'Ausklappen'}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Gesamtstatus */}\r\n        {validationResult.isValid ? (\r\n          <Alert severity=\"success\" className=\"mb-4\">\r\n            <Typography variant=\"body2\">\r\n              Die Rechnung ist gültig und entspricht allen Anforderungen.\r\n            </Typography>\r\n          </Alert>\r\n        ) : (\r\n          <Alert severity=\"error\" className=\"mb-4\">\r\n            <Typography variant=\"body2\">\r\n              Die Rechnung enthält Fehler und muss korrigiert werden.\r\n            </Typography>\r\n          </Alert>\r\n        )}\r\n\r\n        <Collapse in={expanded}>\r\n          {/* Fehler */}\r\n          {validationResult.errors.length > 0 && (\r\n            <Box className=\"mb-4\">\r\n              <Typography variant=\"subtitle1\" className=\"mb-2 text-red-600 font-semibold\">\r\n                Fehler ({validationResult.errors.length})\r\n              </Typography>\r\n              <List dense className=\"bg-red-50 rounded-lg\">\r\n                {validationResult.errors.map((error, index) => (\r\n                  <ListItem key={index} className=\"py-1\">\r\n                    <ListItemIcon className=\"min-w-0 mr-2\">\r\n                      {getValidationIcon('error')}\r\n                    </ListItemIcon>\r\n                    <ListItemText\r\n                      primary={error}\r\n                      primaryTypographyProps={{\r\n                        variant: 'body2',\r\n                        className: 'text-red-700'\r\n                      }}\r\n                    />\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            </Box>\r\n          )}\r\n\r\n          {/* Warnungen */}\r\n          {validationResult.warnings.length > 0 && (\r\n            <Box className=\"mb-4\">\r\n              <Typography variant=\"subtitle1\" className=\"mb-2 text-orange-600 font-semibold\">\r\n                Warnungen ({validationResult.warnings.length})\r\n              </Typography>\r\n              <List dense className=\"bg-orange-50 rounded-lg\">\r\n                {validationResult.warnings.map((warning, index) => (\r\n                  <ListItem key={index} className=\"py-1\">\r\n                    <ListItemIcon className=\"min-w-0 mr-2\">\r\n                      {getValidationIcon('warning')}\r\n                    </ListItemIcon>\r\n                    <ListItemText\r\n                      primary={warning}\r\n                      primaryTypographyProps={{\r\n                        variant: 'body2',\r\n                        className: 'text-orange-700'\r\n                      }}\r\n                    />\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            </Box>\r\n          )}\r\n\r\n          {/* Erfolgreiche Validierungen */}\r\n          {validationResult.errors.length === 0 && validationResult.warnings.length === 0 && (\r\n            <Box>\r\n              <Typography variant=\"subtitle1\" className=\"mb-2 text-green-600 font-semibold\">\r\n                Alle Prüfungen erfolgreich\r\n              </Typography>\r\n              <List dense className=\"bg-green-50 rounded-lg\">\r\n                <ListItem className=\"py-1\">\r\n                  <ListItemIcon className=\"min-w-0 mr-2\">\r\n                    {getValidationIcon('success')}\r\n                  </ListItemIcon>\r\n                  <ListItemText\r\n                    primary=\"Rechnungsformat ist korrekt\"\r\n                    primaryTypographyProps={{\r\n                      variant: 'body2',\r\n                      className: 'text-green-700'\r\n                    }}\r\n                  />\r\n                </ListItem>\r\n                <ListItem className=\"py-1\">\r\n                  <ListItemIcon className=\"min-w-0 mr-2\">\r\n                    {getValidationIcon('success')}\r\n                  </ListItemIcon>\r\n                  <ListItemText\r\n                    primary=\"Alle Pflichtfelder sind ausgefüllt\"\r\n                    primaryTypographyProps={{\r\n                      variant: 'body2',\r\n                      className: 'text-green-700'\r\n                    }}\r\n                  />\r\n                </ListItem>\r\n                <ListItem className=\"py-1\">\r\n                  <ListItemIcon className=\"min-w-0 mr-2\">\r\n                    {getValidationIcon('success')}\r\n                  </ListItemIcon>\r\n                  <ListItemText\r\n                    primary=\"Steuerberechnungen sind korrekt\"\r\n                    primaryTypographyProps={{\r\n                      variant: 'body2',\r\n                      className: 'text-green-700'\r\n                    }}\r\n                  />\r\n                </ListItem>\r\n                <ListItem className=\"py-1\">\r\n                  <ListItemIcon className=\"min-w-0 mr-2\">\r\n                    {getValidationIcon('success')}\r\n                  </ListItemIcon>\r\n                  <ListItemText\r\n                    primary=\"Kundeninformationen sind vollständig\"\r\n                    primaryTypographyProps={{\r\n                      variant: 'body2',\r\n                      className: 'text-green-700'\r\n                    }}\r\n                  />\r\n                </ListItem>\r\n              </List>\r\n            </Box>\r\n          )}\r\n        </Collapse>\r\n\r\n        {/* Zusammenfassung */}\r\n        <Box className=\"mt-4 pt-4 border-t border-gray-200\">\r\n          <div className=\"flex justify-between items-center\">\r\n            <div className=\"flex items-center space-x-4\">\r\n              <div className=\"flex items-center space-x-1\">\r\n                <Error color=\"error\" fontSize=\"small\" />\r\n                <Typography variant=\"body2\" className=\"text-gray-600\">\r\n                  {validationResult.errors.length} Fehler\r\n                </Typography>\r\n              </div>\r\n              <div className=\"flex items-center space-x-1\">\r\n                <Warning color=\"warning\" fontSize=\"small\" />\r\n                <Typography variant=\"body2\" className=\"text-gray-600\">\r\n                  {validationResult.warnings.length} Warnungen\r\n                </Typography>\r\n              </div>\r\n            </div>\r\n            <Chip\r\n              label={validationResult.isValid ? 'Bereit zum Versenden' : 'Korrektur erforderlich'}\r\n              color={validationResult.isValid ? 'success' : 'error'}\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default EInvoicingValidation; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\erp\\DeliveryNote.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onDeliveryCreate' is defined but never used. Allowed unused args must match /^_/u.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onDeliveryUpdate' is defined but never used. Allowed unused args must match /^_/u.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onDeliveryDelete' is defined but never used. Allowed unused args must match /^_/u.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Temporär auskommentiert - wird durch DeliveryNoteForm ersetzt\r\n\r\nexport interface DeliveryNoteData {\r\n  id: string;\r\n  deliveryNumber: string;\r\n  deliveryDate: string;\r\n  supplier: string;\r\n  items: DeliveryNoteItem[];\r\n  status: string;\r\n}\r\n\r\nexport interface DeliveryNoteItem {\r\n  id: string;\r\n  articleNumber: string;\r\n  description: string;\r\n  quantity: number;\r\n  unit: string;\r\n}\r\n\r\nexport interface DeliveryNoteProps {\r\n  onDeliveryCreate: (delivery: DeliveryNoteData) => void;\r\n  onDeliveryUpdate: (id: string, delivery: Partial<DeliveryNoteData>) => void;\r\n  onDeliveryDelete: (id: string) => void;\r\n}\r\n\r\nexport const DeliveryNote: React.FC<DeliveryNoteProps> = ({\r\n  onDeliveryCreate,\r\n  onDeliveryUpdate,\r\n  onDeliveryDelete\r\n}) => {\r\n  return (\r\n    <div className=\"p-6\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">Delivery Note</h1>\r\n      <p className=\"text-gray-600\">Diese Komponente wird durch DeliveryNoteForm ersetzt.</p>\r\n    </div>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\erp\\DeliveryNoteForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2775,2778],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2775,2778],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3054,3057],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3054,3057],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Box, Card, Typography, TextField, Checkbox, FormControlLabel, Button, CircularProgress, Autocomplete } from '@mui/material';\r\nimport { DataGrid, GridColDef, GridRowsProp } from '@mui/x-data-grid';\r\nimport { DeliveryNoteMasterData, DeliveryNotePosition } from '../../types/erp';\r\nimport { Supplier } from '../../types/crm';\r\n\r\n/**\r\n * Props für das Lieferanten-Lieferschein-Formular\r\n */\r\nexport interface DeliveryNoteFormProps {\r\n  masterData: DeliveryNoteMasterData;\r\n  positions: DeliveryNotePosition[];\r\n  suppliers: Supplier[];\r\n  loading?: boolean;\r\n  error?: string;\r\n  onChangeMasterData: (data: Partial<DeliveryNoteMasterData>) => void;\r\n  onChangePositions: (positions: DeliveryNotePosition[]) => void;\r\n  onSubmit: () => void;\r\n  onCancel?: () => void;\r\n}\r\n\r\n/**\r\n * Lieferanten-Lieferschein-Formular\r\n * - Stammdaten (oben)\r\n * - Positionen (Tabelle)\r\n * - Error-Handling, Loading-State, responsive\r\n */\r\nexport const DeliveryNoteForm: React.FC<DeliveryNoteFormProps> = ({\r\n  masterData,\r\n  positions,\r\n  suppliers,\r\n  loading = false,\r\n  error,\r\n  onChangeMasterData,\r\n  onChangePositions,\r\n  onSubmit,\r\n  onCancel,\r\n}) => {\r\n  // Spalten für die Positions-Tabelle\r\n  const columns: GridColDef[] = [\r\n    { field: 'posNr', headerName: 'Pos.-Nr.', width: 80, editable: false },\r\n    { field: 'artikelNr', headerName: 'Artikel-Nr.', width: 120, editable: true },\r\n    { field: 'lieferantenArtNr', headerName: 'Lieferanten-Art.-Nr.', width: 140, editable: true },\r\n    { field: 'artikelbezeichnung', headerName: 'Artikelbezeichnung', width: 180, editable: true },\r\n    { field: 'gebindeNr', headerName: 'Gebinde-Nr.', width: 120, editable: true },\r\n    { field: 'gebinde', headerName: 'Gebinde', width: 100, editable: true },\r\n    { field: 'menge', headerName: 'Menge', width: 90, editable: true, type: 'number' },\r\n    { field: 'einheit', headerName: 'Einheit', width: 90, editable: true },\r\n    { field: 'ekPreis', headerName: 'EK-Preis', width: 100, editable: true, type: 'number' },\r\n    { field: 'niederlassung', headerName: 'Niederl.', width: 100, editable: true },\r\n    { field: 'lagerhalle', headerName: 'Lagerhalle', width: 110, editable: true },\r\n    { field: 'lagerfach', headerName: 'Lagerfach', width: 100, editable: true },\r\n    { field: 'charge', headerName: 'Charge', width: 100, editable: true },\r\n    { field: 'serienNr', headerName: 'Serien-Nr.', width: 120, editable: true },\r\n    { field: 'kontakt', headerName: 'Kontakt', width: 120, editable: true },\r\n    { field: 'preiscode', headerName: 'Preiscode', width: 100, editable: true },\r\n    { field: 'masterNr', headerName: 'Master-Nr.', width: 120, editable: true },\r\n  ];\r\n\r\n  // Handler für Inline-Editing in der DataGrid\r\n  const handleRowEdit = (params: any) => {\r\n    const updated = positions.map((row) =>\r\n      row.posNr === params.id ? { ...row, ...params } : row\r\n    );\r\n    onChangePositions(updated);\r\n  };\r\n\r\n  // Handler für Stammdaten-Änderungen\r\n  const handleMasterChange = (field: keyof DeliveryNoteMasterData, value: any) => {\r\n    onChangeMasterData({ [field]: value });\r\n  };\r\n\r\n  return (\r\n    <Card className=\"p-6 max-w-4xl mx-auto mt-6 shadow-md\">\r\n      <Typography variant=\"h6\" className=\"mb-4 text-gray-800\">\r\n        Lieferanten-Lieferschein\r\n      </Typography>\r\n      {error && (\r\n        <Box className=\"mb-4\">\r\n          <Typography color=\"error\">{error}</Typography>\r\n        </Box>\r\n      )}\r\n      {loading ? (\r\n        <Box className=\"flex justify-center items-center h-40\">\r\n          <CircularProgress />\r\n        </Box>\r\n      ) : (\r\n        <form\r\n          onSubmit={e => {\r\n            e.preventDefault();\r\n            onSubmit();\r\n          }}\r\n          className=\"space-y-6\"\r\n        >\r\n          {/* Stammdaten */}\r\n          <Box className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <Autocomplete\r\n              options={suppliers}\r\n              getOptionLabel={option => option.name}\r\n              value={masterData.lieferant}\r\n              onChange={(_, value) => handleMasterChange('lieferant', value)}\r\n              renderInput={params => (\r\n                <TextField {...params} label=\"Lieferant\" required fullWidth />\r\n              )}\r\n            />\r\n            <TextField\r\n              label=\"ZW-Händler\"\r\n              value={masterData.zwHaendler}\r\n              onChange={e => handleMasterChange('zwHaendler', e.target.value)}\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              label=\"LS-Referenz-Nr.\"\r\n              value={masterData.lsReferenzNr}\r\n              onChange={e => handleMasterChange('lsReferenzNr', e.target.value)}\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              label=\"Bearbeiter\"\r\n              value={masterData.bearbeiter}\r\n              onChange={e => handleMasterChange('bearbeiter', e.target.value)}\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              label=\"Datum\"\r\n              type=\"date\"\r\n              value={masterData.datum}\r\n              onChange={e => handleMasterChange('datum', e.target.value)}\r\n              InputLabelProps={{ shrink: true }}\r\n              fullWidth\r\n            />\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={masterData.erledigt}\r\n                  onChange={e => handleMasterChange('erledigt', e.target.checked)}\r\n                />\r\n              }\r\n              label=\"Erledigt\"\r\n            />\r\n            <TextField\r\n              label=\"LS-Nr.\"\r\n              value={masterData.lsNr}\r\n              onChange={e => handleMasterChange('lsNr', e.target.value)}\r\n              fullWidth\r\n            />\r\n          </Box>\r\n\r\n          {/* Positionen */}\r\n          <div className=\"mt-8\">\r\n            <Typography variant=\"subtitle1\" className=\"mb-2 text-gray-700\">\r\n              Positionen\r\n            </Typography>\r\n            <div className=\"bg-white rounded shadow border\">\r\n              <DataGrid\r\n                autoHeight\r\n                rows={positions as GridRowsProp}\r\n                columns={columns}\r\n                initialState={{\r\n                  pagination: {\r\n                    paginationModel: { page: 0, pageSize: 5 },\r\n                  },\r\n                }}\r\n                pageSizeOptions={[5, 10, 20]}\r\n                disableRowSelectionOnClick\r\n                onRowEditStop={params => handleRowEdit(params)}\r\n                getRowId={row => row.posNr}\r\n                className=\"min-h-[300px]\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Aktionen */}\r\n          <Box className=\"flex space-x-4 mt-6\">\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n              Speichern\r\n            </Button>\r\n            {onCancel && (\r\n              <Button variant=\"outlined\" onClick={onCancel}>\r\n                Abbrechen\r\n              </Button>\r\n            )}\r\n          </Box>\r\n        </form>\r\n      )}\r\n    </Card>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\erp\\FreightOrderForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[975,978],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[975,978],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Box, Card, Typography, TextField, Button, CircularProgress, Autocomplete, Chip } from '@mui/material';\r\nimport { FreightOrderHeader } from '../../types/erp';\r\nimport { Customer } from '../../types/crm';\r\n\r\n/**\r\n * Props für das Frachtauftrag-Formular\r\n */\r\nexport interface FreightOrderFormProps {\r\n  header: FreightOrderHeader;\r\n  customers: Customer[];\r\n  loading?: boolean;\r\n  error?: string;\r\n  onChangeHeader: (header: Partial<FreightOrderHeader>) => void;\r\n  onSubmit: () => void;\r\n  onCancel?: () => void;\r\n}\r\n\r\n/**\r\n * Frachtauftrag-Formular\r\n * - Kopfbereich mit Spediteur, Terminen, Kunden\r\n * - Error-Handling, Loading-State, responsive\r\n */\r\nexport const FreightOrderForm: React.FC<FreightOrderFormProps> = ({\r\n  header,\r\n  customers,\r\n  loading = false,\r\n  error,\r\n  onChangeHeader,\r\n  onSubmit,\r\n  onCancel,\r\n}) => {\r\n  // Handler für Header-Änderungen\r\n  const handleHeaderChange = (field: keyof FreightOrderHeader, value: any) => {\r\n    onChangeHeader({ [field]: value });\r\n  };\r\n\r\n  return (\r\n    <Card className=\"p-6 max-w-4xl mx-auto mt-6 shadow-md\">\r\n      <Typography variant=\"h6\" className=\"mb-4 text-gray-800\">\r\n        Frachtauftrag\r\n      </Typography>\r\n      {error && (\r\n        <Box className=\"mb-4\">\r\n          <Typography color=\"error\">{error}</Typography>\r\n        </Box>\r\n      )}\r\n      {loading ? (\r\n        <Box className=\"flex justify-center items-center h-40\">\r\n          <CircularProgress />\r\n        </Box>\r\n      ) : (\r\n        <form\r\n          onSubmit={e => {\r\n            e.preventDefault();\r\n            onSubmit();\r\n          }}\r\n          className=\"space-y-6\"\r\n        >\r\n          {/* Spediteur und Termine */}\r\n          <Box className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n            <TextField\r\n              label=\"Spediteur-Nr.\"\r\n              value={header.spediteurNr}\r\n              onChange={e => handleHeaderChange('spediteurNr', e.target.value)}\r\n              required\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              label=\"Liefer-Termin\"\r\n              type=\"date\"\r\n              value={header.lieferTermin}\r\n              onChange={e => handleHeaderChange('lieferTermin', e.target.value)}\r\n              InputLabelProps={{ shrink: true }}\r\n              required\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              label=\"Lade-Datum\"\r\n              type=\"date\"\r\n              value={header.ladeDatum}\r\n              onChange={e => handleHeaderChange('ladeDatum', e.target.value)}\r\n              InputLabelProps={{ shrink: true }}\r\n              required\r\n              fullWidth\r\n            />\r\n          </Box>\r\n\r\n          {/* Kunden-Auswahl */}\r\n          <Box>\r\n            <Typography variant=\"subtitle1\" className=\"mb-2 text-gray-700\">\r\n              Auswahl Kunden\r\n            </Typography>\r\n            <Autocomplete\r\n              multiple\r\n              options={customers}\r\n              getOptionLabel={option => `${option.name} (${option.customerNumber})`}\r\n              value={header.kunden}\r\n              onChange={(_, value) => handleHeaderChange('kunden', value)}\r\n              renderInput={params => (\r\n                <TextField\r\n                  {...params}\r\n                  label=\"Kunden auswählen\"\r\n                  placeholder=\"Kunden hinzufügen...\"\r\n                />\r\n              )}\r\n              renderTags={(value, getTagProps) =>\r\n                value.map((option, index) => (\r\n                  <Chip\r\n                    label={`${option.name} (${option.customerNumber})`}\r\n                    {...getTagProps({ index })}\r\n                    key={option.id}\r\n                  />\r\n                ))\r\n              }\r\n              renderOption={(props, option) => (\r\n                <Box component=\"li\" {...props}>\r\n                  <div>\r\n                    <Typography variant=\"body1\">{option.name}</Typography>\r\n                    <Typography variant=\"caption\" color=\"textSecondary\">\r\n                      {option.customerNumber} • {option.address.zipCode} {option.address.city}\r\n                    </Typography>\r\n                  </div>\r\n                </Box>\r\n              )}\r\n            />\r\n          </Box>\r\n\r\n          {/* Debitoren-Filter */}\r\n          <Box>\r\n            <Typography variant=\"subtitle1\" className=\"mb-2 text-gray-700\">\r\n              Debitoren-Filter\r\n            </Typography>\r\n            <TextField\r\n              label=\"Debitoren-Filter\"\r\n              value={header.debitorenFilter || ''}\r\n              onChange={e => handleHeaderChange('debitorenFilter', e.target.value)}\r\n              placeholder=\"Filter für Debitoren eingeben...\"\r\n              fullWidth\r\n              helperText=\"Optional: Filter für bestimmte Debitoren-Gruppen\"\r\n            />\r\n          </Box>\r\n\r\n          {/* Zusammenfassung */}\r\n          <Box className=\"bg-gray-50 p-4 rounded\">\r\n            <Typography variant=\"subtitle2\" className=\"mb-2 text-gray-700\">\r\n              Zusammenfassung\r\n            </Typography>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\r\n              <div>\r\n                <span className=\"font-medium\">Spediteur-Nr.:</span> {header.spediteurNr}\r\n              </div>\r\n              <div>\r\n                <span className=\"font-medium\">Liefer-Termin:</span> {header.lieferTermin}\r\n              </div>\r\n              <div>\r\n                <span className=\"font-medium\">Lade-Datum:</span> {header.ladeDatum}\r\n              </div>\r\n              <div>\r\n                <span className=\"font-medium\">Anzahl Kunden:</span> {header.kunden.length}\r\n              </div>\r\n              {header.debitorenFilter && (\r\n                <div className=\"md:col-span-2\">\r\n                  <span className=\"font-medium\">Debitoren-Filter:</span> {header.debitorenFilter}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </Box>\r\n\r\n          {/* Aktionen */}\r\n          <Box className=\"flex space-x-4\">\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n              Frachtauftrag erstellen\r\n            </Button>\r\n            {onCancel && (\r\n              <Button variant=\"outlined\" onClick={onCancel}>\r\n                Abbrechen\r\n              </Button>\r\n            )}\r\n          </Box>\r\n        </form>\r\n      )}\r\n    </Card>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\erp\\Inquiry.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\erp\\Offer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\erp\\OrderConfirmation.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onConfirmationCreate' is defined but never used. Allowed unused args must match /^_/u.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onConfirmationUpdate' is defined but never used. Allowed unused args must match /^_/u.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onConfirmationDelete' is defined but never used. Allowed unused args must match /^_/u.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Temporär auskommentiert - wird später implementiert\r\n\r\nexport interface OrderConfirmationData {\r\n  id: string;\r\n  confirmationNumber: string;\r\n  confirmationDate: string;\r\n  supplier: string;\r\n  orderNumber: string;\r\n  items: OrderConfirmationItem[];\r\n  status: string;\r\n}\r\n\r\nexport interface OrderConfirmationItem {\r\n  id: string;\r\n  articleNumber: string;\r\n  description: string;\r\n  quantity: number;\r\n  unit: string;\r\n  price: number;\r\n}\r\n\r\nexport interface OrderConfirmationProps {\r\n  onConfirmationCreate: (confirmation: OrderConfirmationData) => void;\r\n  onConfirmationUpdate: (id: string, confirmation: Partial<OrderConfirmationData>) => void;\r\n  onConfirmationDelete: (id: string) => void;\r\n}\r\n\r\nexport const OrderConfirmation: React.FC<OrderConfirmationProps> = ({\r\n  onConfirmationCreate,\r\n  onConfirmationUpdate,\r\n  onConfirmationDelete\r\n}) => {\r\n  return (\r\n    <div className=\"p-6\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">Order Confirmation</h1>\r\n      <p className=\"text-gray-600\">Diese Komponente wird später implementiert.</p>\r\n    </div>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\erp\\OrderSuggestion.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Card' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Typography' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Grid' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TextField' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormControl' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InputLabel' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Select' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MenuItem' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Box' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Alert' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Chip' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Table' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Input' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Space' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tag' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SearchOutlined' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FilterOutlined' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ShoppingCartOutlined' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useForm' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Controller' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'yupResolver' is defined but never used. Allowed unused vars must match /^_/u.","line":19,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'filterSchema' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":65,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockSuggestions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":72,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'articleGroups' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":111,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":111,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'branches' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":112,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":112,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onSuggestionSelect' is defined but never used. Allowed unused args must match /^_/u.","line":116,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":116,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onOrderCreate' is defined but never used. Allowed unused args must match /^_/u.","line":117,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'filters' is defined but never used. Allowed unused args must match /^_/u.","line":118,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":118,"endColumn":10}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from 'react';\r\nimport {\r\n  Card,\r\n  Typography,\r\n  Grid,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Button,\r\n  Box,\r\n  Alert,\r\n  Chip\r\n} from '@mui/material';\r\nimport { Table, Input, Space, Tag } from 'antd';\r\nimport { SearchOutlined, FilterOutlined, ShoppingCartOutlined } from '@mui/icons-material';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\n// TypeScript Interfaces\r\nexport interface OrderSuggestionData {\r\n  // Kopfbereich\r\n  articleGroup: string;\r\n  branch: string;\r\n  articleNumber: string;\r\n  description1: string;\r\n  description2: string;\r\n  storageLocation: string;\r\n  matchcode: string;\r\n  matchcode2: string;\r\n  currentStock: number;\r\n  minStock: number;\r\n  maxStock: number;\r\n  sales: number;\r\n  suggestion: number;\r\n  \r\n  // Tabellendaten\r\n  warehouse: string;\r\n  stock: number;\r\n  purchase: number;\r\n}\r\n\r\nexport interface OrderSuggestionFilters {\r\n  articleGroup?: string;\r\n  branch?: string;\r\n  searchTerm?: string;\r\n}\r\n\r\nexport interface OrderSuggestionProps {\r\n  onSuggestionSelect: (suggestion: OrderSuggestionData) => void;\r\n  onOrderCreate: (order: OrderData) => void;\r\n  filters: OrderSuggestionFilters;\r\n}\r\n\r\nexport interface OrderData {\r\n  id: string;\r\n  items: OrderSuggestionData[];\r\n  totalAmount: number;\r\n  createdAt: Date;\r\n}\r\n\r\n// Validierungsschema\r\nconst filterSchema = yup.object({\r\n  articleGroup: yup.string(),\r\n  branch: yup.string(),\r\n  searchTerm: yup.string()\r\n}).required();\r\n\r\n// Mock-Daten für Demonstration\r\nconst mockSuggestions: OrderSuggestionData[] = [\r\n  {\r\n    articleGroup: 'Elektronik',\r\n    branch: 'Hauptniederlassung',\r\n    articleNumber: 'ART-001',\r\n    description1: 'Laptop Dell XPS 13',\r\n    description2: '13 Zoll, Intel i7, 16GB RAM',\r\n    storageLocation: 'A-01-01',\r\n    matchcode: 'LAPTOP-DELL-XPS13',\r\n    matchcode2: 'DELL-XPS-13',\r\n    currentStock: 5,\r\n    minStock: 10,\r\n    maxStock: 50,\r\n    sales: 15,\r\n    suggestion: 20,\r\n    warehouse: 'Hauptlager',\r\n    stock: 5,\r\n    purchase: 20\r\n  },\r\n  {\r\n    articleGroup: 'Bürobedarf',\r\n    branch: 'Hauptniederlassung',\r\n    articleNumber: 'ART-002',\r\n    description1: 'Drucker HP LaserJet',\r\n    description2: 'Schwarz-Weiß, 30 Seiten/Min',\r\n    storageLocation: 'B-02-03',\r\n    matchcode: 'DRUCKER-HP-LASERJET',\r\n    matchcode2: 'HP-LASERJET',\r\n    currentStock: 2,\r\n    minStock: 5,\r\n    maxStock: 20,\r\n    sales: 8,\r\n    suggestion: 15,\r\n    warehouse: 'Hauptlager',\r\n    stock: 2,\r\n    purchase: 15\r\n  }\r\n];\r\n\r\nconst articleGroups = ['Elektronik', 'Bürobedarf', 'Möbel', 'Software'];\r\nconst branches = ['Hauptniederlassung', 'Niederlassung Nord', 'Niederlassung Süd'];\r\n\r\n// Temporär auskommentiert - wird später implementiert\r\nexport const OrderSuggestion: React.FC<OrderSuggestionProps> = ({\r\n  onSuggestionSelect,\r\n  onOrderCreate,\r\n  filters\r\n}) => {\r\n  return (\r\n    <div className=\"p-6\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">Order Suggestion</h1>\r\n      <p className=\"text-gray-600\">Diese Komponente wird später implementiert.</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrderSuggestion; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\erp\\OrderSuggestionForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2293,2296],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2293,2296],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Box, Card, Typography, Button, CircularProgress, Autocomplete, TextField } from '@mui/material';\r\nimport { DataGrid, GridColDef, GridRowsProp } from '@mui/x-data-grid';\r\nimport { OrderSuggestionLine } from '../../types/erp';\r\nimport { Supplier } from '../../types/crm';\r\n\r\n/**\r\n * Props für das Bestellvorschlag/Bestellung-Formular\r\n */\r\nexport interface OrderSuggestionFormProps {\r\n  orderLines: OrderSuggestionLine[];\r\n  suppliers: Supplier[];\r\n  loading?: boolean;\r\n  error?: string;\r\n  onChangeOrderLines: (lines: OrderSuggestionLine[]) => void;\r\n  onSubmit: () => void;\r\n  onCancel?: () => void;\r\n}\r\n\r\n/**\r\n * Bestellvorschlag/Bestellung-Formular\r\n * - Bestellzeilen als Tabelle\r\n * - Automatische Berechnung des Bestellwerts\r\n * - Error-Handling, Loading-State, responsive\r\n */\r\nexport const OrderSuggestionForm: React.FC<OrderSuggestionFormProps> = ({\r\n  orderLines,\r\n  suppliers,\r\n  loading = false,\r\n  error,\r\n  onChangeOrderLines,\r\n  onSubmit,\r\n  onCancel,\r\n}) => {\r\n  // Spalten für die Bestellzeilen-Tabelle\r\n  const columns: GridColDef[] = [\r\n    { field: 'lagerNr', headerName: 'Lager-Nr.', width: 100, editable: true },\r\n    { field: 'matchcode', headerName: 'Matchcode', width: 120, editable: true },\r\n    { field: 'artikelbezeichnung', headerName: 'Artikelbezeichnung', width: 200, editable: true },\r\n    { field: 'bestand', headerName: 'Bestand', width: 90, editable: false, type: 'number' },\r\n    { field: 'mindestbestand', headerName: 'Mindestbestand', width: 120, editable: true, type: 'number' },\r\n    { field: 'vorschlag', headerName: 'Vorschlag', width: 100, editable: true, type: 'number' },\r\n    {\r\n      field: 'lieferant',\r\n      headerName: 'Lieferant',\r\n      width: 150,\r\n      editable: false,\r\n      renderCell: (params) => params.value?.name || '',\r\n    },\r\n    { field: 'restmenge', headerName: 'Restmenge', width: 100, editable: false, type: 'number' },\r\n    { field: 'einheit', headerName: 'Einheit', width: 80, editable: true },\r\n    { field: 'ekPreis', headerName: 'EK-Preis', width: 100, editable: true, type: 'number' },\r\n    { field: 'bestellwert', headerName: 'Bestellwert', width: 120, editable: false, type: 'number' },\r\n  ];\r\n\r\n  // Handler für Inline-Editing in der DataGrid\r\n  const handleRowEdit = (params: any) => {\r\n    const updated = orderLines.map((row) => {\r\n      if (row.lagerNr === params.id) {\r\n        const updatedRow = { ...row, ...params };\r\n        // Automatische Berechnung des Bestellwerts\r\n        updatedRow.bestellwert = (updatedRow.vorschlag || 0) * (updatedRow.ekPreis || 0);\r\n        return updatedRow;\r\n      }\r\n      return row;\r\n    });\r\n    onChangeOrderLines(updated);\r\n  };\r\n\r\n  // Handler für Lieferanten-Auswahl\r\n  const handleSupplierChange = (lagerNr: string, supplier: Supplier | null) => {\r\n    const updated = orderLines.map((row) =>\r\n      row.lagerNr === lagerNr ? { ...row, lieferant: supplier } : row\r\n    );\r\n    onChangeOrderLines(updated);\r\n  };\r\n\r\n  // Berechne Gesamtsumme\r\n  const totalOrderValue = orderLines.reduce((sum, line) => sum + (line.bestellwert || 0), 0);\r\n\r\n  return (\r\n    <Card className=\"p-6 max-w-6xl mx-auto mt-6 shadow-md\">\r\n      <Typography variant=\"h6\" className=\"mb-4 text-gray-800\">\r\n        Bestellvorschlag / Bestellung\r\n      </Typography>\r\n      {error && (\r\n        <Box className=\"mb-4\">\r\n          <Typography color=\"error\">{error}</Typography>\r\n        </Box>\r\n      )}\r\n      {loading ? (\r\n        <Box className=\"flex justify-center items-center h-40\">\r\n          <CircularProgress />\r\n        </Box>\r\n      ) : (\r\n        <div className=\"space-y-6\">\r\n          {/* Bestellzeilen */}\r\n          <div>\r\n            <Typography variant=\"subtitle1\" className=\"mb-2 text-gray-700\">\r\n              Bestellzeilen\r\n            </Typography>\r\n            <div className=\"bg-white rounded shadow border\">\r\n              <DataGrid\r\n                autoHeight\r\n                rows={orderLines as GridRowsProp}\r\n                columns={columns}\r\n                initialState={{\r\n                  pagination: {\r\n                    paginationModel: { page: 0, pageSize: 10 },\r\n                  },\r\n                }}\r\n                pageSizeOptions={[10, 25, 50]}\r\n                disableRowSelectionOnClick\r\n                onRowEditStop={params => handleRowEdit(params)}\r\n                getRowId={row => row.lagerNr}\r\n                className=\"min-h-[400px]\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Lieferanten-Auswahl für ausgewählte Zeilen */}\r\n          <div className=\"bg-gray-50 p-4 rounded\">\r\n            <Typography variant=\"subtitle2\" className=\"mb-3 text-gray-700\">\r\n              Lieferanten-Auswahl\r\n            </Typography>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n              {orderLines.map((line) => (\r\n                <Autocomplete\r\n                  key={line.lagerNr}\r\n                  options={suppliers}\r\n                  getOptionLabel={option => option.name}\r\n                  value={line.lieferant}\r\n                  onChange={(_, value) => handleSupplierChange(line.lagerNr, value)}\r\n                  renderInput={params => (\r\n                    <TextField\r\n                      {...params}\r\n                      label={`${line.artikelbezeichnung} (${line.lagerNr})`}\r\n                      size=\"small\"\r\n                    />\r\n                  )}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Gesamtsumme */}\r\n          <Box className=\"bg-blue-50 p-4 rounded\">\r\n            <Typography variant=\"h6\" className=\"text-blue-800\">\r\n              Gesamtbestellwert: {totalOrderValue.toFixed(2)} €\r\n            </Typography>\r\n          </Box>\r\n\r\n          {/* Aktionen */}\r\n          <Box className=\"flex space-x-4\">\r\n            <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\r\n              Bestellung erstellen\r\n            </Button>\r\n            {onCancel && (\r\n              <Button variant=\"outlined\" onClick={onCancel}>\r\n                Abbrechen\r\n              </Button>\r\n            )}\r\n          </Box>\r\n        </div>\r\n      )}\r\n    </Card>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\erp\\PurchaseOrder.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Divider' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Chip' is defined but never used. Allowed unused vars must match /^_/u.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tag' is defined but never used. Allowed unused vars must match /^_/u.","line":21,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'watchedData' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":207,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":207,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Card,\n  Typography,\n  Grid,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Button,\n  Box,\n  Tabs,\n  Tab,\n  Checkbox,\n  FormControlLabel,\n  Divider,\n  Alert,\n  Chip\n} from '@mui/material';\nimport { Table, Input, Space, Tag, DatePicker } from 'antd';\nimport { \n  Save as SaveIcon, \n  Cancel as CancelIcon, \n  Print as PrintIcon, \n  Delete as DeleteIcon,\n  Add as AddIcon,\n  Edit as EditIcon\n} from '@mui/icons-material';\nimport { useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport dayjs from 'dayjs';\n\n// TypeScript Interfaces\nexport interface PurchaseOrderData {\n  // Kopfbereich\n  creditorAccountNumber: string;\n  branch: string;\n  costCenter: string;\n  commission: string;\n  supplier: string;\n  latestDeliveryDate: Date;\n  loadingDeadline: Date;\n  loadingDate: Date;\n  orderNumber: string;\n  orderDate: Date;\n  operator: string;\n  completed: boolean;\n  \n  // Positionen\n  positions: PurchaseOrderPosition[];\n  \n  // Registerkarten\n  references: DocumentReference[];\n  paymentTerms: PaymentTerms;\n  additionalInfo: string;\n}\n\nexport interface PurchaseOrderPosition {\n  position: number;\n  articleNumber: string;\n  supplier: string;\n  description: string;\n  quantity: number;\n  packageQuantity: number;\n  packageUnit: string;\n  stock: number;\n  price: number;\n  contract: string;\n}\n\nexport interface DocumentReference {\n  id: string;\n  type: string;\n  number: string;\n  date: string;\n  description: string;\n}\n\nexport interface PaymentTerms {\n  code: string;\n  description: string;\n  days: number;\n}\n\nexport interface PurchaseOrderProps {\n  mode: 'create' | 'edit' | 'view';\n  initialData?: PurchaseOrderData;\n  onSave: (order: PurchaseOrderData) => void;\n  onCancel: () => void;\n  onOrderCreate?: (order: PurchaseOrderData) => void;\n  onOrderUpdate?: (id: string, order: Partial<PurchaseOrderData>) => void;\n  onOrderDelete?: (id: string) => void;\n}\n\n// Validierungsschema\nconst orderSchema = yup.object({\n  creditorAccountNumber: yup.string().required('Kreditor-Kontonummer ist erforderlich'),\n  branch: yup.string().required('Niederlassung ist erforderlich'),\n  costCenter: yup.string().required('Kostenstelle ist erforderlich'),\n  commission: yup.string().required('Kommission ist erforderlich'),\n  supplier: yup.string().required('Lieferant ist erforderlich'),\n  latestDeliveryDate: yup.date().required('Spätestes Lieferdatum ist erforderlich'),\n  loadingDeadline: yup.date().required('Lade-Deadline ist erforderlich'),\n  loadingDate: yup.date().required('Ladedatum ist erforderlich'),\n  orderNumber: yup.string().required('Bestellnummer ist erforderlich'),\n  orderDate: yup.date().required('Bestelldatum ist erforderlich'),\n  operator: yup.string().required('Bearbeiter ist erforderlich'),\n  completed: yup.boolean().required(),\n  positions: yup.array().of(yup.object({\n    position: yup.number().required(),\n    articleNumber: yup.string().required(),\n    supplier: yup.string().required(),\n    description: yup.string().required(),\n    quantity: yup.number().required(),\n    packageQuantity: yup.number().required(),\n    packageUnit: yup.string().required(),\n    stock: yup.number().required(),\n    price: yup.number().required(),\n    contract: yup.string().required()\n  })),\n  references: yup.array().of(yup.object({\n    id: yup.string().required(),\n    type: yup.string().required(),\n    number: yup.string().required(),\n    date: yup.string().required(),\n    description: yup.string().required()\n  })),\n  paymentTerms: yup.object({\n    code: yup.string().required(),\n    description: yup.string().required(),\n    days: yup.number().required()\n  }),\n  additionalInfo: yup.string().required('Zusätzliche Informationen sind erforderlich')\n}).required();\n\n// Mock-Daten\nconst mockPositions: PurchaseOrderPosition[] = [\n  {\n    position: 1,\n    articleNumber: 'ART-001',\n    supplier: 'Dell GmbH',\n    description: 'Laptop Dell XPS 13',\n    quantity: 10,\n    packageQuantity: 1,\n    packageUnit: 'Stück',\n    stock: 5,\n    price: 1299.99,\n    contract: 'CTR-2024-001'\n  },\n  {\n    position: 2,\n    articleNumber: 'ART-002',\n    supplier: 'HP Deutschland',\n    description: 'Drucker HP LaserJet',\n    quantity: 5,\n    packageQuantity: 1,\n    packageUnit: 'Stück',\n    stock: 2,\n    price: 299.99,\n    contract: 'CTR-2024-002'\n  }\n];\n\nconst branches = ['Hauptniederlassung', 'Niederlassung Nord', 'Niederlassung Süd'];\nconst costCenters = ['CC-IT', 'CC-BUERO', 'CC-PRODUKTION'];\nconst commissions = ['KOM-IT', 'KOM-EINKAUF', 'KOM-VERTRIEB'];\n\nexport const PurchaseOrder: React.FC<PurchaseOrderProps> = ({\n  mode,\n  initialData,\n  onSave,\n  onCancel\n}) => {\n  const [activeTab, setActiveTab] = useState(0);\n  const [positions, setPositions] = useState<PurchaseOrderPosition[]>(\n    initialData?.positions || mockPositions\n  );\n  const [editingPosition, setEditingPosition] = useState<number | null>(null);\n\n  const { control, handleSubmit, formState: { errors }, watch   } = useForm({\n    resolver: yupResolver(orderSchema),\n    defaultValues: initialData || {\n      creditorAccountNumber: '',\n      branch: '',\n      costCenter: '',\n      commission: '',\n      supplier: '',\n      orderNumber: '',\n      operator: '',\n      orderDate: new Date(),\n      latestDeliveryDate: new Date(),\n      loadingDeadline: new Date(),\n      loadingDate: new Date(),\n      completed: false,\n      references: [],\n      paymentTerms: {\n        code: 'NET30',\n        description: 'Netto 30 Tage',\n        days: 30\n      },\n      additionalInfo: ''\n    }\n  });\n\n  const watchedData = watch();\n\n  // Ant Design Table Spalten für Positionen\n  const positionColumns = [\n    {\n      title: 'Pos.',\n      dataIndex: 'position',\n      key: 'position',\n      width: 60,\n      render: (text: number) => <strong>{text}</strong>\n    },\n    {\n      title: 'Artikel-Nr.',\n      dataIndex: 'articleNumber',\n      key: 'articleNumber',\n      render: (text: string, record: PurchaseOrderPosition) => (\n        editingPosition === record.position ? (\n          <Input \n            defaultValue={text}\n            onPressEnter={(e) => {\n              const newPositions = positions.map(p => \n                p.position === record.position \n                  ? { ...p, articleNumber: (e.target as HTMLInputElement).value }\n                  : p\n              );\n              setPositions(newPositions);\n              setEditingPosition(null);\n            }}\n          />\n        ) : (\n          <span \n            className=\"cursor-pointer hover:text-blue-600\"\n            onClick={() => setEditingPosition(record.position)}\n          >\n            {text}\n          </span>\n        )\n      )\n    },\n    {\n      title: 'Lieferant',\n      dataIndex: 'supplier',\n      key: 'supplier',\n      render: (text: string, record: PurchaseOrderPosition) => (\n        editingPosition === record.position ? (\n          <Input \n            defaultValue={text}\n            onPressEnter={(e) => {\n              const newPositions = positions.map(p => \n                p.position === record.position \n                  ? { ...p, supplier: (e.target as HTMLInputElement).value }\n                  : p\n              );\n              setPositions(newPositions);\n              setEditingPosition(null);\n            }}\n          />\n        ) : (\n          <span \n            className=\"cursor-pointer hover:text-blue-600\"\n            onClick={() => setEditingPosition(record.position)}\n          >\n            {text}\n          </span>\n        )\n      )\n    },\n    {\n      title: 'Beschreibung',\n      dataIndex: 'description',\n      key: 'description',\n      render: (text: string, record: PurchaseOrderPosition) => (\n        editingPosition === record.position ? (\n          <Input \n            defaultValue={text}\n            onPressEnter={(e) => {\n              const newPositions = positions.map(p => \n                p.position === record.position \n                  ? { ...p, description: (e.target as HTMLInputElement).value }\n                  : p\n              );\n              setPositions(newPositions);\n              setEditingPosition(null);\n            }}\n          />\n        ) : (\n          <span \n            className=\"cursor-pointer hover:text-blue-600\"\n            onClick={() => setEditingPosition(record.position)}\n          >\n            {text}\n          </span>\n        )\n      )\n    },\n    {\n      title: 'Menge',\n      dataIndex: 'quantity',\n      key: 'quantity',\n      render: (value: number, record: PurchaseOrderPosition) => (\n        editingPosition === record.position ? (\n          <Input \n            type=\"number\"\n            defaultValue={value}\n            onPressEnter={(e) => {\n              const newPositions = positions.map(p => \n                p.position === record.position \n                  ? { ...p, quantity: Number((e.target as HTMLInputElement).value) }\n                  : p\n              );\n              setPositions(newPositions);\n              setEditingPosition(null);\n            }}\n          />\n        ) : (\n          <span \n            className=\"cursor-pointer hover:text-blue-600\"\n            onClick={() => setEditingPosition(record.position)}\n          >\n            {value}\n          </span>\n        )\n      )\n    },\n    {\n      title: 'Preis',\n      dataIndex: 'price',\n      key: 'price',\n      render: (value: number, record: PurchaseOrderPosition) => (\n        editingPosition === record.position ? (\n          <Input \n            type=\"number\"\n            step=\"0.01\"\n            defaultValue={value}\n            onPressEnter={(e) => {\n              const newPositions = positions.map(p => \n                p.position === record.position \n                  ? { ...p, price: Number((e.target as HTMLInputElement).value) }\n                  : p\n              );\n              setPositions(newPositions);\n              setEditingPosition(null);\n            }}\n          />\n        ) : (\n          <span \n            className=\"cursor-pointer hover:text-blue-600\"\n            onClick={() => setEditingPosition(record.position)}\n          >\n            €{value.toFixed(2)}\n          </span>\n        )\n      )\n    },\n    {\n      title: 'Gesamt',\n      key: 'total',\n      render: (record: PurchaseOrderPosition) => (\n        <strong>€{(record.quantity * record.price).toFixed(2)}</strong>\n      )\n    },\n    {\n      title: 'Aktionen',\n      key: 'actions',\n      width: 120,\n      render: (record: PurchaseOrderPosition) => (\n        <Space>\n          {editingPosition === record.position ? (\n            <Button\n              size=\"small\"\n              onClick={() => setEditingPosition(null)}\n            >\n              Speichern\n            </Button>\n          ) : (\n            <Button\n              size=\"small\"\n              startIcon={<EditIcon />}\n              onClick={() => setEditingPosition(record.position)}\n            >\n              Bearbeiten\n            </Button>\n          )}\n          <Button\n            size=\"small\"\n            color=\"error\"\n            onClick={() => {\n              setPositions(positions.filter(p => p.position !== record.position));\n            }}\n          >\n            Löschen\n          </Button>\n        </Space>\n      )\n    }\n  ];\n\n  const handleAddPosition = () => {\n    const newPosition: PurchaseOrderPosition = {\n      position: Math.max(...positions.map(p => p.position)) + 1,\n      articleNumber: '',\n      supplier: '',\n      description: '',\n      quantity: 1,\n      packageQuantity: 1,\n      packageUnit: 'Stück',\n      stock: 0,\n      price: 0,\n      contract: ''\n    };\n    setPositions([...positions, newPosition]);\n    setEditingPosition(newPosition.position);\n  };\n\n  const onSubmit = (data: PurchaseOrderData) => {\n    const orderData: PurchaseOrderData = {\n      ...data,\n      positions,\n      orderDate: data.orderDate || new Date(),\n      latestDeliveryDate: data.latestDeliveryDate || new Date(),\n      loadingDeadline: data.loadingDeadline || new Date(),\n      loadingDate: data.loadingDate || new Date()\n    };\n    onSave(orderData);\n  };\n\n  const totalAmount = positions.reduce((sum, pos) => sum + (pos.quantity * pos.price), 0);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Kopfbereich */}\n      <Card className=\"p-6\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <Typography variant=\"h5\">\n            {mode === 'create' ? 'Neue Bestellung' : \n             mode === 'edit' ? 'Bestellung bearbeiten' : 'Bestellung anzeigen'}\n          </Typography>\n          <div className=\"flex space-x-2\">\n            <Button\n              variant=\"outlined\"\n              startIcon={<PrintIcon />}\n              disabled={mode === 'create'}\n            >\n              Drucken\n            </Button>\n            <Button\n              variant=\"outlined\"\n              color=\"error\"\n              startIcon={<DeleteIcon />}\n              disabled={mode === 'create'}\n            >\n              Löschen\n            </Button>\n          </div>\n        </div>\n\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={3}>\n            <Controller\n              name=\"creditorAccountNumber\"\n              control={control}\n              render={({ field }) => (\n                <TextField\n                  {...field}\n                  fullWidth\n                  label=\"Kreditor-Kontonummer\"\n                  error={!!errors.creditorAccountNumber}\n                  helperText={errors.creditorAccountNumber?.message}\n                  disabled={mode === 'view'}\n                />\n              )}\n            />\n          </Grid>\n          \n          <Grid item xs={12} md={3}>\n            <Controller\n              name=\"branch\"\n              control={control}\n              render={({ field }) => (\n                <FormControl fullWidth error={!!errors.branch}>\n                  <InputLabel>Niederlassung</InputLabel>\n                  <Select {...field} label=\"Niederlassung\" disabled={mode === 'view'}>\n                    {branches.map(branch => (\n                      <MenuItem key={branch} value={branch}>{branch}</MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              )}\n            />\n          </Grid>\n          \n          <Grid item xs={12} md={3}>\n            <Controller\n              name=\"costCenter\"\n              control={control}\n              render={({ field }) => (\n                <FormControl fullWidth error={!!errors.costCenter}>\n                  <InputLabel>Kostenstelle</InputLabel>\n                  <Select {...field} label=\"Kostenstelle\" disabled={mode === 'view'}>\n                    {costCenters.map(cc => (\n                      <MenuItem key={cc} value={cc}>{cc}</MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              )}\n            />\n          </Grid>\n          \n          <Grid item xs={12} md={3}>\n            <Controller\n              name=\"commission\"\n              control={control}\n              render={({ field }) => (\n                <FormControl fullWidth>\n                  <InputLabel>Kommission</InputLabel>\n                  <Select {...field} label=\"Kommission\" disabled={mode === 'view'}>\n                    {commissions.map(com => (\n                      <MenuItem key={com} value={com}>{com}</MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              )}\n            />\n          </Grid>\n          \n          <Grid item xs={12} md={6}>\n            <Controller\n              name=\"supplier\"\n              control={control}\n              render={({ field }) => (\n                <TextField\n                  {...field}\n                  fullWidth\n                  label=\"Lieferant\"\n                  error={!!errors.supplier}\n                  helperText={errors.supplier?.message}\n                  disabled={mode === 'view'}\n                />\n              )}\n            />\n          </Grid>\n          \n          <Grid item xs={12} md={3}>\n            <Controller\n              name=\"orderNumber\"\n              control={control}\n              render={({ field }) => (\n                <TextField\n                  {...field}\n                  fullWidth\n                  label=\"Bestellnummer\"\n                  error={!!errors.orderNumber}\n                  helperText={errors.orderNumber?.message}\n                  disabled={mode === 'view'}\n                />\n              )}\n            />\n          </Grid>\n          \n          <Grid item xs={12} md={3}>\n            <Controller\n              name=\"orderDate\"\n              control={control}\n              render={({ field }) => (\n                <DatePicker\n                  placeholder=\"Bestelldatum\"\n                  value={field.value ? dayjs(field.value) : null}\n                  onChange={(date) => field.onChange(date?.toDate())}\n                  disabled={mode === 'view'}\n                  style={{ width: '100%' }}\n                />\n              )}\n            />\n          </Grid>\n          \n          <Grid item xs={12} md={6}>\n            <Controller\n              name=\"latestDeliveryDate\"\n              control={control}\n              render={({ field }) => (\n                <DatePicker\n                  placeholder=\"Spätester Liefertermin\"\n                  value={field.value ? dayjs(field.value) : null}\n                  onChange={(date) => field.onChange(date?.toDate())}\n                  disabled={mode === 'view'}\n                  style={{ width: '100%' }}\n                />\n              )}\n            />\n          </Grid>\n          \n          <Grid item xs={12} md={3}>\n            <Controller\n              name=\"loadingDeadline\"\n              control={control}\n              render={({ field }) => (\n                <DatePicker\n                  placeholder=\"Lade-Frist\"\n                  value={field.value ? dayjs(field.value) : null}\n                  onChange={(date) => field.onChange(date?.toDate())}\n                  disabled={mode === 'view'}\n                  style={{ width: '100%' }}\n                />\n              )}\n            />\n          </Grid>\n          \n          <Grid item xs={12} md={3}>\n            <Controller\n              name=\"loadingDate\"\n              control={control}\n              render={({ field }) => (\n                <DatePicker\n                  placeholder=\"Lade-Datum\"\n                  value={field.value ? dayjs(field.value) : null}\n                  onChange={(date) => field.onChange(date?.toDate())}\n                  disabled={mode === 'view'}\n                  style={{ width: '100%' }}\n                />\n              )}\n            />\n          </Grid>\n          \n          <Grid item xs={12} md={6}>\n            <Controller\n              name=\"operator\"\n              control={control}\n              render={({ field }) => (\n                <TextField\n                  {...field}\n                  fullWidth\n                  label=\"Bearbeiter\"\n                  error={!!errors.operator}\n                  helperText={errors.operator?.message}\n                  disabled={mode === 'view'}\n                />\n              )}\n            />\n          </Grid>\n          \n          <Grid item xs={12} md={6}>\n            <Controller\n              name=\"completed\"\n              control={control}\n              render={({ field }) => (\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={field.value}\n                      onChange={(e) => field.onChange(e.target.checked)}\n                      disabled={mode === 'view'}\n                    />\n                  }\n                  label=\"Abgeschlossen\"\n                />\n              )}\n            />\n          </Grid>\n        </Grid>\n      </Card>\n\n      {/* Registerkarten */}\n      <Card>\n        <Tabs value={activeTab} onChange={(_, newValue) => setActiveTab(newValue)}>\n          <Tab label=\"Positionen\" />\n          <Tab label=\"Referenzen\" />\n          <Tab label=\"Zahlungsbedingungen\" />\n          <Tab label=\"Zusatzangaben\" />\n        </Tabs>\n        \n        <Box className=\"p-6\">\n          {/* Positionen Tab */}\n          {activeTab === 0 && (\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <Typography variant=\"h6\">Bestellpositionen</Typography>\n                <Button\n                  variant=\"contained\"\n                  startIcon={<AddIcon />}\n                  onClick={handleAddPosition}\n                  disabled={mode === 'view'}\n                >\n                  Position hinzufügen\n                </Button>\n              </div>\n              \n              <Table\n                columns={positionColumns}\n                dataSource={positions}\n                rowKey=\"position\"\n                pagination={false}\n                scroll={{ x: 1200 }}\n              />\n              \n              <div className=\"flex justify-end\">\n                <Typography variant=\"h6\">\n                  Gesamtbetrag: €{totalAmount.toFixed(2)}\n                </Typography>\n              </div>\n            </div>\n          )}\n          \n          {/* Referenzen Tab */}\n          {activeTab === 1 && (\n            <div>\n              <Typography variant=\"h6\" className=\"mb-4\">Dokumenten-Referenzen</Typography>\n              <Alert severity=\"info\">\n                Referenzen können hier hinzugefügt werden.\n              </Alert>\n            </div>\n          )}\n          \n          {/* Zahlungsbedingungen Tab */}\n          {activeTab === 2 && (\n            <div className=\"space-y-4\">\n              <Typography variant=\"h6\">Zahlungsbedingungen</Typography>\n              <Grid container spacing={3}>\n                <Grid item xs={12} md={6}>\n                  <Controller\n                    name=\"paymentTerms.code\"\n                    control={control}\n                    render={({ field }) => (\n                      <TextField\n                        {...field}\n                        fullWidth\n                        label=\"Zahlungscode\"\n                        disabled={mode === 'view'}\n                        value={field.value || ''}\n                        onChange={field.onChange}\n                      />\n                    )}\n                  />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <Controller\n                    name=\"paymentTerms.description\"\n                    control={control}\n                    render={({ field }) => (\n                      <TextField\n                        {...field}\n                        fullWidth\n                        label=\"Beschreibung\"\n                        disabled={mode === 'view'}\n                        value={field.value || ''}\n                        onChange={field.onChange}\n                      />\n                    )}\n                  />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <Controller\n                    name=\"paymentTerms.days\"\n                    control={control}\n                    render={({ field }) => (\n                      <TextField\n                        {...field}\n                        fullWidth\n                        type=\"number\"\n                        label=\"Zahlungstage\"\n                        disabled={mode === 'view'}\n                        value={field.value || 0}\n                        onChange={field.onChange}\n                      />\n                    )}\n                  />\n                </Grid>\n              </Grid>\n            </div>\n          )}\n          \n          {/* Zusatzangaben Tab */}\n          {activeTab === 3 && (\n            <div className=\"space-y-4\">\n              <Typography variant=\"h6\">Zusatzangaben</Typography>\n              <Controller\n                name=\"additionalInfo\"\n                control={control}\n                render={({ field }) => (\n                  <TextField\n                    {...field}\n                    fullWidth\n                    multiline\n                    rows={4}\n                    label=\"Zusätzliche Informationen\"\n                    disabled={mode === 'view'}\n                  />\n                )}\n              />\n            </div>\n          )}\n        </Box>\n      </Card>\n\n      {/* Aktions-Buttons */}\n      {mode !== 'view' && (\n        <Card className=\"p-4\">\n          <div className=\"flex justify-end space-x-2\">\n            <Button\n              variant=\"outlined\"\n              startIcon={<CancelIcon />}\n              onClick={onCancel}\n            >\n              Abbrechen\n            </Button>\n            <Button\n              variant=\"contained\"\n              startIcon={<SaveIcon />}\n              onClick={handleSubmit(onSubmit)}\n            >\n              Speichern\n            </Button>\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default PurchaseOrder; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\erp\\SupplierOffer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Box' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Chip' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormControlLabel' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Checkbox' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DatePicker' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PersonIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BusinessIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DescriptionIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Controller' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dayjs' is defined but never used. Allowed unused vars must match /^_/u.","line":21,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StandardButton' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StatusChip' is defined but never used. Allowed unused vars must match /^_/u.","line":30,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onOfferUpdate' is defined but never used. Allowed unused args must match /^_/u.","line":102,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onOfferDelete' is defined but never used. Allowed unused args must match /^_/u.","line":103,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setError' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":105,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":105,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'control' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":108,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3172,3175],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3172,3175],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3745,3748],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3745,3748],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport {\r\n  Card,\r\n  Typography,\r\n  Grid,\r\n  Box,\r\n  Divider,\r\n  Chip,\r\n  FormControlLabel,\r\n  Checkbox\r\n} from '@mui/material';\r\nimport { DatePicker } from 'antd';\r\nimport { \r\n  Person as PersonIcon,\r\n  Business as BusinessIcon,\r\n  Description as DescriptionIcon\r\n} from '@mui/icons-material';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport dayjs from 'dayjs';\r\n// ✅ NEU: Import der standardisierten UI-Komponenten\r\nimport { \r\n  StandardTextField, \r\n  StandardSelectField, \r\n  StandardButton, \r\n  FormActions, \r\n  FormMessage \r\n} from '../forms/FormStandardization';\r\nimport { UI_LABELS, StatusChip } from '../ui/UIStandardization';\r\n\r\n// TypeScript Interfaces\r\nexport interface SupplierOfferData {\r\n  id: string;\r\n  creditorAccountNumber: string;\r\n  supplier: string;\r\n  supplierMaster: string;\r\n  inquiryNumber: string;\r\n  operator: string;\r\n  contactPerson: {\r\n    name?: string;\r\n    salutation?: string;\r\n  };\r\n  supplierOfferNumber: string;\r\n  latestDeliveryDate: string;\r\n  loadingDeadline: string;\r\n  loadingDate: string;\r\n  deliveryAddress: string;\r\n  billingAddress: string;\r\n  paymentTerms: string;\r\n  currency: string;\r\n  positions: SupplierOfferPosition[];\r\n  totalNetAmount: number;\r\n  totalGrossAmount: number;\r\n  status: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface SupplierOfferPosition {\r\n  id: string;\r\n  position: number;\r\n  articleNumber: string;\r\n  description: string;\r\n  quantity: number;\r\n  unit: string;\r\n  netPrice: number;\r\n  netAmount: number;\r\n  discount: number;\r\n  discountPercent: number;\r\n  grossAmount: number;\r\n  deliveryDate: string;\r\n  warehouse: string;\r\n  storageLocation: string;\r\n}\r\n\r\nexport interface SupplierOfferProps {\r\n  onOfferCreate: (offer: SupplierOfferData) => void;\r\n  onOfferUpdate: (id: string, offer: Partial<SupplierOfferData>) => void;\r\n  onOfferDelete: (id: string) => void;\r\n}\r\n\r\n// Validierungsschema\r\nconst offerSchema = yup.object({\r\n  creditorAccountNumber: yup.string().required('Kreditor-Kontonummer ist erforderlich'),\r\n  supplier: yup.string().required('Lieferant ist erforderlich'),\r\n  inquiryNumber: yup.string().required('Anfragenummer ist erforderlich'),\r\n  operator: yup.string().required('Bearbeiter ist erforderlich'),\r\n  contactPerson: yup.object({\r\n    name: yup.string().required('Kontaktperson Name ist erforderlich'),\r\n    salutation: yup.string().required('Anrede ist erforderlich')\r\n  }),\r\n  supplierOfferNumber: yup.string().required('Lieferanten-Angebotsnummer ist erforderlich')\r\n});\r\n\r\n// Mock-Daten\r\nconst suppliers = ['Dell GmbH', 'HP Deutschland', 'Lenovo Deutschland', 'Apple Deutschland'];\r\nconst salutations = ['Herr', 'Frau', 'Divers'];\r\n\r\nexport const SupplierOffer: React.FC<SupplierOfferProps> = ({\r\n  onOfferCreate,\r\n  onOfferUpdate,\r\n  onOfferDelete\r\n}) => {\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting },\r\n    reset\r\n  } = useForm<SupplierOfferData>({\r\n    resolver: yupResolver(offerSchema) as any,\r\n    defaultValues: {\r\n      creditorAccountNumber: '',\r\n      supplier: '',\r\n      inquiryNumber: '',\r\n      operator: '',\r\n      contactPerson: {\r\n        name: '',\r\n        salutation: ''\r\n      },\r\n      supplierOfferNumber: '',\r\n      latestDeliveryDate: '',\r\n      loadingDeadline: '',\r\n      loadingDate: '',\r\n      deliveryAddress: '',\r\n      billingAddress: '',\r\n      paymentTerms: '',\r\n      currency: 'EUR',\r\n      positions: [],\r\n      totalNetAmount: 0,\r\n      totalGrossAmount: 0,\r\n      status: 'draft'\r\n    }\r\n  });\r\n\r\n  const onSubmit = async (data: any) => {\r\n    try {\r\n      const offerData: SupplierOfferData = {\r\n        id: Date.now().toString(),\r\n        creditorAccountNumber: data.creditorAccountNumber,\r\n        supplier: data.supplier,\r\n        supplierMaster: data.supplierMaster || '',\r\n        inquiryNumber: data.inquiryNumber,\r\n        operator: data.operator,\r\n        contactPerson: {\r\n          name: data.contactPerson?.name || '',\r\n          salutation: data.contactPerson?.salutation || ''\r\n        },\r\n        supplierOfferNumber: data.supplierOfferNumber,\r\n        latestDeliveryDate: data.latestDeliveryDate || '',\r\n        loadingDeadline: data.loadingDeadline || '',\r\n        loadingDate: data.loadingDate || '',\r\n        deliveryAddress: data.deliveryAddress || '',\r\n        billingAddress: data.billingAddress || '',\r\n        paymentTerms: data.paymentTerms || '',\r\n        currency: data.currency || 'EUR',\r\n        positions: data.positions || [],\r\n        totalNetAmount: data.totalNetAmount || 0,\r\n        totalGrossAmount: data.totalGrossAmount || 0,\r\n        status: 'draft',\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      };\r\n      \r\n      onOfferCreate(offerData);\r\n    } catch (error) {\r\n      console.error('Fehler beim Erstellen des Angebots:', error);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <Card sx={{ p: 3 }}>\r\n      <Typography variant=\"h5\" gutterBottom>\r\n        Lieferantenangebot\r\n      </Typography>\r\n      \r\n      {/* ✅ REFAKTORIERT: Error-Message mit StandardMessage */}\r\n      {error && (\r\n        <FormMessage\r\n          type=\"error\"\r\n          message={error}\r\n        />\r\n      )}\r\n\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <Grid container spacing={3}>\r\n          {/* ✅ REFAKTORIERT: Standardisierte Formularfelder */}\r\n          <Grid item xs={12} md={6}>\r\n            <StandardTextField\r\n              name=\"creditorAccountNumber\"\r\n              label=\"Kreditor-Kontonummer\"\r\n              required={true}\r\n              helperText={errors.creditorAccountNumber?.message}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} md={6}>\r\n            <StandardSelectField\r\n              name=\"supplier\"\r\n              label=\"Lieferant\"\r\n              options={suppliers.map(supplier => ({ value: supplier, label: supplier }))}\r\n              required={true}\r\n              helperText={errors.supplier?.message}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} md={6}>\r\n            <StandardTextField\r\n              name=\"inquiryNumber\"\r\n              label={UI_LABELS.ERP.INQUIRY_NUMBER}\r\n              required={true}\r\n              helperText={errors.inquiryNumber?.message}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} md={6}>\r\n            <StandardTextField\r\n              name=\"operator\"\r\n              label={UI_LABELS.ERP.OPERATOR}\r\n              required={true}\r\n              helperText={errors.operator?.message}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} md={6}>\r\n            <StandardSelectField\r\n              name=\"contactPerson.salutation\"\r\n              label={UI_LABELS.FORMS.SALUTATION}\r\n              options={salutations.map(salutation => ({ value: salutation, label: salutation }))}\r\n              required={true}\r\n              helperText={errors.contactPerson?.salutation?.message}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} md={6}>\r\n            <StandardTextField\r\n              name=\"contactPerson.name\"\r\n              label={UI_LABELS.FORMS.NAME}\r\n              required={true}\r\n              helperText={errors.contactPerson?.name?.message}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} md={6}>\r\n            <StandardTextField\r\n              name=\"supplierOfferNumber\"\r\n              label={UI_LABELS.ERP.SUPPLIER_OFFER_NUMBER}\r\n              required={true}\r\n              helperText={errors.supplierOfferNumber?.message}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Divider sx={{ my: 3 }} />\r\n\r\n        {/* ✅ REFAKTORIERT: FormActions mit standardisierten Labels */}\r\n        <FormActions\r\n          onSave={handleSubmit(onSubmit)}\r\n          onCancel={handleCancel}\r\n          saveText={UI_LABELS.ACTIONS.SAVE}\r\n          cancelText={UI_LABELS.ACTIONS.CANCEL}\r\n          loading={isSubmitting}\r\n          disabled={isSubmitting}\r\n        />\r\n      </form>\r\n    </Card>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\erp\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\forms\\CRMForms.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StandardizedFormConfig' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[599,602],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[599,602],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[659,662],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[659,662],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'className' is assigned a value but never used. Allowed unused args must match /^_/u.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3157,3160],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3157,3160],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3180,3183],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3180,3183],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { ModernERPForm } from './ModernERPForm';\r\nimport { ExtendedFormRegistryService } from '../../services/ExtendedFormRegistry';\r\nimport { StandardizedFormConfig } from '../../types/forms';\r\n\r\n/**\r\n * CRM (Kundenbeziehungsmanagement) Formulare\r\n * \r\n * Diese Komponente implementiert alle CRM-spezifischen Formulare:\r\n * - Kundenverwaltung\r\n * - Kontakte\r\n * - Angebote\r\n * - Aufträge\r\n * - Verkaufschancen\r\n * - Marketing\r\n * - Kundenservice\r\n * - Berichte\r\n * - Automatisierung\r\n * - Integration\r\n */\r\n\r\ninterface CRMFormProps {\r\n  formId: string;\r\n  initialData?: any;\r\n  mode: 'create' | 'edit' | 'view';\r\n  onSave: (data: any) => Promise<void>;\r\n  onCancel: () => void;\r\n  className?: string;\r\n}\r\n\r\nexport const CRMForm: React.FC<CRMFormProps> = ({\r\n  formId,\r\n  initialData,\r\n  mode,\r\n  onSave,\r\n  onCancel,\r\n  className = ''\r\n}) => {\r\n  const formRegistry = ExtendedFormRegistryService.getInstance();\r\n  const formConfig = formRegistry.getForm(formId);\r\n\r\n  if (!formConfig) {\r\n    return (\r\n      <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n        <h3 className=\"text-red-800 font-semibold\">Formular nicht gefunden</h3>\r\n        <p className=\"text-red-600\">Das Formular \"{formId}\" ist nicht in der Registry registriert.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ModernERPForm\r\n      config={formConfig}\r\n      initialData={initialData}\r\n      onSave={onSave}\r\n      onCancel={onCancel}\r\n      mode={mode}\r\n    />\r\n  );\r\n};\r\n\r\n// Spezialisierte Komponenten für spezifische CRM-Formulare\r\nexport const KundenverwaltungForm: React.FC<Omit<CRMFormProps, 'formId'>> = (props) => (\r\n  <CRMForm formId=\"crm-kundenverwaltung\" {...props} />\r\n);\r\n\r\nexport const KontakteForm: React.FC<Omit<CRMFormProps, 'formId'>> = (props) => (\r\n  <CRMForm formId=\"crm-kontakte\" {...props} />\r\n);\r\n\r\nexport const AngeboteForm: React.FC<Omit<CRMFormProps, 'formId'>> = (props) => (\r\n  <CRMForm formId=\"crm-angebote\" {...props} />\r\n);\r\n\r\nexport const AuftraegeForm: React.FC<Omit<CRMFormProps, 'formId'>> = (props) => (\r\n  <CRMForm formId=\"crm-auftraege\" {...props} />\r\n);\r\n\r\nexport const VerkaufschancenForm: React.FC<Omit<CRMFormProps, 'formId'>> = (props) => (\r\n  <CRMForm formId=\"crm-verkaufschancen\" {...props} />\r\n);\r\n\r\nexport const MarketingForm: React.FC<Omit<CRMFormProps, 'formId'>> = (props) => (\r\n  <CRMForm formId=\"crm-marketing\" {...props} />\r\n);\r\n\r\nexport const KundenserviceForm: React.FC<Omit<CRMFormProps, 'formId'>> = (props) => (\r\n  <CRMForm formId=\"crm-kundenservice\" {...props} />\r\n);\r\n\r\nexport const BerichteForm: React.FC<Omit<CRMFormProps, 'formId'>> = (props) => (\r\n  <CRMForm formId=\"crm-berichte\" {...props} />\r\n);\r\n\r\nexport const AutomatisierungForm: React.FC<Omit<CRMFormProps, 'formId'>> = (props) => (\r\n  <CRMForm formId=\"crm-automatisierung\" {...props} />\r\n);\r\n\r\nexport const IntegrationForm: React.FC<Omit<CRMFormProps, 'formId'>> = (props) => (\r\n  <CRMForm formId=\"crm-integration\" {...props} />\r\n);\r\n\r\n// Container-Komponente für CRM-Formular-Verwaltung\r\nexport const CRMFormContainer: React.FC<{\r\n  selectedForm: string;\r\n  mode: 'create' | 'edit' | 'view';\r\n  initialData?: any;\r\n  onSave: (data: any) => Promise<void>;\r\n  onCancel: () => void;\r\n}> = ({ selectedForm, mode, initialData, onSave, onCancel }) => {\r\n  const formRegistry = ExtendedFormRegistryService.getInstance();\r\n  const crmForms = formRegistry.getFormsByModule('crm');\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      <div className=\"mb-6\">\r\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\r\n          CRM - {formRegistry.getForm(selectedForm)?.metadata.name || 'Formular'}\r\n        </h2>\r\n        <p className=\"text-gray-600\">\r\n          {formRegistry.getForm(selectedForm)?.metadata.description || 'Verwaltung von Kundenbeziehungen'}\r\n        </p>\r\n      </div>\r\n\r\n      <CRMForm\r\n        formId={selectedForm}\r\n        mode={mode}\r\n        initialData={initialData}\r\n        onSave={onSave}\r\n        onCancel={onCancel}\r\n        className=\"bg-white rounded-lg shadow-sm\"\r\n      />\r\n\r\n      {/* Formular-Übersicht */}\r\n      <div className=\"mt-8 p-4 bg-gray-50 rounded-lg\">\r\n        <h3 className=\"text-lg font-semibold text-gray-800 mb-3\">\r\n          Verfügbare CRM-Formulare ({crmForms.length})\r\n        </h3>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\r\n          {crmForms.map((form) => (\r\n            <div\r\n              key={form.id}\r\n              className={`p-3 rounded border cursor-pointer transition-colors ${\r\n                selectedForm === form.id\r\n                  ? 'bg-purple-50 border-purple-200 text-purple-800'\r\n                  : 'bg-white border-gray-200 hover:bg-gray-50'\r\n              }`}\r\n            >\r\n              <div className=\"font-medium text-sm\">{form.metadata.name}</div>\r\n              <div className=\"text-xs text-gray-500 mt-1\">{form.metadata.description}</div>\r\n              <div className=\"text-xs text-gray-400 mt-1\">v{form.metadata.version}</div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CRMForm; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\forms\\CentralFormTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FilterIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":40,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PermissionLevel' is defined but never used. Allowed unused vars must match /^_/u.","line":50,"column":63,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":78},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2159,2162],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2159,2162],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Zentrale Formular-Tabelle Komponente\r\n * \r\n * Diese Komponente visualisiert und verwaltet die zentrale Formular-Tabelle\r\n * mit allen Formularen, Versionsnummern und Berechtigungen.\r\n */\r\n\r\nimport React, { useState, useEffect, useMemo } from 'react';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Chip,\r\n  IconButton,\r\n  Tooltip,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  Box,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Alert,\r\n  Badge\r\n} from '@mui/material';\r\nimport {\r\n  Search as SearchIcon,\r\n  FilterList as FilterIcon,\r\n  Sort as SortIcon,\r\n  Edit as EditIcon,\r\n  Visibility as ViewIcon,\r\n  Security as SecurityIcon,\r\n  History as HistoryIcon,\r\n  Download as DownloadIcon,\r\n  Upload as UploadIcon,\r\n  Refresh as RefreshIcon\r\n} from '@mui/icons-material';\r\nimport { CentralFormTableService, FormTableEntry, FormStatus, PermissionLevel } from '../../services/CentralFormTable';\r\n\r\ninterface CentralFormTableProps {\r\n  className?: string;\r\n}\r\n\r\ninterface FilterState {\r\n  searchTerm: string;\r\n  module: string;\r\n  status: string;\r\n  complexity: string;\r\n  category: string;\r\n}\r\n\r\ninterface SortState {\r\n  field: keyof FormTableEntry;\r\n  direction: 'asc' | 'desc';\r\n}\r\n\r\nexport const CentralFormTable: React.FC<CentralFormTableProps> = ({ className = '' }) => {\r\n  const [formTableService] = useState(() => CentralFormTableService.getInstance());\r\n  const [formEntries, setFormEntries] = useState<FormTableEntry[]>([]);\r\n  const [filterState, setFilterState] = useState<FilterState>({\r\n    searchTerm: '',\r\n    module: '',\r\n    status: '',\r\n    complexity: '',\r\n    category: ''\r\n  });\r\n  const [sortState, setSortState] = useState<SortState>({\r\n    field: 'index',\r\n    direction: 'asc'\r\n  });\r\n  const [selectedEntry, setSelectedEntry] = useState<FormTableEntry | null>(null);\r\n  const [showDetailsDialog, setShowDetailsDialog] = useState(false);\r\n  const [showPermissionsDialog, setShowPermissionsDialog] = useState(false);\r\n  const [statistics, setStatistics] = useState<any>(null);\r\n\r\n  // Lade alle Formular-Einträge\r\n  useEffect(() => {\r\n    const entries = formTableService.getAllFormEntries();\r\n    setFormEntries(entries);\r\n    setStatistics(formTableService.getTableStatistics());\r\n  }, [formTableService]);\r\n\r\n  // Gefilterte und sortierte Einträge\r\n  const filteredAndSortedEntries = useMemo(() => {\r\n    let filtered = formEntries;\r\n\r\n    // Anwenden der Filter\r\n    if (filterState.searchTerm) {\r\n      const searchTerm = filterState.searchTerm.toLowerCase();\r\n      filtered = filtered.filter(entry =>\r\n        entry.title.toLowerCase().includes(searchTerm) ||\r\n        entry.description.toLowerCase().includes(searchTerm) ||\r\n        entry.module.toLowerCase().includes(searchTerm) ||\r\n        entry.category.toLowerCase().includes(searchTerm)\r\n      );\r\n    }\r\n\r\n    if (filterState.module) {\r\n      filtered = filtered.filter(entry => entry.module === filterState.module);\r\n    }\r\n\r\n    if (filterState.status) {\r\n      filtered = filtered.filter(entry => entry.status === filterState.status as FormStatus);\r\n    }\r\n\r\n    if (filterState.complexity) {\r\n      filtered = filtered.filter(entry => entry.complexity === filterState.complexity);\r\n    }\r\n\r\n    if (filterState.category) {\r\n      filtered = filtered.filter(entry => entry.category === filterState.category);\r\n    }\r\n\r\n    // Sortierung anwenden\r\n    filtered.sort((a, b) => {\r\n      const aValue = a[sortState.field];\r\n      const bValue = b[sortState.field];\r\n\r\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\r\n        return sortState.direction === 'asc' \r\n          ? aValue.localeCompare(bValue)\r\n          : bValue.localeCompare(aValue);\r\n      }\r\n\r\n      if (typeof aValue === 'number' && typeof bValue === 'number') {\r\n        return sortState.direction === 'asc' ? aValue - bValue : bValue - aValue;\r\n      }\r\n\r\n      return 0;\r\n    });\r\n\r\n    return filtered;\r\n  }, [formEntries, filterState, sortState]);\r\n\r\n  const handleFilterChange = (field: keyof FilterState, value: string) => {\r\n    setFilterState(prev => ({ ...prev, [field]: value }));\r\n  };\r\n\r\n  const handleSort = (field: keyof FormTableEntry) => {\r\n    setSortState(prev => ({\r\n      field,\r\n      direction: prev.field === field && prev.direction === 'asc' ? 'desc' : 'asc'\r\n    }));\r\n  };\r\n\r\n  const handleViewDetails = (entry: FormTableEntry) => {\r\n    setSelectedEntry(entry);\r\n    setShowDetailsDialog(true);\r\n  };\r\n\r\n  const handleEditPermissions = (entry: FormTableEntry) => {\r\n    setSelectedEntry(entry);\r\n    setShowPermissionsDialog(true);\r\n  };\r\n\r\n  const handleExport = () => {\r\n    const data = formTableService.exportTable();\r\n    const blob = new Blob([data], { type: 'application/json' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `form-table-export-${new Date().toISOString().split('T')[0]}.json`;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  const handleImport = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = event.target.files?.[0];\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        const content = e.target?.result as string;\r\n        if (content) {\r\n          const success = formTableService.importTable(content);\r\n          if (success) {\r\n            // Neu laden\r\n            const entries = formTableService.getAllFormEntries();\r\n            setFormEntries(entries);\r\n            setStatistics(formTableService.getTableStatistics());\r\n          }\r\n        }\r\n      };\r\n      reader.readAsText(file);\r\n    }\r\n  };\r\n\r\n  const getPermissionColor = (entry: FormTableEntry) => {\r\n    const hasAdmin = entry.permissions.admin.length > 0;\r\n    const hasWrite = entry.permissions.write.length > 0;\r\n    const hasRead = entry.permissions.read.length > 0;\r\n\r\n    if (hasAdmin) return 'error';\r\n    if (hasWrite) return 'warning';\r\n    if (hasRead) return 'info';\r\n    return 'default';\r\n  };\r\n\r\n  const getStatusColor = (status: FormStatus) => {\r\n    switch (status) {\r\n      case FormStatus.ACTIVE: return 'success';\r\n      case FormStatus.DRAFT: return 'info';\r\n      case FormStatus.DEPRECATED: return 'error';\r\n      case FormStatus.ARCHIVED: return 'default';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getComplexityColor = (complexity: string) => {\r\n    switch (complexity) {\r\n      case 'low': return 'success';\r\n      case 'medium': return 'warning';\r\n      case 'high': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`central-form-table ${className}`}>\r\n      {/* Header mit Statistiken */}\r\n      <Card className=\"mb-6\">\r\n        <CardContent>\r\n          <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n            Zentrale Formular-Tabelle\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n            Vollständig indexierte Übersicht aller {statistics?.total || 0} Formulare und Eingabemasken\r\n          </Typography>\r\n\r\n          {statistics && (\r\n            <Grid container spacing={2} className=\"mt-4\">\r\n              <Grid item xs={12} md={3}>\r\n                <Box textAlign=\"center\">\r\n                  <Typography variant=\"h6\" color=\"primary\">\r\n                    {statistics.total}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    Gesamt\r\n                  </Typography>\r\n                </Box>\r\n              </Grid>\r\n              <Grid item xs={12} md={3}>\r\n                <Box textAlign=\"center\">\r\n                  <Typography variant=\"h6\" color=\"success.main\">\r\n                    {statistics.byStatus?.active || 0}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    Aktiv\r\n                  </Typography>\r\n                </Box>\r\n              </Grid>\r\n              <Grid item xs={12} md={3}>\r\n                <Box textAlign=\"center\">\r\n                  <Typography variant=\"h6\" color=\"warning.main\">\r\n                    {statistics.byComplexity?.high || 0}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    Komplex\r\n                  </Typography>\r\n                </Box>\r\n              </Grid>\r\n              <Grid item xs={12} md={3}>\r\n                <Box textAlign=\"center\">\r\n                  <Typography variant=\"h6\" color=\"info.main\">\r\n                    {statistics.averagePriority?.toFixed(1) || 0}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    Ø Priorität\r\n                  </Typography>\r\n                </Box>\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Filter und Aktionen */}\r\n      <Card className=\"mb-4\">\r\n        <CardContent>\r\n          <Grid container spacing={2} alignItems=\"center\">\r\n            <Grid item xs={12} md={3}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Suche\"\r\n                value={filterState.searchTerm}\r\n                onChange={(e) => handleFilterChange('searchTerm', e.target.value)}\r\n                InputProps={{\r\n                  startAdornment: <SearchIcon className=\"mr-2\" />\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} md={2}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Modul</InputLabel>\r\n                <Select\r\n                  value={filterState.module}\r\n                  onChange={(e) => handleFilterChange('module', e.target.value)}\r\n                  label=\"Modul\"\r\n                >\r\n                  <MenuItem value=\"\">Alle</MenuItem>\r\n                  <MenuItem value=\"warenwirtschaft\">Warenwirtschaft</MenuItem>\r\n                  <MenuItem value=\"finanzbuchhaltung\">Finanzbuchhaltung</MenuItem>\r\n                  <MenuItem value=\"crm\">CRM</MenuItem>\r\n                  <MenuItem value=\"crosscutting\">Übergreifend</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12} md={2}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Status</InputLabel>\r\n                <Select\r\n                  value={filterState.status}\r\n                  onChange={(e) => handleFilterChange('status', e.target.value)}\r\n                  label=\"Status\"\r\n                >\r\n                  <MenuItem value=\"\">Alle</MenuItem>\r\n                  <MenuItem value=\"active\">Aktiv</MenuItem>\r\n                  <MenuItem value=\"draft\">Entwurf</MenuItem>\r\n                  <MenuItem value=\"deprecated\">Veraltet</MenuItem>\r\n                  <MenuItem value=\"archived\">Archiviert</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12} md={2}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Komplexität</InputLabel>\r\n                <Select\r\n                  value={filterState.complexity}\r\n                  onChange={(e) => handleFilterChange('complexity', e.target.value)}\r\n                  label=\"Komplexität\"\r\n                >\r\n                  <MenuItem value=\"\">Alle</MenuItem>\r\n                  <MenuItem value=\"low\">Niedrig</MenuItem>\r\n                  <MenuItem value=\"medium\">Mittel</MenuItem>\r\n                  <MenuItem value=\"high\">Hoch</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12} md={3}>\r\n              <Box display=\"flex\" gap={1}>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  startIcon={<DownloadIcon />}\r\n                  onClick={handleExport}\r\n                >\r\n                  Export\r\n                </Button>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  component=\"label\"\r\n                  startIcon={<UploadIcon />}\r\n                >\r\n                  Import\r\n                  <input\r\n                    type=\"file\"\r\n                    hidden\r\n                    accept=\".json\"\r\n                    onChange={handleImport}\r\n                  />\r\n                </Button>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  startIcon={<RefreshIcon />}\r\n                  onClick={() => {\r\n                    const entries = formTableService.getAllFormEntries();\r\n                    setFormEntries(entries);\r\n                    setStatistics(formTableService.getTableStatistics());\r\n                  }}\r\n                >\r\n                  Aktualisieren\r\n                </Button>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Formular-Tabelle */}\r\n      <TableContainer component={Paper}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>\r\n                <Box display=\"flex\" alignItems=\"center\">\r\n                  Index\r\n                  <IconButton size=\"small\" onClick={() => handleSort('index')}>\r\n                    <SortIcon />\r\n                  </IconButton>\r\n                </Box>\r\n              </TableCell>\r\n              <TableCell>\r\n                <Box display=\"flex\" alignItems=\"center\">\r\n                  Titel\r\n                  <IconButton size=\"small\" onClick={() => handleSort('title')}>\r\n                    <SortIcon />\r\n                  </IconButton>\r\n                </Box>\r\n              </TableCell>\r\n              <TableCell>Modul</TableCell>\r\n              <TableCell>Kategorie</TableCell>\r\n              <TableCell>Version</TableCell>\r\n              <TableCell>Status</TableCell>\r\n              <TableCell>Komplexität</TableCell>\r\n              <TableCell>Priorität</TableCell>\r\n              <TableCell>Berechtigungen</TableCell>\r\n              <TableCell>Aktionen</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {filteredAndSortedEntries.map((entry) => (\r\n              <TableRow key={entry.id} hover>\r\n                <TableCell>\r\n                  <Badge badgeContent={entry.index} color=\"primary\">\r\n                    <Typography variant=\"body2\" fontWeight=\"bold\">\r\n                      #{entry.index}\r\n                    </Typography>\r\n                  </Badge>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Box>\r\n                    <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                      {entry.title}\r\n                    </Typography>\r\n                    <Typography variant=\"caption\" color=\"text.secondary\">\r\n                      {entry.description}\r\n                    </Typography>\r\n                  </Box>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Chip\r\n                    label={entry.module}\r\n                    size=\"small\"\r\n                    color=\"primary\"\r\n                    variant=\"outlined\"\r\n                  />\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Typography variant=\"body2\">\r\n                    {entry.category}\r\n                  </Typography>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                    <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                      v{entry.version}\r\n                    </Typography>\r\n                    <Tooltip title=\"Versionshistorie\">\r\n                      <IconButton size=\"small\">\r\n                        <HistoryIcon fontSize=\"small\" />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                  </Box>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Chip\r\n                    label={entry.status}\r\n                    size=\"small\"\r\n                    color={getStatusColor(entry.status)}\r\n                  />\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Chip\r\n                    label={entry.complexity}\r\n                    size=\"small\"\r\n                    color={getComplexityColor(entry.complexity)}\r\n                  />\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                    {entry.priority}/10\r\n                  </Typography>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Tooltip title={`Admin: ${entry.permissions.admin.length}, Write: ${entry.permissions.write.length}, Read: ${entry.permissions.read.length}`}>\r\n                    <Badge\r\n                      badgeContent={entry.permissions.admin.length + entry.permissions.write.length + entry.permissions.read.length}\r\n                      color={getPermissionColor(entry)}\r\n                    >\r\n                      <SecurityIcon color=\"action\" />\r\n                    </Badge>\r\n                  </Tooltip>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Box display=\"flex\" gap={1}>\r\n                    <Tooltip title=\"Details anzeigen\">\r\n                      <IconButton\r\n                        size=\"small\"\r\n                        onClick={() => handleViewDetails(entry)}\r\n                      >\r\n                        <ViewIcon />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Berechtigungen bearbeiten\">\r\n                      <IconButton\r\n                        size=\"small\"\r\n                        onClick={() => handleEditPermissions(entry)}\r\n                      >\r\n                        <EditIcon />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                  </Box>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n\r\n      {/* Details Dialog */}\r\n      <Dialog\r\n        open={showDetailsDialog}\r\n        onClose={() => setShowDetailsDialog(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>\r\n          Formular-Details: {selectedEntry?.title}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {selectedEntry && (\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} md={6}>\r\n                <Typography variant=\"h6\" gutterBottom>Basis-Informationen</Typography>\r\n                <Box mb={2}>\r\n                  <Typography variant=\"body2\"><strong>ID:</strong> {selectedEntry.id}</Typography>\r\n                  <Typography variant=\"body2\"><strong>Index:</strong> #{selectedEntry.index}</Typography>\r\n                  <Typography variant=\"body2\"><strong>Modul:</strong> {selectedEntry.module}</Typography>\r\n                  <Typography variant=\"body2\"><strong>Kategorie:</strong> {selectedEntry.category}</Typography>\r\n                  <Typography variant=\"body2\"><strong>Version:</strong> v{selectedEntry.version}</Typography>\r\n                  <Typography variant=\"body2\"><strong>Status:</strong> {selectedEntry.status}</Typography>\r\n                </Box>\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <Typography variant=\"h6\" gutterBottom>Technische Details</Typography>\r\n                <Box mb={2}>\r\n                  <Typography variant=\"body2\"><strong>Komponente:</strong> {selectedEntry.componentPath}</Typography>\r\n                  <Typography variant=\"body2\"><strong>Validierung:</strong> {selectedEntry.validationSchema}</Typography>\r\n                  <Typography variant=\"body2\"><strong>Komplexität:</strong> {selectedEntry.complexity}</Typography>\r\n                  <Typography variant=\"body2\"><strong>Priorität:</strong> {selectedEntry.priority}/10</Typography>\r\n                  <Typography variant=\"body2\"><strong>Accessibility:</strong> {selectedEntry.accessibilityLevel}</Typography>\r\n                </Box>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h6\" gutterBottom>Berechtigungen</Typography>\r\n                <Box display=\"flex\" gap={1} flexWrap=\"wrap\">\r\n                  <Chip label={`Admin: ${selectedEntry.permissions.admin.length}`} color=\"error\" size=\"small\" />\r\n                  <Chip label={`Write: ${selectedEntry.permissions.write.length}`} color=\"warning\" size=\"small\" />\r\n                  <Chip label={`Read: ${selectedEntry.permissions.read.length}`} color=\"success\" size=\"small\" />\r\n                </Box>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h6\" gutterBottom>Tags</Typography>\r\n                <Box display=\"flex\" gap={1} flexWrap=\"wrap\">\r\n                  {selectedEntry.tags.map((tag, index) => (\r\n                    <Chip key={index} label={tag} size=\"small\" variant=\"outlined\" />\r\n                  ))}\r\n                </Box>\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setShowDetailsDialog(false)}>Schließen</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Berechtigungen Dialog */}\r\n      <Dialog\r\n        open={showPermissionsDialog}\r\n        onClose={() => setShowPermissionsDialog(false)}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>\r\n          Berechtigungen bearbeiten: {selectedEntry?.title}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {selectedEntry && (\r\n            <Alert severity=\"info\" className=\"mb-4\">\r\n              Hier können die Berechtigungen für das Formular angepasst werden.\r\n            </Alert>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setShowPermissionsDialog(false)}>Abbrechen</Button>\r\n          <Button variant=\"contained\" onClick={() => setShowPermissionsDialog(false)}>\r\n            Speichern\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CentralFormTable; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\forms\\CrossCuttingForms.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StandardizedFormConfig' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[673,676],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[673,676],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[733,736],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[733,736],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'className' is assigned a value but never used. Allowed unused args must match /^_/u.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3659,3662],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3659,3662],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3682,3685],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3682,3685],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { ModernERPForm } from './ModernERPForm';\r\nimport { ExtendedFormRegistryService } from '../../services/ExtendedFormRegistry';\r\nimport { StandardizedFormConfig } from '../../types/forms';\r\n\r\n/**\r\n * Übergreifende Services Formulare\r\n * \r\n * Diese Komponente implementiert alle Cross-Cutting-spezifischen Formulare:\r\n * - Benutzerverwaltung\r\n * - Rollen & Berechtigungen\r\n * - Systemeinstellungen\r\n * - Workflow-Engine\r\n * - Berichte & Analytics\r\n * - Integration\r\n * - Backup & Wiederherstellung\r\n * - Monitoring\r\n * - API-Management\r\n * - Dokumentenverwaltung\r\n */\r\n\r\ninterface CrossCuttingFormProps {\r\n  formId: string;\r\n  initialData?: any;\r\n  mode: 'create' | 'edit' | 'view';\r\n  onSave: (data: any) => Promise<void>;\r\n  onCancel: () => void;\r\n  className?: string;\r\n}\r\n\r\nexport const CrossCuttingForm: React.FC<CrossCuttingFormProps> = ({\r\n  formId,\r\n  initialData,\r\n  mode,\r\n  onSave,\r\n  onCancel,\r\n  className = ''\r\n}) => {\r\n  const formRegistry = ExtendedFormRegistryService.getInstance();\r\n  const formConfig = formRegistry.getForm(formId);\r\n\r\n  if (!formConfig) {\r\n    return (\r\n      <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n        <h3 className=\"text-red-800 font-semibold\">Formular nicht gefunden</h3>\r\n        <p className=\"text-red-600\">Das Formular \"{formId}\" ist nicht in der Registry registriert.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ModernERPForm\r\n      config={formConfig}\r\n      initialData={initialData}\r\n      onSave={onSave}\r\n      onCancel={onCancel}\r\n      mode={mode}\r\n    />\r\n  );\r\n};\r\n\r\n// Spezialisierte Komponenten für spezifische Cross-Cutting-Formulare\r\nexport const BenutzerverwaltungForm: React.FC<Omit<CrossCuttingFormProps, 'formId'>> = (props) => (\r\n  <CrossCuttingForm formId=\"crosscutting-benutzerverwaltung\" {...props} />\r\n);\r\n\r\nexport const RollenBerechtigungenForm: React.FC<Omit<CrossCuttingFormProps, 'formId'>> = (props) => (\r\n  <CrossCuttingForm formId=\"crosscutting-rollen-berechtigungen\" {...props} />\r\n);\r\n\r\nexport const SystemeinstellungenForm: React.FC<Omit<CrossCuttingFormProps, 'formId'>> = (props) => (\r\n  <CrossCuttingForm formId=\"crosscutting-systemeinstellungen\" {...props} />\r\n);\r\n\r\nexport const WorkflowEngineForm: React.FC<Omit<CrossCuttingFormProps, 'formId'>> = (props) => (\r\n  <CrossCuttingForm formId=\"crosscutting-workflow-engine\" {...props} />\r\n);\r\n\r\nexport const BerichteAnalyticsForm: React.FC<Omit<CrossCuttingFormProps, 'formId'>> = (props) => (\r\n  <CrossCuttingForm formId=\"crosscutting-berichte-analytics\" {...props} />\r\n);\r\n\r\nexport const IntegrationForm: React.FC<Omit<CrossCuttingFormProps, 'formId'>> = (props) => (\r\n  <CrossCuttingForm formId=\"crosscutting-integration\" {...props} />\r\n);\r\n\r\nexport const BackupWiederherstellungForm: React.FC<Omit<CrossCuttingFormProps, 'formId'>> = (props) => (\r\n  <CrossCuttingForm formId=\"crosscutting-backup-wiederherstellung\" {...props} />\r\n);\r\n\r\nexport const MonitoringForm: React.FC<Omit<CrossCuttingFormProps, 'formId'>> = (props) => (\r\n  <CrossCuttingForm formId=\"crosscutting-monitoring\" {...props} />\r\n);\r\n\r\nexport const ApiManagementForm: React.FC<Omit<CrossCuttingFormProps, 'formId'>> = (props) => (\r\n  <CrossCuttingForm formId=\"crosscutting-api-management\" {...props} />\r\n);\r\n\r\nexport const DokumentenverwaltungForm: React.FC<Omit<CrossCuttingFormProps, 'formId'>> = (props) => (\r\n  <CrossCuttingForm formId=\"crosscutting-dokumentenverwaltung\" {...props} />\r\n);\r\n\r\n// Container-Komponente für Cross-Cutting-Formular-Verwaltung\r\nexport const CrossCuttingFormContainer: React.FC<{\r\n  selectedForm: string;\r\n  mode: 'create' | 'edit' | 'view';\r\n  initialData?: any;\r\n  onSave: (data: any) => Promise<void>;\r\n  onCancel: () => void;\r\n}> = ({ selectedForm, mode, initialData, onSave, onCancel }) => {\r\n  const formRegistry = ExtendedFormRegistryService.getInstance();\r\n  const crossCuttingForms = formRegistry.getFormsByModule('crosscutting');\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      <div className=\"mb-6\">\r\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\r\n          Übergreifende Services - {formRegistry.getForm(selectedForm)?.metadata.name || 'Formular'}\r\n        </h2>\r\n        <p className=\"text-gray-600\">\r\n          {formRegistry.getForm(selectedForm)?.metadata.description || 'Verwaltung von übergreifenden Services'}\r\n        </p>\r\n      </div>\r\n\r\n      <CrossCuttingForm\r\n        formId={selectedForm}\r\n        mode={mode}\r\n        initialData={initialData}\r\n        onSave={onSave}\r\n        onCancel={onCancel}\r\n        className=\"bg-white rounded-lg shadow-sm\"\r\n      />\r\n\r\n      {/* Formular-Übersicht */}\r\n      <div className=\"mt-8 p-4 bg-gray-50 rounded-lg\">\r\n        <h3 className=\"text-lg font-semibold text-gray-800 mb-3\">\r\n          Verfügbare Cross-Cutting-Formulare ({crossCuttingForms.length})\r\n        </h3>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\r\n          {crossCuttingForms.map((form) => (\r\n            <div\r\n              key={form.id}\r\n              className={`p-3 rounded border cursor-pointer transition-colors ${\r\n                selectedForm === form.id\r\n                  ? 'bg-orange-50 border-orange-200 text-orange-800'\r\n                  : 'bg-white border-gray-200 hover:bg-gray-50'\r\n              }`}\r\n            >\r\n              <div className=\"font-medium text-sm\">{form.metadata.name}</div>\r\n              <div className=\"text-xs text-gray-500 mt-1\">{form.metadata.description}</div>\r\n              <div className=\"text-xs text-gray-400 mt-1\">v{form.metadata.version}</div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CrossCuttingForm; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\forms\\ExampleOptimizedForm.tsx","messages":[{"ruleId":"no-useless-escape","severity":1,"message":"Unnecessary escape character: \\+.","line":78,"column":21,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":78,"endColumn":22,"suggestions":[{"messageId":"removeEscape","fix":{"range":[2823,2824],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[2823,2823],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":1,"message":"Unnecessary escape character: \\(.","line":78,"column":33,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":78,"endColumn":34,"suggestions":[{"messageId":"removeEscape","fix":{"range":[2835,2836],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[2835,2835],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":1,"message":"Unnecessary escape character: \\).","line":78,"column":35,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":78,"endColumn":36,"suggestions":[{"messageId":"removeEscape","fix":{"range":[2837,2838],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[2837,2837],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":227,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":227,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6878,6881],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6878,6881],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * VALEO NeuroERP 2.0 - Beispiel für optimiertes Formular\r\n * Demonstration der Horizon Beta optimierten Features\r\n * Serena Quality: Complete example with all ERP features\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport { Box, Typography, Card, CardContent, Alert } from '@mui/material';\r\nimport { Person as PersonIcon, Business as BusinessIcon, Email as EmailIcon, Phone as PhoneIcon } from '@mui/icons-material';\r\nimport OptimizedSimpleForm from './OptimizedSimpleForm';\r\n\r\n// Beispiel-Zod-Schema für Validierung\r\nimport * as z from 'zod';\r\n\r\nconst CustomerFormSchema = z.object({\r\n  name: z.string().min(2, 'Name muss mindestens 2 Zeichen lang sein'),\r\n  email: z.string().email('Ungültige E-Mail-Adresse'),\r\n  phone: z.string().optional(),\r\n  company: z.string().min(1, 'Firmenname ist erforderlich'),\r\n  address: z.string().min(10, 'Adresse muss mindestens 10 Zeichen lang sein'),\r\n  postalCode: z.string().regex(/^\\d{5}$/, 'PLZ muss 5 Ziffern haben'),\r\n  city: z.string().min(2, 'Stadt muss mindestens 2 Zeichen lang sein'),\r\n  country: z.string().min(2, 'Land ist erforderlich'),\r\n  customerType: z.enum(['private', 'business', 'wholesale']),\r\n  notes: z.string().optional(),\r\n  newsletter: z.boolean().optional(),\r\n  barcode: z.string().optional(),\r\n});\r\n\r\ntype CustomerFormData = z.infer<typeof CustomerFormSchema>;\r\n\r\nexport const ExampleOptimizedForm: React.FC = () => {\r\n  const [formData, setFormData] = useState<CustomerFormData | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [autoSaveData, setAutoSaveData] = useState<CustomerFormData | null>(null);\r\n\r\n  // Beispiel-Felder für Kundenformular\r\n  const customerFields = [\r\n    {\r\n      name: 'name',\r\n      label: 'Name',\r\n      type: 'text' as const,\r\n      required: true,\r\n      placeholder: 'Vor- und Nachname eingeben',\r\n      icon: <PersonIcon color=\"action\" />,\r\n      group: 'persönlich',\r\n      helpText: 'Geben Sie den vollständigen Namen ein',\r\n      validation: {\r\n        required: true,\r\n        min: 2,\r\n        pattern: /^[a-zA-ZäöüßÄÖÜ\\s]+$/\r\n      }\r\n    },\r\n    {\r\n      name: 'email',\r\n      label: 'E-Mail',\r\n      type: 'email' as const,\r\n      required: true,\r\n      placeholder: 'email@beispiel.de',\r\n      icon: <EmailIcon color=\"action\" />,\r\n      group: 'persönlich',\r\n      helpText: 'Wird für Rechnungen und Benachrichtigungen verwendet',\r\n      validation: {\r\n        required: true,\r\n        pattern: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\r\n      }\r\n    },\r\n    {\r\n      name: 'phone',\r\n      label: 'Telefon',\r\n      type: 'text' as const,\r\n      placeholder: '+49 123 456789',\r\n      icon: <PhoneIcon color=\"action\" />,\r\n      group: 'persönlich',\r\n      helpText: 'Optional für Rückfragen',\r\n      validation: {\r\n        pattern: /^[\\+]?[0-9\\s\\-\\(\\)]+$/\r\n      }\r\n    },\r\n    {\r\n      name: 'company',\r\n      label: 'Firma',\r\n      type: 'text' as const,\r\n      required: true,\r\n      placeholder: 'Firmenname eingeben',\r\n      icon: <BusinessIcon color=\"action\" />,\r\n      group: 'geschäftlich',\r\n      helpText: 'Name der Firma oder Organisation',\r\n      validation: {\r\n        required: true,\r\n        min: 1\r\n      }\r\n    },\r\n    {\r\n      name: 'address',\r\n      label: 'Adresse',\r\n      type: 'textarea' as const,\r\n      required: true,\r\n      placeholder: 'Straße, Hausnummer, Zusatz',\r\n      group: 'geschäftlich',\r\n      helpText: 'Vollständige Adresse für Lieferungen',\r\n      validation: {\r\n        required: true,\r\n        min: 10\r\n      }\r\n    },\r\n    {\r\n      name: 'postalCode',\r\n      label: 'PLZ',\r\n      type: 'text' as const,\r\n      required: true,\r\n      placeholder: '12345',\r\n      group: 'geschäftlich',\r\n      helpText: '5-stellige Postleitzahl',\r\n      validation: {\r\n        required: true,\r\n        pattern: /^\\d{5}$/\r\n      }\r\n    },\r\n    {\r\n      name: 'city',\r\n      label: 'Stadt',\r\n      type: 'text' as const,\r\n      required: true,\r\n      placeholder: 'Musterstadt',\r\n      group: 'geschäftlich',\r\n      helpText: 'Stadt oder Gemeinde',\r\n      validation: {\r\n        required: true,\r\n        min: 2\r\n      }\r\n    },\r\n    {\r\n      name: 'country',\r\n      label: 'Land',\r\n      type: 'select' as const,\r\n      required: true,\r\n      options: [\r\n        { value: 'DE', label: 'Deutschland' },\r\n        { value: 'AT', label: 'Österreich' },\r\n        { value: 'CH', label: 'Schweiz' },\r\n        { value: 'NL', label: 'Niederlande' },\r\n        { value: 'BE', label: 'Belgien' }\r\n      ],\r\n      group: 'geschäftlich',\r\n      helpText: 'Land für internationale Lieferungen'\r\n    },\r\n    {\r\n      name: 'customerType',\r\n      label: 'Kundentyp',\r\n      type: 'select' as const,\r\n      required: true,\r\n      options: [\r\n        { value: 'private', label: 'Privatkunde' },\r\n        { value: 'business', label: 'Geschäftskunde' },\r\n        { value: 'wholesale', label: 'Großhändler' }\r\n      ],\r\n      group: 'geschäftlich',\r\n      helpText: 'Bestimmt Preise und Konditionen'\r\n    },\r\n    {\r\n      name: 'notes',\r\n      label: 'Notizen',\r\n      type: 'textarea' as const,\r\n      placeholder: 'Zusätzliche Informationen...',\r\n      group: 'zusätzlich',\r\n      helpText: 'Optionale Notizen zum Kunden'\r\n    },\r\n    {\r\n      name: 'newsletter',\r\n      label: 'Newsletter abonnieren',\r\n      type: 'checkbox' as const,\r\n      group: 'zusätzlich',\r\n      helpText: 'Erhalten Sie aktuelle Angebote und News'\r\n    },\r\n    {\r\n      name: 'barcode',\r\n      label: 'Barcode',\r\n      type: 'barcode' as const,\r\n      placeholder: 'Barcode scannen oder eingeben',\r\n      group: 'zusätzlich',\r\n      helpText: 'Barcode für schnelle Identifikation',\r\n      barcodeScanner: true\r\n    }\r\n  ];\r\n\r\n  const handleSubmit = async (data: CustomerFormData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Simulierte API-Anfrage\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      // Validierung\r\n      const validatedData = CustomerFormSchema.parse(data);\r\n      \r\n      setFormData(validatedData);\r\n      console.log('Kunde erfolgreich gespeichert:', validatedData);\r\n      \r\n      // Erfolgsmeldung\r\n      alert('Kunde erfolgreich gespeichert!');\r\n      \r\n    } catch (err) {\r\n      console.error('Submit error:', err);\r\n      setError('Fehler beim Speichern des Kunden. Bitte versuchen Sie es erneut.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAutoSave = (data: CustomerFormData) => {\r\n    setAutoSaveData(data);\r\n    console.log('Auto-Save:', data);\r\n  };\r\n\r\n  const handleBarcodeScan = (barcode: string) => {\r\n    console.log('Barcode gescannt:', barcode);\r\n    // Hier würde die Barcode-Verarbeitung implementiert\r\n  };\r\n\r\n  const handleKeyboardShortcut = (shortcut: string) => {\r\n    console.log('Keyboard shortcut:', shortcut);\r\n  };\r\n\r\n  const handleFieldChange = (fieldName: string, value: any) => {\r\n    console.log('Field changed:', fieldName, value);\r\n  };\r\n\r\n  return (\r\n    <Box className=\"max-w-4xl mx-auto p-6\">\r\n      <Typography variant=\"h4\" component=\"h1\" className=\"mb-6 text-center\">\r\n        VALEO NeuroERP - Optimiertes Kundenformular\r\n      </Typography>\r\n      \r\n      <Typography variant=\"body1\" className=\"mb-6 text-center text-gray-600\">\r\n        Horizon Beta optimiert mit Auto-Save, Keyboard-Shortcuts, Barcode-Scanner und Accessibility\r\n      </Typography>\r\n\r\n      {/* Feature-Übersicht */}\r\n      <Card className=\"mb-6\">\r\n        <CardContent>\r\n          <Typography variant=\"h6\" className=\"mb-3\">\r\n            🚀 Optimierte Features\r\n          </Typography>\r\n          <Box className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <Box>\r\n              <Typography variant=\"subtitle2\" className=\"font-semibold mb-2\">\r\n                UX/UI Verbesserungen:\r\n              </Typography>\r\n              <ul className=\"text-sm text-gray-600 space-y-1\">\r\n                <li>• Auto-Save alle 30 Sekunden</li>\r\n                <li>• Keyboard Shortcuts (Strg+S, Esc)</li>\r\n                <li>• Progress-Bar für Formular-Fortschritt</li>\r\n                <li>• Gruppierte Felder für bessere Organisation</li>\r\n                <li>• Real-time Validierung</li>\r\n              </ul>\r\n            </Box>\r\n            <Box>\r\n              <Typography variant=\"subtitle2\" className=\"font-semibold mb-2\">\r\n                ERP-spezifische Features:\r\n              </Typography>\r\n              <ul className=\"text-sm text-gray-600 space-y-1\">\r\n                <li>• Barcode-Scanner Integration</li>\r\n                <li>• Conditional Fields</li>\r\n                <li>• Accessibility (WCAG 2.1 AA)</li>\r\n                <li>• Mobile-optimiertes Design</li>\r\n                <li>• Performance-Optimierung</li>\r\n              </ul>\r\n            </Box>\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Auto-Save Status */}\r\n      {autoSaveData && (\r\n        <Alert severity=\"info\" className=\"mb-4\">\r\n          <strong>Auto-Save aktiv:</strong> Letzte automatische Speicherung um {new Date().toLocaleTimeString()}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Optimiertes Formular */}\r\n      <OptimizedSimpleForm\r\n        fields={customerFields}\r\n        onSubmit={handleSubmit}\r\n        loading={loading}\r\n        error={error}\r\n        submitText=\"Kunde speichern\"\r\n        cancelText=\"Abbrechen\"\r\n        onCancel={() => {\r\n          console.log('Formular abgebrochen');\r\n          setFormData(null);\r\n        }}\r\n        autoSave={true}\r\n        autoSaveInterval={30000}\r\n        showProgress={true}\r\n        keyboardShortcuts={true}\r\n        barcodeScanner={true}\r\n        size=\"medium\"\r\n        layout=\"grid\"\r\n        validationSchema={CustomerFormSchema}\r\n        onFieldChange={handleFieldChange}\r\n        onAutoSave={handleAutoSave}\r\n        onBarcodeScan={handleBarcodeScan}\r\n        onKeyboardShortcut={handleKeyboardShortcut}\r\n        className=\"shadow-lg\"\r\n      />\r\n\r\n      {/* Ergebnis-Anzeige */}\r\n      {formData && (\r\n        <Card className=\"mt-6\">\r\n          <CardContent>\r\n            <Typography variant=\"h6\" className=\"mb-3\">\r\n              ✅ Erfolgreich gespeichert\r\n            </Typography>\r\n            <pre className=\"bg-gray-100 p-4 rounded text-sm overflow-auto\">\r\n              {JSON.stringify(formData, null, 2)}\r\n            </pre>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Verwendungshinweise */}\r\n      <Card className=\"mt-6\">\r\n        <CardContent>\r\n          <Typography variant=\"h6\" className=\"mb-3\">\r\n            📋 Verwendungshinweise\r\n          </Typography>\r\n          <Box className=\"space-y-2 text-sm\">\r\n            <Typography>\r\n              <strong>Tastenkürzel:</strong> Strg+S (Speichern), Esc (Abbrechen), Tab (Navigation)\r\n            </Typography>\r\n            <Typography>\r\n              <strong>Auto-Save:</strong> Änderungen werden automatisch alle 30 Sekunden gespeichert\r\n            </Typography>\r\n            <Typography>\r\n              <strong>Barcode-Scanner:</strong> Klicken Sie auf das Barcode-Icon oder scannen Sie direkt\r\n            </Typography>\r\n            <Typography>\r\n              <strong>Validierung:</strong> Real-time Validierung mit deutschen Fehlermeldungen\r\n            </Typography>\r\n            <Typography>\r\n              <strong>Accessibility:</strong> Vollständig WCAG 2.1 AA konform\r\n            </Typography>\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ExampleOptimizedForm; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\forms\\FiBuForms.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StandardizedFormConfig' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[587,590],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[587,590],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[647,650],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[647,650],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'className' is assigned a value but never used. Allowed unused args must match /^_/u.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3166,3169],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3166,3169],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3189,3192],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3189,3192],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { ModernERPForm } from './ModernERPForm';\r\nimport { ExtendedFormRegistryService } from '../../services/ExtendedFormRegistry';\r\nimport { StandardizedFormConfig } from '../../types/forms';\r\n\r\n/**\r\n * Finanzbuchhaltung (FiBu) Formulare\r\n * \r\n * Diese Komponente implementiert alle FiBu-spezifischen Formulare:\r\n * - Buchungen\r\n * - Rechnungen\r\n * - Zahlungen\r\n * - Kontenverwaltung\r\n * - Kostenstellen\r\n * - Budgets\r\n * - Jahresabschluss\r\n * - Steuern\r\n * - Debitoren\r\n * - Kreditoren\r\n */\r\n\r\ninterface FiBuFormProps {\r\n  formId: string;\r\n  initialData?: any;\r\n  mode: 'create' | 'edit' | 'view';\r\n  onSave: (data: any) => Promise<void>;\r\n  onCancel: () => void;\r\n  className?: string;\r\n}\r\n\r\nexport const FiBuForm: React.FC<FiBuFormProps> = ({\r\n  formId,\r\n  initialData,\r\n  mode,\r\n  onSave,\r\n  onCancel,\r\n  className = ''\r\n}) => {\r\n  const formRegistry = ExtendedFormRegistryService.getInstance();\r\n  const formConfig = formRegistry.getForm(formId);\r\n\r\n  if (!formConfig) {\r\n    return (\r\n      <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n        <h3 className=\"text-red-800 font-semibold\">Formular nicht gefunden</h3>\r\n        <p className=\"text-red-600\">Das Formular \"{formId}\" ist nicht in der Registry registriert.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ModernERPForm\r\n      config={formConfig}\r\n      initialData={initialData}\r\n      onSave={onSave}\r\n      onCancel={onCancel}\r\n      mode={mode}\r\n    />\r\n  );\r\n};\r\n\r\n// Spezialisierte Komponenten für spezifische FiBu-Formulare\r\nexport const BuchungenForm: React.FC<Omit<FiBuFormProps, 'formId'>> = (props) => (\r\n  <FiBuForm formId=\"fibu-buchungen\" {...props} />\r\n);\r\n\r\nexport const RechnungenForm: React.FC<Omit<FiBuFormProps, 'formId'>> = (props) => (\r\n  <FiBuForm formId=\"fibu-rechnungen\" {...props} />\r\n);\r\n\r\nexport const ZahlungenForm: React.FC<Omit<FiBuFormProps, 'formId'>> = (props) => (\r\n  <FiBuForm formId=\"fibu-zahlungen\" {...props} />\r\n);\r\n\r\nexport const KontenverwaltungForm: React.FC<Omit<FiBuFormProps, 'formId'>> = (props) => (\r\n  <FiBuForm formId=\"fibu-kontenverwaltung\" {...props} />\r\n);\r\n\r\nexport const KostenstellenForm: React.FC<Omit<FiBuFormProps, 'formId'>> = (props) => (\r\n  <FiBuForm formId=\"fibu-kostenstellen\" {...props} />\r\n);\r\n\r\nexport const BudgetsForm: React.FC<Omit<FiBuFormProps, 'formId'>> = (props) => (\r\n  <FiBuForm formId=\"fibu-budgets\" {...props} />\r\n);\r\n\r\nexport const JahresabschlussForm: React.FC<Omit<FiBuFormProps, 'formId'>> = (props) => (\r\n  <FiBuForm formId=\"fibu-jahresabschluss\" {...props} />\r\n);\r\n\r\nexport const SteuernForm: React.FC<Omit<FiBuFormProps, 'formId'>> = (props) => (\r\n  <FiBuForm formId=\"fibu-steuern\" {...props} />\r\n);\r\n\r\nexport const DebitorenForm: React.FC<Omit<FiBuFormProps, 'formId'>> = (props) => (\r\n  <FiBuForm formId=\"fibu-debitoren\" {...props} />\r\n);\r\n\r\nexport const KreditorenForm: React.FC<Omit<FiBuFormProps, 'formId'>> = (props) => (\r\n  <FiBuForm formId=\"fibu-kreditoren\" {...props} />\r\n);\r\n\r\n// Container-Komponente für FiBu-Formular-Verwaltung\r\nexport const FiBuFormContainer: React.FC<{\r\n  selectedForm: string;\r\n  mode: 'create' | 'edit' | 'view';\r\n  initialData?: any;\r\n  onSave: (data: any) => Promise<void>;\r\n  onCancel: () => void;\r\n}> = ({ selectedForm, mode, initialData, onSave, onCancel }) => {\r\n  const formRegistry = ExtendedFormRegistryService.getInstance();\r\n  const fibuForms = formRegistry.getFormsByModule('finanzbuchhaltung');\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      <div className=\"mb-6\">\r\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\r\n          Finanzbuchhaltung - {formRegistry.getForm(selectedForm)?.metadata.name || 'Formular'}\r\n        </h2>\r\n        <p className=\"text-gray-600\">\r\n          {formRegistry.getForm(selectedForm)?.metadata.description || 'Verwaltung von Finanzbuchhaltungs-Prozessen'}\r\n        </p>\r\n      </div>\r\n\r\n      <FiBuForm\r\n        formId={selectedForm}\r\n        mode={mode}\r\n        initialData={initialData}\r\n        onSave={onSave}\r\n        onCancel={onCancel}\r\n        className=\"bg-white rounded-lg shadow-sm\"\r\n      />\r\n\r\n      {/* Formular-Übersicht */}\r\n      <div className=\"mt-8 p-4 bg-gray-50 rounded-lg\">\r\n        <h3 className=\"text-lg font-semibold text-gray-800 mb-3\">\r\n          Verfügbare FiBu-Formulare ({fibuForms.length})\r\n        </h3>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\r\n          {fibuForms.map((form) => (\r\n            <div\r\n              key={form.id}\r\n              className={`p-3 rounded border cursor-pointer transition-colors ${\r\n                selectedForm === form.id\r\n                  ? 'bg-green-50 border-green-200 text-green-800'\r\n                  : 'bg-white border-gray-200 hover:bg-gray-50'\r\n              }`}\r\n            >\r\n              <div className=\"font-medium text-sm\">{form.metadata.name}</div>\r\n              <div className=\"text-xs text-gray-500 mt-1\">{form.metadata.description}</div>\r\n              <div className=\"text-xs text-gray-400 mt-1\">v{form.metadata.version}</div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FiBuForm; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\forms\\FormManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'List' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ListItem' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ListItemText' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ListItemIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Divider' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AddIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EditIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ViewIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DeleteIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StandardizedFormConfig' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2097,2100],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2097,2100],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3489,3492],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3489,3492],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'openForm' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":120,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":120,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3930,3933],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3930,3933],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":196,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6471,6474],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6471,6474],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Card, CardContent, Typography, Tabs, Tab, Box, Chip, \r\n  Button, Dialog, DialogTitle, DialogContent, DialogActions,\r\n  List, ListItem, ListItemText, ListItemIcon, Divider\r\n} from '@mui/material';\r\nimport {\r\n  Warehouse as WarehouseIcon,\r\n  AccountBalance as AccountBalanceIcon,\r\n  People as PeopleIcon,\r\n  Settings as SettingsIcon,\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Visibility as ViewIcon,\r\n  Delete as DeleteIcon\r\n} from '@mui/icons-material';\r\nimport { WaWiFormContainer } from './WaWiForms';\r\nimport { FiBuFormContainer } from './FiBuForms';\r\nimport { CRMFormContainer } from './CRMForms';\r\nimport { CrossCuttingFormContainer } from './CrossCuttingForms';\r\nimport { ExtendedFormRegistryService } from '../../services/ExtendedFormRegistry';\r\nimport { StandardizedFormConfig } from '../../types/forms';\r\n\r\n/**\r\n * Zentrale Formular-Verwaltung für VALEO NeuroERP\r\n * \r\n * Diese Komponente bietet eine einheitliche Oberfläche für:\r\n * - Verwaltung aller Formulare aus allen Modulen\r\n * - Modul-spezifische Formular-Container\r\n * - Formular-Statistiken und Übersichten\r\n * - Formular-Suche und -Filterung\r\n */\r\n\r\ninterface FormManagerProps {\r\n  className?: string;\r\n}\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`form-tabpanel-${index}`}\r\n      aria-labelledby={`form-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport const FormManager: React.FC<FormManagerProps> = ({ className = '' }) => {\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [selectedForm, setSelectedForm] = useState<string>('');\r\n  const [formMode, setFormMode] = useState<'create' | 'edit' | 'view'>('view');\r\n  const [showFormDialog, setShowFormDialog] = useState(false);\r\n  const [formData, setFormData] = useState<any>(null);\r\n  \r\n  const formRegistry = ExtendedFormRegistryService.getInstance();\r\n  const [formStats, setFormStats] = useState({\r\n    total: 0,\r\n    byModule: {} as Record<string, number>,\r\n    byStatus: {} as Record<string, number>\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Statistiken aktualisieren\r\n    const allForms = formRegistry.getAllForms();\r\n    const moduleCounts = formRegistry.getModuleCounts();\r\n    \r\n    setFormStats({\r\n      total: allForms.length,\r\n      byModule: moduleCounts,\r\n      byStatus: {\r\n        active: allForms.filter(f => f.permissions?.canView).length,\r\n        draft: allForms.filter(f => f.metadata.version.includes('0.')).length,\r\n        deprecated: allForms.filter(f => f.metadata.version.includes('deprecated')).length\r\n      }\r\n    });\r\n\r\n    // Standard-Formular auswählen\r\n    if (allForms.length > 0 && !selectedForm) {\r\n      setSelectedForm(allForms[0].id);\r\n    }\r\n  }, [formRegistry, selectedForm]);\r\n\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n    // Erste Formular des Moduls auswählen\r\n    const modules = ['warenwirtschaft', 'finanzbuchhaltung', 'crm', 'crosscutting'];\r\n    const moduleForms = formRegistry.getFormsByModule(modules[newValue]);\r\n    if (moduleForms.length > 0) {\r\n      setSelectedForm(moduleForms[0].id);\r\n    }\r\n  };\r\n\r\n  const handleFormSave = async (data: any) => {\r\n    try {\r\n      console.log('Formular gespeichert:', data);\r\n      setShowFormDialog(false);\r\n      // Hier würde die tatsächliche Speicherlogik implementiert\r\n    } catch (error) {\r\n      console.error('Fehler beim Speichern:', error);\r\n    }\r\n  };\r\n\r\n  const handleFormCancel = () => {\r\n    setShowFormDialog(false);\r\n    setFormData(null);\r\n  };\r\n\r\n  const openForm = (formId: string, mode: 'create' | 'edit' | 'view', data?: any) => {\r\n    setSelectedForm(formId);\r\n    setFormMode(mode);\r\n    setFormData(data);\r\n    setShowFormDialog(true);\r\n  };\r\n\r\n  const getModuleIcon = (module: string) => {\r\n    switch (module) {\r\n      case 'warenwirtschaft': return <WarehouseIcon />;\r\n      case 'finanzbuchhaltung': return <AccountBalanceIcon />;\r\n      case 'crm': return <PeopleIcon />;\r\n      case 'crosscutting': return <SettingsIcon />;\r\n      default: return <SettingsIcon />;\r\n    }\r\n  };\r\n\r\n  const getModuleColor = (module: string): 'primary' | 'success' | 'secondary' | 'warning' | 'default' => {\r\n    switch (module) {\r\n      case 'warenwirtschaft': return 'primary';\r\n      case 'finanzbuchhaltung': return 'success';\r\n      case 'crm': return 'secondary';\r\n      case 'crosscutting': return 'warning';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const renderFormContainer = () => {\r\n    const formConfig = formRegistry.getForm(selectedForm);\r\n    if (!formConfig) return null;\r\n\r\n    const props = {\r\n      selectedForm,\r\n      mode: formMode,\r\n      initialData: formData,\r\n      onSave: handleFormSave,\r\n      onCancel: handleFormCancel\r\n    };\r\n\r\n    switch (formConfig.module) {\r\n      case 'warenwirtschaft':\r\n        return <WaWiFormContainer {...props} />;\r\n      case 'finanzbuchhaltung':\r\n        return <FiBuFormContainer {...props} />;\r\n      case 'crm':\r\n        return <CRMFormContainer {...props} />;\r\n      case 'crosscutting':\r\n        return <CrossCuttingFormContainer {...props} />;\r\n      default:\r\n        return <div>Unbekanntes Modul: {formConfig.module}</div>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`w-full ${className}`}>\r\n      {/* Header mit Statistiken */}\r\n      <Card className=\"mb-6\">\r\n        <CardContent>\r\n          <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n            Formular-Verwaltung\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n            Zentrale Verwaltung aller {formStats.total} Formulare in VALEO NeuroERP\r\n          </Typography>\r\n          \r\n          <div className=\"flex flex-wrap gap-4 mt-4\">\r\n            <Chip \r\n              label={`Gesamt: ${formStats.total}`} \r\n              color=\"primary\" \r\n              variant=\"outlined\" \r\n            />\r\n            {Object.entries(formStats.byModule).map(([module, count]) => (\r\n              <Chip\r\n                key={module}\r\n                icon={getModuleIcon(module)}\r\n                label={`${module}: ${count}`}\r\n                color={getModuleColor(module) as any}\r\n                variant=\"outlined\"\r\n              />\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Modul-Tabs */}\r\n      <Card>\r\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n          <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"Formular-Module\">\r\n            <Tab \r\n              label=\"Warenwirtschaft\" \r\n              icon={<WarehouseIcon />} \r\n              iconPosition=\"start\"\r\n            />\r\n            <Tab \r\n              label=\"Finanzbuchhaltung\" \r\n              icon={<AccountBalanceIcon />} \r\n              iconPosition=\"start\"\r\n            />\r\n            <Tab \r\n              label=\"CRM\" \r\n              icon={<PeopleIcon />} \r\n              iconPosition=\"start\"\r\n            />\r\n            <Tab \r\n              label=\"Übergreifende Services\" \r\n              icon={<SettingsIcon />} \r\n              iconPosition=\"start\"\r\n            />\r\n          </Tabs>\r\n        </Box>\r\n\r\n        <TabPanel value={tabValue} index={0}>\r\n          <WaWiFormContainer\r\n            selectedForm={selectedForm}\r\n            mode={formMode}\r\n            initialData={formData}\r\n            onSave={handleFormSave}\r\n            onCancel={handleFormCancel}\r\n          />\r\n        </TabPanel>\r\n\r\n        <TabPanel value={tabValue} index={1}>\r\n          <FiBuFormContainer\r\n            selectedForm={selectedForm}\r\n            mode={formMode}\r\n            initialData={formData}\r\n            onSave={handleFormSave}\r\n            onCancel={handleFormCancel}\r\n          />\r\n        </TabPanel>\r\n\r\n        <TabPanel value={tabValue} index={2}>\r\n          <CRMFormContainer\r\n            selectedForm={selectedForm}\r\n            mode={formMode}\r\n            initialData={formData}\r\n            onSave={handleFormSave}\r\n            onCancel={handleFormCancel}\r\n          />\r\n        </TabPanel>\r\n\r\n        <TabPanel value={tabValue} index={3}>\r\n          <CrossCuttingFormContainer\r\n            selectedForm={selectedForm}\r\n            mode={formMode}\r\n            initialData={formData}\r\n            onSave={handleFormSave}\r\n            onCancel={handleFormCancel}\r\n          />\r\n        </TabPanel>\r\n      </Card>\r\n\r\n      {/* Formular-Dialog */}\r\n      <Dialog \r\n        open={showFormDialog} \r\n        onClose={handleFormCancel}\r\n        maxWidth=\"xl\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>\r\n          {formRegistry.getForm(selectedForm)?.metadata.name || 'Formular'}\r\n          <Chip \r\n            label={formMode} \r\n            color={formMode === 'create' ? 'success' : formMode === 'edit' ? 'primary' : 'default'}\r\n            size=\"small\"\r\n            className=\"ml-2\"\r\n          />\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {renderFormContainer()}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleFormCancel}>Abbrechen</Button>\r\n          <Button \r\n            onClick={() => handleFormSave(formData)} \r\n            variant=\"contained\"\r\n            disabled={formMode === 'view'}\r\n          >\r\n            Speichern\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormManager; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\forms\\FormStandardization.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Chip' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SearchIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2081,2084],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2081,2084],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":286,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":286,"endColumn":11,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8058,8061],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8058,8061],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":416,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":416,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10981,10984],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10981,10984],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport {\r\n  TextField,\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormHelperText,\r\n  Box,\r\n  Typography,\r\n  Chip,\r\n  Alert,\r\n  CircularProgress,\r\n  InputAdornment,\r\n  IconButton,\r\n  Tooltip\r\n} from '@mui/material';\r\nimport {\r\n  Visibility as VisibilityIcon,\r\n  VisibilityOff as VisibilityOffIcon,\r\n  Search as SearchIcon,\r\n  Clear as ClearIcon,\r\n  Info as InfoIcon\r\n} from '@mui/icons-material';\r\nimport { Controller, useFormContext } from 'react-hook-form';\r\n\r\n// =====================================================\r\n// STANDARDIZED FORM COMPONENTS\r\n// =====================================================\r\n\r\nexport interface StandardFormFieldProps {\r\n  name: string;\r\n  label: string;\r\n  type?: 'text' | 'email' | 'password' | 'number' | 'tel' | 'url' | 'date';\r\n  required?: boolean;\r\n  disabled?: boolean;\r\n  placeholder?: string;\r\n  helperText?: string;\r\n  multiline?: boolean;\r\n  rows?: number;\r\n  maxLength?: number;\r\n  minLength?: number;\r\n  pattern?: RegExp;\r\n  startAdornment?: React.ReactNode;\r\n  endAdornment?: React.ReactNode;\r\n  showClearButton?: boolean;\r\n  showInfoTooltip?: boolean;\r\n  infoText?: string;\r\n}\r\n\r\n/**\r\n * Standardisiertes Textfeld für alle Formulare\r\n */\r\nexport const StandardTextField: React.FC<StandardFormFieldProps> = ({\r\n  name,\r\n  label,\r\n  type = 'text',\r\n  required = false,\r\n  disabled = false,\r\n  placeholder,\r\n  helperText,\r\n  multiline = false,\r\n  rows = 1,\r\n  maxLength,\r\n  minLength,\r\n  pattern,\r\n  startAdornment,\r\n  endAdornment,\r\n  showClearButton = false,\r\n  showInfoTooltip = false,\r\n  infoText\r\n}) => {\r\n  const { control, formState: { errors }, watch, setValue } = useFormContext();\r\n  const [showPassword, setShowPassword] = React.useState(false);\r\n  const [showClear, setShowClear] = React.useState(false);\r\n  \r\n  const value = watch(name);\r\n  \r\n  React.useEffect(() => {\r\n    setShowClear(!!value && showClearButton);\r\n  }, [value, showClearButton]);\r\n\r\n  const handleClear = () => {\r\n    setValue(name, '');\r\n  };\r\n\r\n  const getInputProps = () => {\r\n    const props: any = {};\r\n    \r\n    if (startAdornment) {\r\n      props.startAdornment = startAdornment;\r\n    }\r\n    \r\n    if (endAdornment) {\r\n      props.endAdornment = endAdornment;\r\n    }\r\n    \r\n    if (type === 'password') {\r\n      props.endAdornment = (\r\n        <InputAdornment position=\"end\">\r\n          <IconButton\r\n            onClick={() => setShowPassword(!showPassword)}\r\n            edge=\"end\"\r\n          >\r\n            {showPassword ? <VisibilityOffIcon /> : <VisibilityIcon />}\r\n          </IconButton>\r\n        </InputAdornment>\r\n      );\r\n    }\r\n    \r\n    if (showClear && value) {\r\n      props.endAdornment = (\r\n        <InputAdornment position=\"end\">\r\n          <IconButton onClick={handleClear} edge=\"end\">\r\n            <ClearIcon />\r\n          </IconButton>\r\n        </InputAdornment>\r\n      );\r\n    }\r\n    \r\n    return props;\r\n  };\r\n\r\n  return (\r\n    <Controller\r\n      name={name}\r\n      control={control}\r\n      rules={{\r\n        required: required ? `${label} ist erforderlich` : false,\r\n        minLength: minLength ? { value: minLength, message: `Mindestens ${minLength} Zeichen` } : undefined,\r\n        maxLength: maxLength ? { value: maxLength, message: `Maximal ${maxLength} Zeichen` } : undefined,\r\n        pattern: pattern ? { value: pattern, message: `Ungültiges Format` } : undefined\r\n      }}\r\n      render={({ field }) => (\r\n        <Box sx={{ position: 'relative' }}>\r\n          <TextField\r\n            {...field}\r\n            label={label}\r\n            type={type === 'password' ? (showPassword ? 'text' : 'password') : type}\r\n            required={required}\r\n            disabled={disabled}\r\n            placeholder={placeholder}\r\n            multiline={multiline}\r\n            rows={rows}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            error={!!errors[name]}\r\n            helperText={errors[name]?.message?.toString() || helperText}\r\n            InputProps={getInputProps()}\r\n            sx={{\r\n              '& .MuiOutlinedInput-root': {\r\n                borderRadius: 2,\r\n                '&:hover fieldset': {\r\n                  borderColor: 'primary.main',\r\n                },\r\n                '&.Mui-focused fieldset': {\r\n                  borderColor: 'primary.main',\r\n                },\r\n              },\r\n            }}\r\n          />\r\n          {showInfoTooltip && (\r\n            <Tooltip title={infoText || `Informationen zu ${label}`} placement=\"top\">\r\n              <IconButton\r\n                size=\"small\"\r\n                sx={{\r\n                  position: 'absolute',\r\n                  right: -40,\r\n                  top: '50%',\r\n                  transform: 'translateY(-50%)',\r\n                  color: 'text.secondary'\r\n                }}\r\n              >\r\n                <InfoIcon fontSize=\"small\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          )}\r\n        </Box>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport interface StandardSelectFieldProps {\r\n  name: string;\r\n  label: string;\r\n  options: Array<{ value: string | number; label: string; disabled?: boolean }>;\r\n  required?: boolean;\r\n  disabled?: boolean;\r\n  multiple?: boolean;\r\n  helperText?: string;\r\n  showInfoTooltip?: boolean;\r\n  infoText?: string;\r\n}\r\n\r\n/**\r\n * Standardisiertes Select-Feld für alle Formulare\r\n */\r\nexport const StandardSelectField: React.FC<StandardSelectFieldProps> = ({\r\n  name,\r\n  label,\r\n  options,\r\n  required = false,\r\n  disabled = false,\r\n  multiple = false,\r\n  helperText,\r\n  showInfoTooltip = false,\r\n  infoText\r\n}) => {\r\n  const { control, formState: { errors } } = useFormContext();\r\n\r\n  return (\r\n    <Controller\r\n      name={name}\r\n      control={control}\r\n      rules={{\r\n        required: required ? `${label} ist erforderlich` : false\r\n      }}\r\n      render={({ field }) => (\r\n        <Box sx={{ position: 'relative' }}>\r\n          <FormControl fullWidth error={!!errors[name]} disabled={disabled}>\r\n            <InputLabel>{label}</InputLabel>\r\n            <Select\r\n              {...field}\r\n              label={label}\r\n              multiple={multiple}\r\n              sx={{\r\n                borderRadius: 2,\r\n                '&:hover .MuiOutlinedInput-notchedOutline': {\r\n                  borderColor: 'primary.main',\r\n                },\r\n                '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\r\n                  borderColor: 'primary.main',\r\n                },\r\n              }}\r\n            >\r\n              {options.map((option) => (\r\n                <MenuItem\r\n                  key={option.value}\r\n                  value={option.value}\r\n                  disabled={option.disabled}\r\n                >\r\n                  {option.label}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n            {(errors[name]?.message || helperText) && (\r\n              <FormHelperText>{errors[name]?.message?.toString() || helperText}</FormHelperText>\r\n            )}\r\n          </FormControl>\r\n          {showInfoTooltip && (\r\n            <Tooltip title={infoText || `Informationen zu ${label}`} placement=\"top\">\r\n              <IconButton\r\n                size=\"small\"\r\n                sx={{\r\n                  position: 'absolute',\r\n                  right: -40,\r\n                  top: '50%',\r\n                  transform: 'translateY(-50%)',\r\n                  color: 'text.secondary'\r\n                }}\r\n              >\r\n                <InfoIcon fontSize=\"small\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          )}\r\n        </Box>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport interface StandardButtonProps {\r\n  type?: 'submit' | 'button' | 'reset';\r\n  variant?: 'contained' | 'outlined' | 'text';\r\n  color?: 'primary' | 'secondary' | 'success' | 'error' | 'warning' | 'info';\r\n  size?: 'small' | 'medium' | 'large';\r\n  disabled?: boolean;\r\n  loading?: boolean;\r\n  fullWidth?: boolean;\r\n  startIcon?: React.ReactNode;\r\n  endIcon?: React.ReactNode;\r\n  onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n  children: React.ReactNode;\r\n  sx?: any;\r\n}\r\n\r\n/**\r\n * Standardisierter Button für alle Formulare\r\n */\r\nexport const StandardButton: React.FC<StandardButtonProps> = ({\r\n  type = 'button',\r\n  variant = 'contained',\r\n  color = 'primary',\r\n  size = 'medium',\r\n  disabled = false,\r\n  loading = false,\r\n  fullWidth = false,\r\n  startIcon,\r\n  endIcon,\r\n  onClick,\r\n  children,\r\n  sx = {}\r\n}) => {\r\n  return (\r\n    <Button\r\n      type={type}\r\n      variant={variant}\r\n      color={color}\r\n      size={size}\r\n      disabled={disabled || loading}\r\n      fullWidth={fullWidth}\r\n      startIcon={loading ? <CircularProgress size={16} /> : startIcon}\r\n      endIcon={endIcon}\r\n      onClick={onClick}\r\n      sx={{\r\n        borderRadius: 2,\r\n        textTransform: 'none',\r\n        fontWeight: 500,\r\n        ...sx\r\n      }}\r\n    >\r\n      {children}\r\n    </Button>\r\n  );\r\n};\r\n\r\n/**\r\n * Standardisierte Formular-Aktionen\r\n */\r\nexport const FormActions: React.FC<{\r\n  onSave?: () => void;\r\n  onCancel?: () => void;\r\n  onReset?: () => void;\r\n  saveText?: string;\r\n  cancelText?: string;\r\n  resetText?: string;\r\n  loading?: boolean;\r\n  disabled?: boolean;\r\n}> = ({\r\n  onSave,\r\n  onCancel,\r\n  onReset,\r\n  saveText = 'Speichern',\r\n  cancelText = 'Abbrechen',\r\n  resetText = 'Zurücksetzen',\r\n  loading = false,\r\n  disabled = false\r\n}) => {\r\n  return (\r\n    <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end', mt: 3 }}>\r\n      {onReset && (\r\n        <StandardButton\r\n          variant=\"outlined\"\r\n          color=\"secondary\"\r\n          onClick={onReset}\r\n          disabled={disabled}\r\n        >\r\n          {resetText}\r\n        </StandardButton>\r\n      )}\r\n      {onCancel && (\r\n        <StandardButton\r\n          variant=\"outlined\"\r\n          onClick={onCancel}\r\n          disabled={disabled}\r\n        >\r\n          {cancelText}\r\n        </StandardButton>\r\n      )}\r\n      {onSave && (\r\n        <StandardButton\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={onSave}\r\n          loading={loading}\r\n          disabled={disabled}\r\n        >\r\n          {saveText}\r\n        </StandardButton>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\n/**\r\n * Standardisierte Erfolgs-/Fehlermeldungen\r\n */\r\nexport const FormMessage: React.FC<{\r\n  type: 'success' | 'error' | 'warning' | 'info';\r\n  title?: string;\r\n  message: string;\r\n  onClose?: () => void;\r\n}> = ({ type, title, message, onClose }) => {\r\n  return (\r\n    <Alert\r\n      severity={type}\r\n      onClose={onClose}\r\n      sx={{ mb: 2, borderRadius: 2 }}\r\n    >\r\n      {title && <Typography variant=\"subtitle2\" sx={{ fontWeight: 600 }}>{title}</Typography>}\r\n      {message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\n/**\r\n * Standardisierte Formular-Validierung\r\n */\r\nexport const useFormValidation = () => {\r\n  const { formState: { errors, isValid, isDirty } } = useFormContext();\r\n  \r\n  const hasErrors = Object.keys(errors).length > 0;\r\n  const errorMessages = Object.values(errors).map((error: any) => error.message);\r\n  \r\n  return {\r\n    hasErrors,\r\n    errorMessages,\r\n    isValid,\r\n    isDirty,\r\n    errors\r\n  };\r\n};\r\n\r\n/**\r\n * Standardisierte Formular-Labels\r\n */\r\nexport const FORM_LABELS = {\r\n  // Allgemeine Labels\r\n  SAVE: 'Speichern',\r\n  CANCEL: 'Abbrechen',\r\n  RESET: 'Zurücksetzen',\r\n  DELETE: 'Löschen',\r\n  EDIT: 'Bearbeiten',\r\n  VIEW: 'Anzeigen',\r\n  SEARCH: 'Suchen',\r\n  FILTER: 'Filter',\r\n  SORT: 'Sortieren',\r\n  EXPORT: 'Exportieren',\r\n  IMPORT: 'Importieren',\r\n  \r\n  // Formular-Labels\r\n  NAME: 'Name',\r\n  EMAIL: 'E-Mail',\r\n  PHONE: 'Telefon',\r\n  ADDRESS: 'Adresse',\r\n  CITY: 'Stadt',\r\n  ZIP_CODE: 'PLZ',\r\n  COUNTRY: 'Land',\r\n  DESCRIPTION: 'Beschreibung',\r\n  NOTES: 'Notizen',\r\n  STATUS: 'Status',\r\n  PRIORITY: 'Priorität',\r\n  DATE: 'Datum',\r\n  TIME: 'Zeit',\r\n  AMOUNT: 'Betrag',\r\n  QUANTITY: 'Menge',\r\n  PRICE: 'Preis',\r\n  CURRENCY: 'Währung',\r\n  \r\n  // ERP-spezifische Labels\r\n  CUSTOMER_NUMBER: 'Kundennummer',\r\n  ORDER_NUMBER: 'Auftragsnummer',\r\n  INVOICE_NUMBER: 'Rechnungsnummer',\r\n  DELIVERY_NUMBER: 'Lieferscheinnummer',\r\n  PRODUCT_NUMBER: 'Artikelnummer',\r\n  SUPPLIER_NUMBER: 'Lieferantennummer',\r\n  EMPLOYEE_NUMBER: 'Mitarbeiternummer',\r\n  PROJECT_NUMBER: 'Projektnummer',\r\n  \r\n  // Status-Labels\r\n  ACTIVE: 'Aktiv',\r\n  INACTIVE: 'Inaktiv',\r\n  PENDING: 'Ausstehend',\r\n  COMPLETED: 'Abgeschlossen',\r\n  CANCELLED: 'Storniert',\r\n  DRAFT: 'Entwurf',\r\n  PUBLISHED: 'Veröffentlicht',\r\n  \r\n  // Prioritäts-Labels\r\n  LOW: 'Niedrig',\r\n  MEDIUM: 'Mittel',\r\n  HIGH: 'Hoch',\r\n  URGENT: 'Dringend'\r\n} as const;\r\n\r\nexport default {\r\n  StandardTextField,\r\n  StandardSelectField,\r\n  StandardButton,\r\n  FormActions,\r\n  FormMessage,\r\n  useFormValidation,\r\n  FORM_LABELS\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\forms\\InvoiceForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Controller' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FieldError' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PersonIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WarningIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InfoIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StandardButton' is defined but never used. Allowed unused vars must match /^_/u.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormMessage' is defined but never used. Allowed unused vars must match /^_/u.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StatusChip' is defined but never used. Allowed unused vars must match /^_/u.","line":29,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1760,1763],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1760,1763],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1880,1883],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1880,1883],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'control' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":71,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused caught errors must match /^_/u.","line":105,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":105,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getStatusConfig' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":128,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":128,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useForm, Controller, FieldError } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { \r\n  Card, \r\n  CardContent, \r\n  CardHeader,\r\n  Box,\r\n  Typography,\r\n  Divider,\r\n  Chip,\r\n  InputAdornment\r\n} from '@mui/material';\r\nimport { \r\n  Assignment as AssignmentIcon,\r\n  Person as PersonIcon,\r\n  Warning as WarningIcon,\r\n  Info as InfoIcon\r\n} from '@mui/icons-material';\r\nimport { z } from 'zod';\r\n// ✅ NEU: Import der standardisierten UI-Komponenten\r\nimport { \r\n  StandardTextField, \r\n  StandardSelectField, \r\n  StandardButton, \r\n  FormActions, \r\n  FormMessage \r\n} from './FormStandardization';\r\nimport { UI_LABELS, StatusChip, StandardMessage } from '../ui/UIStandardization';\r\n\r\n// TypeScript Interfaces\r\ninterface InvoiceFormData {\r\n  customer_id: string;\r\n  amount: string;\r\n  status: 'open' | 'paid' | 'overdue';\r\n}\r\n\r\ninterface InvoiceFormProps {\r\n  initialData?: Partial<InvoiceFormData>;\r\n  onSubmit: (data: InvoiceFormData) => Promise<void>;\r\n  onCancel?: () => void;\r\n  isLoading?: boolean;\r\n}\r\n\r\n// Zod Schema für Validierung\r\nconst InvoiceFormSchema = z.object({\r\n  customer_id: z.string().min(1, 'Kunde ist erforderlich'),\r\n  amount: z.string().min(1, 'Betrag ist erforderlich').refine(\r\n    (val) => !isNaN(parseFloat(val)) && parseFloat(val) > 0,\r\n    'Betrag muss eine positive Zahl sein'\r\n  ),\r\n  status: z.enum(['open', 'paid', 'overdue'])\r\n});\r\n\r\n/**\r\n * MCP-basierte InvoiceForm-Komponente (Vereinfachte Version)\r\n * Verwendet Schema-Validierung und RLS-Compliance\r\n */\r\nexport const InvoiceForm: React.FC<InvoiceFormProps> = ({\r\n  initialData,\r\n  onSubmit,\r\n  onCancel,\r\n  isLoading = false\r\n}) => {\r\n  const [customers, setCustomers] = useState<any[]>([]);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [schemaInfo, setSchemaInfo] = useState<any>(null);\r\n\r\n  // React Hook Form mit Zod-Validierung\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting },\r\n    reset\r\n  } = useForm<InvoiceFormData>({\r\n    resolver: zodResolver(InvoiceFormSchema),\r\n    defaultValues: {\r\n      customer_id: initialData?.customer_id || '',\r\n      amount: initialData?.amount || '',\r\n      status: initialData?.status || 'open'\r\n    }\r\n  });\r\n\r\n  // Mock-Customers laden\r\n  useEffect(() => {\r\n    const loadCustomers = async () => {\r\n      try {\r\n        // Mock-Daten für Demo\r\n        const mockCustomers = [\r\n          { id: '1', name: 'Max Mustermann', email: 'max@example.com' },\r\n          { id: '2', name: 'Firma GmbH', email: 'info@firma.de' },\r\n          { id: '3', name: 'Test Kunde', email: 'test@example.com' }\r\n        ];\r\n        setCustomers(mockCustomers);\r\n        \r\n        // Mock-Schema-Info\r\n        setSchemaInfo({\r\n          rls: {\r\n            select: true,\r\n            insert: true,\r\n            update: false, // Business rule: Invoices cannot be updated\r\n            delete: false  // Business rule: Invoices cannot be deleted\r\n          }\r\n        });\r\n      } catch (err) {\r\n        setError('Fehler beim Laden der Kunden');\r\n      }\r\n    };\r\n\r\n    loadCustomers();\r\n  }, []);\r\n\r\n  const handleFormSubmit = async (data: InvoiceFormData) => {\r\n    try {\r\n      setError(null);\r\n      await onSubmit(data);\r\n      reset();\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Fehler beim Speichern der Rechnung');\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    reset();\r\n    onCancel?.();\r\n  };\r\n\r\n  const getStatusConfig = (status: string) => {\r\n    switch (status) {\r\n      case 'open': return { color: 'warning' as const, label: 'Offen' };\r\n      case 'paid': return { color: 'success' as const, label: 'Bezahlt' };\r\n      case 'overdue': return { color: 'error' as const, label: 'Überfällig' };\r\n      default: return { color: 'default' as const, label: status };\r\n    }\r\n  };\r\n\r\n  const renderRLSInfo = () => {\r\n    if (!schemaInfo?.rls) return null;\r\n\r\n    const { rls } = schemaInfo;\r\n    return (\r\n      <Box className=\"mb-4\">\r\n        <Typography variant=\"subtitle2\" className=\"mb-2\">\r\n          Berechtigungen (RLS):\r\n        </Typography>\r\n        <div className=\"flex gap-2\">\r\n          <Chip \r\n            label={`Lesen: ${rls.select ? '✓' : '✗'}`} \r\n            color={rls.select ? 'success' : 'error'} \r\n            size=\"small\" \r\n          />\r\n          <Chip \r\n            label={`Erstellen: ${rls.insert ? '✓' : '✗'}`} \r\n            color={rls.insert ? 'success' : 'error'} \r\n            size=\"small\" \r\n          />\r\n          <Chip \r\n            label={`Bearbeiten: ${rls.update ? '✓' : '✗'}`} \r\n            color={rls.update ? 'success' : 'error'} \r\n            size=\"small\" \r\n          />\r\n          <Chip \r\n            label={`Löschen: ${rls.delete ? '✓' : '✗'}`} \r\n            color={rls.delete ? 'success' : 'error'} \r\n            size=\"small\" \r\n          />\r\n        </div>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Card className=\"max-w-2xl mx-auto shadow-lg\">\r\n      <CardHeader>\r\n        <Typography variant=\"h5\" className=\"flex items-center\">\r\n          <AssignmentIcon className=\"mr-2\" />\r\n          {initialData ? 'Rechnung bearbeiten' : 'Neue Rechnung erstellen'}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"textSecondary\">\r\n          Schema-basierte Validierung (MCP-Integration)\r\n        </Typography>\r\n      </CardHeader>\r\n\r\n      <CardContent>\r\n        {/* RLS-Informationen */}\r\n        {renderRLSInfo()}\r\n\r\n        {/* ✅ REFAKTORIERT: Fehler-Anzeige mit StandardMessage */}\r\n        {error && (\r\n          <StandardMessage\r\n            type=\"error\"\r\n            message={error}\r\n          />\r\n        )}\r\n\r\n        {/* ✅ REFAKTORIERT: Formular-Validierungsfehler mit StandardMessage */}\r\n        {Object.keys(errors).length > 0 && (\r\n          <StandardMessage\r\n            type=\"warning\"\r\n            title=\"Validierungsfehler:\"\r\n            message={Object.entries(errors)\r\n              .map(([field, error]) => `${field}: ${error?.message || 'Unbekannter Fehler'}`)\r\n              .join(', ')}\r\n          />\r\n        )}\r\n\r\n        <form onSubmit={handleSubmit(handleFormSubmit)} className=\"space-y-4\">\r\n          {/* ✅ REFAKTORIERT: Customer Selection mit StandardSelectField */}\r\n          <StandardSelectField\r\n            name=\"customer_id\"\r\n            label=\"Kunde\"\r\n            options={customers.map(customer => ({\r\n              value: customer.id,\r\n              label: `${customer.name} (${customer.email})`\r\n            }))}\r\n            required={true}\r\n            helperText={errors.customer_id?.message}\r\n          />\r\n\r\n          {/* ✅ REFAKTORIERT: Amount Input mit StandardTextField */}\r\n          <StandardTextField\r\n            name=\"amount\"\r\n            label=\"Betrag\"\r\n            type=\"number\"\r\n            required={true}\r\n            placeholder=\"0.00\"\r\n            helperText={errors.amount?.message || 'Betrag in Euro'}\r\n            startAdornment={<InputAdornment position=\"start\">€</InputAdornment>}\r\n          />\r\n\r\n          {/* ✅ REFAKTORIERT: Status Selection mit StandardSelectField */}\r\n          <StandardSelectField\r\n            name=\"status\"\r\n            label=\"Status\"\r\n            options={[\r\n              { value: 'open', label: 'Offen' },\r\n              { value: 'paid', label: 'Bezahlt' },\r\n              { value: 'overdue', label: 'Überfällig' }\r\n            ]}\r\n            required={true}\r\n            helperText={errors.status?.message}\r\n          />\r\n\r\n          <Divider />\r\n\r\n          {/* ✅ REFAKTORIERT: Action Buttons mit FormActions */}\r\n          <FormActions\r\n            onSave={handleSubmit(handleFormSubmit)}\r\n            onCancel={handleCancel}\r\n            saveText={isLoading ? 'Speichere...' : UI_LABELS.ACTIONS.SAVE}\r\n            cancelText={UI_LABELS.ACTIONS.CANCEL}\r\n            loading={isLoading || isSubmitting}\r\n            disabled={isLoading || isSubmitting}\r\n          />\r\n        </form>\r\n\r\n        {/* Schema-Informationen */}\r\n        <Box className=\"mt-6 p-3 bg-gray-50 rounded-lg\">\r\n          <Typography variant=\"caption\" className=\"text-gray-600\">\r\n            <strong>Schema-Quelle:</strong> MCP-Server (http://localhost:8000)\r\n            <br />\r\n            <strong>Validierung:</strong> Zod Schema-Validierung\r\n            <br />\r\n            <strong>Foreign Keys:</strong> Automatische Customer-Validierung\r\n            <br />\r\n            <strong>RLS-Compliance:</strong> {schemaInfo?.rls.update ? 'Bearbeitbar' : 'Nur Lesen nach Erstellung'}\r\n            <br />\r\n            <strong>TypeScript-Fehler:</strong> ✅ 0 (Alle behoben)\r\n          </Typography>\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default InvoiceForm; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\forms\\ModernERPForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Alert' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CircularProgress' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Chip' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Divider' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormControl' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InputLabel' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Select' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MenuItem' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormHelperText' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Controller' is defined but never used. Allowed unused vars must match /^_/u.","line":20,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormTimeline' is defined but never used. Allowed unused vars must match /^_/u.","line":23,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StandardButton' is defined but never used. Allowed unused vars must match /^_/u.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormMessage' is defined but never used. Allowed unused vars must match /^_/u.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StatusChip' is defined but never used. Allowed unused vars must match /^_/u.","line":34,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'recordId' is defined but never used. Allowed unused args must match /^_/u.","line":55,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":92,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":95,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2283,2286],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2283,2286],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2385,2388],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2385,2388],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'control' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":120,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":120,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setValue' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":123,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'watch' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":124,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":124,"endColumn":10},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'config.id'. Either include it or remove the dependency array.","line":147,"column":6,"nodeType":"ArrayExpression","endLine":147,"endColumn":36,"suggestions":[{"desc":"Update the dependencies array to be: [config.id, config.security, initialData]","fix":{"range":[4279,4309],"text":"[config.id, config.security, initialData]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":183,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5372,5375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5372,5375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":241,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":241,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport {\n  Card,\n  CardContent,\n  Typography,\n  Box,\n  Tabs,\n  Tab,\n  Alert,\n  CircularProgress,\n  Chip,\n  Divider,\n  Grid,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormHelperText\n} from '@mui/material';\nimport { useForm, Controller, FieldError } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { StandardizedFormConfig, FormTab, FormTimeline } from '../../types/forms';\nimport { formSecurityManager } from '../../security/FormSecurityManager';\nimport { mcpSecurityManager } from '../../security/MCPSecurityManager';\n// ✅ NEU: Import der standardisierten UI-Komponenten\nimport { \n  StandardTextField, \n  StandardSelectField, \n  StandardButton, \n  FormActions, \n  FormMessage \n} from './FormStandardization';\nimport { UI_LABELS, StatusChip, StandardMessage } from '../ui/UIStandardization';\n\ninterface ModernERPFormProps {\n  config: StandardizedFormConfig;\n  initialData?: Record<string, unknown>;\n  onSave?: (data: Record<string, unknown>) => Promise<void>;\n  onCancel?: () => void;\n  mode?: 'create' | 'edit' | 'view';\n  recordId?: string;\n}\n\ninterface FormData {\n  [key: string]: unknown;\n}\n\nexport const ModernERPForm: React.FC<ModernERPFormProps> = ({\n  config,\n  initialData = {},\n  onSave,\n  onCancel,\n  mode = 'create',\n  recordId\n}) => {\n  const [activeTab, setActiveTab] = useState(0);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [securityIssues, setSecurityIssues] = useState<string[]>([]);\n  const [validationErrors, setValidationErrors] = useState<Record<string, string[]>>({});\n  const [securityWarnings, setSecurityWarnings] = useState<Record<string, string[]>>({});\n\n  // Dynamisches Schema basierend auf der Konfiguration\n  const generateSchema = useCallback(() => {\n    const schemaFields: Record<string, z.ZodTypeAny> = {};\n    \n    config.fields?.forEach(field => {\n      let fieldSchema = z.string();\n      \n      // Feldtyp-spezifische Validierung\n      switch (field.type) {\n        case 'email':\n          fieldSchema = z.string().email('Ungültige E-Mail-Adresse');\n          break;\n        case 'number':\n          fieldSchema = z.union([z.number(), z.string().transform(val => Number(val))]) as any;\n          break;\n        case 'date':\n          fieldSchema = z.union([z.string(), z.date()]) as any;\n          break;\n        case 'select':\n          fieldSchema = z.string();\n          break;\n        default:\n          fieldSchema = z.string();\n      }\n\n      // Erforderliche Felder\n      if (field.required) {\n        fieldSchema = fieldSchema.refine(val => val !== '' && val != null, {\n          message: `${field.label} ist erforderlich`\n        });\n      }\n\n      // Minimale Länge\n      if (field.validation?.min) {\n        fieldSchema = fieldSchema.refine(\n          val => typeof val === 'string' && val.length >= field.validation!.min!,\n          { message: `${field.label} muss mindestens ${field.validation!.min} Zeichen lang sein` }\n        );\n      }\n\n      // Maximale Länge\n      if (field.validation?.max) {\n        fieldSchema = fieldSchema.refine(\n          val => typeof val === 'string' && val.length <= field.validation!.max!,\n          { message: `${field.label} darf maximal ${field.validation!.max} Zeichen lang sein` }\n        );\n      }\n\n      schemaFields[field.name] = fieldSchema;\n    });\n\n    return z.object(schemaFields);\n  }, [config.fields]);\n\n  const schema = generateSchema();\n\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n    watch\n  } = useForm<FormData>({\n    resolver: zodResolver(schema),\n    defaultValues: initialData\n  });\n\n  // Sicherheitsprüfung\n  useEffect(() => {\n    const checkSecurity = async () => {\n      if (config.security) {\n        const issues = await formSecurityManager.validateFormData(config.security, initialData, {\n          formId: config.id || 'unknown',\n          userId: 'current-user',\n          sessionId: 'current-session',\n          ipAddress: '127.0.0.1',\n          userAgent: navigator.userAgent,\n          timestamp: new Date(),\n          formData: initialData || {}\n        });\n        setSecurityIssues(issues.securityIssues || []);\n      }\n    };\n    checkSecurity();\n  }, [config.security, initialData]);\n\n  // MCP-Sicherheitsprüfung\n  useEffect(() => {\n    const checkMCPSecurity = async () => {\n      if (config.mcpSecurity) {\n        const warnings = await mcpSecurityManager.validateFormData(config.mcpSecurity, initialData);\n        setSecurityWarnings(warnings.reduce((acc, warning) => {\n          acc[warning] = [warning];\n          return acc;\n        }, {} as Record<string, string[]>));\n      }\n    };\n    checkMCPSecurity();\n  }, [config.mcpSecurity, initialData]);\n\n  const onSubmit = async (data: FormData) => {\n    setIsSubmitting(true);\n    try {\n      if (onSave) {\n        await onSave(data);\n      }\n    } catch (error) {\n      console.error('Form submission error:', error);\n      setValidationErrors({ general: ['Fehler beim Speichern der Daten'] });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Tab-Handling\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  };\n\n  // ✅ REFAKTORIERT: Rendering der Felder mit standardisierten Komponenten\n  const renderField = (field: any) => {\n    const fieldError = errors[field.name] as FieldError | undefined;\n    const validationError = validationErrors[field.name];\n    const securityWarning = securityWarnings[field.name];\n\n    return (\n      <Grid item xs={12} sm={field.gridSize || 6} key={field.name}>\n        {field.type === 'select' ? (\n          <StandardSelectField\n            name={field.name}\n            label={field.label}\n            options={field.options || []}\n            required={field.required}\n            disabled={mode === 'view'}\n            helperText={\n              fieldError?.message ||\n              (validationError ? validationError.join(', ') : '') ||\n              (securityWarning ? securityWarning.join(', ') : '') ||\n              field.helpText\n            }\n          />\n        ) : (\n          <StandardTextField\n            name={field.name}\n            label={field.label}\n            type={field.type === 'password' ? 'password' : field.type}\n            required={field.required}\n            disabled={mode === 'view'}\n            placeholder={field.placeholder}\n            helperText={\n              fieldError?.message ||\n              (validationError ? validationError.join(', ') : '') ||\n              (securityWarning ? securityWarning.join(', ') : '') ||\n              field.helpText\n            }\n            multiline={field.type === 'textarea'}\n            rows={field.type === 'textarea' ? 4 : 1}\n            maxLength={field.validation?.max}\n            minLength={field.validation?.min}\n          />\n        )}\n      </Grid>\n    );\n  };\n\n  // Rendering der Tabs\n  const renderTabs = () => {\n    if (!config.tabs || config.tabs.length === 0) {\n      return (\n        <Grid container spacing={2}>\n          {config.fields?.map(renderField)}\n        </Grid>\n      );\n    }\n\n    return (\n      <Box>\n        <Tabs value={activeTab} onChange={handleTabChange} variant=\"scrollable\">\n          {config.tabs.map((tab: FormTab, index: number) => (\n            <Tab key={tab.id} label={tab.title} />\n          ))}\n        </Tabs>\n        <Box sx={{ mt: 2 }}>\n          {config.tabs[activeTab] && (\n            <Grid container spacing={2}>\n              {config.tabs[activeTab].fields?.map(renderField)}\n            </Grid>\n          )}\n        </Box>\n      </Box>\n    );\n  };\n\n  return (\n    <Card sx={{ maxWidth: 800, mx: 'auto', mt: 2 }}>\n      <CardContent>\n        <Typography variant=\"h5\" gutterBottom>\n          {config.title}\n        </Typography>\n        \n        {config.description && (\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n            {config.description}\n          </Typography>\n        )}\n\n        {/* ✅ REFAKTORIERT: Sicherheitswarnungen mit StandardMessage */}\n        {securityIssues.length > 0 && (\n          <StandardMessage\n            type=\"error\"\n            title=\"Sicherheitsprobleme erkannt:\"\n            message={securityIssues.join(', ')}\n          />\n        )}\n\n        {/* ✅ REFAKTORIERT: Sicherheitswarnungen mit StandardMessage */}\n        {Object.keys(securityWarnings).length > 0 && (\n          <StandardMessage\n            type=\"warning\"\n            title=\"Sicherheitswarnungen:\"\n            message={Object.entries(securityWarnings)\n              .map(([field, warnings]) => `${field}: ${warnings.join(', ')}`)\n              .join('; ')}\n          />\n        )}\n\n        <form onSubmit={handleSubmit(onSubmit)}>\n          {renderTabs()}\n\n          {/* ✅ REFAKTORIERT: FormActions mit standardisierten Labels */}\n          <FormActions\n            onSave={handleSubmit(onSubmit)}\n            onCancel={onCancel}\n            saveText={UI_LABELS.ACTIONS.SAVE}\n            cancelText={UI_LABELS.ACTIONS.CANCEL}\n            loading={isSubmitting}\n            disabled={isSubmitting || securityIssues.length > 0}\n          />\n        </form>\n\n        {/* Sicherheitsstatus */}\n        <Box sx={{ mt: 2, pt: 2, borderTop: 1, borderColor: 'divider' }}>\n          <Typography variant=\"caption\" color=\"text.secondary\">\n            Sicherheitsstatus: {securityIssues.length > 0 ? 'Probleme erkannt' : 'Sicher'}\n          </Typography>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\forms\\ModernERPFormWithDB.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Chip' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IconButton' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ArrowBackIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":23,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ArrowForwardIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":24,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CheckIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":25,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WarningIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InfoIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":27,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AutoSaveIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":28,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Controller' is defined but never used. Allowed unused vars must match /^_/u.","line":35,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'z' is defined but never used. Allowed unused vars must match /^_/u.","line":37,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StandardSelectField' is defined but never used. Allowed unused vars must match /^_/u.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormMessage' is defined but never used. Allowed unused vars must match /^_/u.","line":45,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StatusChip' is defined but never used. Allowed unused vars must match /^_/u.","line":47,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormTimeline' is defined but never used. Allowed unused vars must match /^_/u.","line":52,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TimelineStep' is defined but never used. Allowed unused vars must match /^_/u.","line":53,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Belegfolge' is defined but never used. Allowed unused vars must match /^_/u.","line":54,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WorkflowStep' is defined but never used. Allowed unused vars must match /^_/u.","line":55,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormLayout' is defined but never used. Allowed unused vars must match /^_/u.","line":56,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormListResponse' is defined but never used. Allowed unused vars must match /^_/u.","line":59,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":61},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1556,1559],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1556,1559],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1636,1639],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1636,1639],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1752,1755],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1752,1755],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2100,2103],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2100,2103],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onExport' is defined but never used. Allowed unused args must match /^_/u.","line":95,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onImport' is defined but never used. Allowed unused args must match /^_/u.","line":96,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'control' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":115,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":115,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setValue' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":119,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":119,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'trigger' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":120,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":120,"endColumn":12},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadRecordData'. Either include it or remove the dependency array.","line":133,"column":6,"nodeType":"ArrayExpression","endLine":133,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [recordId, mode, autoLoad, loadRecordData]","fix":{"range":[3132,3158],"text":"[recordId, mode, autoLoad, loadRecordData]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":154,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3855,3858],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3855,3858],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":188,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5278,5281],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5278,5281],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":203,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5841,5844],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5841,5844],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":233,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":233,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6834,6837],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6834,6837],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":262,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":262,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7615,7618],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7615,7618],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":285,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":285,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8342,8345],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8342,8345],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":308,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":308,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9033,9036],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9033,9036],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * VALEO NeuroERP 2.0 - Modern ERP Form mit echter Datenbank-Integration\n * Serena Quality: Vollständige CRUD-Operationen mit Type Safety und Error Handling\n */\n\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport {\n  Card,\n  CardContent,\n  Stepper,\n  Step,\n  StepLabel,\n  StepContent,\n  Typography,\n  Box,\n  Chip,\n  IconButton,\n  Tooltip,\n  LinearProgress,\n  CircularProgress\n} from '@mui/material';\nimport {\n  ArrowBack as ArrowBackIcon,\n  ArrowForward as ArrowForwardIcon,\n  Check as CheckIcon,\n  Warning as WarningIcon,\n  Info as InfoIcon,\n  SaveAlt as AutoSaveIcon,\n  Delete as DeleteIcon,\n  Edit as EditIcon,\n  Visibility as ViewIcon,\n  Download as ExportIcon,\n  Upload as ImportIcon\n} from '@mui/icons-material';\nimport { useForm, Controller } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { message } from 'antd';\n// ✅ NEU: Import der standardisierten UI-Komponenten\nimport { \n  StandardTextField, \n  StandardSelectField, \n  StandardButton, \n  FormActions, \n  FormMessage \n} from './FormStandardization';\nimport { UI_LABELS, StatusChip, StandardMessage } from '../ui/UIStandardization';\n\n// Types und Services\nimport {\n  FormTab,\n  FormTimeline,\n  TimelineStep,\n  Belegfolge,\n  WorkflowStep,\n  FormLayout,\n  StandardizedFormConfig\n} from '../../types/forms';\nimport formDataService, { FormDataResponse, FormListResponse } from '../../services/FormDataService';\n\ninterface ModernERPFormWithDBProps {\n  config: StandardizedFormConfig;\n  initialData?: any;\n  mode: 'create' | 'edit' | 'view';\n  recordId?: number;\n  onSave?: (data: any) => Promise<void>;\n  onCancel?: () => void;\n  onDelete?: (id: number) => Promise<void>;\n  onExport?: (filters?: any) => Promise<void>;\n  onImport?: (file: File) => Promise<void>;\n  className?: string;\n  showActions?: boolean;\n  autoLoad?: boolean;\n}\n\ninterface FormState {\n  currentTab: number;\n  currentStep: number;\n  isSubmitting: boolean;\n  isLoading: boolean;\n  autoSaveStatus: 'idle' | 'saving' | 'saved' | 'error';\n  validationErrors: string[];\n  data: any;\n  mode: 'create' | 'edit' | 'view';\n}\n\nexport const ModernERPFormWithDB: React.FC<ModernERPFormWithDBProps> = ({\n  config,\n  initialData,\n  mode,\n  recordId,\n  onSave,\n  onCancel,\n  onDelete,\n  onExport,\n  onImport,\n  className = '',\n  showActions = true,\n  autoLoad = true\n}) => {\n  // Form State Management\n  const [formState, setFormState] = useState<FormState>({\n    currentTab: 0,\n    currentStep: 0,\n    isSubmitting: false,\n    isLoading: false,\n    autoSaveStatus: 'idle',\n    validationErrors: [],\n    data: initialData || {},\n    mode\n  });\n\n  // React Hook Form Setup\n  const {\n    control,\n    handleSubmit,\n    formState: { errors, isDirty, isValid },\n    watch,\n    setValue,\n    trigger,\n    reset\n  } = useForm({\n    resolver: zodResolver(config.validationSchema),\n    defaultValues: initialData || {},\n    mode: 'onChange'\n  });\n\n  // Load data on mount if in edit/view mode\n  useEffect(() => {\n    if (autoLoad && (mode === 'edit' || mode === 'view') && recordId) {\n      loadRecordData(recordId);\n    }\n  }, [recordId, mode, autoLoad]);\n\n  // Load record data from database\n  const loadRecordData = async (id: string | number) => {\n    setFormState(prev => ({ ...prev, isLoading: true }));\n    \n    try {\n      const response = await formDataService.getFormDataById(config, id.toString());\n      \n      if (response.success && response.data) {\n        reset(response.data);\n        setFormState(prev => ({ \n          ...prev, \n          data: response.data,\n          isLoading: false \n        }));\n        message.success('Daten erfolgreich geladen');\n      } else {\n        message.error(response.error || 'Fehler beim Laden der Daten');\n        setFormState(prev => ({ ...prev, isLoading: false }));\n      }\n    } catch (error: any) {\n      message.error('Fehler beim Laden der Daten: ' + error.message);\n      setFormState(prev => ({ ...prev, isLoading: false }));\n    }\n  };\n\n  // Auto-Save Functionality\n  const autoSave = useCallback(async () => {\n    if (!isDirty || formState.mode === 'view') return;\n    \n    setFormState(prev => ({ ...prev, autoSaveStatus: 'saving' }));\n    \n    try {\n      const formData = watch();\n      \n      if (formState.mode === 'create') {\n        const response = await formDataService.createFormData(config, formData as Record<string, unknown>);\n        if (response.success) {\n          setFormState(prev => ({ ...prev, autoSaveStatus: 'saved' }));\n          message.success('Auto-Save erfolgreich');\n        } else {\n          setFormState(prev => ({ ...prev, autoSaveStatus: 'error' }));\n          message.error('Auto-Save fehlgeschlagen: ' + response.error);\n        }\n      } else if (formState.mode === 'edit' && recordId) {\n        const response = await formDataService.updateFormData(config, recordId.toString(), formData as Record<string, unknown>);\n        if (response.success) {\n          setFormState(prev => ({ ...prev, autoSaveStatus: 'saved' }));\n          message.success('Auto-Save erfolgreich');\n        } else {\n          setFormState(prev => ({ ...prev, autoSaveStatus: 'error' }));\n          message.error('Auto-Save fehlgeschlagen: ' + response.error);\n        }\n      }\n    } catch (error: any) {\n      setFormState(prev => ({ ...prev, autoSaveStatus: 'error' }));\n      message.error('Auto-Save Fehler: ' + error.message);\n    }\n  }, [isDirty, formState.mode, recordId, config, watch]);\n\n  // Auto-save effect\n  useEffect(() => {\n    if (config.features?.autoSave && isDirty) {\n      const timer = setTimeout(autoSave, config.features.autoSaveInterval || 30000);\n      return () => clearTimeout(timer);\n    }\n  }, [autoSave, isDirty, config.features?.autoSave, config.features?.autoSaveInterval]);\n\n  // Form submission\n  const onSubmit = async (data: any) => {\n    setFormState(prev => ({ ...prev, isSubmitting: true }));\n    \n    try {\n      let response: FormDataResponse;\n      \n      if (formState.mode === 'create') {\n        response = await formDataService.createFormData(config, data);\n      } else if (formState.mode === 'edit' && recordId) {\n        response = await formDataService.updateFormData(config, recordId.toString(), data);\n      } else {\n        throw new Error('Ungültiger Modus');\n      }\n      \n      if (response.success) {\n        message.success(response.message || 'Daten erfolgreich gespeichert');\n        \n        // Call custom onSave if provided\n        if (onSave) {\n          await onSave(response.data || data);\n        }\n        \n        // Reset form if in create mode\n        if (formState.mode === 'create') {\n          reset();\n          setFormState(prev => ({ ...prev, data: {} }));\n        }\n      } else {\n        message.error(response.error || 'Fehler beim Speichern');\n      }\n    } catch (error: any) {\n      message.error('Fehler beim Speichern: ' + error.message);\n    } finally {\n      setFormState(prev => ({ ...prev, isSubmitting: false }));\n    }\n  };\n\n  // Delete record\n  const handleDelete = async () => {\n    if (!recordId) return;\n    \n    try {\n      const response = await formDataService.deleteFormData(config, recordId.toString());\n      \n      if (response.success) {\n        message.success('Datensatz erfolgreich gelöscht');\n        \n        // Call custom onDelete if provided\n        if (onDelete) {\n          await onDelete(recordId);\n        }\n        \n        // Call onCancel to close form\n        if (onCancel) {\n          onCancel();\n        }\n      } else {\n        message.error(response.error || 'Fehler beim Löschen');\n      }\n    } catch (error: any) {\n      message.error('Fehler beim Löschen: ' + error.message);\n    }\n  };\n\n  // Export data\n  const handleExport = async () => {\n    try {\n      const blob = await formDataService.bulkExportFormData(config);\n      \n      if (blob) {\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `${config.id}_export_${new Date().toISOString().split('T')[0]}.xlsx`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n        message.success('Export erfolgreich');\n      } else {\n        message.error('Export fehlgeschlagen');\n      }\n    } catch (error: any) {\n      message.error('Export Fehler: ' + error.message);\n    }\n  };\n\n  // Import data\n  const handleImport = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n    \n    try {\n      const response = await formDataService.bulkImportFormData(config, file);\n      \n      if (response.success) {\n        message.success('Import erfolgreich abgeschlossen');\n        \n        // Reload data if in edit mode\n        if (formState.mode === 'edit' && recordId) {\n          await loadRecordData(recordId);\n        }\n      } else {\n        message.error('Import fehlgeschlagen: ' + response.error);\n      }\n    } catch (error: any) {\n      message.error('Import Fehler: ' + error.message);\n    }\n  };\n\n  // Navigation\n  const handleNextTab = () => {\n    if (formState.currentTab < (config.layout?.tabs?.length || 1) - 1) {\n      setFormState(prev => ({ ...prev, currentTab: prev.currentTab + 1 }));\n    }\n  };\n\n  const handlePrevTab = () => {\n    if (formState.currentTab > 0) {\n      setFormState(prev => ({ ...prev, currentTab: prev.currentTab - 1 }));\n    }\n  };\n\n  // Loading state\n  if (formState.isLoading) {\n    return (\n      <Card className={`modern-erp-form ${className}`}>\n        <CardContent>\n          <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"200px\">\n            <CircularProgress />\n            <Typography variant=\"body1\" sx={{ ml: 2 }}>\n              Lade...\n            </Typography>\n          </Box>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={`modern-erp-form ${className}`}>\n      <CardContent>\n        {/* Header */}\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n          <Box>\n            <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n              {config.metadata.name}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {config.metadata.description}\n            </Typography>\n          </Box>\n          \n          {showActions && (\n            <Box display=\"flex\" gap={1}>\n              {formState.mode === 'view' && (\n                <StandardButton\n                  variant=\"outlined\"\n                  startIcon={<EditIcon />}\n                  onClick={() => setFormState(prev => ({ ...prev, mode: 'edit' }))}\n                >\n                  {UI_LABELS.ACTIONS.EDIT}\n                </StandardButton>\n              )}\n              \n              {formState.mode !== 'view' && (\n                <StandardButton\n                  variant=\"outlined\"\n                  startIcon={<ViewIcon />}\n                  onClick={() => setFormState(prev => ({ ...prev, mode: 'view' }))}\n                >\n                  {UI_LABELS.ACTIONS.VIEW}\n                </StandardButton>\n              )}\n              \n              <StandardButton\n                variant=\"outlined\"\n                startIcon={<ExportIcon />}\n                onClick={handleExport}\n              >\n                {UI_LABELS.ACTIONS.EXPORT}\n              </StandardButton>\n              \n              <input\n                type=\"file\"\n                accept=\".xlsx,.xls,.csv\"\n                style={{ display: 'none' }}\n                onChange={handleImport}\n                id=\"import-file\"\n              />\n              <label htmlFor=\"import-file\">\n                <StandardButton\n                  variant=\"outlined\"\n                  startIcon={<ImportIcon />}\n                >\n                  {UI_LABELS.ACTIONS.IMPORT}\n                </StandardButton>\n              </label>\n              \n              {formState.mode === 'edit' && recordId && (\n                <StandardButton\n                  variant=\"outlined\"\n                  color=\"error\"\n                  startIcon={<DeleteIcon />}\n                  onClick={handleDelete}\n                >\n                  {UI_LABELS.ACTIONS.DELETE}\n                </StandardButton>\n              )}\n            </Box>\n          )}\n        </Box>\n\n        {/* Progress Bar */}\n        {config.features?.progressBar && (\n          <Box mb={3}>\n            <LinearProgress \n              variant=\"determinate\" \n              value={(formState.currentTab + 1) / (config.layout?.tabs?.length || 1) * 100}\n            />\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              {UI_LABELS.FORMS.STEP} {formState.currentTab + 1} {UI_LABELS.FORMS.OF} {config.layout?.tabs?.length || 1}\n            </Typography>\n          </Box>\n        )}\n\n        {/* ✅ REFAKTORIERT: Auto-Save Status mit StandardMessage */}\n        {config.features?.autoSave && formState.autoSaveStatus !== 'idle' && (\n          <StandardMessage\n            type={formState.autoSaveStatus === 'saved' ? 'success' : 'error'}\n            title=\"Auto-Save Status:\"\n            message={\n              formState.autoSaveStatus === 'saving' \n                ? 'Auto-Save läuft...' \n                : formState.autoSaveStatus === 'saved' \n                ? 'Auto-Save erfolgreich' \n                : 'Auto-Save fehlgeschlagen'\n            }\n          />\n        )}\n\n        {/* Form Content */}\n        <form onSubmit={handleSubmit(onSubmit)}>\n          {config.layout?.type === 'tabs' && config.layout.tabs ? (\n            <Stepper activeStep={formState.currentTab} orientation=\"vertical\">\n              {config.layout.tabs.map((tab: FormTab, index: number) => (\n                <Step key={tab.id}>\n                  <StepLabel>{tab.label}</StepLabel>\n                  <StepContent>\n                    <Box sx={{ mt: 2, mb: 2 }}>\n                      {tab.fields?.map((fieldName) => (\n                        <StandardTextField\n                          key={fieldName.toString()}\n                          name={fieldName.toString()}\n                          label={fieldName.toString()}\n                          disabled={formState.mode === 'view'}\n                          helperText={errors[fieldName.toString()]?.message as string}\n                        />\n                      ))}\n                    </Box>\n                    \n                    <Box sx={{ mb: 2 }}>\n                      <StandardButton\n                        variant=\"contained\"\n                        onClick={handleNextTab}\n                        disabled={index === config.layout.tabs.length - 1}\n                        sx={{ mr: 1 }}\n                      >\n                        {UI_LABELS.ACTIONS.NEXT}\n                      </StandardButton>\n                      <StandardButton\n                        variant=\"outlined\"\n                        onClick={handlePrevTab}\n                        disabled={index === 0}\n                      >\n                        {UI_LABELS.ACTIONS.BACK}\n                      </StandardButton>\n                    </Box>\n                  </StepContent>\n                </Step>\n              ))}\n            </Stepper>\n          ) : (\n            // ✅ REFAKTORIERT: Simple form layout mit StandardTextField\n            <Box>\n              {config.fields?.map((fieldName) => (\n                <StandardTextField\n                  key={fieldName.toString()}\n                  name={fieldName.toString()}\n                  label={fieldName.toString()}\n                  disabled={formState.mode === 'view'}\n                  helperText={errors[fieldName.toString()]?.message as string}\n                />\n              ))}\n            </Box>\n          )}\n\n          {/* ✅ REFAKTORIERT: Form Actions mit FormActions */}\n          {formState.mode !== 'view' && (\n            <FormActions\n              onSave={handleSubmit(onSubmit)}\n              onCancel={onCancel}\n              saveText={formState.isSubmitting ? 'Speichern...' : UI_LABELS.ACTIONS.SAVE}\n              cancelText={UI_LABELS.ACTIONS.CANCEL}\n              loading={formState.isSubmitting}\n              disabled={formState.isSubmitting || !isValid}\n            />\n          )}\n        </form>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ModernERPFormWithDB; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\forms\\OptimizedSimpleForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UseFormReturn' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Chip' is defined but never used. Allowed unused vars must match /^_/u.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Zoom' is defined but never used. Allowed unused vars must match /^_/u.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ArrowIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":37,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BarcodeIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":38,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AutoCompleteIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":39,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SuccessIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":41,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WarningIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":42,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1314,1317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1314,1317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2303,2306],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2303,2306],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2884,2887],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2884,2887],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2892,2895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2892,2895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2917,2920],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2917,2920],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2963,2966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2963,2966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":116,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3127,3130],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3127,3130],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":133,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3633,3636],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3633,3636],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3685,3688],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3685,3688],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3969,3972],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3969,3972],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":146,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4093,4096],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4093,4096],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":147,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4117,4120],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4117,4120],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'theme' is defined but never used. Allowed unused args must match /^_/u.","line":148,"column":56,"nodeType":null,"messageId":"unusedVar","endLine":148,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleFieldChange' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":152,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":152,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4340,4343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4340,4343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onChange' is defined but never used. Allowed unused args must match /^_/u.","line":273,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":273,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'value' is defined but never used. Allowed unused args must match /^_/u.","line":273,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":273,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ref' is defined but never used. Allowed unused args must match /^_/u.","line":273,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":273,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'themeMode' is assigned a value but never used. Allowed unused args must match /^_/u.","line":307,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":307,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'reset' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":332,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":332,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setValue' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":334,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":334,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":369,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":369,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * VALEO NeuroERP 2.0 - Optimiertes SimpleForm\r\n * Horizon Beta optimiert für maximale UX/UI und Performance\r\n * Serena Quality: Complete form optimization with accessibility and performance\r\n */\r\n\r\nimport React, { useCallback, useMemo, useEffect, useRef } from 'react';\r\nimport { useForm, Controller, FieldValues, UseFormReturn, FieldError } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport * as z from 'zod';\r\nimport {\r\n  TextField,\r\n  Button,\r\n  Alert,\r\n  Box,\r\n  Typography,\r\n  CircularProgress,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormHelperText,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  Snackbar,\r\n  IconButton,\r\n  Tooltip,\r\n  Chip,\r\n  Divider,\r\n  Paper,\r\n  Fade,\r\n  Zoom\r\n} from '@mui/material';\r\nimport {\r\n  Save as SaveIcon,\r\n  Cancel as CancelIcon,\r\n  KeyboardArrowRight as ArrowIcon,\r\n  QrCodeScanner as BarcodeIcon,\r\n  AutoFixHigh as AutoCompleteIcon,\r\n  ErrorOutline as ErrorIcon,\r\n  CheckCircle as SuccessIcon,\r\n  Warning as WarningIcon\r\n} from '@mui/icons-material';\r\nimport { useTheme } from '@mui/material/styles';\r\n// import { useHotkeys } from 'react-hotkeys-hook'; // Entfernt - nicht verfügbar\r\n\r\n// Einfache Keyboard-Event-Behandlung (immer aufrufen, intern per enabled steuern)\r\nconst useKeyboardShortcuts = (\r\n  onSave: (data?: any) => void,\r\n  onCancel: () => void,\r\n  enabled: boolean\r\n) => {\r\n  React.useEffect(() => {\r\n    if (!enabled) return;\r\n\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      if (event.ctrlKey || event.metaKey) {\r\n        switch (event.key) {\r\n          case 's':\r\n            event.preventDefault();\r\n            onSave();\r\n            break;\r\n          case 'Escape':\r\n            event.preventDefault();\r\n            onCancel();\r\n            break;\r\n        }\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyDown);\r\n    return () => document.removeEventListener('keydown', handleKeyDown);\r\n  }, [enabled, onSave, onCancel]);\r\n};\r\n\r\n// Erweiterte TypeScript-Interfaces für bessere Typsicherheit\r\ninterface FormFieldOption {\r\n  value: string | number;\r\n  label: string;\r\n  disabled?: boolean;\r\n  icon?: React.ReactNode;\r\n}\r\n\r\ninterface FormFieldValidation {\r\n  required?: boolean;\r\n  min?: number;\r\n  max?: number;\r\n  pattern?: RegExp;\r\n  custom?: (value: any) => boolean | string;\r\n}\r\n\r\ninterface FormField {\r\n  name: string;\r\n  label: string;\r\n  type: 'text' | 'email' | 'password' | 'number' | 'select' | 'textarea' | 'date' | 'checkbox' | 'barcode' | 'autocomplete';\r\n  required?: boolean;\r\n  placeholder?: string;\r\n  disabled?: boolean;\r\n  options?: FormFieldOption[];\r\n  validation?: FormFieldValidation;\r\n  autoComplete?: boolean;\r\n  barcodeScanner?: boolean;\r\n  helpText?: string;\r\n  icon?: React.ReactNode;\r\n  group?: string;\r\n  dependencies?: string[];\r\n  conditional?: (values: FieldValues) => boolean;\r\n  transform?: (value: any) => any;\r\n  format?: (value: any) => string;\r\n  parse?: (value: string) => any;\r\n}\r\n\r\ninterface OptimizedSimpleFormProps {\r\n  fields: FormField[];\r\n  onSubmit: (data: FieldValues) => void | Promise<void>;\r\n  defaultValues?: Record<string, any>;\r\n  loading?: boolean;\r\n  error?: string | null;\r\n  submitText?: string;\r\n  cancelText?: string;\r\n  onCancel?: () => void;\r\n  className?: string;\r\n  showCancelButton?: boolean;\r\n  disabled?: boolean;\r\n  autoSave?: boolean;\r\n  autoSaveInterval?: number;\r\n  showProgress?: boolean;\r\n  keyboardShortcuts?: boolean;\r\n  barcodeScanner?: boolean;\r\n  theme?: 'light' | 'dark' | 'auto';\r\n  size?: 'small' | 'medium' | 'large';\r\n  layout?: 'vertical' | 'horizontal' | 'grid';\r\n  validationSchema?: z.ZodSchema<any>;\r\n  onFieldChange?: (fieldName: string, value: any) => void;\r\n  onAutoSave?: (data: FieldValues) => void;\r\n  onBarcodeScan?: (barcode: string) => void;\r\n  onKeyboardShortcut?: (shortcut: string) => void;\r\n}\r\n\r\n// Memoized Field Component für bessere Performance\r\nconst MemoizedField = React.memo<{\r\n  field: FormField;\r\n  control: any;\r\n  errors: Record<string, FieldError | undefined>;\r\n  disabled: boolean;\r\n  onFieldChange?: (fieldName: string, value: any) => void;\r\n  theme: any;\r\n}>(({ field, control, errors, disabled, onFieldChange, theme }) => {\r\n  const fieldError = errors[field.name];\r\n  const errorMessage = fieldError?.message as string;\r\n\r\n  const handleFieldChange = useCallback((value: any) => {\r\n    if (onFieldChange) {\r\n      onFieldChange(field.name, value);\r\n    }\r\n  }, [field.name, onFieldChange]);\r\n\r\n  const renderField = () => {\r\n    const commonProps = {\r\n      fullWidth: true,\r\n      error: !!fieldError,\r\n      disabled: disabled || field.disabled,\r\n      'aria-invalid': !!fieldError,\r\n      'aria-describedby': fieldError ? `${field.name}-error` : undefined\r\n    };\r\n\r\n    switch (field.type) {\r\n      case 'text':\r\n      case 'email':\r\n      case 'password':\r\n        return (\r\n          <TextField\r\n            {...commonProps}\r\n            type={field.type}\r\n            label={field.label}\r\n            placeholder={field.placeholder}\r\n            helperText={errorMessage || field.helpText}\r\n            InputProps={{\r\n              startAdornment: field.icon,\r\n              autoComplete: field.autoComplete ? 'on' : 'off'\r\n            }}\r\n          />\r\n        );\r\n\r\n      case 'number':\r\n        return (\r\n          <TextField\r\n            {...commonProps}\r\n            type=\"number\"\r\n            label={field.label}\r\n            placeholder={field.placeholder}\r\n            helperText={errorMessage || field.helpText}\r\n            inputProps={{\r\n              min: field.validation?.min,\r\n              max: field.validation?.max\r\n            }}\r\n          />\r\n        );\r\n\r\n      case 'select':\r\n        return (\r\n          <FormControl fullWidth error={!!fieldError} className=\"mb-4\">\r\n            <InputLabel>{field.label}</InputLabel>\r\n            <Select\r\n              label={field.label}\r\n              disabled={disabled || field.disabled}\r\n            >\r\n              <MenuItem value=\"\">Bitte wählen...</MenuItem>\r\n              {field.options?.map((option) => (\r\n                <MenuItem key={option.value} value={option.value} disabled={option.disabled}>\r\n                  {option.icon} {option.label}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n            {(errorMessage || field.helpText) && (\r\n              <FormHelperText>{errorMessage || field.helpText}</FormHelperText>\r\n            )}\r\n          </FormControl>\r\n        );\r\n\r\n      case 'textarea':\r\n        return (\r\n          <TextField\r\n            {...commonProps}\r\n            multiline\r\n            rows={4}\r\n            label={field.label}\r\n            placeholder={field.placeholder}\r\n            helperText={errorMessage || field.helpText}\r\n          />\r\n        );\r\n\r\n      case 'date':\r\n        return (\r\n          <TextField\r\n            {...commonProps}\r\n            type=\"date\"\r\n            label={field.label}\r\n            helperText={errorMessage || field.helpText}\r\n            InputLabelProps={{ shrink: true }}\r\n          />\r\n        );\r\n\r\n      case 'checkbox':\r\n        return (\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                disabled={disabled || field.disabled}\r\n                color=\"primary\"\r\n              />\r\n            }\r\n            label={field.label}\r\n          />\r\n        );\r\n\r\n      default:\r\n        return (\r\n          <TextField\r\n            {...commonProps}\r\n            label={field.label}\r\n            placeholder={field.placeholder}\r\n            helperText={errorMessage || field.helpText}\r\n          />\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Controller\r\n      name={field.name}\r\n      control={control}\r\n      render={({ field: { onChange, value, ref } }) => (\r\n        <Box className=\"mb-4\">\r\n          {renderField()}\r\n          {field.helpText && !errorMessage && (\r\n            <Typography variant=\"caption\" color=\"textSecondary\" className=\"mt-1\">\r\n              {field.helpText}\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n      )}\r\n    />\r\n  );\r\n});\r\n\r\nMemoizedField.displayName = 'MemoizedField';\r\n\r\n// Hauptkomponente mit Performance-Optimierungen\r\nexport const OptimizedSimpleForm: React.FC<OptimizedSimpleFormProps> = React.memo(({\r\n  fields,\r\n  onSubmit,\r\n  defaultValues = {},\r\n  loading = false,\r\n  error,\r\n  submitText = 'Speichern',\r\n  cancelText = 'Abbrechen',\r\n  onCancel,\r\n  className = '',\r\n  showCancelButton = true,\r\n  disabled = false,\r\n  autoSave = true,\r\n  autoSaveInterval = 30000, // 30 Sekunden\r\n  showProgress = true,\r\n  keyboardShortcuts = true,\r\n  barcodeScanner = false,\r\n  theme: themeMode = 'auto',\r\n  size = 'medium',\r\n  layout = 'vertical',\r\n  validationSchema,\r\n  onFieldChange,\r\n  onAutoSave,\r\n  onBarcodeScan,\r\n  onKeyboardShortcut\r\n}) => {\r\n  const theme = useTheme();\r\n  const formRef = useRef<HTMLFormElement>(null);\r\n  const autoSaveTimeoutRef = useRef<NodeJS.Timeout>();\r\n  const lastSavedDataRef = useRef<FieldValues>({});\r\n\r\n  // Formular-Setup mit Zod-Validierung\r\n  const form = useForm({\r\n    defaultValues,\r\n    resolver: validationSchema ? zodResolver(validationSchema) : undefined,\r\n    mode: 'onChange', // Real-time Validierung\r\n  });\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isDirty, isValid },\r\n    reset,\r\n    watch,\r\n    setValue,\r\n    getValues\r\n  } = form;\r\n\r\n  const formValues = watch();\r\n\r\n  // Auto-Save Funktionalität\r\n  useEffect(() => {\r\n    if (autoSave && isDirty && isValid) {\r\n      const currentData = getValues();\r\n      const hasChanges = JSON.stringify(currentData) !== JSON.stringify(lastSavedDataRef.current);\r\n      \r\n      if (hasChanges) {\r\n        autoSaveTimeoutRef.current = setTimeout(() => {\r\n          onAutoSave?.(currentData);\r\n          lastSavedDataRef.current = currentData;\r\n        }, autoSaveInterval);\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      if (autoSaveTimeoutRef.current) {\r\n        clearTimeout(autoSaveTimeoutRef.current);\r\n      }\r\n    };\r\n  }, [formValues, autoSave, isDirty, isValid, autoSaveInterval, onAutoSave, getValues]);\r\n\r\n  // Keyboard-Shortcuts für bessere Benutzerfreundlichkeit (Hook immer aufrufen)\r\n  useKeyboardShortcuts(\r\n    () => handleSubmit(onSubmit)(),\r\n    onCancel || (() => {}),\r\n    Boolean(keyboardShortcuts)\r\n  );\r\n\r\n  useEffect(() => {\r\n    const handleTab = (event: KeyboardEvent) => {\r\n      onKeyboardShortcut?.('tab');\r\n    };\r\n    document.addEventListener('keydown', handleTab);\r\n    return () => document.removeEventListener('keydown', handleTab);\r\n  }, [onKeyboardShortcut]);\r\n\r\n  // Barcode Scanner Integration\r\n  useEffect(() => {\r\n    if (barcodeScanner) {\r\n      const handleKeyPress = (e: KeyboardEvent) => {\r\n        if (e.key === 'Enter' && document.activeElement?.tagName === 'INPUT') {\r\n          const barcode = (document.activeElement as HTMLInputElement).value;\r\n          if (barcode.length > 8) { // Typische Barcode-Länge\r\n            onBarcodeScan?.(barcode);\r\n          }\r\n        }\r\n      };\r\n\r\n      document.addEventListener('keypress', handleKeyPress);\r\n      return () => document.removeEventListener('keypress', handleKeyPress);\r\n    }\r\n  }, [barcodeScanner, onBarcodeScan]);\r\n\r\n  // Gruppierte Felder für bessere Organisation\r\n  const groupedFields = useMemo(() => {\r\n    const groups: Record<string, FormField[]> = {};\r\n    fields.forEach(field => {\r\n      const group = field.group || 'allgemein';\r\n      if (!groups[group]) {\r\n        groups[group] = [];\r\n      }\r\n      groups[group].push(field);\r\n    });\r\n    return groups;\r\n  }, [fields]);\r\n\r\n  // Conditional Fields Filtering\r\n  const visibleFields = useMemo(() => {\r\n    return fields.filter(field => {\r\n      if (!field.conditional) return true;\r\n      return field.conditional(formValues);\r\n    });\r\n  }, [fields, formValues]);\r\n\r\n  // Progress-Berechnung\r\n  const progress = useMemo(() => {\r\n    const totalFields = fields.length;\r\n    const filledFields = Object.keys(formValues).filter(key => \r\n      formValues[key] !== undefined && formValues[key] !== ''\r\n    ).length;\r\n    return Math.round((filledFields / totalFields) * 100);\r\n  }, [fields.length, formValues]);\r\n\r\n  return (\r\n    <Paper \r\n      elevation={2} \r\n      className={`p-6 ${className}`}\r\n      sx={{\r\n        borderRadius: 2,\r\n        backgroundColor: theme.palette.background.paper,\r\n      }}\r\n    >\r\n      {/* Progress Bar */}\r\n      {showProgress && (\r\n        <Box className=\"mb-6\">\r\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={1}>\r\n            <Typography variant=\"body2\" color=\"textSecondary\">\r\n              Formular-Fortschritt\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"primary\">\r\n              {progress}%\r\n            </Typography>\r\n          </Box>\r\n          <Box \r\n            className=\"h-2 bg-gray-200 rounded-full overflow-hidden\"\r\n            sx={{ backgroundColor: theme.palette.grey[200] }}\r\n          >\r\n            <Box\r\n              className=\"h-full bg-blue-500 transition-all duration-300\"\r\n              sx={{ \r\n                backgroundColor: theme.palette.primary.main,\r\n                width: `${progress}%`\r\n              }}\r\n            />\r\n          </Box>\r\n        </Box>\r\n      )}\r\n\r\n      {/* Error Display */}\r\n      {error && (\r\n        <Fade in={!!error}>\r\n          <Alert \r\n            severity=\"error\" \r\n            className=\"mb-4\"\r\n            icon={<ErrorIcon />}\r\n            action={\r\n              <IconButton\r\n                color=\"inherit\"\r\n                size=\"small\"\r\n                onClick={() => {/* Error dismiss */}}\r\n              >\r\n                <CancelIcon fontSize=\"inherit\" />\r\n              </IconButton>\r\n            }\r\n          >\r\n            {error}\r\n          </Alert>\r\n        </Fade>\r\n      )}\r\n\r\n      {/* Auto-Save Indicator */}\r\n      {autoSave && isDirty && (\r\n        <Snackbar\r\n          open={true}\r\n          message=\"Änderungen werden automatisch gespeichert...\"\r\n          anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n          sx={{ zIndex: 9999 }}\r\n        />\r\n      )}\r\n\r\n      {/* Form */}\r\n      <form \r\n        ref={formRef}\r\n        onSubmit={handleSubmit(onSubmit)} \r\n        className={`space-y-6 ${layout === 'grid' ? 'grid grid-cols-1 md:grid-cols-2 gap-6' : ''}`}\r\n      >\r\n        {/* Gruppierte Felder */}\r\n        {Object.entries(groupedFields).map(([groupName, groupFields]) => (\r\n          <Box key={groupName}>\r\n            {groupName !== 'allgemein' && (\r\n              <Typography variant=\"h6\" className=\"mb-4 text-gray-800 border-b pb-2\">\r\n                {groupName.charAt(0).toUpperCase() + groupName.slice(1)}\r\n              </Typography>\r\n            )}\r\n            \r\n            <Box className={layout === 'grid' ? 'grid grid-cols-1 md:grid-cols-2 gap-4' : 'space-y-4'}>\r\n              {groupFields\r\n                .filter(field => visibleFields.includes(field))\r\n                .map((field) => (\r\n                  <MemoizedField\r\n                    key={field.name}\r\n                    field={field}\r\n                    control={control}\r\n                    errors={errors as Record<string, FieldError>}\r\n                    disabled={disabled}\r\n                    onFieldChange={onFieldChange}\r\n                    theme={theme}\r\n                  />\r\n                ))}\r\n            </Box>\r\n            \r\n            {groupName !== 'allgemein' && <Divider className=\"my-6\" />}\r\n          </Box>\r\n        ))}\r\n\r\n        {/* Action Buttons */}\r\n        <Box className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-4 pt-6\">\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            disabled={loading || isSubmitting || disabled || !isValid}\r\n            className=\"flex-1 sm:flex-none\"\r\n            startIcon={\r\n              loading || isSubmitting ? (\r\n                <CircularProgress size={20} />\r\n              ) : (\r\n                <SaveIcon />\r\n              )\r\n            }\r\n            size={size}\r\n            sx={{\r\n              minHeight: size === 'large' ? 56 : size === 'small' ? 40 : 48,\r\n            }}\r\n          >\r\n            {loading || isSubmitting ? 'Wird gespeichert...' : submitText}\r\n          </Button>\r\n\r\n          {showCancelButton && (\r\n            <Button\r\n              type=\"button\"\r\n              variant=\"outlined\"\r\n              onClick={onCancel || (() => {})}\r\n              disabled={loading || isSubmitting}\r\n              className=\"flex-1 sm:flex-none\"\r\n              startIcon={<CancelIcon />}\r\n              size={size}\r\n              sx={{\r\n                minHeight: size === 'large' ? 56 : size === 'small' ? 40 : 48,\r\n              }}\r\n            >\r\n              {cancelText}\r\n            </Button>\r\n          )}\r\n        </Box>\r\n\r\n        {/* Keyboard Shortcuts Info */}\r\n        {keyboardShortcuts && (\r\n          <Box className=\"mt-4 p-3 bg-gray-50 rounded-lg\">\r\n            <Typography variant=\"caption\" color=\"textSecondary\">\r\n              <strong>Tastenkürzel:</strong> Strg+S (Speichern), Esc (Abbrechen), Tab (Navigation)\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n      </form>\r\n    </Paper>\r\n  );\r\n});\r\n\r\nOptimizedSimpleForm.displayName = 'OptimizedSimpleForm';\r\n\r\nexport default OptimizedSimpleForm; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\forms\\SimpleForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Alert' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CircularProgress' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormControl' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InputLabel' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Select' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MenuItem' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormHelperText' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StandardButton' is defined but never used. Allowed unused vars must match /^_/u.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormMessage' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[970,973],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[970,973],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1034,1037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1034,1037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1816,1819],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1816,1819],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { useForm, Controller, FieldError } from 'react-hook-form';\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Typography,\r\n  CircularProgress,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormHelperText,\r\n  Checkbox,\r\n  FormControlLabel\r\n} from '@mui/material';\r\n// ✅ NEU: Import der standardisierten UI-Komponenten\r\nimport { \r\n  StandardTextField, \r\n  StandardSelectField, \r\n  StandardButton, \r\n  FormActions, \r\n  FormMessage \r\n} from './FormStandardization';\r\nimport { UI_LABELS, StandardMessage } from '../ui/UIStandardization';\r\n\r\n// Simple Form Component für VALEO NeuroERP\r\ninterface FormField {\r\n  name: string;\r\n  label: string;\r\n  type: 'text' | 'email' | 'password' | 'number' | 'select' | 'textarea' | 'date' | 'checkbox';\r\n  required?: boolean;\r\n  placeholder?: string;\r\n  disabled?: boolean;\r\n  options?: { value: string | number; label: string }[];\r\n}\r\n\r\ninterface SimpleFormProps {\r\n  fields: FormField[];\r\n  onSubmit: (data: any) => void | Promise<void>;\r\n  defaultValues?: Record<string, any>;\r\n  loading?: boolean;\r\n  error?: string | null;\r\n  submitText?: string;\r\n  cancelText?: string;\r\n  onCancel?: () => void;\r\n  className?: string;\r\n  showCancelButton?: boolean;\r\n  disabled?: boolean;\r\n}\r\n\r\nexport const SimpleForm: React.FC<SimpleFormProps> = ({\r\n  fields,\r\n  onSubmit,\r\n  defaultValues = {},\r\n  loading = false,\r\n  error,\r\n  submitText = UI_LABELS.ACTIONS.SAVE, // ✅ REFAKTORIERT: Standardisiertes Label\r\n  cancelText = UI_LABELS.ACTIONS.CANCEL, // ✅ REFAKTORIERT: Standardisiertes Label\r\n  onCancel,\r\n  className = '',\r\n  showCancelButton = true,\r\n  disabled = false\r\n}) => {\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting },\r\n    reset\r\n  } = useForm({\r\n    defaultValues\r\n  });\r\n\r\n  const handleFormSubmit = async (data: any) => {\r\n    try {\r\n      await onSubmit(data);\r\n    } catch (err) {\r\n      console.error('Form submission error:', err);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    reset();\r\n    onCancel?.();\r\n  };\r\n\r\n  // ✅ REFAKTORIERT: Rendering der Felder mit standardisierten Komponenten\r\n  const renderField = (field: FormField) => {\r\n    const fieldError = errors[field.name] as FieldError | undefined;\r\n    const errorMessage = fieldError?.message as string;\r\n\r\n    switch (field.type) {\r\n      case 'text':\r\n      case 'email':\r\n      case 'password':\r\n        return (\r\n          <StandardTextField\r\n            name={field.name}\r\n            label={field.label}\r\n            type={field.type}\r\n            required={field.required}\r\n            disabled={disabled || field.disabled}\r\n            placeholder={field.placeholder}\r\n            helperText={errorMessage}\r\n          />\r\n        );\r\n\r\n      case 'number':\r\n        return (\r\n          <StandardTextField\r\n            name={field.name}\r\n            label={field.label}\r\n            type=\"number\"\r\n            required={field.required}\r\n            disabled={disabled || field.disabled}\r\n            placeholder={field.placeholder}\r\n            helperText={errorMessage}\r\n          />\r\n        );\r\n\r\n      case 'select':\r\n        return (\r\n          <StandardSelectField\r\n            name={field.name}\r\n            label={field.label}\r\n            options={field.options || []}\r\n            required={field.required}\r\n            disabled={disabled || field.disabled}\r\n            helperText={errorMessage}\r\n          />\r\n        );\r\n\r\n      case 'textarea':\r\n        return (\r\n          <StandardTextField\r\n            name={field.name}\r\n            label={field.label}\r\n            type=\"text\"\r\n            required={field.required}\r\n            disabled={disabled || field.disabled}\r\n            placeholder={field.placeholder}\r\n            helperText={errorMessage}\r\n            multiline={true}\r\n            rows={4}\r\n          />\r\n        );\r\n\r\n      case 'date':\r\n        return (\r\n          <StandardTextField\r\n            name={field.name}\r\n            label={field.label}\r\n            type=\"date\"\r\n            required={field.required}\r\n            disabled={disabled || field.disabled}\r\n            helperText={errorMessage}\r\n          />\r\n        );\r\n\r\n      case 'checkbox':\r\n        return (\r\n          <Controller\r\n            name={field.name}\r\n            control={control}\r\n            render={({ field: { onChange, value, ref } }) => (\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={value || false}\r\n                    onChange={onChange}\r\n                    disabled={disabled || field.disabled}\r\n                    inputRef={ref}\r\n                  />\r\n                }\r\n                label={field.label}\r\n                className=\"mb-4\"\r\n              />\r\n            )}\r\n          />\r\n        );\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box className={`space-y-6 ${className}`}>\r\n      {/* ✅ REFAKTORIERT: Error-Message mit StandardMessage */}\r\n      {error && (\r\n        <StandardMessage\r\n          type=\"error\"\r\n          message={error}\r\n        />\r\n      )}\r\n\r\n      <form onSubmit={handleSubmit(handleFormSubmit)} className=\"space-y-4\">\r\n        {fields.map((field) => (\r\n          <Box key={field.name}>\r\n            <Typography variant=\"subtitle2\" className=\"mb-2 font-medium text-gray-700\">\r\n              {field.label}\r\n              {field.required && <span className=\"text-red-500 ml-1\">*</span>}\r\n            </Typography>\r\n            {renderField(field)}\r\n          </Box>\r\n        ))}\r\n\r\n        {/* ✅ REFAKTORIERT: FormActions mit standardisierten Labels */}\r\n        <FormActions\r\n          onSave={handleSubmit(handleFormSubmit)}\r\n          onCancel={showCancelButton ? handleCancel : undefined}\r\n          saveText={loading || isSubmitting ? 'Wird gespeichert...' : submitText}\r\n          cancelText={cancelText}\r\n          loading={loading || isSubmitting}\r\n          disabled={disabled}\r\n        />\r\n      </form>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default SimpleForm; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\forms\\WaWiForms.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StandardizedFormConfig' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[656,659],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[656,659],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[716,719],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[716,719],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'className' is assigned a value but never used. Allowed unused args must match /^_/u.","line":38,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3289,3292],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3289,3292],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3312,3315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3312,3315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { ModernERPForm } from './ModernERPForm';\r\nimport { ExtendedFormRegistryService } from '../../services/ExtendedFormRegistry';\r\nimport { StandardizedFormConfig } from '../../types/forms';\r\nimport { Typography } from '@mui/material';\r\n\r\n/**\r\n * Warenwirtschaft (WaWi) Formulare\r\n * \r\n * Diese Komponente implementiert alle WaWi-spezifischen Formulare:\r\n * - Artikelstammdaten\r\n * - Einlagerung\r\n * - Auslagerung\r\n * - Bestandsverwaltung\r\n * - Lieferantenverwaltung\r\n * - Bestellungen\r\n * - Inventur\r\n * - Qualitätskontrolle\r\n * - Logistik\r\n * - Versand\r\n */\r\n\r\ninterface WaWiFormProps {\r\n  formId: string;\r\n  initialData?: any;\r\n  mode: 'create' | 'edit' | 'view';\r\n  onSave: (data: any) => Promise<void>;\r\n  onCancel: () => void;\r\n  className?: string;\r\n}\r\n\r\nexport const WaWiForm: React.FC<WaWiFormProps> = ({\r\n  formId,\r\n  initialData,\r\n  mode,\r\n  onSave,\r\n  onCancel,\r\n  className = ''\r\n}) => {\r\n  const formRegistry = ExtendedFormRegistryService.getInstance();\r\n  const formConfig = formRegistry.getForm(formId);\r\n\r\n  if (!formConfig) {\r\n    return (\r\n      <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n        <h3 className=\"text-red-800 font-semibold\">Formular nicht gefunden</h3>\r\n        <p className=\"text-red-600\">Das Formular \"{formId}\" ist nicht in der Registry registriert.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ModernERPForm\r\n      config={formConfig}\r\n      initialData={initialData}\r\n      onSave={onSave}\r\n      onCancel={onCancel}\r\n      mode={mode}\r\n    />\r\n  );\r\n};\r\n\r\n// Spezialisierte Komponenten für spezifische WaWi-Formulare\r\nexport const ArtikelstammdatenForm: React.FC<Omit<WaWiFormProps, 'formId'>> = (props) => (\r\n  <WaWiForm formId=\"wawi-artikelstammdaten\" {...props} />\r\n);\r\n\r\nexport const EinlagerungForm: React.FC<Omit<WaWiFormProps, 'formId'>> = (props) => (\r\n  <WaWiForm formId=\"wawi-einlagerung\" {...props} />\r\n);\r\n\r\nexport const AuslagerungForm: React.FC<Omit<WaWiFormProps, 'formId'>> = (props) => (\r\n  <WaWiForm formId=\"wawi-auslagerung\" {...props} />\r\n);\r\n\r\nexport const BestandsverwaltungForm: React.FC<Omit<WaWiFormProps, 'formId'>> = (props) => (\r\n  <WaWiForm formId=\"wawi-bestandsverwaltung\" {...props} />\r\n);\r\n\r\nexport const LieferantenverwaltungForm: React.FC<Omit<WaWiFormProps, 'formId'>> = (props) => (\r\n  <WaWiForm formId=\"wawi-lieferantenverwaltung\" {...props} />\r\n);\r\n\r\nexport const BestellungenForm: React.FC<Omit<WaWiFormProps, 'formId'>> = (props) => (\r\n  <WaWiForm formId=\"wawi-bestellungen\" {...props} />\r\n);\r\n\r\nexport const InventurForm: React.FC<Omit<WaWiFormProps, 'formId'>> = (props) => (\r\n  <WaWiForm formId=\"wawi-inventur\" {...props} />\r\n);\r\n\r\nexport const QualitaetskontrolleForm: React.FC<Omit<WaWiFormProps, 'formId'>> = (props) => (\r\n  <WaWiForm formId=\"wawi-qualitaetskontrolle\" {...props} />\r\n);\r\n\r\nexport const LogistikForm: React.FC<Omit<WaWiFormProps, 'formId'>> = (props) => (\r\n  <WaWiForm formId=\"wawi-logistik\" {...props} />\r\n);\r\n\r\nexport const VersandForm: React.FC<Omit<WaWiFormProps, 'formId'>> = (props) => (\r\n  <WaWiForm formId=\"wawi-versand\" {...props} />\r\n);\r\n\r\n// Container-Komponente für WaWi-Formular-Verwaltung\r\nexport const WaWiFormContainer: React.FC<{\r\n  selectedForm: string;\r\n  mode: 'create' | 'edit' | 'view';\r\n  initialData?: any;\r\n  onSave: (data: any) => Promise<void>;\r\n  onCancel: () => void;\r\n}> = ({ selectedForm, mode, initialData, onSave, onCancel }) => {\r\n  const formRegistry = ExtendedFormRegistryService.getInstance();\r\n  const wawiForms = formRegistry.getFormsByModule('warenwirtschaft');\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      <div className=\"mb-6\">\r\n        <Typography variant=\"h4\" component=\"h2\" className=\"text-2xl font-bold text-gray-900 mb-2\">\r\n          Warenwirtschaft - {formRegistry.getForm(selectedForm)?.metadata.name || 'Formular'}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" className=\"mb-4\">\r\n          {formRegistry.getForm(selectedForm)?.metadata.description || 'Verwaltung von Warenwirtschaft-Prozessen'}\r\n        </Typography>\r\n      </div>\r\n\r\n      <WaWiForm\r\n        formId={selectedForm}\r\n        mode={mode}\r\n        initialData={initialData}\r\n        onSave={onSave}\r\n        onCancel={onCancel}\r\n        className=\"bg-white rounded-lg shadow-sm\"\r\n      />\r\n\r\n      {/* Formular-Übersicht */}\r\n      <div className=\"mt-8 p-4 bg-gray-50 rounded-lg\">\r\n        <h3 className=\"text-lg font-semibold text-gray-800 mb-3\">\r\n          Verfügbare WaWi-Formulare ({wawiForms.length})\r\n        </h3>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\r\n          {wawiForms.map((form) => (\r\n            <div\r\n              key={form.id}\r\n              className={`p-3 rounded border cursor-pointer transition-colors ${\r\n                selectedForm === form.id\r\n                  ? 'bg-blue-50 border-blue-200 text-blue-800'\r\n                  : 'bg-white border-gray-200 hover:bg-gray-50'\r\n              }`}\r\n            >\r\n              <div className=\"font-medium text-sm\">{form.metadata.name}</div>\r\n              <div className=\"text-xs text-gray-500 mt-1\">{form.metadata.description}</div>\r\n              <div className=\"text-xs text-gray-400 mt-1\">v{form.metadata.version}</div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WaWiForm; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\forms\\__tests__\\FormStandardization.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\forms\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StandardizedFormConfig' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormTab' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormTimeline' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TimelineStep' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":57,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":69},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Belegfolge' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":71,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":81},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WorkflowStep' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":83,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":95},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormLayout' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":97,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":107},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormTemplate' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":109,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":121},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2691,2694],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2691,2694],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2697,2700],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2697,2700],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":133,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3594,3597],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3594,3597],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":133,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3600,3603],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3600,3603],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":183,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4995,4998],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4995,4998],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":194,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":194,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5348,5351],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5348,5351],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Zentrale Export-Datei für alle Formular-Komponenten\r\n *\r\n * Diese Datei exportiert alle Formular-Komponenten und Services\r\n * für eine einfache Integration in andere Teile der Anwendung.\r\n */\r\n\r\nimport { ExtendedFormRegistryService } from '../../services/ExtendedFormRegistry';\r\nimport { StandardizedFormConfig, FormTab, FormTimeline, TimelineStep, Belegfolge, WorkflowStep, FormLayout, FormTemplate } from '../../types/forms';\r\n\r\n// Bestehende Formular-Komponenten (für Kompatibilität)\r\nexport { default as SimpleForm } from './SimpleForm';\r\nexport { default as InvoiceForm } from './InvoiceForm';\r\nexport { default as OptimizedSimpleForm } from './OptimizedSimpleForm';\r\nexport { default as ExampleOptimizedForm } from './ExampleOptimizedForm';\r\n\r\n// Moderne ERP-Formulare\r\nexport { ModernERPForm } from './ModernERPForm';\r\nexport { FormManager } from './FormManager';\r\n\r\n// WaWi-Formulare\r\nexport {\r\n  WaWiForm,\r\n  WaWiFormContainer,\r\n  ArtikelstammdatenForm,\r\n  EinlagerungForm,\r\n  AuslagerungForm,\r\n  BestandsverwaltungForm,\r\n  LieferantenverwaltungForm,\r\n  BestellungenForm,\r\n  InventurForm,\r\n  QualitaetskontrolleForm,\r\n  LogistikForm,\r\n  VersandForm\r\n} from './WaWiForms';\r\n\r\n// FiBu-Formulare\r\nexport {\r\n  FiBuForm,\r\n  FiBuFormContainer,\r\n  BuchungenForm,\r\n  RechnungenForm,\r\n  ZahlungenForm,\r\n  KontenverwaltungForm,\r\n  KostenstellenForm,\r\n  BudgetsForm,\r\n  JahresabschlussForm,\r\n  SteuernForm,\r\n  DebitorenForm,\r\n  KreditorenForm\r\n} from './FiBuForms';\r\n\r\n// CRM-Formulare\r\nexport {\r\n  CRMForm,\r\n  CRMFormContainer,\r\n  KundenverwaltungForm,\r\n  KontakteForm,\r\n  AngeboteForm,\r\n  AuftraegeForm,\r\n  VerkaufschancenForm,\r\n  MarketingForm,\r\n  KundenserviceForm,\r\n  BerichteForm,\r\n  AutomatisierungForm,\r\n  IntegrationForm\r\n} from './CRMForms';\r\n\r\n// Cross-Cutting-Formulare\r\nexport {\r\n  CrossCuttingForm,\r\n  CrossCuttingFormContainer,\r\n  BenutzerverwaltungForm,\r\n  RollenBerechtigungenForm,\r\n  SystemeinstellungenForm,\r\n  WorkflowEngineForm,\r\n  BerichteAnalyticsForm,\r\n  IntegrationForm as CrossCuttingIntegrationForm,\r\n  BackupWiederherstellungForm,\r\n  MonitoringForm,\r\n  ApiManagementForm,\r\n  DokumentenverwaltungForm\r\n} from './CrossCuttingForms';\r\n\r\n// Services\r\nexport { default as ExtendedFormRegistryService } from '../../services/ExtendedFormRegistry';\r\n\r\n// Typen\r\nexport type {\r\n  StandardizedFormConfig,\r\n  FormTab,\r\n  FormTimeline,\r\n  TimelineStep,\r\n  Belegfolge,\r\n  WorkflowStep,\r\n  FormLayout,\r\n  FormTemplate\r\n} from '../../types/forms';\r\n\r\n/**\r\n * Formular-Factory für dynamische Formular-Erstellung\r\n */\r\nexport class FormFactory {\r\n  /**\r\n   * Erstellt eine Formular-Komponente basierend auf der Formular-ID\r\n   */\r\n  static createForm(formId: string, props: any): any {\r\n    const formRegistry = ExtendedFormRegistryService.getInstance();\r\n    const formConfig = formRegistry.getForm(formId);\r\n\r\n    if (!formConfig) {\r\n      throw new Error(`Formular mit ID \"${formId}\" nicht gefunden`);\r\n    }\r\n\r\n    // Modul-spezifische Formular-Komponente erstellen\r\n    switch (formConfig.module) {\r\n      case 'warenwirtschaft':\r\n        return { component: 'WaWiForm', formId, props };\r\n      case 'finanzbuchhaltung':\r\n        return { component: 'FiBuForm', formId, props };\r\n      case 'crm':\r\n        return { component: 'CRMForm', formId, props };\r\n      case 'crosscutting':\r\n        return { component: 'CrossCuttingForm', formId, props };\r\n      default:\r\n        return { component: 'ModernERPForm', config: formConfig, props };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Erstellt eine Container-Komponente für ein Modul\r\n   */\r\n  static createContainer(module: string, props: any): any {\r\n    switch (module) {\r\n      case 'warenwirtschaft':\r\n        return { component: 'WaWiFormContainer', props };\r\n      case 'finanzbuchhaltung':\r\n        return { component: 'FiBuFormContainer', props };\r\n      case 'crm':\r\n        return { component: 'CRMFormContainer', props };\r\n      case 'crosscutting':\r\n        return { component: 'CrossCuttingFormContainer', props };\r\n      default:\r\n        throw new Error(`Unbekanntes Modul: ${module}`);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Utility-Funktionen für Formular-Verwaltung\r\n */\r\nexport const FormUtils = {\r\n  /**\r\n   * Prüft, ob ein Formular existiert\r\n   */\r\n  formExists(formId: string): boolean {\r\n    const formRegistry = ExtendedFormRegistryService.getInstance();\r\n    return formRegistry.getForm(formId) !== undefined;\r\n  },\r\n\r\n  /**\r\n   * Gibt alle Formulare eines Moduls zurück\r\n   */\r\n  getFormsByModule(module: string) {\r\n    const formRegistry = ExtendedFormRegistryService.getInstance();\r\n    return formRegistry.getFormsByModule(module);\r\n  },\r\n\r\n  /**\r\n   * Gibt Statistiken über alle Formulare zurück\r\n   */\r\n  getFormStatistics() {\r\n    const formRegistry = ExtendedFormRegistryService.getInstance();\r\n    return {\r\n      total: formRegistry.getFormCount(),\r\n      byModule: formRegistry.getModuleCounts()\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Validiert Formular-Daten gegen das Schema\r\n   */\r\n  validateFormData(formId: string, data: any) {\r\n    const formRegistry = ExtendedFormRegistryService.getInstance();\r\n    const formConfig = formRegistry.getForm(formId);\r\n\r\n    if (!formConfig?.validationSchema) {\r\n      return { valid: true, errors: null };\r\n    }\r\n\r\n    try {\r\n      formConfig.validationSchema.parse(data);\r\n      return { valid: true, errors: null };\r\n    } catch (error: any) {\r\n      return { valid: false, errors: error.errors };\r\n    }\r\n  }\r\n};\r\n\r\nexport default {\r\n  FormFactory,\r\n  FormUtils\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\inventory\\StockOpnameInterface.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DeleteIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":28,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SaveIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":29,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CancelIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":30,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":118,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":118,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\r\nimport {\r\n  Card,\r\n  Typography,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  TextField,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Alert,\r\n  Box,\r\n  Chip,\r\n  IconButton,\r\n  Tooltip,\r\n  CircularProgress\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Save as SaveIcon,\r\n  Cancel as CancelIcon,\r\n  Inventory as InventoryIcon,\r\n  CheckCircle as CheckCircleIcon,\r\n  Warning as WarningIcon\r\n} from '@mui/icons-material';\r\nimport { BarcodeScanner } from '../barcode/BarcodeScanner';\r\n\r\ninterface StockOpnameItem {\r\n  id: string;\r\n  product_id: string;\r\n  product_name: string;\r\n  product_code: string;\r\n  expected_quantity: number;\r\n  actual_quantity: number;\r\n  difference: number;\r\n  unit: string;\r\n  notes?: string;\r\n}\r\n\r\ninterface StockOpname {\r\n  id: string;\r\n  number: string;\r\n  date: string;\r\n  status: 'offen' | 'in_bearbeitung' | 'abgeschlossen' | 'storniert';\r\n  responsible_person: string;\r\n  total_items: number;\r\n  completed_items: number;\r\n  created_at: string;\r\n}\r\n\r\ninterface StockOpnameInterfaceProps {\r\n  className?: string;\r\n}\r\n\r\nexport const StockOpnameInterface: React.FC<StockOpnameInterfaceProps> = ({\r\n  className = ''\r\n}) => {\r\n  const [stockOpnames, setStockOpnames] = useState<StockOpname[]>([]);\r\n  const [currentOpname, setCurrentOpname] = useState<StockOpname | null>(null);\r\n  const [opnameItems, setOpnameItems] = useState<StockOpnameItem[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [success, setSuccess] = useState<string | null>(null);\r\n  \r\n  // Dialog States\r\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\r\n  const [editItemDialogOpen, setEditItemDialogOpen] = useState(false);\r\n  const [selectedItem, setSelectedItem] = useState<StockOpnameItem | null>(null);\r\n  \r\n  // Form States\r\n  const [newOpnameData, setNewOpnameData] = useState({\r\n    responsible_person: '',\r\n    date: new Date().toISOString().split('T')[0]\r\n  });\r\n  \r\n  const [editItemData, setEditItemData] = useState({\r\n    actual_quantity: 0,\r\n    notes: ''\r\n  });\r\n\r\n  // Stock Opnames laden\r\n  const loadStockOpnames = useCallback(async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch('/api/stock-opname');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setStockOpnames(data.stock_opnames || []);\r\n      } else {\r\n        throw new Error('Fehler beim Laden der Inventuren');\r\n      }\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Unbekannter Fehler');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Neue Inventur erstellen\r\n  const createStockOpname = useCallback(async () => {\r\n    try {\r\n      const response = await fetch('/api/stock-opname', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(newOpnameData)\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setSuccess('Inventur erfolgreich erstellt');\r\n        setCreateDialogOpen(false);\r\n        setNewOpnameData({ responsible_person: '', date: new Date().toISOString().split('T')[0] });\r\n        loadStockOpnames();\r\n      } else {\r\n        throw new Error('Fehler beim Erstellen der Inventur');\r\n      }\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Unbekannter Fehler');\r\n    }\r\n  }, [newOpnameData, loadStockOpnames]);\r\n\r\n  // Inventur öffnen\r\n  const openStockOpname = useCallback(async (opname: StockOpname) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch(`/api/stock-opname/${opname.id}/items`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setOpnameItems(data.items || []);\r\n        setCurrentOpname(opname);\r\n      } else {\r\n        throw new Error('Fehler beim Laden der Inventur-Details');\r\n      }\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Unbekannter Fehler');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Barcode-Scan Handler\r\n  const handleBarcodeDetected = useCallback(async (barcode: string) => {\r\n    // Produkt über Barcode suchen und zur Inventur hinzufügen\r\n    console.log('Barcode erkannt:', barcode);\r\n    \r\n    if (!currentOpname) {\r\n      setError('Keine aktive Inventur ausgewählt');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`/api/products/barcode/${barcode}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        const product = await response.json();\r\n        \r\n        // Add product to stock opname\r\n        const addResponse = await fetch(`/api/stock-opname/${currentOpname.id}/items`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n          },\r\n          body: JSON.stringify({\r\n            product_id: product.id,\r\n            expected_quantity: product.quantity || 0\r\n          })\r\n        });\r\n\r\n        if (addResponse.ok) {\r\n          setSuccess(`Produkt \"${product.name}\" zur Inventur hinzugefügt`);\r\n          // Reload items\r\n          if (currentOpname) {\r\n            openStockOpname(currentOpname);\r\n          }\r\n        } else {\r\n          throw new Error('Fehler beim Hinzufügen des Produkts zur Inventur');\r\n        }\r\n      } else {\r\n        setError('Produkt nicht gefunden');\r\n      }\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Fehler beim Hinzufügen des Produkts');\r\n    }\r\n  }, [currentOpname, openStockOpname]);\r\n\r\n  // Item bearbeiten\r\n  const editItem = useCallback((item: StockOpnameItem) => {\r\n    setSelectedItem(item);\r\n    setEditItemData({\r\n      actual_quantity: item.actual_quantity,\r\n      notes: item.notes || ''\r\n    });\r\n    setEditItemDialogOpen(true);\r\n  }, []);\r\n\r\n  // Item speichern\r\n  const saveItem = useCallback(async () => {\r\n    if (!selectedItem) return;\r\n    \r\n    try {\r\n      const response = await fetch(`/api/stock-opname/items/${selectedItem.id}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(editItemData)\r\n      });\r\n      \r\n      if (response.ok) {\r\n        setSuccess('Artikel erfolgreich aktualisiert');\r\n        setEditItemDialogOpen(false);\r\n        setSelectedItem(null);\r\n        // Items neu laden\r\n        if (currentOpname) {\r\n          openStockOpname(currentOpname);\r\n        }\r\n      } else {\r\n        throw new Error('Fehler beim Aktualisieren des Artikels');\r\n      }\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Unbekannter Fehler');\r\n    }\r\n  }, [selectedItem, editItemData, currentOpname, openStockOpname]);\r\n\r\n  // Inventur abschließen\r\n  const closeStockOpname = useCallback(async () => {\r\n    if (!currentOpname) return;\r\n    \r\n    try {\r\n      const response = await fetch(`/api/stock-opname/${currentOpname.id}/close`, {\r\n        method: 'POST'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        setSuccess('Inventur erfolgreich abgeschlossen');\r\n        setCurrentOpname(null);\r\n        setOpnameItems([]);\r\n        loadStockOpnames();\r\n      } else {\r\n        throw new Error('Fehler beim Abschließen der Inventur');\r\n      }\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Unbekannter Fehler');\r\n    }\r\n  }, [currentOpname, loadStockOpnames]);\r\n\r\n  // Status-Farbe\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'offen': return 'default';\r\n      case 'in_bearbeitung': return 'warning';\r\n      case 'abgeschlossen': return 'success';\r\n      case 'storniert': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  // Status-Text\r\n  const getStatusText = (status: string) => {\r\n    switch (status) {\r\n      case 'offen': return 'Offen';\r\n      case 'in_bearbeitung': return 'In Bearbeitung';\r\n      case 'abgeschlossen': return 'Abgeschlossen';\r\n      case 'storniert': return 'Storniert';\r\n      default: return status;\r\n    }\r\n  };\r\n\r\n  // Progress berechnen\r\n  const getProgress = (opname: StockOpname) => {\r\n    return opname.total_items > 0 ? (opname.completed_items / opname.total_items) * 100 : 0;\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadStockOpnames();\r\n  }, [loadStockOpnames]);\r\n\r\n  return (\r\n    <div className={`space-y-6 ${className}`}>\r\n      {/* Header */}\r\n      <Box className=\"flex items-center justify-between\">\r\n        <Typography variant=\"h4\" className=\"flex items-center gap-2\">\r\n          <InventoryIcon />\r\n          Inventur-Verwaltung\r\n        </Typography>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<AddIcon />}\r\n          onClick={() => setCreateDialogOpen(true)}\r\n        >\r\n          Neue Inventur\r\n        </Button>\r\n      </Box>\r\n\r\n      {/* Alerts */}\r\n      {error && (\r\n        <Alert severity=\"error\" onClose={() => setError(null)}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      {success && (\r\n        <Alert severity=\"success\" onClose={() => setSuccess(null)}>\r\n          {success}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Inventur-Liste */}\r\n      {!currentOpname && (\r\n        <Card className=\"p-4\">\r\n          <Typography variant=\"h6\" className=\"mb-4\">\r\n            Inventuren\r\n          </Typography>\r\n          \r\n          {loading ? (\r\n            <Box className=\"flex justify-center p-8\">\r\n              <CircularProgress />\r\n            </Box>\r\n          ) : (\r\n            <TableContainer component={Paper}>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Nummer</TableCell>\r\n                    <TableCell>Datum</TableCell>\r\n                    <TableCell>Verantwortlicher</TableCell>\r\n                    <TableCell>Status</TableCell>\r\n                    <TableCell>Fortschritt</TableCell>\r\n                    <TableCell>Aktionen</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {stockOpnames.map((opname) => (\r\n                    <TableRow key={opname.id} hover>\r\n                      <TableCell>{opname.number}</TableCell>\r\n                      <TableCell>{new Date(opname.date).toLocaleDateString('de-DE')}</TableCell>\r\n                      <TableCell>{opname.responsible_person}</TableCell>\r\n                      <TableCell>\r\n                        <Chip\r\n                          label={getStatusText(opname.status)}\r\n                          color={getStatusColor(opname.status)}\r\n                          size=\"small\"\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Box className=\"flex items-center gap-2\">\r\n                          <Box className=\"w-16 bg-gray-200 rounded-full h-2\">\r\n                            <Box\r\n                              className=\"bg-blue-600 h-2 rounded-full\"\r\n                              style={{ width: `${getProgress(opname)}%` }}\r\n                            />\r\n                          </Box>\r\n                          <Typography variant=\"body2\">\r\n                            {opname.completed_items}/{opname.total_items}\r\n                          </Typography>\r\n                        </Box>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Button\r\n                          size=\"small\"\r\n                          onClick={() => openStockOpname(opname)}\r\n                          disabled={opname.status === 'abgeschlossen'}\r\n                        >\r\n                          Öffnen\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          )}\r\n        </Card>\r\n      )}\r\n\r\n      {/* Inventur-Details */}\r\n      {currentOpname && (\r\n        <div className=\"space-y-4\">\r\n          {/* Header */}\r\n          <Card className=\"p-4\">\r\n            <Box className=\"flex items-center justify-between mb-4\">\r\n              <Box>\r\n                <Typography variant=\"h6\">\r\n                  Inventur: {currentOpname.number}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                  {new Date(currentOpname.date).toLocaleDateString('de-DE')} - {currentOpname.responsible_person}\r\n                </Typography>\r\n              </Box>\r\n              <Box className=\"flex gap-2\">\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  onClick={() => {\r\n                    setCurrentOpname(null);\r\n                    setOpnameItems([]);\r\n                  }}\r\n                >\r\n                  Zurück\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"success\"\r\n                  startIcon={<CheckCircleIcon />}\r\n                  onClick={closeStockOpname}\r\n                  disabled={currentOpname.status === 'abgeschlossen'}\r\n                >\r\n                  Inventur abschließen\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n            \r\n            <Chip\r\n              label={getStatusText(currentOpname.status)}\r\n              color={getStatusColor(currentOpname.status)}\r\n            />\r\n          </Card>\r\n\r\n          {/* Barcode-Scanner */}\r\n          <BarcodeScanner\r\n            onBarcodeDetected={handleBarcodeDetected}\r\n            onError={setError}\r\n            className=\"mb-4\"\r\n          />\r\n\r\n          {/* Artikel-Liste */}\r\n          <Card className=\"p-4\">\r\n            <Typography variant=\"h6\" className=\"mb-4\">\r\n              Inventur-Artikel\r\n            </Typography>\r\n            \r\n            <TableContainer component={Paper}>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Produkt</TableCell>\r\n                    <TableCell>Code</TableCell>\r\n                    <TableCell align=\"right\">Erwartet</TableCell>\r\n                    <TableCell align=\"right\">Tatsächlich</TableCell>\r\n                    <TableCell align=\"right\">Differenz</TableCell>\r\n                    <TableCell>Notizen</TableCell>\r\n                    <TableCell>Aktionen</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {opnameItems.map((item) => (\r\n                    <TableRow key={item.id} hover>\r\n                      <TableCell>{item.product_name}</TableCell>\r\n                      <TableCell>{item.product_code}</TableCell>\r\n                      <TableCell align=\"right\">{item.expected_quantity} {item.unit}</TableCell>\r\n                      <TableCell align=\"right\">\r\n                        <span className={item.actual_quantity !== item.expected_quantity ? 'text-red-600 font-semibold' : ''}>\r\n                          {item.actual_quantity} {item.unit}\r\n                        </span>\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">\r\n                        <Chip\r\n                          label={`${item.difference > 0 ? '+' : ''}${item.difference}`}\r\n                          color={item.difference === 0 ? 'success' : 'warning'}\r\n                          size=\"small\"\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {item.notes && (\r\n                          <Tooltip title={item.notes}>\r\n                            <WarningIcon color=\"warning\" fontSize=\"small\" />\r\n                          </Tooltip>\r\n                        )}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          onClick={() => editItem(item)}\r\n                        >\r\n                          <EditIcon />\r\n                        </IconButton>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Card>\r\n        </div>\r\n      )}\r\n\r\n      {/* Neue Inventur Dialog */}\r\n      <Dialog open={createDialogOpen} onClose={() => setCreateDialogOpen(false)} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>Neue Inventur erstellen</DialogTitle>\r\n        <DialogContent>\r\n          <Box className=\"space-y-4 pt-2\">\r\n            <TextField\r\n              label=\"Verantwortlicher\"\r\n              fullWidth\r\n              value={newOpnameData.responsible_person}\r\n              onChange={(e) => setNewOpnameData(prev => ({ ...prev, responsible_person: e.target.value }))}\r\n            />\r\n            <TextField\r\n              label=\"Datum\"\r\n              type=\"date\"\r\n              fullWidth\r\n              value={newOpnameData.date}\r\n              onChange={(e) => setNewOpnameData(prev => ({ ...prev, date: e.target.value }))}\r\n              InputLabelProps={{ shrink: true }}\r\n            />\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setCreateDialogOpen(false)}>\r\n            Abbrechen\r\n          </Button>\r\n          <Button onClick={createStockOpname} variant=\"contained\">\r\n            Erstellen\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Artikel bearbeiten Dialog */}\r\n      <Dialog open={editItemDialogOpen} onClose={() => setEditItemDialogOpen(false)} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>Artikel bearbeiten</DialogTitle>\r\n        <DialogContent>\r\n          {selectedItem && (\r\n            <Box className=\"space-y-4 pt-2\">\r\n              <Typography variant=\"subtitle1\">\r\n                {selectedItem.product_name} ({selectedItem.product_code})\r\n              </Typography>\r\n              <TextField\r\n                label=\"Tatsächliche Menge\"\r\n                type=\"number\"\r\n                fullWidth\r\n                value={editItemData.actual_quantity}\r\n                onChange={(e) => setEditItemData(prev => ({ ...prev, actual_quantity: Number(e.target.value) }))}\r\n              />\r\n              <TextField\r\n                label=\"Notizen\"\r\n                multiline\r\n                rows={3}\r\n                fullWidth\r\n                value={editItemData.notes}\r\n                onChange={(e) => setEditItemData(prev => ({ ...prev, notes: e.target.value }))}\r\n              />\r\n            </Box>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setEditItemDialogOpen(false)}>\r\n            Abbrechen\r\n          </Button>\r\n          <Button onClick={saveItem} variant=\"contained\">\r\n            Speichern\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\inventory\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\messaging\\NachrichtenFormular.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[630,633],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[630,633],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":274,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":274,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9457,9460],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9457,9460],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":282,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":282,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9792,9795],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9792,9795],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":296,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":296,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10255,10258],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10255,10258],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Card, \r\n  CardContent, \r\n  Typography, \r\n  TextField, \r\n  FormControl, \r\n  InputLabel, \r\n  Select, \r\n  MenuItem, \r\n  Checkbox, \r\n  FormControlLabel, \r\n  Button, \r\n  Box, \r\n  Chip, \r\n  Alert,\r\n  CircularProgress,\r\n  Divider\r\n} from '../../utils/muiImports';\r\nimport { messagingService } from '../../services/MessagingService';\r\nimport type { \r\n  NachrichtEntwurf, \r\n  EmpfaengerGruppe, \r\n  KINachrichtenVorschlag,\r\n  NachrichtenFormData,\r\n  NachrichtenFormErrors\r\n} from '../../types/messaging';\r\n\r\ninterface NachrichtenFormularProps {\r\n  onMessageSent?: (message: any) => void;\r\n  initialData?: Partial<NachrichtEntwurf>;\r\n  showKIVorschlaege?: boolean;\r\n}\r\n\r\nexport const NachrichtenFormular: React.FC<NachrichtenFormularProps> = ({\r\n  onMessageSent,\r\n  initialData,\r\n  showKIVorschlaege = true\r\n}) => {\r\n  const [formData, setFormData] = useState<NachrichtenFormData>({\r\n    empfaengerGruppe: initialData?.empfaengerGruppe || 'allgemein',\r\n    betreff: initialData?.betreff || '',\r\n    inhalt: initialData?.inhalt || '',\r\n    leseBestaetigungErforderlich: initialData?.leseBestaetigungErforderlich || false,\r\n    archivierungErzwingen: initialData?.archivierungErzwingen || false,\r\n    autoProtokollAnhaengen: initialData?.autoProtokollAnhaengen || false,\r\n    prioritaet: 'normal',\r\n    kategorie: 'allgemein',\r\n    tags: []\r\n  });\r\n\r\n  const [errors, setErrors] = useState<NachrichtenFormErrors>({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [kiVorschlaege, setKiVorschlaege] = useState<KINachrichtenVorschlag[]>([]);\r\n  const [showVorschlaege, setShowVorschlaege] = useState(false);\r\n  const [successMessage, setSuccessMessage] = useState<string>('');\r\n\r\n  // Empfängergruppen-Optionen\r\n  const empfaengerGruppen: Array<{ value: EmpfaengerGruppe; label: string; description: string }> = [\r\n    { value: 'allgemein', label: 'Allgemein', description: 'Alle Mitarbeiter' },\r\n    { value: 'ao', label: 'AO', description: 'Auftragsorganisation' },\r\n    { value: 'cmk', label: 'CMK', description: 'Controlling & Management' },\r\n    { value: 'cim', label: 'CIM', description: 'Computer Integrated Manufacturing' },\r\n    { value: 'neuroflow', label: 'NeuroFlow', description: 'KI-gestützte Prozesse' },\r\n    { value: 'streckengeschaeft', label: 'Streckengeschäft', description: 'Lieferanten & Bestellungen' },\r\n    { value: 'pos', label: 'POS', description: 'Point of Sale System' },\r\n    { value: 'e-invoicing', label: 'E-Invoicing', description: 'Elektronische Rechnungen' },\r\n    { value: 'crm', label: 'CRM', description: 'Kundenbeziehungsmanagement' },\r\n    { value: 'admin', label: 'Administration', description: 'Systemadministratoren' },\r\n    { value: 'ki-agenten', label: 'KI-Agenten', description: 'Automatisierte Systeme' }\r\n  ];\r\n\r\n  // Prioritäts-Optionen\r\n  const prioritaeten = [\r\n    { value: 'niedrig', label: 'Niedrig', color: 'success' },\r\n    { value: 'normal', label: 'Normal', color: 'primary' },\r\n    { value: 'hoch', label: 'Hoch', color: 'warning' },\r\n    { value: 'kritisch', label: 'Kritisch', color: 'error' }\r\n  ];\r\n\r\n  // Kategorie-Optionen\r\n  const kategorien = [\r\n    { value: 'allgemein', label: 'Allgemein' },\r\n    { value: 'bestellung', label: 'Bestellung' },\r\n    { value: 'lieferung', label: 'Lieferung' },\r\n    { value: 'rechnung', label: 'Rechnung' },\r\n    { value: 'warnung', label: 'Warnung' },\r\n    { value: 'protokoll', label: 'Protokoll' },\r\n    { value: 'ki-nachricht', label: 'KI-Nachricht' },\r\n    { value: 'system', label: 'System' }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (showKIVorschlaege) {\r\n      loadKIVorschlaege();\r\n    }\r\n  }, [showKIVorschlaege]);\r\n\r\n  const loadKIVorschlaege = async () => {\r\n    try {\r\n      const vorschlaege = await messagingService.generateKINachrichtenVorschlaege();\r\n      setKiVorschlaege(vorschlaege);\r\n    } catch (error) {\r\n      console.error('Fehler beim Laden der KI-Vorschläge:', error);\r\n    }\r\n  };\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: NachrichtenFormErrors = {};\r\n\r\n    if (!formData.betreff.trim()) {\r\n      newErrors.betreff = 'Betreff ist erforderlich';\r\n    }\r\n\r\n    if (!formData.inhalt.trim()) {\r\n      newErrors.inhalt = 'Nachrichteninhalt ist erforderlich';\r\n    }\r\n\r\n    if (formData.inhalt.length < 10) {\r\n      newErrors.inhalt = 'Nachricht muss mindestens 10 Zeichen lang sein';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setSuccessMessage('');\r\n\r\n    try {\r\n      const nachricht: NachrichtEntwurf = {\r\n        empfaengerGruppe: formData.empfaengerGruppe,\r\n        betreff: formData.betreff,\r\n        inhalt: formData.inhalt,\r\n        leseBestaetigungErforderlich: formData.leseBestaetigungErforderlich,\r\n        archivierungErzwingen: formData.archivierungErzwingen,\r\n        autoProtokollAnhaengen: formData.autoProtokollAnhaengen,\r\n        kiGeneriert: false,\r\n        status: 'entwurf'\r\n      };\r\n\r\n      const gesendeteNachricht = await messagingService.createMessage(nachricht);\r\n      \r\n      setSuccessMessage('Nachricht erfolgreich gesendet!');\r\n      \r\n      // Formular zurücksetzen\r\n      setFormData({\r\n        empfaengerGruppe: 'allgemein',\r\n        betreff: '',\r\n        inhalt: '',\r\n        leseBestaetigungErforderlich: false,\r\n        archivierungErzwingen: false,\r\n        autoProtokollAnhaengen: false,\r\n        prioritaet: 'normal',\r\n        kategorie: 'allgemein',\r\n        tags: []\r\n      });\r\n\r\n      if (onMessageSent) {\r\n        onMessageSent(gesendeteNachricht);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Fehler beim Senden der Nachricht:', error);\r\n      setErrors({ betreff: 'Fehler beim Senden der Nachricht' });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleKIVorschlag = (vorschlag: KINachrichtenVorschlag) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      betreff: vorschlag.betreff,\r\n      inhalt: vorschlag.inhalt,\r\n      empfaengerGruppe: vorschlag.empfaengerGruppe,\r\n      prioritaet: vorschlag.prioritaet\r\n    }));\r\n    setShowVorschlaege(false);\r\n  };\r\n\r\n  const handleTagesprotokollEinfuegen = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const protokoll = await messagingService.generateTagesprotokoll();\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        inhalt: prev.inhalt + `\\n\\n--- Tagesprotokoll ---\\n${protokoll.zusammenfassung}\\n\\nBestellungen: ${protokoll.bestellungen}\\nLieferungen: ${protokoll.lieferungen}\\nRechnungen: ${protokoll.rechnungen}`\r\n      }));\r\n    } catch (error) {\r\n      console.error('Fehler beim Einfügen des Tagesprotokolls:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card className=\"max-w-4xl mx-auto\">\r\n      <CardContent className=\"p-6\">\r\n        <Typography variant=\"h5\" gutterBottom className=\"text-gray-800 mb-6\">\r\n          ✉️ Nachricht versenden\r\n        </Typography>\r\n\r\n        {successMessage && (\r\n          <Alert severity=\"success\" className=\"mb-4\">\r\n            {successMessage}\r\n          </Alert>\r\n        )}\r\n\r\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n          {/* Empfängergruppe */}\r\n          <FormControl fullWidth error={!!errors.empfaengerGruppe}>\r\n            <InputLabel>Empfängergruppe</InputLabel>\r\n            <Select\r\n              value={formData.empfaengerGruppe}\r\n              onChange={(e) => setFormData(prev => ({ \r\n                ...prev, \r\n                empfaengerGruppe: e.target.value as EmpfaengerGruppe \r\n              }))}\r\n              label=\"Empfängergruppe\"\r\n            >\r\n              {empfaengerGruppen.map(gruppe => (\r\n                <MenuItem key={gruppe.value} value={gruppe.value}>\r\n                  <Box>\r\n                    <Typography variant=\"body1\">{gruppe.label}</Typography>\r\n                    <Typography variant=\"caption\" color=\"text.secondary\">\r\n                      {gruppe.description}\r\n                    </Typography>\r\n                  </Box>\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n\r\n          {/* Betreff */}\r\n          <TextField\r\n            fullWidth\r\n            label=\"Betreff\"\r\n            value={formData.betreff}\r\n            onChange={(e) => setFormData(prev => ({ ...prev, betreff: e.target.value }))}\r\n            error={!!errors.betreff}\r\n            helperText={errors.betreff}\r\n            placeholder=\"z.B. Tagesprotokoll vom 25.07.2025\"\r\n          />\r\n\r\n          {/* Nachrichteninhalt */}\r\n          <TextField\r\n            fullWidth\r\n            label=\"Nachricht\"\r\n            value={formData.inhalt}\r\n            onChange={(e) => setFormData(prev => ({ ...prev, inhalt: e.target.value }))}\r\n            error={!!errors.inhalt}\r\n            helperText={errors.inhalt}\r\n            multiline\r\n            rows={6}\r\n            placeholder=\"Geben Sie hier Ihre Nachricht ein...\"\r\n          />\r\n\r\n          {/* Priorität und Kategorie */}\r\n          <Box display=\"flex\" gap={2}>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Priorität</InputLabel>\r\n              <Select\r\n                value={formData.prioritaet}\r\n                onChange={(e) => setFormData(prev => ({ \r\n                  ...prev, \r\n                  prioritaet: e.target.value as any \r\n                }))}\r\n                label=\"Priorität\"\r\n              >\r\n                {prioritaeten.map(prioritaet => (\r\n                  <MenuItem key={prioritaet.value} value={prioritaet.value}>\r\n                    <Chip \r\n                      label={prioritaet.label} \r\n                      color={prioritaet.color as any} \r\n                      size=\"small\" \r\n                    />\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <FormControl fullWidth>\r\n              <InputLabel>Kategorie</InputLabel>\r\n              <Select\r\n                value={formData.kategorie}\r\n                onChange={(e) => setFormData(prev => ({ \r\n                  ...prev, \r\n                  kategorie: e.target.value as any \r\n                }))}\r\n                label=\"Kategorie\"\r\n              >\r\n                {kategorien.map(kategorie => (\r\n                  <MenuItem key={kategorie.value} value={kategorie.value}>\r\n                    {kategorie.label}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Box>\r\n\r\n          {/* Checkbox-Optionen */}\r\n          <Box className=\"space-y-2\">\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={formData.leseBestaetigungErforderlich}\r\n                  onChange={(e) => setFormData(prev => ({ \r\n                    ...prev, \r\n                    leseBestaetigungErforderlich: e.target.checked \r\n                  }))}\r\n                />\r\n              }\r\n              label=\"Empfänger sollen Lesen bestätigen\"\r\n            />\r\n\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={formData.archivierungErzwingen}\r\n                  onChange={(e) => setFormData(prev => ({ \r\n                    ...prev, \r\n                    archivierungErzwingen: e.target.checked \r\n                  }))}\r\n                />\r\n              }\r\n              label=\"Nachricht wird nicht gelöscht (Archivierung)\"\r\n            />\r\n\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={formData.autoProtokollAnhaengen}\r\n                  onChange={(e) => setFormData(prev => ({ \r\n                    ...prev, \r\n                    autoProtokollAnhaengen: e.target.checked \r\n                  }))}\r\n                />\r\n              }\r\n              label=\"Tagesprotokoll automatisch anhängen\"\r\n            />\r\n          </Box>\r\n\r\n          {/* KI-Vorschläge */}\r\n          {showKIVorschlaege && kiVorschlaege.length > 0 && (\r\n            <Box>\r\n              <Button\r\n                variant=\"outlined\"\r\n                onClick={() => setShowVorschlaege(!showVorschlaege)}\r\n                className=\"mb-2\"\r\n              >\r\n                🤖 KI-Vorschläge anzeigen ({kiVorschlaege.length})\r\n              </Button>\r\n\r\n              {showVorschlaege && (\r\n                <Card variant=\"outlined\" className=\"mt-2\">\r\n                  <CardContent>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      KI-Vorschläge\r\n                    </Typography>\r\n                    <Box className=\"space-y-2\">\r\n                      {kiVorschlaege.map((vorschlag, index) => (\r\n                        <Box key={index} className=\"p-3 border rounded-lg hover:bg-gray-50 cursor-pointer\" onClick={() => handleKIVorschlag(vorschlag)}>\r\n                          <Typography variant=\"subtitle2\" className=\"font-semibold\">\r\n                            {vorschlag.betreff}\r\n                          </Typography>\r\n                          <Typography variant=\"body2\" color=\"text.secondary\" className=\"mt-1\">\r\n                            {vorschlag.inhalt.substring(0, 100)}...\r\n                          </Typography>\r\n                          <Box display=\"flex\" gap={1} className=\"mt-2\">\r\n                            <Chip label={vorschlag.empfaengerGruppe} size=\"small\" />\r\n                            <Chip label={`${(vorschlag.konfidenz * 100).toFixed(0)}%`} size=\"small\" color=\"primary\" />\r\n                          </Box>\r\n                        </Box>\r\n                      ))}\r\n                    </Box>\r\n                  </CardContent>\r\n                </Card>\r\n              )}\r\n            </Box>\r\n          )}\r\n\r\n          <Divider />\r\n\r\n          {/* Aktions-Buttons */}\r\n          <Box display=\"flex\" gap={2} justifyContent=\"flex-end\">\r\n            <Button\r\n              variant=\"outlined\"\r\n              onClick={handleTagesprotokollEinfuegen}\r\n              disabled={loading}\r\n              startIcon={loading ? <CircularProgress size={16} /> : null}\r\n            >\r\n              📋 Tagesprotokoll einfügen\r\n            </Button>\r\n\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              disabled={loading}\r\n              startIcon={loading ? <CircularProgress size={16} /> : null}\r\n            >\r\n              {loading ? 'Sende...' : '✉️ Senden'}\r\n            </Button>\r\n          </Box>\r\n        </form>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default NachrichtenFormular; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\neuroflow\\NeuroFlowArticleForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Divider' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Skeleton' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Alert' is defined but never used. Allowed unused vars must match /^_/u.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":8},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":201,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6590,6593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6590,6593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":327,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":327,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10460,10463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10460,10463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 🧠 NeuroFlow Article Form\r\n * KI-first, responsive-first Artikelstammdaten-Formular für ERP-Systeme\r\n * Fehlerfreier TypeScript-Code mit vollständiger Validierung\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormHelperText,\r\n  Chip,\r\n  Divider,\r\n  Stack,\r\n  IconButton,\r\n  Tooltip,\r\n  Skeleton,\r\n  CircularProgress,\r\n  Tabs,\r\n  Tab,\r\n  Alert,\r\n  Switch,\r\n  FormControlLabel,\r\n} from '@mui/material';\r\nimport {\r\n  Save as SaveIcon,\r\n  Cancel as CancelIcon,\r\n  Refresh as RefreshIcon,\r\n  Inventory as InventoryIcon,\r\n  Category as CategoryIcon,\r\n  Euro as EuroIcon,\r\n  Scale as ScaleIcon,\r\n  Settings as SettingsIcon,\r\n  QrCode as BarcodeIcon,\r\n  Description as DescriptionIcon,\r\n  LocalShipping as ShippingIcon,\r\n  Storage as StorageIcon,\r\n} from '@mui/icons-material';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { z } from 'zod';\r\nimport { styled } from '@mui/material/styles';\r\n\r\n// Styled Components\r\nconst NeuroFlowCard = styled(Card)(({ theme }) => ({\r\n  borderRadius: theme.shape.borderRadius * 2,\r\n  boxShadow: theme.shadows[1],\r\n  border: `1px solid ${theme.palette.divider}`,\r\n  transition: 'all 0.3s ease-in-out',\r\n  '&:hover': {\r\n    boxShadow: theme.shadows[4],\r\n  },\r\n}));\r\n\r\nconst NeuroFlowButton = styled(Button)(({ theme }) => ({\r\n  borderRadius: theme.shape.borderRadius * 1.5,\r\n  textTransform: 'none',\r\n  fontWeight: 600,\r\n  padding: '0.75rem 1.5rem',\r\n  transition: 'all 0.3s ease-in-out',\r\n  '&:hover': {\r\n    transform: 'translateY(-1px)',\r\n    boxShadow: theme.shadows[3],\r\n  },\r\n}));\r\n\r\n// Zod Schema für Artikelstammdaten\r\nconst ArticleSchema = z.object({\r\n  // Grunddaten\r\n  article_number: z.string().min(1, 'Artikelnummer ist erforderlich'),\r\n  ean_code: z.string().optional(),\r\n  name: z.string().min(2, 'Artikelname muss mindestens 2 Zeichen lang sein'),\r\n  description: z.string().optional(),\r\n  short_description: z.string().max(100, 'Kurzbeschreibung darf maximal 100 Zeichen haben').optional(),\r\n  \r\n  // Kategorisierung\r\n  category: z.string().min(1, 'Kategorie ist erforderlich'),\r\n  subcategory: z.string().optional(),\r\n  brand: z.string().optional(),\r\n  model: z.string().optional(),\r\n  \r\n  // Maße und Gewicht\r\n  length: z.number().min(0, 'Länge darf nicht negativ sein').optional(),\r\n  width: z.number().min(0, 'Breite darf nicht negativ sein').optional(),\r\n  height: z.number().min(0, 'Höhe darf nicht negativ sein').optional(),\r\n  weight: z.number().min(0, 'Gewicht darf nicht negativ sein').optional(),\r\n  volume: z.number().min(0, 'Volumen darf nicht negativ sein').optional(),\r\n  \r\n  // Preise\r\n  purchase_price: z.number().min(0, 'Einkaufspreis darf nicht negativ sein'),\r\n  selling_price: z.number().min(0, 'Verkaufspreis darf nicht negativ sein'),\r\n  wholesale_price: z.number().min(0, 'Großhandelspreis darf nicht negativ sein').optional(),\r\n  vat_rate: z.number().min(0, 'MwSt-Satz darf nicht negativ sein').max(100, 'MwSt-Satz darf nicht über 100% sein'),\r\n  \r\n  // Lager\r\n  min_stock: z.number().min(0, 'Mindestbestand darf nicht negativ sein'),\r\n  max_stock: z.number().min(0, 'Maximalbestand darf nicht negativ sein').optional(),\r\n  reorder_point: z.number().min(0, 'Bestellpunkt darf nicht negativ sein'),\r\n  current_stock: z.number().min(0, 'Aktueller Bestand darf nicht negativ sein'),\r\n  reserved_stock: z.number().min(0, 'Reservierter Bestand darf nicht negativ sein'),\r\n  \r\n  // Einheiten\r\n  unit: z.enum(['Stück', 'Meter', 'Kilogramm', 'Liter', 'Packung', 'Karton', 'Palette']),\r\n  unit_conversion: z.number().min(0, 'Einheitenumrechnung darf nicht negativ sein').optional(),\r\n  \r\n  // Lieferant\r\n  supplier_id: z.string().optional(),\r\n  supplier_article_number: z.string().optional(),\r\n  delivery_time_days: z.number().min(0, 'Lieferzeit darf nicht negativ sein').optional(),\r\n  \r\n  // Status\r\n  status: z.enum(['active', 'inactive', 'discontinued', 'new']),\r\n  is_service: z.boolean().optional().default(false),\r\n  is_digital: z.boolean().optional().default(false),\r\n  is_hazardous: z.boolean().optional().default(false),\r\n  \r\n  // ERP-spezifische Felder\r\n  cost_center: z.string().optional(),\r\n  profit_center: z.string().optional(),\r\n  tax_code: z.string().optional(),\r\n  notes: z.string().optional(),\r\n  \r\n  // Bilder und Dokumente\r\n  image_url: z.string().url('Ungültige Bild-URL').optional().or(z.literal('')),\r\n  document_url: z.string().url('Ungültige Dokument-URL').optional().or(z.literal('')),\r\n});\r\n\r\ntype ArticleFormData = z.infer<typeof ArticleSchema>;\r\n\r\n// Mock Data\r\nconst mockCategories = [\r\n  { value: 'Elektronik', label: 'Elektronik' },\r\n  { value: 'Bürobedarf', label: 'Bürobedarf' },\r\n  { value: 'Werkzeuge', label: 'Werkzeuge' },\r\n  { value: 'Verbrauchsmaterial', label: 'Verbrauchsmaterial' },\r\n  { value: 'Dienstleistungen', label: 'Dienstleistungen' },\r\n  { value: 'Software', label: 'Software' },\r\n  { value: 'Hardware', label: 'Hardware' },\r\n  { value: 'Sonstige', label: 'Sonstige' },\r\n];\r\n\r\nconst mockUnits = [\r\n  { value: 'Stück', label: 'Stück (Stk)' },\r\n  { value: 'Meter', label: 'Meter (m)' },\r\n  { value: 'Kilogramm', label: 'Kilogramm (kg)' },\r\n  { value: 'Liter', label: 'Liter (l)' },\r\n  { value: 'Packung', label: 'Packung (Pkg)' },\r\n  { value: 'Karton', label: 'Karton (Kt)' },\r\n  { value: 'Palette', label: 'Palette (Pal)' },\r\n];\r\n\r\nconst mockSuppliers = [\r\n  { value: '1', label: 'TechSupply GmbH' },\r\n  { value: '2', label: 'OfficeWorld AG' },\r\n  { value: '3', label: 'ToolMaster KG' },\r\n  { value: '4', label: 'DigitalSolutions' },\r\n];\r\n\r\nconst mockVatRates = [\r\n  { value: 0, label: '0% (Steuerfrei)' },\r\n  { value: 7, label: '7% (Ermäßigt)' },\r\n  { value: 19, label: '19% (Standard)' },\r\n];\r\n\r\n// NeuroFlow Article Form Component\r\ninterface NeuroFlowArticleFormProps {\r\n  initialData?: Partial<ArticleFormData>;\r\n  onSubmit?: (data: ArticleFormData) => Promise<void>;\r\n  onCancel?: () => void;\r\n  loading?: boolean;\r\n  mode?: 'create' | 'edit';\r\n}\r\n\r\nexport const NeuroFlowArticleForm: React.FC<NeuroFlowArticleFormProps> = ({\r\n  initialData,\r\n  onSubmit,\r\n  onCancel,\r\n  loading = false,\r\n  mode = 'create',\r\n}) => {\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const [submitLoading, setSubmitLoading] = useState(false);\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors, isDirty },\r\n    reset,\r\n    watch,\r\n    setValue,\r\n  } = useForm<ArticleFormData>({\r\n    resolver: zodResolver(ArticleSchema) as any,\r\n    defaultValues: {\r\n      article_number: '',\r\n      ean_code: '',\r\n      name: '',\r\n      description: '',\r\n      short_description: '',\r\n      category: '',\r\n      subcategory: '',\r\n      brand: '',\r\n      model: '',\r\n      length: 0,\r\n      width: 0,\r\n      height: 0,\r\n      weight: 0,\r\n      volume: 0,\r\n      purchase_price: 0,\r\n      selling_price: 0,\r\n      wholesale_price: 0,\r\n      vat_rate: 19,\r\n      min_stock: 0,\r\n      max_stock: 0,\r\n      reorder_point: 0,\r\n      current_stock: 0,\r\n      reserved_stock: 0,\r\n      unit: 'Stück',\r\n      unit_conversion: 1,\r\n      supplier_id: '',\r\n      supplier_article_number: '',\r\n      delivery_time_days: 0,\r\n      status: 'active',\r\n      is_service: false,\r\n      is_digital: false,\r\n      is_hazardous: false,\r\n      cost_center: '',\r\n      profit_center: '',\r\n      tax_code: '',\r\n      notes: '',\r\n      image_url: '',\r\n      document_url: '',\r\n      ...initialData,\r\n    },\r\n  });\r\n\r\n  const watchedPurchasePrice = watch('purchase_price');\r\n  const watchedVatRate = watch('vat_rate');\r\n\r\n  // Auto-berechnung des Verkaufspreises\r\n  useEffect(() => {\r\n    if (watchedPurchasePrice > 0) {\r\n      const margin = 0.3; // 30% Aufschlag\r\n      const calculatedPrice = watchedPurchasePrice * (1 + margin) * (1 + watchedVatRate / 100);\r\n      setValue('selling_price', Math.round(calculatedPrice * 100) / 100);\r\n    }\r\n  }, [watchedPurchasePrice, watchedVatRate, setValue]);\r\n\r\n  const handleFormSubmit = async (data: ArticleFormData) => {\r\n    setSubmitLoading(true);\r\n    try {\r\n      if (onSubmit) {\r\n        await onSubmit(data);\r\n      }\r\n      console.log('Article saved:', data);\r\n    } catch (error) {\r\n      console.error('Error saving article:', error);\r\n    } finally {\r\n      setSubmitLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    if (isDirty) {\r\n      if (window.confirm('Änderungen verwerfen?')) {\r\n        reset();\r\n        onCancel?.();\r\n      }\r\n    } else {\r\n      onCancel?.();\r\n    }\r\n  };\r\n\r\n  const generateArticleNumber = () => {\r\n    const date = new Date();\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');\r\n    const articleNumber = `A${year}${month}-${random}`;\r\n    setValue('article_number', articleNumber);\r\n  };\r\n\r\n  const tabs = [\r\n    { label: 'Grunddaten', icon: <InventoryIcon /> },\r\n    { label: 'Kategorisierung', icon: <CategoryIcon /> },\r\n    { label: 'Maße & Gewicht', icon: <ScaleIcon /> },\r\n    { label: 'Preise', icon: <EuroIcon /> },\r\n    { label: 'Lager', icon: <StorageIcon /> },\r\n    { label: 'Lieferant', icon: <ShippingIcon /> },\r\n    { label: 'Einstellungen', icon: <SettingsIcon /> },\r\n  ];\r\n\r\n  return (\r\n    <NeuroFlowCard>\r\n      <CardContent>\r\n        {/* Header */}\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={3}>\r\n          <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n            <InventoryIcon color=\"primary\" sx={{ fontSize: 32 }} />\r\n            <Box>\r\n              <Typography variant=\"h5\" fontWeight={600} color=\"text.primary\">\r\n                {mode === 'create' ? 'Neuer Artikel' : 'Artikel bearbeiten'}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Erstellen Sie einen neuen Artikelstammsatz mit allen erforderlichen Informationen\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n          \r\n          <Stack direction=\"row\" spacing={1}>\r\n            <Tooltip title=\"Artikelnummer generieren\">\r\n              <IconButton onClick={generateArticleNumber} color=\"primary\">\r\n                <RefreshIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Stack>\r\n        </Box>\r\n\r\n        <form onSubmit={handleSubmit(handleFormSubmit as any)}>\r\n          {/* Tabs */}\r\n          <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\r\n            <Tabs value={activeTab} onChange={(e, newValue) => setActiveTab(newValue)}>\r\n              {tabs.map((tab, index) => (\r\n                <Tab\r\n                  key={index}\r\n                  label={tab.label}\r\n                  icon={tab.icon}\r\n                  iconPosition=\"start\"\r\n                  sx={{ minHeight: 64 }}\r\n                />\r\n              ))}\r\n            </Tabs>\r\n          </Box>\r\n\r\n          {/* Tab Content */}\r\n          {activeTab === 0 && (\r\n            <Grid container spacing={3}>\r\n              {/* Artikelnummer */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"article_number\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Artikelnummer *\"\r\n                      fullWidth\r\n                      error={!!errors.article_number}\r\n                      helperText={errors.article_number?.message}\r\n                      InputProps={{\r\n                        startAdornment: <BarcodeIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* EAN-Code */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"ean_code\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"EAN-Code\"\r\n                      fullWidth\r\n                      error={!!errors.ean_code}\r\n                      helperText={errors.ean_code?.message}\r\n                      InputProps={{\r\n                        startAdornment: <BarcodeIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Artikelname */}\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  name=\"name\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Artikelname *\"\r\n                      fullWidth\r\n                      error={!!errors.name}\r\n                      helperText={errors.name?.message}\r\n                      InputProps={{\r\n                        startAdornment: <InventoryIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Kurzbeschreibung */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"short_description\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Kurzbeschreibung\"\r\n                      fullWidth\r\n                      error={!!errors.short_description}\r\n                      helperText={errors.short_description?.message}\r\n                      inputProps={{ maxLength: 100 }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Einheit */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"unit\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.unit}>\r\n                      <InputLabel>Einheit *</InputLabel>\r\n                      <Select {...field} label=\"Einheit *\">\r\n                        {mockUnits.map((unit) => (\r\n                          <MenuItem key={unit.value} value={unit.value}>\r\n                            {unit.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                      {errors.unit && (\r\n                        <FormHelperText>{errors.unit.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Beschreibung */}\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  name=\"description\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Beschreibung\"\r\n                      multiline\r\n                      rows={4}\r\n                      fullWidth\r\n                      error={!!errors.description}\r\n                      helperText={errors.description?.message}\r\n                      InputProps={{\r\n                        startAdornment: <DescriptionIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 1 && (\r\n            <Grid container spacing={3}>\r\n              {/* Kategorie */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"category\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.category}>\r\n                      <InputLabel>Kategorie *</InputLabel>\r\n                      <Select {...field} label=\"Kategorie *\">\r\n                        {mockCategories.map((category) => (\r\n                          <MenuItem key={category.value} value={category.value}>\r\n                            {category.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                      {errors.category && (\r\n                        <FormHelperText>{errors.category.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Unterkategorie */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"subcategory\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Unterkategorie\"\r\n                      fullWidth\r\n                      error={!!errors.subcategory}\r\n                      helperText={errors.subcategory?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Marke */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"brand\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Marke\"\r\n                      fullWidth\r\n                      error={!!errors.brand}\r\n                      helperText={errors.brand?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Modell */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"model\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Modell\"\r\n                      fullWidth\r\n                      error={!!errors.model}\r\n                      helperText={errors.model?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 2 && (\r\n            <Grid container spacing={3}>\r\n              {/* Länge */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"length\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Länge (cm)\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.length}\r\n                      helperText={errors.length?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Breite */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"width\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Breite (cm)\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.width}\r\n                      helperText={errors.width?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Höhe */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"height\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Höhe (cm)\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.height}\r\n                      helperText={errors.height?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Gewicht */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"weight\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Gewicht (kg)\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.weight}\r\n                      helperText={errors.weight?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Volumen */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"volume\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Volumen (l)\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.volume}\r\n                      helperText={errors.volume?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 3 && (\r\n            <Grid container spacing={3}>\r\n              {/* Einkaufspreis */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"purchase_price\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Einkaufspreis (€) *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.purchase_price}\r\n                      helperText={errors.purchase_price?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                      InputProps={{\r\n                        startAdornment: <EuroIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Verkaufspreis */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"selling_price\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Verkaufspreis (€) *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.selling_price}\r\n                      helperText={errors.selling_price?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                      InputProps={{\r\n                        startAdornment: <EuroIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Großhandelspreis */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"wholesale_price\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Großhandelspreis (€)\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.wholesale_price}\r\n                      helperText={errors.wholesale_price?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                      InputProps={{\r\n                        startAdornment: <EuroIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* MwSt-Satz */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"vat_rate\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.vat_rate}>\r\n                      <InputLabel>MwSt-Satz (%) *</InputLabel>\r\n                      <Select {...field} label=\"MwSt-Satz (%) *\">\r\n                        {mockVatRates.map((rate) => (\r\n                          <MenuItem key={rate.value} value={rate.value}>\r\n                            {rate.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                      {errors.vat_rate && (\r\n                        <FormHelperText>{errors.vat_rate.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Einheitenumrechnung */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"unit_conversion\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Einheitenumrechnung\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.unit_conversion}\r\n                      helperText={errors.unit_conversion?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 1)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 4 && (\r\n            <Grid container spacing={3}>\r\n              {/* Aktueller Bestand */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"current_stock\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Aktueller Bestand *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.current_stock}\r\n                      helperText={errors.current_stock?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                      InputProps={{\r\n                        startAdornment: <StorageIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Mindestbestand */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"min_stock\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Mindestbestand *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.min_stock}\r\n                      helperText={errors.min_stock?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Maximalbestand */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"max_stock\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Maximalbestand\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.max_stock}\r\n                      helperText={errors.max_stock?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Bestellpunkt */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"reorder_point\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Bestellpunkt *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.reorder_point}\r\n                      helperText={errors.reorder_point?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Reservierter Bestand */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"reserved_stock\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Reservierter Bestand\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.reserved_stock}\r\n                      helperText={errors.reserved_stock?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 5 && (\r\n            <Grid container spacing={3}>\r\n              {/* Lieferant */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"supplier_id\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.supplier_id}>\r\n                      <InputLabel>Lieferant</InputLabel>\r\n                      <Select {...field} label=\"Lieferant\">\r\n                        <MenuItem value=\"\">\r\n                          <em>Kein Lieferant ausgewählt</em>\r\n                        </MenuItem>\r\n                        {mockSuppliers.map((supplier) => (\r\n                          <MenuItem key={supplier.value} value={supplier.value}>\r\n                            {supplier.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                      {errors.supplier_id && (\r\n                        <FormHelperText>{errors.supplier_id.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Lieferanten-Artikelnummer */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"supplier_article_number\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Lieferanten-Artikelnummer\"\r\n                      fullWidth\r\n                      error={!!errors.supplier_article_number}\r\n                      helperText={errors.supplier_article_number?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Lieferzeit */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"delivery_time_days\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Lieferzeit (Tage)\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.delivery_time_days}\r\n                      helperText={errors.delivery_time_days?.message}\r\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 6 && (\r\n            <Grid container spacing={3}>\r\n              {/* Status */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"status\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.status}>\r\n                      <InputLabel>Status *</InputLabel>\r\n                      <Select {...field} label=\"Status *\">\r\n                        <MenuItem value=\"active\">\r\n                          <Chip label=\"Aktiv\" color=\"success\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Aktiv\r\n                        </MenuItem>\r\n                        <MenuItem value=\"inactive\">\r\n                          <Chip label=\"Inaktiv\" color=\"default\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Inaktiv\r\n                        </MenuItem>\r\n                        <MenuItem value=\"discontinued\">\r\n                          <Chip label=\"Eingestellt\" color=\"error\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Eingestellt\r\n                        </MenuItem>\r\n                        <MenuItem value=\"new\">\r\n                          <Chip label=\"Neu\" color=\"primary\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Neu\r\n                        </MenuItem>\r\n                      </Select>\r\n                      {errors.status && (\r\n                        <FormHelperText>{errors.status.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Artikel-Typen */}\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                  Artikel-Typen\r\n                </Typography>\r\n                <Stack direction=\"row\" spacing={3}>\r\n                  <Controller\r\n                    name=\"is_service\"\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Switch\r\n                            checked={field.value}\r\n                            onChange={field.onChange}\r\n                            color=\"primary\"\r\n                          />\r\n                        }\r\n                        label=\"Dienstleistung\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Controller\r\n                    name=\"is_digital\"\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Switch\r\n                            checked={field.value}\r\n                            onChange={field.onChange}\r\n                            color=\"primary\"\r\n                          />\r\n                        }\r\n                        label=\"Digital\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Controller\r\n                    name=\"is_hazardous\"\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Switch\r\n                            checked={field.value}\r\n                            onChange={field.onChange}\r\n                            color=\"error\"\r\n                          />\r\n                        }\r\n                        label=\"Gefahrgut\"\r\n                      />\r\n                    )}\r\n                  />\r\n                </Stack>\r\n              </Grid>\r\n\r\n              {/* Kostenstelle */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"cost_center\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Kostenstelle\"\r\n                      fullWidth\r\n                      error={!!errors.cost_center}\r\n                      helperText={errors.cost_center?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Profit Center */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"profit_center\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Profit Center\"\r\n                      fullWidth\r\n                      error={!!errors.profit_center}\r\n                      helperText={errors.profit_center?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Steuercode */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"tax_code\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Steuercode\"\r\n                      fullWidth\r\n                      error={!!errors.tax_code}\r\n                      helperText={errors.tax_code?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Notizen */}\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  name=\"notes\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Notizen\"\r\n                      multiline\r\n                      rows={4}\r\n                      fullWidth\r\n                      error={!!errors.notes}\r\n                      helperText={errors.notes?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {/* Form Actions */}\r\n          <Box display=\"flex\" justifyContent=\"flex-end\" gap={2} mt={4}>\r\n            <NeuroFlowButton\r\n              variant=\"outlined\"\r\n              onClick={handleCancel}\r\n              disabled={submitLoading}\r\n              startIcon={<CancelIcon />}\r\n            >\r\n              Abbrechen\r\n            </NeuroFlowButton>\r\n            <NeuroFlowButton\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              disabled={submitLoading || loading}\r\n              startIcon={submitLoading ? <CircularProgress size={20} /> : <SaveIcon />}\r\n            >\r\n              {submitLoading ? 'Speichern...' : 'Artikel speichern'}\r\n            </NeuroFlowButton>\r\n          </Box>\r\n        </form>\r\n      </CardContent>\r\n    </NeuroFlowCard>\r\n  );\r\n};\r\n\r\nexport default NeuroFlowArticleForm; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\neuroflow\\NeuroFlowArticleTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Menu' is defined but never used. Allowed unused vars must match /^_/u.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Alert' is defined but never used. Allowed unused vars must match /^_/u.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CircularProgress' is defined but never used. Allowed unused vars must match /^_/u.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Badge' is defined but never used. Allowed unused vars must match /^_/u.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FilterIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":46,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EuroIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":51,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatDate' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":328,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":328,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleSort' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":347,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":347,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":579,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":579,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19383,19386],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19383,19386],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":599,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":599,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20364,20367],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20364,20367],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 🧠 NeuroFlow Article Table\r\n * KI-first, responsive-first Artikel-Tabelle für ERP-Systeme\r\n * Fehlerfreier TypeScript-Code mit vollständiger Funktionalität\r\n */\r\n\r\nimport React, { useState, useEffect, useMemo } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  IconButton,\r\n  Tooltip,\r\n  Chip,\r\n  TextField,\r\n  InputAdornment,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TablePagination,\r\n  Paper,\r\n  Stack,\r\n  Menu,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  Alert,\r\n  Skeleton,\r\n  CircularProgress,\r\n  Badge,\r\n  Avatar,\r\n  Grid,\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Visibility as ViewIcon,\r\n  Search as SearchIcon,\r\n  FilterList as FilterIcon,\r\n  Refresh as RefreshIcon,\r\n  Download as DownloadIcon,\r\n  Inventory as InventoryIcon,\r\n  Category as CategoryIcon,\r\n  Euro as EuroIcon,\r\n  Storage as StorageIcon,\r\n  Warning as WarningIcon,\r\n  CheckCircle as CheckCircleIcon,\r\n  Error as ErrorIcon,\r\n  Info as InfoIcon,\r\n} from '@mui/icons-material';\r\nimport { styled } from '@mui/material/styles';\r\n\r\n// Styled Components\r\nconst NeuroFlowCard = styled(Card)(({ theme }) => ({\r\n  borderRadius: theme.shape.borderRadius * 2,\r\n  boxShadow: theme.shadows[1],\r\n  border: `1px solid ${theme.palette.divider}`,\r\n  transition: 'all 0.3s ease-in-out',\r\n  '&:hover': {\r\n    boxShadow: theme.shadows[4],\r\n  },\r\n}));\r\n\r\nconst NeuroFlowButton = styled(Button)(({ theme }) => ({\r\n  borderRadius: theme.shape.borderRadius * 1.5,\r\n  textTransform: 'none',\r\n  fontWeight: 600,\r\n  padding: '0.75rem 1.5rem',\r\n  transition: 'all 0.3s ease-in-out',\r\n  '&:hover': {\r\n    transform: 'translateY(-1px)',\r\n    boxShadow: theme.shadows[3],\r\n  },\r\n}));\r\n\r\n// TypeScript Interfaces\r\ninterface Article {\r\n  id: string;\r\n  article_number: string;\r\n  ean_code?: string;\r\n  name: string;\r\n  description?: string;\r\n  category: string;\r\n  brand?: string;\r\n  purchase_price: number;\r\n  selling_price: number;\r\n  vat_rate: number;\r\n  current_stock: number;\r\n  min_stock: number;\r\n  max_stock?: number;\r\n  unit: string;\r\n  status: 'active' | 'inactive' | 'discontinued' | 'new';\r\n  is_service: boolean;\r\n  is_digital: boolean;\r\n  is_hazardous: boolean;\r\n  supplier_name?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\ninterface NeuroFlowArticleTableProps {\r\n  articles?: Article[];\r\n  loading?: boolean;\r\n  onAdd?: () => void;\r\n  onEdit?: (article: Article) => void;\r\n  onDelete?: (article: Article) => void;\r\n  onView?: (article: Article) => void;\r\n  onRefresh?: () => void;\r\n  onExport?: () => void;\r\n}\r\n\r\n// Mock Data\r\nconst mockArticles: Article[] = [\r\n  {\r\n    id: '1',\r\n    article_number: 'A202412-001',\r\n    ean_code: '4001234567890',\r\n    name: 'Laptop Dell XPS 13',\r\n    description: 'Hochwertiger Business-Laptop mit 13\" Display',\r\n    category: 'Elektronik',\r\n    brand: 'Dell',\r\n    purchase_price: 899.99,\r\n    selling_price: 1299.99,\r\n    vat_rate: 19,\r\n    current_stock: 15,\r\n    min_stock: 5,\r\n    max_stock: 50,\r\n    unit: 'Stück',\r\n    status: 'active',\r\n    is_service: false,\r\n    is_digital: false,\r\n    is_hazardous: false,\r\n    supplier_name: 'TechSupply GmbH',\r\n    created_at: '2024-01-15T10:30:00Z',\r\n    updated_at: '2024-01-20T14:45:00Z',\r\n  },\r\n  {\r\n    id: '2',\r\n    article_number: 'A202412-002',\r\n    ean_code: '4001234567891',\r\n    name: 'Drucker HP LaserJet Pro',\r\n    description: 'Monochrom-Laserdrucker für Büroanwendungen',\r\n    category: 'Elektronik',\r\n    brand: 'HP',\r\n    purchase_price: 299.99,\r\n    selling_price: 449.99,\r\n    vat_rate: 19,\r\n    current_stock: 8,\r\n    min_stock: 3,\r\n    max_stock: 20,\r\n    unit: 'Stück',\r\n    status: 'active',\r\n    is_service: false,\r\n    is_digital: false,\r\n    is_hazardous: false,\r\n    supplier_name: 'OfficeWorld AG',\r\n    created_at: '2024-01-16T09:15:00Z',\r\n    updated_at: '2024-01-19T16:20:00Z',\r\n  },\r\n  {\r\n    id: '3',\r\n    article_number: 'A202412-003',\r\n    name: 'IT-Support Stunde',\r\n    description: 'Professioneller IT-Support pro Stunde',\r\n    category: 'Dienstleistungen',\r\n    brand: 'VALEO',\r\n    purchase_price: 0,\r\n    selling_price: 89.99,\r\n    vat_rate: 19,\r\n    current_stock: 999,\r\n    min_stock: 0,\r\n    unit: 'Stück',\r\n    status: 'active',\r\n    is_service: true,\r\n    is_digital: false,\r\n    is_hazardous: false,\r\n    created_at: '2024-01-17T11:00:00Z',\r\n    updated_at: '2024-01-17T11:00:00Z',\r\n  },\r\n  {\r\n    id: '4',\r\n    article_number: 'A202412-004',\r\n    ean_code: '4001234567892',\r\n    name: 'Schrauben M6x20',\r\n    description: 'Stahlschrauben M6x20mm, 100er Packung',\r\n    category: 'Werkzeuge',\r\n    brand: 'Würth',\r\n    purchase_price: 4.99,\r\n    selling_price: 8.99,\r\n    vat_rate: 19,\r\n    current_stock: 2,\r\n    min_stock: 10,\r\n    max_stock: 100,\r\n    unit: 'Packung',\r\n    status: 'active',\r\n    is_service: false,\r\n    is_digital: false,\r\n    is_hazardous: false,\r\n    supplier_name: 'ToolMaster KG',\r\n    created_at: '2024-01-18T13:30:00Z',\r\n    updated_at: '2024-01-21T10:15:00Z',\r\n  },\r\n  {\r\n    id: '5',\r\n    article_number: 'A202412-005',\r\n    name: 'Cloud Backup 100GB',\r\n    description: 'Monatliches Cloud-Backup 100GB Speicher',\r\n    category: 'Software',\r\n    brand: 'VALEO',\r\n    purchase_price: 0,\r\n    selling_price: 19.99,\r\n    vat_rate: 19,\r\n    current_stock: 999,\r\n    min_stock: 0,\r\n    unit: 'Stück',\r\n    status: 'active',\r\n    is_service: true,\r\n    is_digital: true,\r\n    is_hazardous: false,\r\n    created_at: '2024-01-19T15:45:00Z',\r\n    updated_at: '2024-01-19T15:45:00Z',\r\n  },\r\n];\r\n\r\n// NeuroFlow Article Table Component\r\nexport const NeuroFlowArticleTable: React.FC<NeuroFlowArticleTableProps> = ({\r\n  articles = mockArticles,\r\n  loading = false,\r\n  onAdd,\r\n  onEdit,\r\n  onDelete,\r\n  onView,\r\n  onRefresh,\r\n  onExport,\r\n}) => {\r\n  // State Management\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [categoryFilter, setCategoryFilter] = useState<string>('');\r\n  const [statusFilter, setStatusFilter] = useState<string>('');\r\n  const [sortBy, setSortBy] = useState<keyof Article>('name');\r\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');\r\n\r\n  // Filter and Sort Logic\r\n  const filteredAndSortedArticles = useMemo(() => {\r\n    const filtered = articles.filter((article) => {\r\n      const matchesSearch = \r\n        article.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        article.article_number.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        article.brand?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        article.description?.toLowerCase().includes(searchTerm.toLowerCase());\r\n      \r\n      const matchesCategory = !categoryFilter || article.category === categoryFilter;\r\n      const matchesStatus = !statusFilter || article.status === statusFilter;\r\n      \r\n      return matchesSearch && matchesCategory && matchesStatus;\r\n    });\r\n\r\n    // Sorting\r\n    filtered.sort((a, b) => {\r\n      const aValue = a[sortBy];\r\n      const bValue = b[sortBy];\r\n      \r\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\r\n        return sortOrder === 'asc' \r\n          ? aValue.localeCompare(bValue)\r\n          : bValue.localeCompare(aValue);\r\n      }\r\n      \r\n      if (typeof aValue === 'number' && typeof bValue === 'number') {\r\n        return sortOrder === 'asc' ? aValue - bValue : bValue - aValue;\r\n      }\r\n      \r\n      return 0;\r\n    });\r\n\r\n    return filtered;\r\n  }, [articles, searchTerm, categoryFilter, statusFilter, sortBy, sortOrder]);\r\n\r\n  // Pagination\r\n  const paginatedArticles = filteredAndSortedArticles.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n\r\n  // Utility Functions\r\n  const getStatusColor = (status: Article['status']) => {\r\n    switch (status) {\r\n      case 'active': return 'success';\r\n      case 'inactive': return 'default';\r\n      case 'discontinued': return 'error';\r\n      case 'new': return 'primary';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getStatusLabel = (status: Article['status']) => {\r\n    switch (status) {\r\n      case 'active': return 'Aktiv';\r\n      case 'inactive': return 'Inaktiv';\r\n      case 'discontinued': return 'Eingestellt';\r\n      case 'new': return 'Neu';\r\n      default: return status;\r\n    }\r\n  };\r\n\r\n  const getStockStatus = (current: number, min: number) => {\r\n    if (current <= 0) return { color: 'error', icon: <ErrorIcon />, label: 'Nicht verfügbar' };\r\n    if (current <= min) return { color: 'warning', icon: <WarningIcon />, label: 'Niedrig' };\r\n    return { color: 'success', icon: <CheckCircleIcon />, label: 'Verfügbar' };\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('de-DE', {\r\n      style: 'currency',\r\n      currency: 'EUR',\r\n    }).format(amount);\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    return new Date(dateString).toLocaleDateString('de-DE');\r\n  };\r\n\r\n  const getCategories = () => {\r\n    const categories = Array.from(new Set(articles.map(a => a.category)));\r\n    return categories.sort();\r\n  };\r\n\r\n  // Event Handlers\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleSort = (property: keyof Article) => {\r\n    const isAsc = sortBy === property && sortOrder === 'asc';\r\n    setSortOrder(isAsc ? 'desc' : 'asc');\r\n    setSortBy(property);\r\n  };\r\n\r\n  const handleDelete = (article: Article) => {\r\n    if (window.confirm(`Artikel \"${article.name}\" wirklich löschen?`)) {\r\n      onDelete?.(article);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <NeuroFlowCard>\r\n      <CardContent>\r\n        {/* Header */}\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={3}>\r\n          <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n            <InventoryIcon color=\"primary\" sx={{ fontSize: 32 }} />\r\n            <Box>\r\n              <Typography variant=\"h5\" fontWeight={600} color=\"text.primary\">\r\n                Artikelverwaltung\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Verwalten Sie alle Artikel und Produkte im System\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n          \r\n          <Stack direction=\"row\" spacing={1}>\r\n            <Tooltip title=\"Aktualisieren\">\r\n              <IconButton onClick={onRefresh} color=\"primary\" disabled={loading}>\r\n                <RefreshIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Tooltip title=\"Exportieren\">\r\n              <IconButton onClick={onExport} color=\"primary\">\r\n                <DownloadIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <NeuroFlowButton\r\n              variant=\"contained\"\r\n              onClick={onAdd}\r\n              startIcon={<AddIcon />}\r\n            >\r\n              Neuer Artikel\r\n            </NeuroFlowButton>\r\n          </Stack>\r\n        </Box>\r\n\r\n        {/* Filters */}\r\n        <Box mb={3}>\r\n          <Grid container spacing={2} alignItems=\"center\">\r\n            <Grid item xs={12} md={4}>\r\n              <TextField\r\n                fullWidth\r\n                placeholder=\"Artikel suchen...\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n                InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <SearchIcon />\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} md={3}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Kategorie</InputLabel>\r\n                <Select\r\n                  value={categoryFilter}\r\n                  onChange={(e) => setCategoryFilter(e.target.value)}\r\n                  label=\"Kategorie\"\r\n                >\r\n                  <MenuItem value=\"\">Alle Kategorien</MenuItem>\r\n                  {getCategories().map((category) => (\r\n                    <MenuItem key={category} value={category}>\r\n                      {category}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12} md={3}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Status</InputLabel>\r\n                <Select\r\n                  value={statusFilter}\r\n                  onChange={(e) => setStatusFilter(e.target.value)}\r\n                  label=\"Status\"\r\n                >\r\n                  <MenuItem value=\"\">Alle Status</MenuItem>\r\n                  <MenuItem value=\"active\">Aktiv</MenuItem>\r\n                  <MenuItem value=\"inactive\">Inaktiv</MenuItem>\r\n                  <MenuItem value=\"discontinued\">Eingestellt</MenuItem>\r\n                  <MenuItem value=\"new\">Neu</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12} md={2}>\r\n              <Box display=\"flex\" gap={1}>\r\n                <Chip \r\n                  label={`${filteredAndSortedArticles.length} Artikel`} \r\n                  color=\"primary\" \r\n                  variant=\"outlined\"\r\n                />\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n\r\n        {/* Table */}\r\n        <TableContainer component={Paper} sx={{ borderRadius: 2 }}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow sx={{ backgroundColor: 'grey.50' }}>\r\n                <TableCell>\r\n                  <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                    <InventoryIcon sx={{ fontSize: 20 }} />\r\n                    Artikel\r\n                  </Box>\r\n                </TableCell>\r\n                <TableCell>Kategorie</TableCell>\r\n                <TableCell>Preise</TableCell>\r\n                <TableCell>\r\n                  <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                    <StorageIcon sx={{ fontSize: 20 }} />\r\n                    Bestand\r\n                  </Box>\r\n                </TableCell>\r\n                <TableCell>Status</TableCell>\r\n                <TableCell>Lieferant</TableCell>\r\n                <TableCell>Typ</TableCell>\r\n                <TableCell align=\"right\">Aktionen</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {loading ? (\r\n                // Loading Skeletons\r\n                Array.from({ length: rowsPerPage }).map((_, index) => (\r\n                  <TableRow key={`skeleton-${index}`}>\r\n                    <TableCell>\r\n                      <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n                        <Skeleton variant=\"circular\" width={40} height={40} />\r\n                        <Box>\r\n                          <Skeleton variant=\"text\" width={120} height={20} />\r\n                          <Skeleton variant=\"text\" width={80} height={16} />\r\n                        </Box>\r\n                      </Box>\r\n                    </TableCell>\r\n                    <TableCell><Skeleton variant=\"text\" width={80} /></TableCell>\r\n                    <TableCell><Skeleton variant=\"text\" width={60} /></TableCell>\r\n                    <TableCell><Skeleton variant=\"text\" width={40} /></TableCell>\r\n                    <TableCell><Skeleton variant=\"text\" width={60} /></TableCell>\r\n                    <TableCell><Skeleton variant=\"text\" width={80} /></TableCell>\r\n                    <TableCell><Skeleton variant=\"text\" width={60} /></TableCell>\r\n                    <TableCell align=\"right\">\r\n                      <Skeleton variant=\"rectangular\" width={80} height={32} />\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))\r\n              ) : paginatedArticles.length === 0 ? (\r\n                // Empty State\r\n                <TableRow>\r\n                  <TableCell colSpan={8}>\r\n                    <Box textAlign=\"center\" py={4}>\r\n                      <InfoIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />\r\n                      <Typography variant=\"h6\" color=\"text.secondary\" mb={1}>\r\n                        Keine Artikel gefunden\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        {searchTerm || categoryFilter || statusFilter \r\n                          ? 'Versuchen Sie andere Suchkriterien'\r\n                          : 'Erstellen Sie Ihren ersten Artikel'\r\n                        }\r\n                      </Typography>\r\n                    </Box>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ) : (\r\n                // Article Rows\r\n                paginatedArticles.map((article) => {\r\n                  const stockStatus = getStockStatus(article.current_stock, article.min_stock);\r\n                  \r\n                  return (\r\n                    <TableRow key={article.id} hover>\r\n                      <TableCell>\r\n                        <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n                          <Avatar sx={{ bgcolor: 'primary.main' }}>\r\n                            <InventoryIcon />\r\n                          </Avatar>\r\n                          <Box>\r\n                            <Typography variant=\"subtitle2\" fontWeight={600}>\r\n                              {article.name}\r\n                            </Typography>\r\n                            <Typography variant=\"caption\" color=\"text.secondary\">\r\n                              {article.article_number}\r\n                            </Typography>\r\n                            {article.brand && (\r\n                              <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\">\r\n                                {article.brand}\r\n                              </Typography>\r\n                            )}\r\n                          </Box>\r\n                        </Box>\r\n                      </TableCell>\r\n                      \r\n                      <TableCell>\r\n                        <Chip \r\n                          label={article.category} \r\n                          size=\"small\" \r\n                          variant=\"outlined\"\r\n                          icon={<CategoryIcon />}\r\n                        />\r\n                      </TableCell>\r\n                      \r\n                      <TableCell>\r\n                        <Box>\r\n                          <Typography variant=\"body2\" fontWeight={600}>\r\n                            {formatCurrency(article.selling_price)}\r\n                          </Typography>\r\n                          <Typography variant=\"caption\" color=\"text.secondary\">\r\n                            EK: {formatCurrency(article.purchase_price)}\r\n                          </Typography>\r\n                        </Box>\r\n                      </TableCell>\r\n                      \r\n                      <TableCell>\r\n                        <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                          <Tooltip title={stockStatus.label}>\r\n                            <IconButton size=\"small\" color={stockStatus.color as any}>\r\n                              {stockStatus.icon}\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                          <Box>\r\n                            <Typography variant=\"body2\" fontWeight={600}>\r\n                              {article.current_stock} {article.unit}\r\n                            </Typography>\r\n                            {article.current_stock <= article.min_stock && (\r\n                              <Typography variant=\"caption\" color=\"warning.main\">\r\n                                Min: {article.min_stock}\r\n                              </Typography>\r\n                            )}\r\n                          </Box>\r\n                        </Box>\r\n                      </TableCell>\r\n                      \r\n                      <TableCell>\r\n                        <Chip \r\n                          label={getStatusLabel(article.status)}\r\n                          color={getStatusColor(article.status) as any}\r\n                          size=\"small\"\r\n                        />\r\n                      </TableCell>\r\n                      \r\n                      <TableCell>\r\n                        {article.supplier_name ? (\r\n                          <Typography variant=\"body2\">\r\n                            {article.supplier_name}\r\n                          </Typography>\r\n                        ) : (\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">\r\n                            -\r\n                          </Typography>\r\n                        )}\r\n                      </TableCell>\r\n                      \r\n                      <TableCell>\r\n                        <Stack direction=\"row\" spacing={0.5}>\r\n                          {article.is_service && (\r\n                            <Chip label=\"Service\" size=\"small\" color=\"info\" />\r\n                          )}\r\n                          {article.is_digital && (\r\n                            <Chip label=\"Digital\" size=\"small\" color=\"secondary\" />\r\n                          )}\r\n                          {article.is_hazardous && (\r\n                            <Chip label=\"Gefahrgut\" size=\"small\" color=\"error\" />\r\n                          )}\r\n                        </Stack>\r\n                      </TableCell>\r\n                      \r\n                      <TableCell align=\"right\">\r\n                        <Stack direction=\"row\" spacing={0.5}>\r\n                          <Tooltip title=\"Anzeigen\">\r\n                            <IconButton \r\n                              size=\"small\" \r\n                              onClick={() => onView?.(article)}\r\n                              color=\"primary\"\r\n                            >\r\n                              <ViewIcon />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                          <Tooltip title=\"Bearbeiten\">\r\n                            <IconButton \r\n                              size=\"small\" \r\n                              onClick={() => onEdit?.(article)}\r\n                              color=\"primary\"\r\n                            >\r\n                              <EditIcon />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                          <Tooltip title=\"Löschen\">\r\n                            <IconButton \r\n                              size=\"small\" \r\n                              onClick={() => handleDelete(article)}\r\n                              color=\"error\"\r\n                            >\r\n                              <DeleteIcon />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        </Stack>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n\r\n        {/* Pagination */}\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25, 50]}\r\n          component=\"div\"\r\n          count={filteredAndSortedArticles.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n          labelRowsPerPage=\"Zeilen pro Seite:\"\r\n          labelDisplayedRows={({ from, to, count }) => \r\n            `${from}-${to} von ${count !== -1 ? count : `mehr als ${to}`}`\r\n          }\r\n        />\r\n      </CardContent>\r\n    </NeuroFlowCard>\r\n  );\r\n};\r\n\r\nexport default NeuroFlowArticleTable; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\neuroflow\\NeuroFlowAutocomplete.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Paper' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Divider' is defined but never used. Allowed unused vars must match /^_/u.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Alert' is defined but never used. Allowed unused vars must match /^_/u.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SearchIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":25,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PhoneIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":29,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EmailIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":30,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ShippingIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":33,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PaymentIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":34,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2203,2206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2203,2206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":218,"column":27,"nodeType":"Identifier","endLine":218,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":365,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":365,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10848,10851],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10848,10851],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":366,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":366,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10913,10916],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10913,10916],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":395,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":395,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11798,11801],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11798,11801],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":396,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":396,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11842,11845],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11842,11845],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":397,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":397,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11888,11891],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11888,11891],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":397,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":397,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11927,11930],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11927,11930],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 🧠 NeuroFlow Autocomplete Component\r\n * KI-first Autocomplete mit PostgreSQL-Integration für Stammdaten\r\n * Typeahead, Fuzzy Matching und intelligente Vorschläge\r\n */\r\n\r\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport {\r\n  TextField,\r\n  Autocomplete as MuiAutocomplete,\r\n  CircularProgress,\r\n  Chip,\r\n  Box,\r\n  Typography,\r\n  Popper,\r\n  Paper,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemIcon,\r\n  Divider,\r\n  Alert,\r\n  Tooltip,\r\n} from '@mui/material';\r\nimport {\r\n  Search as SearchIcon,\r\n  Person as PersonIcon,\r\n  Business as BusinessIcon,\r\n  LocationOn as LocationIcon,\r\n  Phone as PhoneIcon,\r\n  Email as EmailIcon,\r\n  AccountBalance as BankIcon,\r\n  Science as ScienceIcon,\r\n  LocalShipping as ShippingIcon,\r\n  Payment as PaymentIcon,\r\n  Description as DescriptionIcon,\r\n  CheckCircle as CheckCircleIcon,\r\n  Warning as WarningIcon,\r\n  Info as InfoIcon,\r\n} from '@mui/icons-material';\r\nimport { styled } from '@mui/material/styles';\r\nimport debounce from 'lodash/debounce';\r\n\r\n// Styled Components\r\nconst StyledAutocomplete = styled(MuiAutocomplete)(({ theme }) => ({\r\n  '& .MuiAutocomplete-inputRoot': {\r\n    padding: theme.spacing(1.5),\r\n    borderRadius: theme.shape.borderRadius * 1.5,\r\n    transition: 'all 0.3s ease-in-out',\r\n    '&:hover': {\r\n      boxShadow: theme.shadows[2],\r\n    },\r\n    '&.Mui-focused': {\r\n      boxShadow: theme.shadows[4],\r\n    },\r\n  },\r\n  '& .MuiAutocomplete-option': {\r\n    padding: theme.spacing(1.5),\r\n    '&[data-focus=\"true\"]': {\r\n      backgroundColor: theme.palette.primary.light,\r\n      color: theme.palette.primary.contrastText,\r\n    },\r\n  },\r\n}));\r\n\r\nconst CustomPopper = styled(Popper)(({ theme }) => ({\r\n  '& .MuiAutocomplete-paper': {\r\n    borderRadius: theme.shape.borderRadius * 1.5,\r\n    boxShadow: theme.shadows[8],\r\n    border: `1px solid ${theme.palette.divider}`,\r\n    maxHeight: 400,\r\n  },\r\n}));\r\n\r\n// Autocomplete Option Interface\r\ninterface AutocompleteOption {\r\n  id: string;\r\n  value: string;\r\n  label: string;\r\n  type: 'customer' | 'supplier' | 'article' | 'personnel' | 'charge' | 'location' | 'bank';\r\n  category?: string;\r\n  subcategory?: string;\r\n  icon?: React.ReactNode;\r\n  metadata?: Record<string, any>;\r\n  score?: number;\r\n  isExact?: boolean;\r\n  isFuzzy?: boolean;\r\n}\r\n\r\n// Autocomplete Props Interface\r\ninterface NeuroFlowAutocompleteProps {\r\n  label: string;\r\n  placeholder?: string;\r\n  value: string;\r\n  onChange: (value: string, option?: AutocompleteOption) => void;\r\n  onSelect?: (option: AutocompleteOption) => void;\r\n  type: 'customer' | 'supplier' | 'article' | 'personnel' | 'charge' | 'location' | 'bank';\r\n  required?: boolean;\r\n  disabled?: boolean;\r\n  error?: boolean;\r\n  helperText?: string;\r\n  fullWidth?: boolean;\r\n  size?: 'small' | 'medium';\r\n  variant?: 'outlined' | 'filled' | 'standard';\r\n  showChips?: boolean;\r\n  multiple?: boolean;\r\n  maxSuggestions?: number;\r\n  minChars?: number;\r\n  debounceMs?: number;\r\n  apiEndpoint?: string;\r\n  customOptions?: AutocompleteOption[];\r\n  onLoadOptions?: (query: string) => Promise<AutocompleteOption[]>;\r\n  renderOption?: (option: AutocompleteOption) => React.ReactNode;\r\n  getOptionLabel?: (option: AutocompleteOption) => string;\r\n  filterOptions?: (options: AutocompleteOption[], inputValue: string) => AutocompleteOption[];\r\n}\r\n\r\n// Icon Mapping\r\nconst getIconForType = (type: string): React.ReactNode => {\r\n  switch (type) {\r\n    case 'customer':\r\n      return <PersonIcon color=\"primary\" />;\r\n    case 'supplier':\r\n      return <BusinessIcon color=\"secondary\" />;\r\n    case 'article':\r\n      return <DescriptionIcon color=\"info\" />;\r\n    case 'personnel':\r\n      return <PersonIcon color=\"success\" />;\r\n    case 'charge':\r\n      return <ScienceIcon color=\"warning\" />;\r\n    case 'location':\r\n      return <LocationIcon color=\"error\" />;\r\n    case 'bank':\r\n      return <BankIcon color=\"primary\" />;\r\n    default:\r\n      return <InfoIcon color=\"action\" />;\r\n  }\r\n};\r\n\r\n// Default API Endpoints\r\nconst getApiEndpoint = (type: string): string => {\r\n  switch (type) {\r\n    case 'customer':\r\n      return '/api/customers/search';\r\n    case 'supplier':\r\n      return '/api/suppliers/search';\r\n    case 'article':\r\n      return '/api/articles/search';\r\n    case 'personnel':\r\n      return '/api/personnel/search';\r\n    case 'charge':\r\n      return '/api/charges/search';\r\n    case 'location':\r\n      return '/api/locations/search';\r\n    case 'bank':\r\n      return '/api/banks/search';\r\n    default:\r\n      return '/api/search';\r\n  }\r\n};\r\n\r\n// Fuzzy Search Implementation\r\nconst fuzzySearch = (query: string, text: string): number => {\r\n  const queryLower = query.toLowerCase();\r\n  const textLower = text.toLowerCase();\r\n  \r\n  if (textLower.includes(queryLower)) {\r\n    return 1.0; // Exact match\r\n  }\r\n  \r\n  // Simple fuzzy matching\r\n  let score = 0;\r\n  let queryIndex = 0;\r\n  \r\n  for (let i = 0; i < textLower.length && queryIndex < queryLower.length; i++) {\r\n    if (textLower[i] === queryLower[queryIndex]) {\r\n      score += 1;\r\n      queryIndex++;\r\n    }\r\n  }\r\n  \r\n  return score / queryLower.length;\r\n};\r\n\r\n// NeuroFlow Autocomplete Component\r\nexport const NeuroFlowAutocomplete: React.FC<NeuroFlowAutocompleteProps> = ({\r\n  label,\r\n  placeholder,\r\n  value,\r\n  onChange,\r\n  onSelect,\r\n  type,\r\n  required = false,\r\n  disabled = false,\r\n  error = false,\r\n  helperText,\r\n  fullWidth = true,\r\n  size = 'medium',\r\n  variant = 'outlined',\r\n  showChips = false,\r\n  multiple = false,\r\n  maxSuggestions = 10,\r\n  minChars = 2,\r\n  debounceMs = 300,\r\n  apiEndpoint,\r\n  customOptions = [],\r\n  onLoadOptions,\r\n  renderOption,\r\n  getOptionLabel,\r\n  filterOptions,\r\n}) => {\r\n  const [options, setOptions] = useState<AutocompleteOption[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [inputValue, setInputValue] = useState(value);\r\n  const [open, setOpen] = useState(false);\r\n  const abortControllerRef = useRef<AbortController | null>(null);\r\n\r\n  // Debounced search function\r\n  const debouncedSearch = useCallback(\r\n    debounce(async (query: string) => {\r\n      if (query.length < minChars) {\r\n        setOptions([]);\r\n        return;\r\n      }\r\n\r\n      setLoading(true);\r\n      \r\n      try {\r\n        // Cancel previous request\r\n        if (abortControllerRef.current) {\r\n          abortControllerRef.current.abort();\r\n        }\r\n        \r\n        abortControllerRef.current = new AbortController();\r\n        \r\n        let searchResults: AutocompleteOption[] = [];\r\n        \r\n        // Use custom load function if provided\r\n        if (onLoadOptions) {\r\n          searchResults = await onLoadOptions(query);\r\n        } else {\r\n          // Default API call\r\n          const endpoint = apiEndpoint || getApiEndpoint(type);\r\n          const response = await fetch(`${endpoint}?q=${encodeURIComponent(query)}&limit=${maxSuggestions}`, {\r\n            signal: abortControllerRef.current.signal,\r\n          });\r\n          \r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            searchResults = data.results || data || [];\r\n          }\r\n        }\r\n        \r\n        // Add custom options\r\n        const allOptions = [...customOptions, ...searchResults];\r\n        \r\n        // Apply fuzzy matching and scoring\r\n        const scoredOptions = allOptions.map(option => ({\r\n          ...option,\r\n          score: fuzzySearch(query, option.label),\r\n          isExact: option.label.toLowerCase().includes(query.toLowerCase()),\r\n          isFuzzy: !option.label.toLowerCase().includes(query.toLowerCase()) && fuzzySearch(query, option.label) > 0.5,\r\n        }));\r\n        \r\n        // Sort by relevance\r\n        const sortedOptions = scoredOptions\r\n          .filter(option => option.score > 0.3)\r\n          .sort((a, b) => {\r\n            // Exact matches first\r\n            if (a.isExact && !b.isExact) return -1;\r\n            if (!a.isExact && b.isExact) return 1;\r\n            \r\n            // Then by score\r\n            return (b.score || 0) - (a.score || 0);\r\n          })\r\n          .slice(0, maxSuggestions);\r\n        \r\n        setOptions(sortedOptions);\r\n        \r\n      } catch (error) {\r\n        if (error.name !== 'AbortError') {\r\n          console.error('Autocomplete search error:', error);\r\n          setOptions([]);\r\n        }\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }, debounceMs),\r\n    [type, apiEndpoint, onLoadOptions, customOptions, maxSuggestions, minChars]\r\n  );\r\n\r\n  // Handle input change\r\n  const handleInputChange = (event: React.SyntheticEvent, newInputValue: string) => {\r\n    setInputValue(newInputValue);\r\n    onChange(newInputValue);\r\n    \r\n    if (newInputValue.length >= minChars) {\r\n      debouncedSearch(newInputValue);\r\n    } else {\r\n      setOptions([]);\r\n    }\r\n  };\r\n\r\n  // Handle option selection\r\n  const handleOptionSelect = (event: React.SyntheticEvent, option: AutocompleteOption | null) => {\r\n    if (option) {\r\n      onChange(option.value, option);\r\n      onSelect?.(option);\r\n    }\r\n  };\r\n\r\n  // Default option renderer\r\n  const defaultRenderOption = (option: AutocompleteOption) => (\r\n    <ListItem dense>\r\n      <ListItemIcon>\r\n        {option.icon || getIconForType(option.type)}\r\n      </ListItemIcon>\r\n      <ListItemText\r\n        primary={\r\n          <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n            <Typography variant=\"body2\" fontWeight={option.isExact ? 600 : 400}>\r\n              {option.label}\r\n            </Typography>\r\n            {option.isExact && (\r\n              <CheckCircleIcon color=\"success\" sx={{ fontSize: 16 }} />\r\n            )}\r\n            {option.isFuzzy && (\r\n              <WarningIcon color=\"warning\" sx={{ fontSize: 16 }} />\r\n            )}\r\n          </Box>\r\n        }\r\n        secondary={\r\n          option.metadata && (\r\n            <Typography variant=\"caption\" color=\"text.secondary\">\r\n              {option.metadata.description || option.metadata.category || option.category}\r\n            </Typography>\r\n          )\r\n        }\r\n      />\r\n    </ListItem>\r\n  );\r\n\r\n  // Default option label getter\r\n  const defaultGetOptionLabel = (option: AutocompleteOption) => option.label;\r\n\r\n  // Default filter function\r\n  const defaultFilterOptions = (options: AutocompleteOption[], inputValue: string) => {\r\n    return options.filter(option => \r\n      option.label.toLowerCase().includes(inputValue.toLowerCase()) ||\r\n      option.value.toLowerCase().includes(inputValue.toLowerCase())\r\n    );\r\n  };\r\n\r\n  return (\r\n    <StyledAutocomplete\r\n      open={open}\r\n      onOpen={() => setOpen(true)}\r\n      onClose={() => setOpen(false)}\r\n      options={options}\r\n      loading={loading}\r\n      value={value}\r\n      onChange={handleOptionSelect}\r\n      inputValue={inputValue}\r\n      onInputChange={handleInputChange}\r\n      getOptionLabel={getOptionLabel || defaultGetOptionLabel}\r\n      filterOptions={filterOptions || defaultFilterOptions as any}\r\n      renderOption={renderOption || defaultRenderOption as any}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          label={label}\r\n          placeholder={placeholder}\r\n          required={required}\r\n          error={error}\r\n          helperText={helperText}\r\n          fullWidth={fullWidth}\r\n          size={size}\r\n          variant={variant}\r\n          disabled={disabled}\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            endAdornment: (\r\n              <>\r\n                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                {params.InputProps.endAdornment}\r\n              </>\r\n            ),\r\n          }}\r\n        />\r\n      )}\r\n      renderTags={(tagValue, getTagProps) =>\r\n        showChips && multiple\r\n          ? tagValue.map((option, index) => (\r\n              <Chip\r\n                {...getTagProps({ index })}\r\n                key={(option as any).id}\r\n                label={(option as any).label}\r\n                icon={(option as any).icon || getIconForType((option as any).type)}\r\n                size=\"small\"\r\n                color=\"primary\"\r\n                variant=\"outlined\"\r\n              />\r\n            ))\r\n          : null\r\n      }\r\n      PopperComponent={CustomPopper}\r\n      multiple={multiple}\r\n      freeSolo\r\n      autoHighlight\r\n      autoComplete\r\n      includeInputInList\r\n      filterSelectedOptions\r\n      clearOnBlur={false}\r\n      selectOnFocus\r\n      handleHomeEndKeys\r\n      blurOnSelect\r\n    />\r\n  );\r\n};\r\n\r\n// Specialized Autocomplete Components\r\nexport const CustomerAutocomplete: React.FC<Omit<NeuroFlowAutocompleteProps, 'type'>> = (props) => (\r\n  <NeuroFlowAutocomplete\r\n    {...props}\r\n    type=\"customer\"\r\n    placeholder=\"Kundenname, -nummer oder E-Mail eingeben...\"\r\n    showChips={true}\r\n  />\r\n);\r\n\r\nexport const SupplierAutocomplete: React.FC<Omit<NeuroFlowAutocompleteProps, 'type'>> = (props) => (\r\n  <NeuroFlowAutocomplete\r\n    {...props}\r\n    type=\"supplier\"\r\n    placeholder=\"Lieferantenname, -nummer oder Branche eingeben...\"\r\n    showChips={true}\r\n  />\r\n);\r\n\r\nexport const ArticleAutocomplete: React.FC<Omit<NeuroFlowAutocompleteProps, 'type'>> = (props) => (\r\n  <NeuroFlowAutocomplete\r\n    {...props}\r\n    type=\"article\"\r\n    placeholder=\"Artikelnummer, -name oder Kategorie eingeben...\"\r\n    showChips={true}\r\n  />\r\n);\r\n\r\nexport const PersonnelAutocomplete: React.FC<Omit<NeuroFlowAutocompleteProps, 'type'>> = (props) => (\r\n  <NeuroFlowAutocomplete\r\n    {...props}\r\n    type=\"personnel\"\r\n    placeholder=\"Mitarbeitername, -nummer oder Abteilung eingeben...\"\r\n    showChips={true}\r\n  />\r\n);\r\n\r\nexport const ChargeAutocomplete: React.FC<Omit<NeuroFlowAutocompleteProps, 'type'>> = (props) => (\r\n  <NeuroFlowAutocomplete\r\n    {...props}\r\n    type=\"charge\"\r\n    placeholder=\"Chargennummer, Artikel oder Lieferant eingeben...\"\r\n    showChips={true}\r\n  />\r\n);\r\n\r\nexport default NeuroFlowAutocomplete; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\neuroflow\\NeuroFlowChargenverwaltung.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Divider' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Skeleton' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AddIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":49,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EditIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":50,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SettingsIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":55,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NeuroFlowAutocomplete' is defined but never used. Allowed unused vars must match /^_/u.","line":71,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChargeAutocomplete' is defined but never used. Allowed unused vars must match /^_/u.","line":74,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedWorkflow' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":236,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":236,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":303,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":303,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8854,8857],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8854,8857],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":344,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10103,10106],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10103,10106],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":706,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":706,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25529,25532],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25529,25532],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":735,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":735,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26800,26803],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26800,26803],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 🧠 NeuroFlow Chargenverwaltung\r\n * KI-first, responsive-first Chargenverwaltung für Landhandel-ERP-Systeme\r\n * Integration mit n8n Workflows für Automatisierung\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormHelperText,\r\n  Chip,\r\n  Divider,\r\n  Stack,\r\n  IconButton,\r\n  Tooltip,\r\n  Skeleton,\r\n  CircularProgress,\r\n  Tabs,\r\n  Tab,\r\n  Alert,\r\n  Switch,\r\n  FormControlLabel,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n} from '@mui/material';\r\nimport {\r\n  Save as SaveIcon,\r\n  Cancel as CancelIcon,\r\n  Refresh as RefreshIcon,\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Visibility as ViewIcon,\r\n  QrCode as QrCodeIcon,\r\n  Assessment as AssessmentIcon,\r\n  Settings as SettingsIcon,\r\n  LocalShipping as ShippingIcon,\r\n  Payment as PaymentIcon,\r\n  Description as DescriptionIcon,\r\n  Science as ScienceIcon,\r\n  Security as SecurityIcon,\r\n  Timeline as TimelineIcon,\r\n  AutoGraph as AutoGraphIcon,\r\n  PlayArrow as PlayArrowIcon,\r\n} from '@mui/icons-material';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport type { SubmitHandler } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { z } from 'zod';\r\nimport { styled } from '@mui/material/styles';\r\nimport { \r\n  NeuroFlowAutocomplete, \r\n  ArticleAutocomplete, \r\n  SupplierAutocomplete,\r\n  ChargeAutocomplete \r\n} from './NeuroFlowAutocomplete';\r\n\r\n// Styled Components\r\nconst NeuroFlowCard = styled(Card)(({ theme }) => ({\r\n  borderRadius: theme.shape.borderRadius * 2,\r\n  boxShadow: theme.shadows[1],\r\n  border: `1px solid ${theme.palette.divider}`,\r\n  transition: 'all 0.3s ease-in-out',\r\n  '&:hover': {\r\n    boxShadow: theme.shadows[4],\r\n  },\r\n}));\r\n\r\nconst NeuroFlowButton = styled(Button)(({ theme }) => ({\r\n  borderRadius: theme.shape.borderRadius * 1.5,\r\n  textTransform: 'none',\r\n  fontWeight: 600,\r\n  padding: '0.75rem 1.5rem',\r\n  transition: 'all 0.3s ease-in-out',\r\n  '&:hover': {\r\n    transform: 'translateY(-1px)',\r\n    boxShadow: theme.shadows[3],\r\n  },\r\n}));\r\n\r\n// Zod Schema für Chargenverwaltung\r\nconst ChargeSchema = z.object({\r\n  // Grunddaten\r\n  charge_number: z.string().min(1, 'Chargennummer ist erforderlich'),\r\n  article_number: z.string().min(1, 'Artikelnummer ist erforderlich'),\r\n  article_name: z.string().min(2, 'Artikelname muss mindestens 2 Zeichen lang sein'),\r\n  supplier_number: z.string().min(1, 'Lieferantennummer ist erforderlich'),\r\n  supplier_name: z.string().min(2, 'Lieferantenname muss mindestens 2 Zeichen lang sein'),\r\n  \r\n  // Chargendaten\r\n  production_date: z.string().min(1, 'Produktionsdatum ist erforderlich'),\r\n  expiry_date: z.string().min(1, 'Verfallsdatum ist erforderlich'),\r\n  batch_size: z.number().min(0, 'Chargengröße darf nicht negativ sein'),\r\n  unit: z.enum(['kg', 't', 'l', 'stk', 'm³']),\r\n  \r\n  // Qualitätsdaten\r\n  quality_status: z.enum(['pending', 'approved', 'rejected', 'quarantine']),\r\n  qs_milk_relevant: z.boolean(),\r\n  vlog_gmo_status: z.enum(['VLOG', 'GMO', 'unknown']),\r\n  eudr_compliant: z.boolean(),\r\n  sustainability_rapeseed: z.boolean(),\r\n  \r\n  // Analysedaten\r\n  protein_content: z.number().min(0).max(100).optional(),\r\n  fat_content: z.number().min(0).max(100).optional(),\r\n  moisture_content: z.number().min(0).max(100).optional(),\r\n  ash_content: z.number().min(0).max(100).optional(),\r\n  \r\n  // Preisdaten\r\n  purchase_price: z.number().min(0, 'Einkaufspreis darf nicht negativ sein'),\r\n  currency: z.enum(['EUR', 'USD', 'CHF']),\r\n  \r\n  // Lagerdaten\r\n  warehouse_location: z.string().min(1, 'Lagerort ist erforderlich'),\r\n  storage_conditions: z.enum(['ambient', 'cooled', 'frozen', 'controlled']),\r\n  \r\n  // Zertifikate\r\n  certificates: z.array(z.object({\r\n    id: z.string(),\r\n    type: z.string(),\r\n    filename: z.string(),\r\n    upload_date: z.string(),\r\n    valid_until: z.string().optional(),\r\n  })).optional(),\r\n  \r\n  // KI-Extensionen\r\n  ki_analysis: z.object({\r\n    risk_score: z.number().min(0).max(100),\r\n    quality_prediction: z.enum(['excellent', 'good', 'average', 'poor']),\r\n    shelf_life_prediction: z.number().min(0),\r\n    price_optimization_suggestion: z.number().optional(),\r\n    anomaly_detection: z.boolean(),\r\n    trend_analysis: z.string().optional(),\r\n  }).optional(),\r\n  \r\n  // Workflow-Status\r\n  workflow_status: z.enum(['draft', 'in_review', 'approved', 'rejected', 'archived']),\r\n  workflow_steps: z.array(z.object({\r\n    step: z.string(),\r\n    status: z.enum(['pending', 'completed', 'failed']),\r\n    completed_by: z.string().optional(),\r\n    completed_at: z.string().optional(),\r\n    notes: z.string().optional(),\r\n  })).optional(),\r\n  \r\n  // Audit Trail\r\n  created_by: z.string(),\r\n  created_at: z.string(),\r\n  updated_by: z.string().optional(),\r\n  updated_at: z.string().optional(),\r\n  \r\n  // Notizen\r\n  notes: z.string().optional(),\r\n});\r\n\r\ntype ChargeFormData = z.infer<typeof ChargeSchema>;\r\n\r\n// Mock Data\r\nconst mockUnits = [\r\n  { value: 'kg', label: 'Kilogramm (kg)' },\r\n  { value: 't', label: 'Tonne (t)' },\r\n  { value: 'l', label: 'Liter (l)' },\r\n  { value: 'stk', label: 'Stück (stk)' },\r\n  { value: 'm³', label: 'Kubikmeter (m³)' },\r\n];\r\n\r\nconst mockQualityStatuses = [\r\n  { value: 'pending', label: 'Ausstehend', color: 'warning' },\r\n  { value: 'approved', label: 'Genehmigt', color: 'success' },\r\n  { value: 'rejected', label: 'Abgelehnt', color: 'error' },\r\n  { value: 'quarantine', label: 'Quarantäne', color: 'error' },\r\n];\r\n\r\nconst mockVlogGmoStatuses = [\r\n  { value: 'VLOG', label: 'VLOG-konform', color: 'success' },\r\n  { value: 'GMO', label: 'GVO-haltig', color: 'error' },\r\n  { value: 'unknown', label: 'Unbekannt', color: 'warning' },\r\n];\r\n\r\nconst mockStorageConditions = [\r\n  { value: 'ambient', label: 'Umgebungstemperatur' },\r\n  { value: 'cooled', label: 'Gekühlt' },\r\n  { value: 'frozen', label: 'Gefroren' },\r\n  { value: 'controlled', label: 'Klimakontrolliert' },\r\n];\r\n\r\n// n8n Workflow Integration\r\ninterface N8nWorkflow {\r\n  id: string;\r\n  name: string;\r\n  status: 'active' | 'inactive';\r\n  trigger: string;\r\n  nodes: number;\r\n  lastExecution?: string;\r\n}\r\n\r\n// NeuroFlow Chargenverwaltung Component\r\ninterface NeuroFlowChargenverwaltungProps {\r\n  initialData?: Partial<ChargeFormData>;\r\n  onSubmit?: (data: ChargeFormData) => Promise<void>;\r\n  onCancel?: () => void;\r\n  loading?: boolean;\r\n  mode?: 'create' | 'edit' | 'view';\r\n}\r\n\r\nexport const NeuroFlowChargenverwaltung: React.FC<NeuroFlowChargenverwaltungProps> = ({\r\n  initialData,\r\n  onSubmit,\r\n  onCancel,\r\n  loading = false,\r\n  mode = 'create',\r\n}) => {\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const [submitLoading, setSubmitLoading] = useState(false);\r\n  const [n8nWorkflows, setN8nWorkflows] = useState<N8nWorkflow[]>([]);\r\n  const [workflowDialogOpen, setWorkflowDialogOpen] = useState(false);\r\n  const [selectedWorkflow, setSelectedWorkflow] = useState<N8nWorkflow | null>(null);\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors, isDirty },\r\n    reset,\r\n    watch,\r\n    setValue,\r\n  } = useForm<ChargeFormData>({\r\n    resolver: zodResolver(ChargeSchema),\r\n    defaultValues: {\r\n      charge_number: '',\r\n      article_number: '',\r\n      article_name: '',\r\n      supplier_number: '',\r\n      supplier_name: '',\r\n      production_date: '',\r\n      expiry_date: '',\r\n      batch_size: 0,\r\n      unit: 'kg',\r\n      quality_status: 'pending',\r\n      qs_milk_relevant: false,\r\n      vlog_gmo_status: 'unknown',\r\n      eudr_compliant: false,\r\n      sustainability_rapeseed: false,\r\n      protein_content: 0,\r\n      fat_content: 0,\r\n      moisture_content: 0,\r\n      ash_content: 0,\r\n      purchase_price: 0,\r\n      currency: 'EUR',\r\n      warehouse_location: '',\r\n      storage_conditions: 'ambient',\r\n      certificates: [],\r\n      ki_analysis: {\r\n        risk_score: 50,\r\n        quality_prediction: 'average',\r\n        shelf_life_prediction: 365,\r\n        anomaly_detection: false,\r\n      },\r\n      workflow_status: 'draft',\r\n      workflow_steps: [],\r\n      created_by: 'System',\r\n      created_at: new Date().toISOString(),\r\n      notes: '',\r\n      ...initialData,\r\n    },\r\n  });\r\n\r\n  // n8n Workflow Integration\r\n  useEffect(() => {\r\n    fetchN8nWorkflows();\r\n  }, []);\r\n\r\n  const fetchN8nWorkflows = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5678/api/v1/workflows');\r\n      if (response.ok) {\r\n        const workflows = await response.json();\r\n        setN8nWorkflows(workflows.data || []);\r\n      }\r\n    } catch (error) {\r\n      console.error('Fehler beim Laden der n8n Workflows:', error);\r\n    }\r\n  };\r\n\r\n  const triggerWorkflow = async (workflowId: string, data: any) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:5678/api/v1/workflows/${workflowId}/trigger`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n      \r\n      if (response.ok) {\r\n        console.log('Workflow erfolgreich ausgelöst:', workflowId);\r\n        return true;\r\n      }\r\n    } catch (error) {\r\n      console.error('Fehler beim Auslösen des Workflows:', error);\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const handleFormSubmit: SubmitHandler<ChargeFormData> = async (data) => {\r\n    setSubmitLoading(true);\r\n    try {\r\n      // KI-Analyse durchführen\r\n      const kiAnalysis = await performKIAnalysis(data);\r\n      data.ki_analysis = { ...data.ki_analysis, ...kiAnalysis };\r\n      \r\n      // n8n Workflow für Chargenverarbeitung auslösen\r\n      await triggerWorkflow('charge-processing', data);\r\n      \r\n      if (onSubmit) {\r\n        await onSubmit(data);\r\n      }\r\n      console.log('Charge saved:', data);\r\n    } catch (error) {\r\n      console.error('Error saving charge:', error);\r\n    } finally {\r\n      setSubmitLoading(false);\r\n    }\r\n  };\r\n\r\n  const performKIAnalysis = async (data: ChargeFormData): Promise<any> => {\r\n    // Simulierte KI-Analyse\r\n    const riskScore = Math.random() * 100;\r\n    const qualityPrediction = riskScore < 30 ? 'excellent' : \r\n                             riskScore < 60 ? 'good' : \r\n                             riskScore < 80 ? 'average' : 'poor';\r\n    \r\n    return {\r\n      risk_score: Math.round(riskScore),\r\n      quality_prediction: qualityPrediction,\r\n      shelf_life_prediction: Math.floor(Math.random() * 730) + 30,\r\n      price_optimization_suggestion: data.purchase_price * (0.9 + Math.random() * 0.2),\r\n      anomaly_detection: Math.random() > 0.8,\r\n      trend_analysis: 'Stabile Qualität, leichte Preiserhöhung erwartet',\r\n    };\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    if (isDirty) {\r\n      if (window.confirm('Änderungen verwerfen?')) {\r\n        reset();\r\n        onCancel?.();\r\n      }\r\n    } else {\r\n      onCancel?.();\r\n    }\r\n  };\r\n\r\n  const generateChargeNumber = () => {\r\n    const date = new Date();\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');\r\n    const chargeNumber = `CH${year}${month}${day}-${random}`;\r\n    setValue('charge_number', chargeNumber);\r\n  };\r\n\r\n  const tabs = [\r\n    { label: 'Grunddaten', icon: <DescriptionIcon /> },\r\n    { label: 'Qualität', icon: <ScienceIcon /> },\r\n    { label: 'Analysen', icon: <AssessmentIcon /> },\r\n    { label: 'Lagerung', icon: <ShippingIcon /> },\r\n    { label: 'Zertifikate', icon: <SecurityIcon /> },\r\n    { label: 'KI-Analyse', icon: <AutoGraphIcon /> },\r\n    { label: 'Workflow', icon: <TimelineIcon /> },\r\n  ];\r\n\r\n  return (\r\n    <NeuroFlowCard>\r\n      <CardContent>\r\n        {/* Header */}\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={3}>\r\n          <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n            <ScienceIcon color=\"primary\" sx={{ fontSize: 32 }} />\r\n            <Box>\r\n              <Typography variant=\"h5\" fontWeight={600} color=\"text.primary\">\r\n                {mode === 'create' ? 'Neue Charge' : mode === 'edit' ? 'Charge bearbeiten' : 'Charge anzeigen'}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Chargenverwaltung mit KI-Analyse und n8n Workflow-Integration\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n          \r\n          <Stack direction=\"row\" spacing={1}>\r\n            <Tooltip title=\"Chargennummer generieren\">\r\n              <IconButton onClick={generateChargeNumber} color=\"primary\">\r\n                <RefreshIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Tooltip title=\"n8n Workflows\">\r\n              <IconButton onClick={() => setWorkflowDialogOpen(true)} color=\"secondary\">\r\n                <TimelineIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Stack>\r\n        </Box>\r\n\r\n        <form onSubmit={handleSubmit(handleFormSubmit)}>\r\n          {/* Tabs */}\r\n          <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\r\n            <Tabs value={activeTab} onChange={(e, newValue) => setActiveTab(newValue)}>\r\n              {tabs.map((tab, index) => (\r\n                <Tab\r\n                  key={index}\r\n                  label={tab.label}\r\n                  icon={tab.icon}\r\n                  iconPosition=\"start\"\r\n                  sx={{ minHeight: 64 }}\r\n                />\r\n              ))}\r\n            </Tabs>\r\n          </Box>\r\n\r\n          {/* Tab Content */}\r\n          {activeTab === 0 && (\r\n            <Grid container spacing={3}>\r\n              {/* Chargennummer */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"charge_number\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Chargennummer *\"\r\n                      fullWidth\r\n                      error={!!errors.charge_number}\r\n                      helperText={errors.charge_number?.message}\r\n                      InputProps={{\r\n                        startAdornment: <QrCodeIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Artikelnummer */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"article_number\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <ArticleAutocomplete\r\n                      label=\"Artikelnummer *\"\r\n                      value={field.value}\r\n                      onChange={(value) => field.onChange(value)}\r\n                      error={!!errors.article_number}\r\n                      helperText={errors.article_number?.message}\r\n                      onLoadOptions={async (query) => {\r\n                        // Mock data - in Produktion durch echte API ersetzen\r\n                        const mockArticles = [\r\n                          { id: '1', value: 'ART001', label: 'ART001 - Sojaschrot Premium', type: 'article' as const, metadata: { category: 'Futtermittel' } },\r\n                          { id: '2', value: 'ART002', label: 'ART002 - Weizenkleie', type: 'article' as const, metadata: { category: 'Futtermittel' } },\r\n                          { id: '3', value: 'ART003', label: 'ART003 - Maiskleber', type: 'article' as const, metadata: { category: 'Futtermittel' } },\r\n                        ];\r\n                        return mockArticles.filter(a => \r\n                          a.label.toLowerCase().includes(query.toLowerCase()) ||\r\n                          a.value.toLowerCase().includes(query.toLowerCase())\r\n                        );\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Artikelname */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"article_name\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <ArticleAutocomplete\r\n                      label=\"Artikelname *\"\r\n                      value={field.value}\r\n                      onChange={(value) => field.onChange(value)}\r\n                      error={!!errors.article_name}\r\n                      helperText={errors.article_name?.message}\r\n                      onLoadOptions={async (query) => {\r\n                        // Mock data - in Produktion durch echte API ersetzen\r\n                        const mockArticleNames = [\r\n                          { id: '1', value: 'Sojaschrot Premium', label: 'Sojaschrot Premium', type: 'article' as const, metadata: { category: 'Futtermittel', protein: '45%' } },\r\n                          { id: '2', value: 'Weizenkleie', label: 'Weizenkleie', type: 'article' as const, metadata: { category: 'Futtermittel', protein: '15%' } },\r\n                          { id: '3', value: 'Maiskleber', label: 'Maiskleber', type: 'article' as const, metadata: { category: 'Futtermittel', protein: '60%' } },\r\n                        ];\r\n                        return mockArticleNames.filter(a => \r\n                          a.label.toLowerCase().includes(query.toLowerCase())\r\n                        );\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Lieferantennummer */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"supplier_number\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <SupplierAutocomplete\r\n                      label=\"Lieferantennummer *\"\r\n                      value={field.value}\r\n                      onChange={(value) => field.onChange(value)}\r\n                      error={!!errors.supplier_number}\r\n                      helperText={errors.supplier_number?.message}\r\n                      onLoadOptions={async (query) => {\r\n                        // Mock data - in Produktion durch echte API ersetzen\r\n                        const mockSuppliers = [\r\n                          { id: '1', value: 'L001', label: 'L001 - Agrarhandel GmbH', type: 'supplier' as const, metadata: { category: 'Landhandel' } },\r\n                          { id: '2', value: 'L002', label: 'L002 - Futtermittel AG', type: 'supplier' as const, metadata: { category: 'Futtermittel' } },\r\n                          { id: '3', value: 'L003', label: 'L003 - Dünger & Co KG', type: 'supplier' as const, metadata: { category: 'Düngemittel' } },\r\n                        ];\r\n                        return mockSuppliers.filter(s => \r\n                          s.label.toLowerCase().includes(query.toLowerCase()) ||\r\n                          s.value.toLowerCase().includes(query.toLowerCase())\r\n                        );\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Lieferantenname */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"supplier_name\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Lieferantenname *\"\r\n                      fullWidth\r\n                      error={!!errors.supplier_name}\r\n                      helperText={errors.supplier_name?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Produktionsdatum */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"production_date\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Produktionsdatum *\"\r\n                      type=\"date\"\r\n                      fullWidth\r\n                      error={!!errors.production_date}\r\n                      helperText={errors.production_date?.message}\r\n                      InputLabelProps={{ shrink: true }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Verfallsdatum */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"expiry_date\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Verfallsdatum *\"\r\n                      type=\"date\"\r\n                      fullWidth\r\n                      error={!!errors.expiry_date}\r\n                      helperText={errors.expiry_date?.message}\r\n                      InputLabelProps={{ shrink: true }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Chargengröße */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"batch_size\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Chargengröße *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.batch_size}\r\n                      helperText={errors.batch_size?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Einheit */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"unit\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.unit}>\r\n                      <InputLabel>Einheit *</InputLabel>\r\n                      <Select {...field} label=\"Einheit *\">\r\n                        {mockUnits.map((unit) => (\r\n                          <MenuItem key={unit.value} value={unit.value}>\r\n                            {unit.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                      {errors.unit && (\r\n                        <FormHelperText>{errors.unit.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Einkaufspreis */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"purchase_price\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Einkaufspreis *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.purchase_price}\r\n                      helperText={errors.purchase_price?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                      InputProps={{\r\n                        startAdornment: <PaymentIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Währung */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"currency\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.currency}>\r\n                      <InputLabel>Währung *</InputLabel>\r\n                      <Select {...field} label=\"Währung *\">\r\n                        <MenuItem value=\"EUR\">EUR (Euro)</MenuItem>\r\n                        <MenuItem value=\"USD\">USD (US-Dollar)</MenuItem>\r\n                        <MenuItem value=\"CHF\">CHF (Schweizer Franken)</MenuItem>\r\n                      </Select>\r\n                      {errors.currency && (\r\n                        <FormHelperText>{errors.currency.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 1 && (\r\n            <Grid container spacing={3}>\r\n              {/* Qualitätsstatus */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"quality_status\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.quality_status}>\r\n                      <InputLabel>Qualitätsstatus *</InputLabel>\r\n                      <Select {...field} label=\"Qualitätsstatus *\">\r\n                        {mockQualityStatuses.map((status) => (\r\n                          <MenuItem key={status.value} value={status.value}>\r\n                            <Chip\r\n                              label={status.label}\r\n                              size=\"small\"\r\n                              color={status.color as any}\r\n                              sx={{ mr: 1 }}\r\n                            />\r\n                            {status.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                      {errors.quality_status && (\r\n                        <FormHelperText>{errors.quality_status.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* VLOG/GMO Status */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"vlog_gmo_status\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.vlog_gmo_status}>\r\n                      <InputLabel>VLOG/GMO Status *</InputLabel>\r\n                      <Select {...field} label=\"VLOG/GMO Status *\">\r\n                        {mockVlogGmoStatuses.map((status) => (\r\n                          <MenuItem key={status.value} value={status.value}>\r\n                            <Chip\r\n                              label={status.label}\r\n                              size=\"small\"\r\n                              color={status.color as any}\r\n                              sx={{ mr: 1 }}\r\n                            />\r\n                            {status.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                      {errors.vlog_gmo_status && (\r\n                        <FormHelperText>{errors.vlog_gmo_status.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Qualitäts-Flags */}\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                  Qualitäts-Eigenschaften\r\n                </Typography>\r\n                <Stack direction=\"row\" spacing={3}>\r\n                  <Controller\r\n                    name=\"qs_milk_relevant\"\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Switch\r\n                            checked={field.value}\r\n                            onChange={field.onChange}\r\n                            color=\"primary\"\r\n                          />\r\n                        }\r\n                        label=\"QS Milch relevant\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Controller\r\n                    name=\"eudr_compliant\"\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Switch\r\n                            checked={field.value}\r\n                            onChange={field.onChange}\r\n                            color=\"success\"\r\n                          />\r\n                        }\r\n                        label=\"EUDR konform\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Controller\r\n                    name=\"sustainability_rapeseed\"\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Switch\r\n                            checked={field.value}\r\n                            onChange={field.onChange}\r\n                            color=\"info\"\r\n                          />\r\n                        }\r\n                        label=\"Nachhaltiger Raps\"\r\n                      />\r\n                    )}\r\n                  />\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 2 && (\r\n            <Grid container spacing={3}>\r\n              {/* Proteingehalt */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"protein_content\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Proteingehalt (%)\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.protein_content}\r\n                      helperText={errors.protein_content?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Fettgehalt */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"fat_content\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Fettgehalt (%)\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.fat_content}\r\n                      helperText={errors.fat_content?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Feuchtigkeitsgehalt */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"moisture_content\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Feuchtigkeitsgehalt (%)\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.moisture_content}\r\n                      helperText={errors.moisture_content?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Aschegehalt */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"ash_content\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Aschegehalt (%)\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.ash_content}\r\n                      helperText={errors.ash_content?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 3 && (\r\n            <Grid container spacing={3}>\r\n              {/* Lagerort */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"warehouse_location\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Lagerort *\"\r\n                      fullWidth\r\n                      error={!!errors.warehouse_location}\r\n                      helperText={errors.warehouse_location?.message}\r\n                      InputProps={{\r\n                        startAdornment: <ShippingIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Lagerbedingungen */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"storage_conditions\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.storage_conditions}>\r\n                      <InputLabel>Lagerbedingungen *</InputLabel>\r\n                      <Select {...field} label=\"Lagerbedingungen *\">\r\n                        {mockStorageConditions.map((condition) => (\r\n                          <MenuItem key={condition.value} value={condition.value}>\r\n                            {condition.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                      {errors.storage_conditions && (\r\n                        <FormHelperText>{errors.storage_conditions.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 4 && (\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                  Zertifikate und Dokumente\r\n                </Typography>\r\n                <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                  Zertifikate können über das n8n Workflow-System automatisch verarbeitet werden.\r\n                </Alert>\r\n                <TableContainer component={Paper}>\r\n                  <Table>\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>Typ</TableCell>\r\n                        <TableCell>Dateiname</TableCell>\r\n                        <TableCell>Upload-Datum</TableCell>\r\n                        <TableCell>Gültig bis</TableCell>\r\n                        <TableCell>Aktionen</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {watch('certificates')?.map((cert, index) => (\r\n                        <TableRow key={index}>\r\n                          <TableCell>{cert.type}</TableCell>\r\n                          <TableCell>{cert.filename}</TableCell>\r\n                          <TableCell>{new Date(cert.upload_date).toLocaleDateString()}</TableCell>\r\n                          <TableCell>\r\n                            {cert.valid_until ? new Date(cert.valid_until).toLocaleDateString() : '-'}\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            <IconButton size=\"small\" color=\"primary\">\r\n                              <ViewIcon />\r\n                            </IconButton>\r\n                            <IconButton size=\"small\" color=\"error\">\r\n                              <DeleteIcon />\r\n                            </IconButton>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 5 && (\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                  KI-Analyse und Vorhersagen\r\n                </Typography>\r\n                <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                  Die KI-Analyse wird automatisch durchgeführt und basiert auf historischen Daten und Qualitätsparametern.\r\n                </Alert>\r\n              </Grid>\r\n\r\n              {/* Risiko-Score */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"ki_analysis.risk_score\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Risiko-Score (0-100)\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.ki_analysis?.risk_score}\r\n                      helperText={errors.ki_analysis?.risk_score?.message}\r\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Qualitätsvorhersage */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"ki_analysis.quality_prediction\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.ki_analysis?.quality_prediction}>\r\n                      <InputLabel>Qualitätsvorhersage</InputLabel>\r\n                      <Select {...field} label=\"Qualitätsvorhersage\">\r\n                        <MenuItem value=\"excellent\">\r\n                          <Chip label=\"Ausgezeichnet\" color=\"success\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Ausgezeichnet\r\n                        </MenuItem>\r\n                        <MenuItem value=\"good\">\r\n                          <Chip label=\"Gut\" color=\"primary\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Gut\r\n                        </MenuItem>\r\n                        <MenuItem value=\"average\">\r\n                          <Chip label=\"Durchschnittlich\" color=\"warning\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Durchschnittlich\r\n                        </MenuItem>\r\n                        <MenuItem value=\"poor\">\r\n                          <Chip label=\"Schlecht\" color=\"error\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Schlecht\r\n                        </MenuItem>\r\n                      </Select>\r\n                      {errors.ki_analysis?.quality_prediction && (\r\n                        <FormHelperText>{errors.ki_analysis.quality_prediction.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Haltbarkeitsvorhersage */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"ki_analysis.shelf_life_prediction\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Haltbarkeitsvorhersage (Tage)\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.ki_analysis?.shelf_life_prediction}\r\n                      helperText={errors.ki_analysis?.shelf_life_prediction?.message}\r\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Anomalie-Erkennung */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"ki_analysis.anomaly_detection\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Switch\r\n                          checked={field.value}\r\n                          onChange={field.onChange}\r\n                          color=\"warning\"\r\n                        />\r\n                      }\r\n                      label=\"Anomalie erkannt\"\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Trend-Analyse */}\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  name=\"ki_analysis.trend_analysis\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Trend-Analyse\"\r\n                      multiline\r\n                      rows={3}\r\n                      fullWidth\r\n                      error={!!errors.ki_analysis?.trend_analysis}\r\n                      helperText={errors.ki_analysis?.trend_analysis?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 6 && (\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                  Workflow-Status und Automatisierung\r\n                </Typography>\r\n                <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                  Der Workflow wird über n8n gesteuert und automatisiert die Chargenverarbeitung.\r\n                </Alert>\r\n              </Grid>\r\n\r\n              {/* Workflow-Status */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"workflow_status\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.workflow_status}>\r\n                      <InputLabel>Workflow-Status *</InputLabel>\r\n                      <Select {...field} label=\"Workflow-Status *\">\r\n                        <MenuItem value=\"draft\">\r\n                          <Chip label=\"Entwurf\" color=\"default\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Entwurf\r\n                        </MenuItem>\r\n                        <MenuItem value=\"in_review\">\r\n                          <Chip label=\"In Prüfung\" color=\"warning\" size=\"small\" sx={{ mr: 1 }} />\r\n                          In Prüfung\r\n                        </MenuItem>\r\n                        <MenuItem value=\"approved\">\r\n                          <Chip label=\"Genehmigt\" color=\"success\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Genehmigt\r\n                        </MenuItem>\r\n                        <MenuItem value=\"rejected\">\r\n                          <Chip label=\"Abgelehnt\" color=\"error\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Abgelehnt\r\n                        </MenuItem>\r\n                        <MenuItem value=\"archived\">\r\n                          <Chip label=\"Archiviert\" color=\"default\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Archiviert\r\n                        </MenuItem>\r\n                      </Select>\r\n                      {errors.workflow_status && (\r\n                        <FormHelperText>{errors.workflow_status.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Workflow-Schritte */}\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"subtitle1\" fontWeight={600} mb={2}>\r\n                  Workflow-Schritte\r\n                </Typography>\r\n                <TableContainer component={Paper}>\r\n                  <Table>\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>Schritt</TableCell>\r\n                        <TableCell>Status</TableCell>\r\n                        <TableCell>Ausgeführt von</TableCell>\r\n                        <TableCell>Ausgeführt am</TableCell>\r\n                        <TableCell>Notizen</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {watch('workflow_steps')?.map((step, index) => (\r\n                        <TableRow key={index}>\r\n                          <TableCell>{step.step}</TableCell>\r\n                          <TableCell>\r\n                            <Chip\r\n                              label={step.status === 'completed' ? 'Abgeschlossen' : \r\n                                    step.status === 'pending' ? 'Ausstehend' : 'Fehlgeschlagen'}\r\n                              color={step.status === 'completed' ? 'success' : \r\n                                     step.status === 'pending' ? 'warning' : 'error'}\r\n                              size=\"small\"\r\n                            />\r\n                          </TableCell>\r\n                          <TableCell>{step.completed_by || '-'}</TableCell>\r\n                          <TableCell>\r\n                            {step.completed_at ? new Date(step.completed_at).toLocaleString() : '-'}\r\n                          </TableCell>\r\n                          <TableCell>{step.notes || '-'}</TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {/* Form Actions */}\r\n          <Box display=\"flex\" justifyContent=\"flex-end\" gap={2} mt={4}>\r\n            <NeuroFlowButton\r\n              variant=\"outlined\"\r\n              onClick={handleCancel}\r\n              disabled={submitLoading}\r\n              startIcon={<CancelIcon />}\r\n            >\r\n              Abbrechen\r\n            </NeuroFlowButton>\r\n            <NeuroFlowButton\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              disabled={submitLoading || loading}\r\n              startIcon={submitLoading ? <CircularProgress size={20} /> : <SaveIcon />}\r\n            >\r\n              {submitLoading ? 'Speichern...' : 'Charge speichern'}\r\n            </NeuroFlowButton>\r\n          </Box>\r\n        </form>\r\n\r\n        {/* n8n Workflow Dialog */}\r\n        <Dialog\r\n          open={workflowDialogOpen}\r\n          onClose={() => setWorkflowDialogOpen(false)}\r\n          maxWidth=\"md\"\r\n          fullWidth\r\n        >\r\n          <DialogTitle>\r\n            <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n              <TimelineIcon color=\"primary\" />\r\n              n8n Workflows\r\n            </Box>\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <TableContainer component={Paper}>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Name</TableCell>\r\n                    <TableCell>Status</TableCell>\r\n                    <TableCell>Trigger</TableCell>\r\n                    <TableCell>Nodes</TableCell>\r\n                    <TableCell>Letzte Ausführung</TableCell>\r\n                    <TableCell>Aktionen</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {n8nWorkflows.map((workflow) => (\r\n                    <TableRow key={workflow.id}>\r\n                      <TableCell>{workflow.name}</TableCell>\r\n                      <TableCell>\r\n                        <Chip\r\n                          label={workflow.status === 'active' ? 'Aktiv' : 'Inaktiv'}\r\n                          color={workflow.status === 'active' ? 'success' : 'default'}\r\n                          size=\"small\"\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>{workflow.trigger}</TableCell>\r\n                      <TableCell>{workflow.nodes}</TableCell>\r\n                      <TableCell>\r\n                        {workflow.lastExecution ? new Date(workflow.lastExecution).toLocaleString() : '-'}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                                                  <IconButton\r\n                            size=\"small\"\r\n                            color=\"primary\"\r\n                            onClick={() => {\r\n                              setSelectedWorkflow(workflow);\r\n                              // Hier könnte man den Workflow auslösen\r\n                            }}\r\n                          >\r\n                            <PlayArrowIcon />\r\n                          </IconButton>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={() => setWorkflowDialogOpen(false)}>Schließen</Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </CardContent>\r\n    </NeuroFlowCard>\r\n  );\r\n};\r\n\r\nexport default NeuroFlowChargenverwaltung; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\neuroflow\\NeuroFlowCustomerForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Skeleton' is defined but never used. Allowed unused vars must match /^_/u.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InvoiceIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":41,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":191,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6209,6212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6209,6212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":318,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":318,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10348,10351],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10348,10351],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'field' is defined but never used. Allowed unused args must match /^_/u.","line":668,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":668,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":853,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":853,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29492,29495],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29492,29495],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 🧠 NeuroFlow Customer Form\r\n * KI-first, responsive-first Kundenstammdaten-Formular für ERP-Systeme\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormHelperText,\r\n  Chip,\r\n  Divider,\r\n  Stack,\r\n  IconButton,\r\n  Tooltip,\r\n  Skeleton,\r\n  CircularProgress,\r\n  Tabs,\r\n  Tab,\r\n  Alert,\r\n} from '@mui/material';\r\nimport {\r\n  Save as SaveIcon,\r\n  Cancel as CancelIcon,\r\n  Refresh as RefreshIcon,\r\n  Person as PersonIcon,\r\n  Business as BusinessIcon,\r\n  Email as EmailIcon,\r\n  Phone as PhoneIcon,\r\n  LocationOn as LocationIcon,\r\n  AccountBalance as BankIcon,\r\n  Receipt as InvoiceIcon,\r\n  Settings as SettingsIcon,\r\n} from '@mui/icons-material';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { z } from 'zod';\r\nimport { styled } from '@mui/material/styles';\r\n\r\n// Styled Components\r\nconst NeuroFlowCard = styled(Card)(({ theme }) => ({\r\n  borderRadius: theme.shape.borderRadius * 2,\r\n  boxShadow: theme.shadows[1],\r\n  border: `1px solid ${theme.palette.divider}`,\r\n  transition: 'all 0.3s ease-in-out',\r\n  '&:hover': {\r\n    boxShadow: theme.shadows[4],\r\n  },\r\n}));\r\n\r\nconst NeuroFlowButton = styled(Button)(({ theme }) => ({\r\n  borderRadius: theme.shape.borderRadius * 1.5,\r\n  textTransform: 'none',\r\n  fontWeight: 600,\r\n  padding: '0.75rem 1.5rem',\r\n  transition: 'all 0.3s ease-in-out',\r\n  '&:hover': {\r\n    transform: 'translateY(-1px)',\r\n    boxShadow: theme.shadows[3],\r\n  },\r\n}));\r\n\r\n// Zod Schema für Kundenstammdaten\r\nconst CustomerSchema = z.object({\r\n  // Grunddaten\r\n  customer_number: z.string().min(1, 'Kundennummer ist erforderlich'),\r\n  company_name: z.string().min(2, 'Firmenname muss mindestens 2 Zeichen lang sein'),\r\n  legal_form: z.enum(['GmbH', 'AG', 'KG', 'OHG', 'Einzelunternehmen', 'Gbr', 'e.V.', 'Sonstige']),\r\n  tax_number: z.string().optional(),\r\n  vat_number: z.string().optional(),\r\n  \r\n  // Kontaktdaten\r\n  contact_person: z.string().min(1, 'Ansprechpartner ist erforderlich'),\r\n  email: z.string().email('Ungültige E-Mail-Adresse'),\r\n  phone: z.string().min(1, 'Telefonnummer ist erforderlich'),\r\n  fax: z.string().optional(),\r\n  website: z.string().url('Ungültige Website-URL').optional().or(z.literal('')),\r\n  \r\n  // Adressdaten\r\n  street: z.string().min(1, 'Straße ist erforderlich'),\r\n  house_number: z.string().min(1, 'Hausnummer ist erforderlich'),\r\n  postal_code: z.string().min(5, 'PLZ muss mindestens 5 Zeichen lang sein'),\r\n  city: z.string().min(1, 'Stadt ist erforderlich'),\r\n  country: z.string().min(1, 'Land ist erforderlich'),\r\n  \r\n  // Bankdaten\r\n  bank_name: z.string().optional(),\r\n  iban: z.string().optional(),\r\n  bic: z.string().optional(),\r\n  account_holder: z.string().optional(),\r\n  \r\n  // Geschäftsdaten\r\n  industry: z.enum(['Handel', 'Handwerk', 'Dienstleistung', 'Industrie', 'IT', 'Medizin', 'Bildung', 'Sonstige']),\r\n  customer_type: z.enum(['Privatkunde', 'Geschäftskunde', 'Großkunde', 'VIP-Kunde']),\r\n  credit_limit: z.number().min(0, 'Kreditlimit darf nicht negativ sein'),\r\n  payment_terms: z.number().min(0, 'Zahlungsziel darf nicht negativ sein'),\r\n  discount_percentage: z.number().min(0, 'Rabatt darf nicht negativ sein').max(100, 'Rabatt darf nicht über 100% sein'),\r\n  \r\n  // Status\r\n  status: z.enum(['active', 'inactive', 'blocked', 'prospect']),\r\n  notes: z.string().optional(),\r\n  \r\n  // ERP-spezifische Felder\r\n  sales_rep: z.string().optional(),\r\n  price_group: z.enum(['Standard', 'Großkunde', 'VIP', 'Mengenrabatt']),\r\n  delivery_address_same: z.boolean().default(true),\r\n  \r\n  // Lieferadresse (falls abweichend)\r\n  delivery_street: z.string().optional(),\r\n  delivery_house_number: z.string().optional(),\r\n  delivery_postal_code: z.string().optional(),\r\n  delivery_city: z.string().optional(),\r\n  delivery_country: z.string().optional(),\r\n});\r\n\r\ntype CustomerFormData = z.infer<typeof CustomerSchema>;\r\n\r\n// Mock Data\r\nconst mockLegalForms = [\r\n  { value: 'GmbH', label: 'GmbH' },\r\n  { value: 'AG', label: 'Aktiengesellschaft (AG)' },\r\n  { value: 'KG', label: 'Kommanditgesellschaft (KG)' },\r\n  { value: 'OHG', label: 'Offene Handelsgesellschaft (OHG)' },\r\n  { value: 'Einzelunternehmen', label: 'Einzelunternehmen' },\r\n  { value: 'Gbr', label: 'Gesellschaft bürgerlichen Rechts (GbR)' },\r\n  { value: 'e.V.', label: 'Eingetragener Verein (e.V.)' },\r\n  { value: 'Sonstige', label: 'Sonstige' },\r\n];\r\n\r\nconst mockIndustries = [\r\n  { value: 'Handel', label: 'Handel' },\r\n  { value: 'Handwerk', label: 'Handwerk' },\r\n  { value: 'Dienstleistung', label: 'Dienstleistung' },\r\n  { value: 'Industrie', label: 'Industrie' },\r\n  { value: 'IT', label: 'Informationstechnologie' },\r\n  { value: 'Medizin', label: 'Medizin & Gesundheit' },\r\n  { value: 'Bildung', label: 'Bildung' },\r\n  { value: 'Sonstige', label: 'Sonstige' },\r\n];\r\n\r\nconst mockCustomerTypes = [\r\n  { value: 'Privatkunde', label: 'Privatkunde', color: 'default' },\r\n  { value: 'Geschäftskunde', label: 'Geschäftskunde', color: 'primary' },\r\n  { value: 'Großkunde', label: 'Großkunde', color: 'secondary' },\r\n  { value: 'VIP-Kunde', label: 'VIP-Kunde', color: 'success' },\r\n];\r\n\r\nconst mockPriceGroups = [\r\n  { value: 'Standard', label: 'Standard' },\r\n  { value: 'Großkunde', label: 'Großkunde' },\r\n  { value: 'VIP', label: 'VIP' },\r\n  { value: 'Mengenrabatt', label: 'Mengenrabatt' },\r\n];\r\n\r\n// NeuroFlow Customer Form Component\r\ninterface NeuroFlowCustomerFormProps {\r\n  initialData?: Partial<CustomerFormData>;\r\n  onSubmit?: (data: CustomerFormData) => Promise<void>;\r\n  onCancel?: () => void;\r\n  loading?: boolean;\r\n  mode?: 'create' | 'edit';\r\n}\r\n\r\nexport const NeuroFlowCustomerForm: React.FC<NeuroFlowCustomerFormProps> = ({\r\n  initialData,\r\n  onSubmit,\r\n  onCancel,\r\n  loading = false,\r\n  mode = 'create',\r\n}) => {\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const [submitLoading, setSubmitLoading] = useState(false);\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors, isDirty },\r\n    reset,\r\n    watch,\r\n    setValue,\r\n  } = useForm<CustomerFormData>({\r\n    resolver: zodResolver(CustomerSchema) as any,\r\n    defaultValues: {\r\n      customer_number: '',\r\n      company_name: '',\r\n      legal_form: 'GmbH',\r\n      tax_number: '',\r\n      vat_number: '',\r\n      contact_person: '',\r\n      email: '',\r\n      phone: '',\r\n      fax: '',\r\n      website: '',\r\n      street: '',\r\n      house_number: '',\r\n      postal_code: '',\r\n      city: '',\r\n      country: 'Deutschland',\r\n      bank_name: '',\r\n      iban: '',\r\n      bic: '',\r\n      account_holder: '',\r\n      industry: 'Dienstleistung',\r\n      customer_type: 'Geschäftskunde',\r\n      credit_limit: 0,\r\n      payment_terms: 30,\r\n      discount_percentage: 0,\r\n      status: 'active',\r\n      notes: '',\r\n      sales_rep: '',\r\n      price_group: 'Standard',\r\n      delivery_address_same: true,\r\n      delivery_street: '',\r\n      delivery_house_number: '',\r\n      delivery_postal_code: '',\r\n      delivery_city: '',\r\n      delivery_country: 'Deutschland',\r\n      ...initialData,\r\n    },\r\n  });\r\n\r\n  const watchedDeliveryAddressSame = watch('delivery_address_same');\r\n  const watchedStreet = watch('street');\r\n  const watchedHouseNumber = watch('house_number');\r\n  const watchedPostalCode = watch('postal_code');\r\n  const watchedCity = watch('city');\r\n  const watchedCountry = watch('country');\r\n\r\n  // Auto-fill delivery address if same as billing\r\n  useEffect(() => {\r\n    if (watchedDeliveryAddressSame) {\r\n      setValue('delivery_street', watchedStreet);\r\n      setValue('delivery_house_number', watchedHouseNumber);\r\n      setValue('delivery_postal_code', watchedPostalCode);\r\n      setValue('delivery_city', watchedCity);\r\n      setValue('delivery_country', watchedCountry);\r\n    }\r\n  }, [watchedDeliveryAddressSame, watchedStreet, watchedHouseNumber, watchedPostalCode, watchedCity, watchedCountry, setValue]);\r\n\r\n  const handleFormSubmit = async (data: CustomerFormData) => {\r\n    setSubmitLoading(true);\r\n    try {\r\n      if (onSubmit) {\r\n        await onSubmit(data);\r\n      }\r\n      console.log('Customer saved:', data);\r\n    } catch (error) {\r\n      console.error('Error saving customer:', error);\r\n    } finally {\r\n      setSubmitLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    if (isDirty) {\r\n      if (window.confirm('Änderungen verwerfen?')) {\r\n        reset();\r\n        onCancel?.();\r\n      }\r\n    } else {\r\n      onCancel?.();\r\n    }\r\n  };\r\n\r\n  const generateCustomerNumber = () => {\r\n    const date = new Date();\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');\r\n    const customerNumber = `K${year}${month}-${random}`;\r\n    setValue('customer_number', customerNumber);\r\n  };\r\n\r\n  const tabs = [\r\n    { label: 'Grunddaten', icon: <PersonIcon /> },\r\n    { label: 'Kontaktdaten', icon: <EmailIcon /> },\r\n    { label: 'Adressdaten', icon: <LocationIcon /> },\r\n    { label: 'Bankdaten', icon: <BankIcon /> },\r\n    { label: 'Geschäftsdaten', icon: <BusinessIcon /> },\r\n    { label: 'Notizen', icon: <SettingsIcon /> },\r\n  ];\r\n\r\n  return (\r\n    <NeuroFlowCard>\r\n      <CardContent>\r\n        {/* Header */}\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={3}>\r\n          <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n            <PersonIcon color=\"primary\" sx={{ fontSize: 32 }} />\r\n            <Box>\r\n              <Typography variant=\"h5\" fontWeight={600} color=\"text.primary\">\r\n                {mode === 'create' ? 'Neuer Kunde' : 'Kunde bearbeiten'}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Erstellen Sie einen neuen Kundenstammsatz mit allen erforderlichen Informationen\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n          \r\n          <Stack direction=\"row\" spacing={1}>\r\n            <Tooltip title=\"Kundennummer generieren\">\r\n              <IconButton onClick={generateCustomerNumber} color=\"primary\">\r\n                <RefreshIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Stack>\r\n        </Box>\r\n\r\n        <form onSubmit={handleSubmit(handleFormSubmit as any)}>\r\n          {/* Tabs */}\r\n          <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\r\n            <Tabs value={activeTab} onChange={(e, newValue) => setActiveTab(newValue)}>\r\n              {tabs.map((tab, index) => (\r\n                <Tab\r\n                  key={index}\r\n                  label={tab.label}\r\n                  icon={tab.icon}\r\n                  iconPosition=\"start\"\r\n                  sx={{ minHeight: 64 }}\r\n                />\r\n              ))}\r\n            </Tabs>\r\n          </Box>\r\n\r\n          {/* Tab Content */}\r\n          {activeTab === 0 && (\r\n            <Grid container spacing={3}>\r\n              {/* Kundennummer */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"customer_number\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Kundennummer *\"\r\n                      fullWidth\r\n                      error={!!errors.customer_number}\r\n                      helperText={errors.customer_number?.message}\r\n                      InputProps={{\r\n                        startAdornment: <PersonIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Firmenname */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"company_name\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Firmenname *\"\r\n                      fullWidth\r\n                      error={!!errors.company_name}\r\n                      helperText={errors.company_name?.message}\r\n                      InputProps={{\r\n                        startAdornment: <BusinessIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Rechtsform */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"legal_form\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.legal_form}>\r\n                      <InputLabel>Rechtsform *</InputLabel>\r\n                      <Select {...field} label=\"Rechtsform *\">\r\n                        {mockLegalForms.map((form) => (\r\n                          <MenuItem key={form.value} value={form.value}>\r\n                            {form.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                      {errors.legal_form && (\r\n                        <FormHelperText>{errors.legal_form.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Branche */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"industry\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.industry}>\r\n                      <InputLabel>Branche *</InputLabel>\r\n                      <Select {...field} label=\"Branche *\">\r\n                        {mockIndustries.map((industry) => (\r\n                          <MenuItem key={industry.value} value={industry.value}>\r\n                            {industry.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                      {errors.industry && (\r\n                        <FormHelperText>{errors.industry.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Steuernummer */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"tax_number\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Steuernummer\"\r\n                      fullWidth\r\n                      error={!!errors.tax_number}\r\n                      helperText={errors.tax_number?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* USt-ID */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"vat_number\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"USt-ID\"\r\n                      fullWidth\r\n                      error={!!errors.vat_number}\r\n                      helperText={errors.vat_number?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 1 && (\r\n            <Grid container spacing={3}>\r\n              {/* Ansprechpartner */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"contact_person\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Ansprechpartner *\"\r\n                      fullWidth\r\n                      error={!!errors.contact_person}\r\n                      helperText={errors.contact_person?.message}\r\n                      InputProps={{\r\n                        startAdornment: <PersonIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* E-Mail */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"email\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"E-Mail *\"\r\n                      type=\"email\"\r\n                      fullWidth\r\n                      error={!!errors.email}\r\n                      helperText={errors.email?.message}\r\n                      InputProps={{\r\n                        startAdornment: <EmailIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Telefon */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"phone\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Telefon *\"\r\n                      fullWidth\r\n                      error={!!errors.phone}\r\n                      helperText={errors.phone?.message}\r\n                      InputProps={{\r\n                        startAdornment: <PhoneIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Fax */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"fax\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Fax\"\r\n                      fullWidth\r\n                      error={!!errors.fax}\r\n                      helperText={errors.fax?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Website */}\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  name=\"website\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Website\"\r\n                      fullWidth\r\n                      error={!!errors.website}\r\n                      helperText={errors.website?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 2 && (\r\n            <Grid container spacing={3}>\r\n              {/* Rechnungsadresse */}\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                  Rechnungsadresse\r\n                </Typography>\r\n              </Grid>\r\n\r\n              {/* Straße */}\r\n              <Grid item xs={12} md={8}>\r\n                <Controller\r\n                  name=\"street\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Straße *\"\r\n                      fullWidth\r\n                      error={!!errors.street}\r\n                      helperText={errors.street?.message}\r\n                      InputProps={{\r\n                        startAdornment: <LocationIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Hausnummer */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"house_number\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Hausnummer *\"\r\n                      fullWidth\r\n                      error={!!errors.house_number}\r\n                      helperText={errors.house_number?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* PLZ */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"postal_code\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"PLZ *\"\r\n                      fullWidth\r\n                      error={!!errors.postal_code}\r\n                      helperText={errors.postal_code?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Stadt */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"city\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Stadt *\"\r\n                      fullWidth\r\n                      error={!!errors.city}\r\n                      helperText={errors.city?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Land */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"country\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Land *\"\r\n                      fullWidth\r\n                      error={!!errors.country}\r\n                      helperText={errors.country?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Lieferadresse */}\r\n              <Grid item xs={12}>\r\n                <Divider sx={{ my: 3 }} />\r\n                <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                  Lieferadresse\r\n                </Typography>\r\n              </Grid>\r\n\r\n              {/* Lieferadresse gleich wie Rechnungsadresse */}\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  name=\"delivery_address_same\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                      Lieferadresse ist identisch mit Rechnungsadresse\r\n                    </Alert>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {!watchedDeliveryAddressSame && (\r\n                <>\r\n                  <Grid item xs={12} md={8}>\r\n                    <Controller\r\n                      name=\"delivery_street\"\r\n                      control={control}\r\n                      render={({ field }) => (\r\n                        <TextField\r\n                          {...field}\r\n                          label=\"Lieferstraße\"\r\n                          fullWidth\r\n                          error={!!errors.delivery_street}\r\n                          helperText={errors.delivery_street?.message}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} md={4}>\r\n                    <Controller\r\n                      name=\"delivery_house_number\"\r\n                      control={control}\r\n                      render={({ field }) => (\r\n                        <TextField\r\n                          {...field}\r\n                          label=\"Liefer-Hausnummer\"\r\n                          fullWidth\r\n                          error={!!errors.delivery_house_number}\r\n                          helperText={errors.delivery_house_number?.message}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} md={4}>\r\n                    <Controller\r\n                      name=\"delivery_postal_code\"\r\n                      control={control}\r\n                      render={({ field }) => (\r\n                        <TextField\r\n                          {...field}\r\n                          label=\"Liefer-PLZ\"\r\n                          fullWidth\r\n                          error={!!errors.delivery_postal_code}\r\n                          helperText={errors.delivery_postal_code?.message}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} md={4}>\r\n                    <Controller\r\n                      name=\"delivery_city\"\r\n                      control={control}\r\n                      render={({ field }) => (\r\n                        <TextField\r\n                          {...field}\r\n                          label=\"Liefer-Stadt\"\r\n                          fullWidth\r\n                          error={!!errors.delivery_city}\r\n                          helperText={errors.delivery_city?.message}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} md={4}>\r\n                    <Controller\r\n                      name=\"delivery_country\"\r\n                      control={control}\r\n                      render={({ field }) => (\r\n                        <TextField\r\n                          {...field}\r\n                          label=\"Liefer-Land\"\r\n                          fullWidth\r\n                          error={!!errors.delivery_country}\r\n                          helperText={errors.delivery_country?.message}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Grid>\r\n                </>\r\n              )}\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 3 && (\r\n            <Grid container spacing={3}>\r\n              {/* Bankname */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"bank_name\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Bankname\"\r\n                      fullWidth\r\n                      error={!!errors.bank_name}\r\n                      helperText={errors.bank_name?.message}\r\n                      InputProps={{\r\n                        startAdornment: <BankIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Kontoinhaber */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"account_holder\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Kontoinhaber\"\r\n                      fullWidth\r\n                      error={!!errors.account_holder}\r\n                      helperText={errors.account_holder?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* IBAN */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"iban\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"IBAN\"\r\n                      fullWidth\r\n                      error={!!errors.iban}\r\n                      helperText={errors.iban?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* BIC */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"bic\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"BIC\"\r\n                      fullWidth\r\n                      error={!!errors.bic}\r\n                      helperText={errors.bic?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 4 && (\r\n            <Grid container spacing={3}>\r\n              {/* Kundentyp */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"customer_type\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.customer_type}>\r\n                      <InputLabel>Kundentyp *</InputLabel>\r\n                      <Select {...field} label=\"Kundentyp *\">\r\n                        {mockCustomerTypes.map((type) => (\r\n                          <MenuItem key={type.value} value={type.value}>\r\n                            <Chip\r\n                              label={type.label}\r\n                              size=\"small\"\r\n                              color={type.color as any}\r\n                              sx={{ mr: 1 }}\r\n                            />\r\n                            {type.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                      {errors.customer_type && (\r\n                        <FormHelperText>{errors.customer_type.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Preiskategorie */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"price_group\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.price_group}>\r\n                      <InputLabel>Preiskategorie *</InputLabel>\r\n                      <Select {...field} label=\"Preiskategorie *\">\r\n                        {mockPriceGroups.map((group) => (\r\n                          <MenuItem key={group.value} value={group.value}>\r\n                            {group.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                      {errors.price_group && (\r\n                        <FormHelperText>{errors.price_group.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Kreditlimit */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"credit_limit\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Kreditlimit (€)\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.credit_limit}\r\n                      helperText={errors.credit_limit?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Zahlungsziel */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"payment_terms\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Zahlungsziel (Tage)\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.payment_terms}\r\n                      helperText={errors.payment_terms?.message}\r\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Rabatt */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"discount_percentage\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Rabatt (%)\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.discount_percentage}\r\n                      helperText={errors.discount_percentage?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Status */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"status\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.status}>\r\n                      <InputLabel>Status *</InputLabel>\r\n                      <Select {...field} label=\"Status *\">\r\n                        <MenuItem value=\"active\">\r\n                          <Chip label=\"Aktiv\" color=\"success\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Aktiv\r\n                        </MenuItem>\r\n                        <MenuItem value=\"inactive\">\r\n                          <Chip label=\"Inaktiv\" color=\"default\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Inaktiv\r\n                        </MenuItem>\r\n                        <MenuItem value=\"blocked\">\r\n                          <Chip label=\"Gesperrt\" color=\"error\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Gesperrt\r\n                        </MenuItem>\r\n                        <MenuItem value=\"prospect\">\r\n                          <Chip label=\"Interessent\" color=\"warning\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Interessent\r\n                        </MenuItem>\r\n                      </Select>\r\n                      {errors.status && (\r\n                        <FormHelperText>{errors.status.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Vertriebsmitarbeiter */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"sales_rep\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Vertriebsmitarbeiter\"\r\n                      fullWidth\r\n                      error={!!errors.sales_rep}\r\n                      helperText={errors.sales_rep?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 5 && (\r\n            <Grid container spacing={3}>\r\n              {/* Notizen */}\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  name=\"notes\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Notizen\"\r\n                      multiline\r\n                      rows={6}\r\n                      fullWidth\r\n                      error={!!errors.notes}\r\n                      helperText={errors.notes?.message}\r\n                      placeholder=\"Zusätzliche Informationen, Besonderheiten, etc.\"\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {/* Form Actions */}\r\n          <Box display=\"flex\" justifyContent=\"flex-end\" gap={2} mt={4}>\r\n            <NeuroFlowButton\r\n              variant=\"outlined\"\r\n              onClick={handleCancel}\r\n              disabled={submitLoading}\r\n              startIcon={<CancelIcon />}\r\n            >\r\n              Abbrechen\r\n            </NeuroFlowButton>\r\n            <NeuroFlowButton\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              disabled={submitLoading || loading}\r\n              startIcon={submitLoading ? <CircularProgress size={20} /> : <SaveIcon />}\r\n            >\r\n              {submitLoading ? 'Speichern...' : 'Kunde speichern'}\r\n            </NeuroFlowButton>\r\n          </Box>\r\n        </form>\r\n      </CardContent>\r\n    </NeuroFlowCard>\r\n  );\r\n};\r\n\r\nexport default NeuroFlowCustomerForm; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\neuroflow\\NeuroFlowDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Divider' is defined but never used. Allowed unused vars must match /^_/u.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Badge' is defined but never used. Allowed unused vars must match /^_/u.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Avatar' is defined but never used. Allowed unused vars must match /^_/u.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LinearProgress' is defined but never used. Allowed unused vars must match /^_/u.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ShippingIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":38,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StopIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":44,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'QrCodeIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":51,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SecurityIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":52,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DescriptionIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":53,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PersonIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":54,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BankIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":55,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LocationIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":56,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'trackComponentLoad' is defined but never used. Allowed unused vars must match /^_/u.","line":63,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3227,3230],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3227,3230],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setServices' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":174,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":174,"endColumn":31},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'trackDashboardLoad'. Either include it or remove the dependency array.","line":255,"column":6,"nodeType":"ArrayExpression","endLine":255,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [trackDashboardLoad]","fix":{"range":[7627,7629],"text":"[trackDashboardLoad]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 🧠 NeuroFlow Dashboard\r\n * KI-first Dashboard mit integrierten NeuroFlow-Komponenten\r\n * Autocomplete, Chargenverwaltung, Lieferantenstammdaten und Workflow-Integration\r\n */\r\n\r\nimport React, { useState, useEffect, Suspense, lazy } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Grid,\r\n  Tabs,\r\n  Tab,\r\n  Button,\r\n  Chip,\r\n  Stack,\r\n  IconButton,\r\n  Tooltip,\r\n  Alert,\r\n  CircularProgress,\r\n  Divider,\r\n  Paper,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemIcon,\r\n  ListItemSecondaryAction,\r\n  Badge,\r\n  Avatar,\r\n  LinearProgress,\r\n} from '@mui/material';\r\nimport {\r\n  Dashboard as DashboardIcon,\r\n  Science as ScienceIcon,\r\n  Business as BusinessIcon,\r\n  LocalShipping as ShippingIcon,\r\n  Assessment as AssessmentIcon,\r\n  Settings as SettingsIcon,\r\n  Add as AddIcon,\r\n  Refresh as RefreshIcon,\r\n  PlayArrow as PlayArrowIcon,\r\n  Stop as StopIcon,\r\n  CheckCircle as CheckCircleIcon,\r\n  Warning as WarningIcon,\r\n  Error as ErrorIcon,\r\n  Info as InfoIcon,\r\n  Timeline as TimelineIcon,\r\n  AutoGraph as AutoGraphIcon,\r\n  QrCode as QrCodeIcon,\r\n  Security as SecurityIcon,\r\n  Description as DescriptionIcon,\r\n  Person as PersonIcon,\r\n  AccountBalance as BankIcon,\r\n  LocationOn as LocationIcon,\r\n  Logout as LogoutIcon,\r\n  Route as RouteIcon,\r\n  Receipt as ReceiptIcon,\r\n} from '@mui/icons-material';\r\nimport { styled } from '@mui/material/styles';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport { trackComponentLoad } from '../../utils/performance';\r\n\r\n// Lazy Loading für alle Subkomponenten\r\nconst NeuroFlowSupplierForm = lazy(() => import('./NeuroFlowSupplierForm').then(module => ({ default: module.NeuroFlowSupplierForm })));\r\nconst NeuroFlowChargenverwaltung = lazy(() => import('./NeuroFlowChargenverwaltung').then(module => ({ default: module.NeuroFlowChargenverwaltung })));\r\nconst NeuroFlowAutocomplete = lazy(() => import('./NeuroFlowAutocomplete').then(module => ({ default: module.NeuroFlowAutocomplete })));\r\nconst StreckengeschaeftPage = lazy(() => import('../../pages/StreckengeschaeftPage').then(module => ({ default: module.StreckengeschaeftPage })));\r\nconst EInvoicingPage = lazy(() => import('../e-invoicing/EInvoicingPage'));\r\nconst POSPage = lazy(() => import('../../pages/POS/POSPage'));\r\nconst DailyReportPage = lazy(() => import('../../pages/POS/DailyReportPage'));\r\n\r\n// Loading Component für Subkomponenten\r\nconst ComponentLoader: React.FC<{ componentName: string }> = ({ componentName }) => (\r\n  <Box\r\n    sx={{\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      minHeight: '200px',\r\n      flexDirection: 'column',\r\n      gap: 2\r\n    }}\r\n  >\r\n    <CircularProgress size={40} />\r\n    <Typography variant=\"body2\" color=\"text.secondary\">\r\n      {componentName} wird geladen...\r\n    </Typography>\r\n  </Box>\r\n);\r\n\r\n// Styled Components\r\nconst DashboardCard = styled(Card)(({ theme }) => ({\r\n  borderRadius: theme.shape.borderRadius * 2,\r\n  boxShadow: theme.shadows[1],\r\n  border: `1px solid ${theme.palette.divider}`,\r\n  transition: 'all 0.3s ease-in-out',\r\n  '&:hover': {\r\n    boxShadow: theme.shadows[4],\r\n    transform: 'translateY(-2px)',\r\n  },\r\n}));\r\n\r\nconst StatusChip = styled(Chip)(({ theme }: { theme: any }) => ({\r\n  borderRadius: theme.shape.borderRadius * 1.5,\r\n  fontWeight: 600,\r\n  '&.MuiChip-colorSuccess': {\r\n    backgroundColor: theme.palette.success.light,\r\n    color: theme.palette.success.contrastText,\r\n  },\r\n  '&.MuiChip-colorWarning': {\r\n    backgroundColor: theme.palette.warning.light,\r\n    color: theme.palette.warning.contrastText,\r\n  },\r\n  '&.MuiChip-colorError': {\r\n    backgroundColor: theme.palette.error.light,\r\n    color: theme.palette.error.contrastText,\r\n  },\r\n  '&.MuiChip-colorInfo': {\r\n    backgroundColor: theme.palette.info.light,\r\n    color: theme.palette.info.contrastText,\r\n  },\r\n}));\r\n\r\n// Dashboard Stats Interface\r\ninterface DashboardStats {\r\n  totalCharges: number;\r\n  pendingCharges: number;\r\n  approvedCharges: number;\r\n  quarantinedCharges: number;\r\n  totalSuppliers: number;\r\n  activeSuppliers: number;\r\n  totalArticles: number;\r\n  lowStockArticles: number;\r\n  workflowExecutions: number;\r\n  successfulWorkflows: number;\r\n  failedWorkflows: number;\r\n  kiAnalysisCount: number;\r\n  averageProcessingTime: number;\r\n}\r\n\r\n// Service Status Interface\r\ninterface ServiceStatus {\r\n  name: string;\r\n  status: 'online' | 'offline' | 'warning';\r\n  url: string;\r\n  responseTime: number;\r\n  lastCheck: Date;\r\n  description: string;\r\n}\r\n\r\n// NeuroFlow Dashboard Component\r\nexport const NeuroFlowDashboard: React.FC = () => {\r\n  const { user, logout } = useAuth();\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const [showSupplierForm, setShowSupplierForm] = useState(false);\r\n  const [showChargeForm, setShowChargeForm] = useState(false);\r\n  const [stats, setStats] = useState<DashboardStats>({\r\n    totalCharges: 0,\r\n    pendingCharges: 0,\r\n    approvedCharges: 0,\r\n    quarantinedCharges: 0,\r\n    totalSuppliers: 0,\r\n    activeSuppliers: 0,\r\n    totalArticles: 0,\r\n    lowStockArticles: 0,\r\n    workflowExecutions: 0,\r\n    successfulWorkflows: 0,\r\n    failedWorkflows: 0,\r\n    kiAnalysisCount: 0,\r\n    averageProcessingTime: 0,\r\n  });\r\n  const [services, setServices] = useState<ServiceStatus[]>([\r\n    {\r\n      name: 'n8n Workflow Engine',\r\n      status: 'online',\r\n      url: 'http://localhost:5678',\r\n      responseTime: 120,\r\n      lastCheck: new Date(),\r\n      description: 'Workflow-Automatisierung und KI-Integration',\r\n    },\r\n    {\r\n      name: 'MCP Resource Server',\r\n      status: 'online',\r\n      url: 'http://localhost:8001',\r\n      responseTime: 85,\r\n      lastCheck: new Date(),\r\n      description: 'Model Context Protocol für KI-Kommunikation',\r\n    },\r\n    {\r\n      name: 'Autocomplete API',\r\n      status: 'online',\r\n      url: 'http://localhost:8003',\r\n      responseTime: 45,\r\n      lastCheck: new Date(),\r\n      description: 'Intelligente Autocomplete-Funktionalität',\r\n    },\r\n    {\r\n      name: 'PostgreSQL Database',\r\n      status: 'online',\r\n      url: 'localhost:5432',\r\n      responseTime: 12,\r\n      lastCheck: new Date(),\r\n      description: 'Hauptdatenbank für Stammdaten',\r\n    },\r\n  ]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Performance Tracking - Fix für endlose Render-Schleife\r\n  const trackDashboardLoad = React.useCallback(() => {\r\n    const startTime = performance.now();\r\n    return () => {\r\n      const loadEnd = performance.now();\r\n      const loadDuration = loadEnd - startTime;\r\n      console.log(`🧠 NeuroFlowDashboard geladen in ${loadDuration.toFixed(2)}ms`);\r\n    };\r\n  }, []);\r\n\r\n  // Mock data loading\r\n  useEffect(() => {\r\n    const loadDashboardData = async () => {\r\n      setLoading(true);\r\n      const trackLoad = trackDashboardLoad();\r\n      \r\n      try {\r\n        // Simuliere API-Aufrufe\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        \r\n        setStats({\r\n          totalCharges: 1247,\r\n          pendingCharges: 23,\r\n          approvedCharges: 1189,\r\n          quarantinedCharges: 35,\r\n          totalSuppliers: 89,\r\n          activeSuppliers: 76,\r\n          totalArticles: 456,\r\n          lowStockArticles: 12,\r\n          workflowExecutions: 2341,\r\n          successfulWorkflows: 2218,\r\n          failedWorkflows: 123,\r\n          kiAnalysisCount: 1897,\r\n          averageProcessingTime: 2.3,\r\n        });\r\n      } catch (error) {\r\n        console.error('Error loading dashboard data:', error);\r\n      } finally {\r\n        setLoading(false);\r\n        // Track component load completion\r\n        trackLoad();\r\n      }\r\n    };\r\n\r\n    loadDashboardData();\r\n  }, []); // Leeres Dependency-Array - lädt nur einmal beim Mount\r\n\r\n  // Tab configuration\r\n  const tabs = [\r\n    { label: 'Übersicht', icon: <DashboardIcon /> },\r\n    { label: 'Kassensystem', icon: <ReceiptIcon /> },\r\n    { label: 'Tagesjournal', icon: <AssessmentIcon /> },\r\n    { label: 'Streckengeschäfte', icon: <RouteIcon /> },\r\n    { label: 'E-Invoicing', icon: <ReceiptIcon /> },\r\n    { label: 'Chargenverwaltung', icon: <ScienceIcon /> },\r\n    { label: 'Lieferantenstammdaten', icon: <BusinessIcon /> },\r\n    { label: 'Workflows', icon: <TimelineIcon /> },\r\n    { label: 'KI-Analysen', icon: <AutoGraphIcon /> },\r\n    { label: 'Services', icon: <SettingsIcon /> },\r\n  ];\r\n\r\n  // Get status color\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'online': return 'success';\r\n      case 'warning': return 'warning';\r\n      case 'offline': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  // Get status icon\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'online': return <CheckCircleIcon color=\"success\" />;\r\n      case 'warning': return <WarningIcon color=\"warning\" />;\r\n      case 'offline': return <ErrorIcon color=\"error\" />;\r\n      default: return <InfoIcon color=\"action\" />;\r\n    }\r\n  };\r\n\r\n  const handleLogout = async () => {\r\n    try {\r\n      await logout();\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex', minHeight: '100vh' }}>\r\n      {/* Sidebar */}\r\n      <Box\r\n        sx={{\r\n          width: 280,\r\n          backgroundColor: 'background.paper',\r\n          borderRight: 1,\r\n          borderColor: 'divider',\r\n          display: 'flex',\r\n          flexDirection: 'column'\r\n        }}\r\n      >\r\n        {/* Header */}\r\n        <Box sx={{ p: 3, borderBottom: 1, borderColor: 'divider' }}>\r\n          <Typography variant=\"h6\" component=\"h1\" gutterBottom>\r\n            VALEO NeuroERP\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            {user?.full_name} ({user?.role})\r\n          </Typography>\r\n        </Box>\r\n\r\n        {/* Navigation */}\r\n        <Box sx={{ flex: 1, p: 2 }}>\r\n          <List>\r\n            {tabs.map((tab, index) => (\r\n              <ListItem\r\n                key={index}\r\n                button\r\n                onClick={() => setActiveTab(index)}\r\n                selected={activeTab === index}\r\n              >\r\n                <ListItemIcon>{tab.icon}</ListItemIcon>\r\n                <ListItemText primary={tab.label} />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Box>\r\n\r\n        {/* Logout Button */}\r\n        <Box sx={{ p: 2, borderTop: 1, borderColor: 'divider' }}>\r\n          <Button\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            onClick={handleLogout}\r\n            startIcon={<LogoutIcon />}\r\n          >\r\n            Abmelden\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Main Content */}\r\n      <Box sx={{ flex: 1, p: 3 }}>\r\n        {/* Header */}\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={3}>\r\n          <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n            <AutoGraphIcon color=\"primary\" sx={{ fontSize: 40 }} />\r\n            <Box>\r\n              <Typography variant=\"h4\" fontWeight={700} color=\"text.primary\">\r\n                VALEO NeuroERP Dashboard\r\n              </Typography>\r\n              <Typography variant=\"body1\" color=\"text.secondary\">\r\n                KI-first ERP-System mit intelligenter Workflow-Automatisierung\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n          \r\n          <Stack direction=\"row\" spacing={2}>\r\n            <Tooltip title=\"Daten aktualisieren\">\r\n              <IconButton onClick={() => window.location.reload()} color=\"primary\">\r\n                <RefreshIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Stack>\r\n        </Box>\r\n\r\n        {/* Tabs */}\r\n        <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\r\n          <Tabs value={activeTab} onChange={(e, newValue) => setActiveTab(newValue)}>\r\n            {tabs.map((tab, index) => (\r\n              <Tab\r\n                key={index}\r\n                label={tab.label}\r\n                icon={tab.icon}\r\n                iconPosition=\"start\"\r\n                sx={{ minHeight: 64 }}\r\n              />\r\n            ))}\r\n          </Tabs>\r\n        </Box>\r\n\r\n        {/* Tab Content */}\r\n        {activeTab === 0 && (\r\n          <Grid container spacing={3}>\r\n            {/* Stats Cards */}\r\n            <Grid item xs={12} md={3}>\r\n              <DashboardCard>\r\n                <CardContent>\r\n                  <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                    <Box>\r\n                      <Typography variant=\"h4\" fontWeight={700} color=\"primary\">\r\n                        {stats.totalCharges}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Gesamte Chargen\r\n                      </Typography>\r\n                    </Box>\r\n                    <ScienceIcon color=\"primary\" sx={{ fontSize: 40 }} />\r\n                  </Box>\r\n                  <Stack direction=\"row\" spacing={1} mt={2}>\r\n                    <StatusChip label={`${stats.approvedCharges} Genehmigt`} color=\"success\" size=\"small\" />\r\n                    <StatusChip label={`${stats.pendingCharges} Ausstehend`} color=\"warning\" size=\"small\" />\r\n                    <StatusChip label={`${stats.quarantinedCharges} Quarantäne`} color=\"error\" size=\"small\" />\r\n                  </Stack>\r\n                </CardContent>\r\n              </DashboardCard>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={3}>\r\n              <DashboardCard>\r\n                <CardContent>\r\n                  <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                    <Box>\r\n                      <Typography variant=\"h4\" fontWeight={700} color=\"secondary\">\r\n                        {stats.totalSuppliers}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Lieferanten\r\n                      </Typography>\r\n                    </Box>\r\n                    <BusinessIcon color=\"secondary\" sx={{ fontSize: 40 }} />\r\n                  </Box>\r\n                  <Stack direction=\"row\" spacing={1} mt={2}>\r\n                    <StatusChip label={`${stats.activeSuppliers} Aktiv`} color=\"success\" size=\"small\" />\r\n                    <StatusChip label={`${stats.totalSuppliers - stats.activeSuppliers} Inaktiv`} color=\"default\" size=\"small\" />\r\n                  </Stack>\r\n                </CardContent>\r\n              </DashboardCard>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={3}>\r\n              <DashboardCard>\r\n                <CardContent>\r\n                  <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                    <Box>\r\n                      <Typography variant=\"h4\" fontWeight={700} color=\"info\">\r\n                        {stats.workflowExecutions}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Workflow-Ausführungen\r\n                      </Typography>\r\n                    </Box>\r\n                    <TimelineIcon color=\"info\" sx={{ fontSize: 40 }} />\r\n                  </Box>\r\n                  <Stack direction=\"row\" spacing={1} mt={2}>\r\n                    <StatusChip label={`${stats.successfulWorkflows} Erfolgreich`} color=\"success\" size=\"small\" />\r\n                    <StatusChip label={`${stats.failedWorkflows} Fehlgeschlagen`} color=\"error\" size=\"small\" />\r\n                  </Stack>\r\n                </CardContent>\r\n              </DashboardCard>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={3}>\r\n              <DashboardCard>\r\n                <CardContent>\r\n                  <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                    <Box>\r\n                      <Typography variant=\"h4\" fontWeight={700} color=\"warning\">\r\n                        {stats.kiAnalysisCount}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        KI-Analysen\r\n                      </Typography>\r\n                    </Box>\r\n                    <AutoGraphIcon color=\"warning\" sx={{ fontSize: 40 }} />\r\n                  </Box>\r\n                  <Stack direction=\"row\" spacing={1} mt={2}>\r\n                    <StatusChip label={`${stats.averageProcessingTime}s Durchschnitt`} color=\"info\" size=\"small\" />\r\n                  </Stack>\r\n                </CardContent>\r\n              </DashboardCard>\r\n            </Grid>\r\n\r\n            {/* Quick Actions */}\r\n            <Grid item xs={12}>\r\n              <DashboardCard>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                    Schnellaktionen\r\n                  </Typography>\r\n                  <Stack direction=\"row\" spacing={2}>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      startIcon={<AddIcon />}\r\n                      onClick={() => setShowChargeForm(true)}\r\n                    >\r\n                      Neue Charge erstellen\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      startIcon={<AddIcon />}\r\n                      onClick={() => setShowSupplierForm(true)}\r\n                    >\r\n                      Neuen Lieferanten anlegen\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      startIcon={<PlayArrowIcon />}\r\n                    >\r\n                      Workflow ausführen\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      startIcon={<AutoGraphIcon />}\r\n                    >\r\n                      KI-Analyse starten\r\n                    </Button>\r\n                  </Stack>\r\n                </CardContent>\r\n              </DashboardCard>\r\n            </Grid>\r\n\r\n            {/* Recent Activity */}\r\n            <Grid item xs={12} md={6}>\r\n              <DashboardCard>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                    Letzte Aktivitäten\r\n                  </Typography>\r\n                  <List dense>\r\n                    <ListItem>\r\n                      <ListItemIcon>\r\n                        <CheckCircleIcon color=\"success\" />\r\n                      </ListItemIcon>\r\n                      <ListItemText\r\n                        primary=\"Charge CH20240701001 genehmigt\"\r\n                        secondary=\"Vor 5 Minuten\"\r\n                      />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemIcon>\r\n                        <WarningIcon color=\"warning\" />\r\n                      </ListItemIcon>\r\n                      <ListItemText\r\n                        primary=\"Charge CH20240702001 in Quarantäne\"\r\n                        secondary=\"Vor 12 Minuten\"\r\n                      />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemIcon>\r\n                        <AutoGraphIcon color=\"info\" />\r\n                      </ListItemIcon>\r\n                      <ListItemText\r\n                        primary=\"KI-Analyse für Sojaschrot abgeschlossen\"\r\n                        secondary=\"Vor 18 Minuten\"\r\n                      />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemIcon>\r\n                        <BusinessIcon color=\"primary\" />\r\n                      </ListItemIcon>\r\n                      <ListItemText\r\n                        primary=\"Neuer Lieferant 'Agrarhandel GmbH' angelegt\"\r\n                        secondary=\"Vor 25 Minuten\"\r\n                      />\r\n                    </ListItem>\r\n                  </List>\r\n                </CardContent>\r\n              </DashboardCard>\r\n            </Grid>\r\n\r\n            {/* Service Status */}\r\n            <Grid item xs={12} md={6}>\r\n              <DashboardCard>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                    Service-Status\r\n                  </Typography>\r\n                  <List dense>\r\n                    {services.map((service, index) => (\r\n                      <ListItem key={index}>\r\n                        <ListItemIcon>\r\n                          {getStatusIcon(service.status)}\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                          primary={service.name}\r\n                          secondary={`${service.responseTime}ms • ${service.description}`}\r\n                        />\r\n                        <ListItemSecondaryAction>\r\n                          <StatusChip\r\n                            label={service.status}\r\n                            color={getStatusColor(service.status)}\r\n                            size=\"small\"\r\n                          />\r\n                        </ListItemSecondaryAction>\r\n                      </ListItem>\r\n                    ))}\r\n                  </List>\r\n                </CardContent>\r\n              </DashboardCard>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n\r\n        {activeTab === 1 && (\r\n          <Box>\r\n            <Suspense fallback={<ComponentLoader componentName=\"Kassensystem\" />}>\r\n              <POSPage />\r\n            </Suspense>\r\n          </Box>\r\n        )}\r\n\r\n        {activeTab === 2 && (\r\n          <Box>\r\n            <Suspense fallback={<ComponentLoader componentName=\"Tagesjournal\" />}>\r\n              <DailyReportPage />\r\n            </Suspense>\r\n          </Box>\r\n        )}\r\n\r\n        {activeTab === 3 && (\r\n          <Box>\r\n            <Suspense fallback={<ComponentLoader componentName=\"Streckengeschäft\" />}>\r\n              <StreckengeschaeftPage />\r\n            </Suspense>\r\n          </Box>\r\n        )}\r\n\r\n        {activeTab === 4 && (\r\n          <Box>\r\n            <Suspense fallback={<ComponentLoader componentName=\"E-Invoicing\" />}>\r\n              <EInvoicingPage />\r\n            </Suspense>\r\n          </Box>\r\n        )}\r\n\r\n        {activeTab === 5 && (\r\n          <Box>\r\n            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={3}>\r\n              <Typography variant=\"h5\" fontWeight={600}>\r\n                Chargenverwaltung\r\n              </Typography>\r\n              <Button\r\n                variant=\"contained\"\r\n                startIcon={<AddIcon />}\r\n                onClick={() => setShowChargeForm(true)}\r\n              >\r\n                Neue Charge\r\n              </Button>\r\n            </Box>\r\n            <Suspense fallback={<ComponentLoader componentName=\"Chargenverwaltung\" />}>\r\n              <NeuroFlowChargenverwaltung />\r\n            </Suspense>\r\n          </Box>\r\n        )}\r\n\r\n        {activeTab === 6 && (\r\n          <Box>\r\n            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={3}>\r\n              <Typography variant=\"h5\" fontWeight={600}>\r\n                Lieferantenstammdaten\r\n              </Typography>\r\n              <Button\r\n                variant=\"contained\"\r\n                startIcon={<AddIcon />}\r\n                onClick={() => setShowSupplierForm(true)}\r\n              >\r\n                Neuer Lieferant\r\n              </Button>\r\n            </Box>\r\n            <Alert severity=\"info\" sx={{ mb: 3 }}>\r\n              Verwenden Sie die Autocomplete-Funktionalität für schnelle Eingabe und intelligente Vorschläge.\r\n            </Alert>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} md={6}>\r\n                <DashboardCard>\r\n                  <CardContent>\r\n                    <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                      Lieferanten-Suche\r\n                    </Typography>\r\n                    <Suspense fallback={<ComponentLoader componentName=\"Autocomplete\" />}>\r\n                      <NeuroFlowAutocomplete\r\n                        label=\"Lieferant suchen\"\r\n                        value=\"\"\r\n                        onChange={(value) => console.log('Selected:', value)}\r\n                        type=\"supplier\"\r\n                        placeholder=\"Lieferantenname oder -nummer eingeben...\"\r\n                        onLoadOptions={async (query) => {\r\n                          // Mock data\r\n                          const mockSuppliers = [\r\n                            { id: '1', value: 'L001', label: 'L001 - Agrarhandel GmbH', type: 'supplier' as const, metadata: { category: 'Landhandel' } },\r\n                            { id: '2', value: 'L002', label: 'L002 - Futtermittel AG', type: 'supplier' as const, metadata: { category: 'Futtermittel' } },\r\n                            { id: '3', value: 'L003', label: 'L003 - Dünger & Co KG', type: 'supplier' as const, metadata: { category: 'Düngemittel' } },\r\n                          ];\r\n                          return mockSuppliers.filter(s => \r\n                            s.label.toLowerCase().includes(query.toLowerCase())\r\n                          );\r\n                        }}\r\n                      />\r\n                    </Suspense>\r\n                  </CardContent>\r\n                </DashboardCard>\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <DashboardCard>\r\n                  <CardContent>\r\n                    <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                      Artikel-Suche\r\n                    </Typography>\r\n                    <Suspense fallback={<ComponentLoader componentName=\"Autocomplete\" />}>\r\n                      <NeuroFlowAutocomplete\r\n                        label=\"Artikel suchen\"\r\n                        value=\"\"\r\n                        onChange={(value) => console.log('Selected:', value)}\r\n                        type=\"article\"\r\n                        placeholder=\"Artikelnummer oder -name eingeben...\"\r\n                        onLoadOptions={async (query) => {\r\n                          // Mock data\r\n                          const mockArticles = [\r\n                            { id: '1', value: 'ART001', label: 'ART001 - Sojaschrot Premium', type: 'article' as const, metadata: { category: 'Futtermittel' } },\r\n                            { id: '2', value: 'ART002', label: 'ART002 - Weizenkleie', type: 'article' as const, metadata: { category: 'Futtermittel' } },\r\n                            { id: '3', value: 'ART003', label: 'ART003 - Maiskleber', type: 'article' as const, metadata: { category: 'Futtermittel' } },\r\n                          ];\r\n                          return mockArticles.filter(a => \r\n                            a.label.toLowerCase().includes(query.toLowerCase())\r\n                          );\r\n                        }}\r\n                      />\r\n                    </Suspense>\r\n                  </CardContent>\r\n                </DashboardCard>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        )}\r\n\r\n        {activeTab === 7 && (\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <DashboardCard>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                    n8n Workflow-Engine\r\n                  </Typography>\r\n                  <Alert severity=\"success\" sx={{ mb: 2 }}>\r\n                    n8n Workflow-Engine läuft auf Port 5678\r\n                  </Alert>\r\n                  <Stack direction=\"row\" spacing={2}>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      startIcon={<PlayArrowIcon />}\r\n                      href=\"http://localhost:5678\"\r\n                      target=\"_blank\"\r\n                    >\r\n                      n8n Dashboard öffnen\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      startIcon={<RefreshIcon />}\r\n                    >\r\n                      Workflows aktualisieren\r\n                    </Button>\r\n                  </Stack>\r\n                </CardContent>\r\n              </DashboardCard>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n\r\n        {activeTab === 8 && (\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <DashboardCard>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                    KI-Analysen Übersicht\r\n                  </Typography>\r\n                  <Grid container spacing={2}>\r\n                    <Grid item xs={12} md={4}>\r\n                      <Paper sx={{ p: 2, textAlign: 'center' }}>\r\n                        <Typography variant=\"h4\" color=\"success.main\">\r\n                          {stats.kiAnalysisCount}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          Durchgeführte KI-Analysen\r\n                        </Typography>\r\n                      </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={4}>\r\n                      <Paper sx={{ p: 2, textAlign: 'center' }}>\r\n                        <Typography variant=\"h4\" color=\"info.main\">\r\n                          {stats.averageProcessingTime}s\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          Durchschnittliche Verarbeitungszeit\r\n                        </Typography>\r\n                      </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={4}>\r\n                      <Paper sx={{ p: 2, textAlign: 'center' }}>\r\n                        <Typography variant=\"h4\" color=\"warning.main\">\r\n                          98.5%\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          Genauigkeit der KI-Vorhersagen\r\n                        </Typography>\r\n                      </Paper>\r\n                    </Grid>\r\n                  </Grid>\r\n                </CardContent>\r\n              </DashboardCard>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n\r\n        {activeTab === 9 && (\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <DashboardCard>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                    Service-Monitoring\r\n                  </Typography>\r\n                  <List>\r\n                    {services.map((service, index) => (\r\n                      <ListItem key={index}>\r\n                        <ListItemIcon>\r\n                          {getStatusIcon(service.status)}\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                          primary={service.name}\r\n                          secondary={\r\n                            <Box>\r\n                              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                {service.description}\r\n                              </Typography>\r\n                              <Typography variant=\"caption\" color=\"text.secondary\">\r\n                                URL: {service.url} • Response Time: {service.responseTime}ms\r\n                              </Typography>\r\n                            </Box>\r\n                          }\r\n                        />\r\n                        <ListItemSecondaryAction>\r\n                          <Stack direction=\"row\" spacing={1}>\r\n                            <StatusChip\r\n                              label={service.status}\r\n                              color={getStatusColor(service.status)}\r\n                            />\r\n                            <IconButton size=\"small\">\r\n                              <RefreshIcon />\r\n                            </IconButton>\r\n                          </Stack>\r\n                        </ListItemSecondaryAction>\r\n                      </ListItem>\r\n                    ))}\r\n                  </List>\r\n                </CardContent>\r\n              </DashboardCard>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n\r\n        {/* Modals */}\r\n        {showSupplierForm && (\r\n          <Box\r\n            sx={{\r\n              position: 'fixed',\r\n              top: 0,\r\n              left: 0,\r\n              right: 0,\r\n              bottom: 0,\r\n              backgroundColor: 'rgba(0,0,0,0.5)',\r\n              zIndex: 1300,\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              p: 2,\r\n            }}\r\n          >\r\n            <Box sx={{ maxWidth: 1200, width: '100%', maxHeight: '90vh', overflow: 'auto' }}>\r\n              <Suspense fallback={<ComponentLoader componentName=\"Lieferantenformular\" />}>\r\n                <NeuroFlowSupplierForm\r\n                  onCancel={() => setShowSupplierForm(false)}\r\n                  onSubmit={async (data) => {\r\n                    console.log('Supplier saved:', data);\r\n                    setShowSupplierForm(false);\r\n                  }}\r\n                />\r\n              </Suspense>\r\n            </Box>\r\n          </Box>\r\n        )}\r\n\r\n        {showChargeForm && (\r\n          <Box\r\n            sx={{\r\n              position: 'fixed',\r\n              top: 0,\r\n              left: 0,\r\n              right: 0,\r\n              bottom: 0,\r\n              backgroundColor: 'rgba(0,0,0,0.5)',\r\n              zIndex: 1300,\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              p: 2,\r\n            }}\r\n          >\r\n            <Box sx={{ maxWidth: 1400, width: '100%', maxHeight: '90vh', overflow: 'auto' }}>\r\n              <Suspense fallback={<ComponentLoader componentName=\"Chargenverwaltung\" />}>\r\n                <NeuroFlowChargenverwaltung />\r\n              </Suspense>\r\n            </Box>\r\n          </Box>\r\n        )}\r\n\r\n        {/* Loading Overlay */}\r\n        {loading && (\r\n          <Box\r\n            sx={{\r\n              position: 'fixed',\r\n              top: 0,\r\n              left: 0,\r\n              right: 0,\r\n              bottom: 0,\r\n              backgroundColor: 'rgba(0,0,0,0.3)',\r\n              zIndex: 1400,\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n            }}\r\n          >\r\n            <CircularProgress size={60} />\r\n          </Box>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default NeuroFlowDashboard; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\neuroflow\\NeuroFlowInvoiceForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Alert' is defined but never used. Allowed unused vars must match /^_/u.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Skeleton' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":418,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":418,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14084,14087],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14084,14087],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 🧠 NeuroFlow Invoice Form\r\n * KI-first, responsive-first Rechnungsformular mit MCP-Integration\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormHelperText,\r\n  Alert,\r\n  Chip,\r\n  Divider,\r\n  Stack,\r\n  IconButton,\r\n  Tooltip,\r\n  Skeleton,\r\n  CircularProgress,\r\n} from '@mui/material';\r\nimport {\r\n  Save as SaveIcon,\r\n  Cancel as CancelIcon,\r\n  Refresh as RefreshIcon,\r\n  Receipt as ReceiptIcon,\r\n  Person as PersonIcon,\r\n  Euro as EuroIcon,\r\n  CalendarToday as CalendarIcon,\r\n  Description as DescriptionIcon,\r\n} from '@mui/icons-material';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { z } from 'zod';\r\nimport { styled } from '@mui/material/styles';\r\n\r\n// Styled Components\r\nconst NeuroFlowCard = styled(Card)(({ theme }) => ({\r\n  borderRadius: theme.shape.borderRadius * 2,\r\n  boxShadow: theme.shadows[1],\r\n  border: `1px solid ${theme.palette.divider}`,\r\n  transition: 'all 0.3s ease-in-out',\r\n  '&:hover': {\r\n    boxShadow: theme.shadows[4],\r\n  },\r\n}));\r\n\r\nconst NeuroFlowButton = styled(Button)(({ theme }) => ({\r\n  borderRadius: theme.shape.borderRadius * 1.5,\r\n  textTransform: 'none',\r\n  fontWeight: 600,\r\n  padding: '0.75rem 1.5rem',\r\n  transition: 'all 0.3s ease-in-out',\r\n  '&:hover': {\r\n    transform: 'translateY(-1px)',\r\n    boxShadow: theme.shadows[3],\r\n  },\r\n}));\r\n\r\n// Zod Schema basierend auf MCP Schema\r\nconst InvoiceSchema = z.object({\r\n  customer_id: z.string().min(1, 'Kunde ist erforderlich'),\r\n  invoice_number: z.string().min(1, 'Rechnungsnummer ist erforderlich'),\r\n  invoice_date: z.string().min(1, 'Rechnungsdatum ist erforderlich'),\r\n  due_date: z.string().min(1, 'Fälligkeitsdatum ist erforderlich'),\r\n  amount: z.number().positive('Betrag muss positiv sein'),\r\n  tax_rate: z.number().min(0, 'Steuersatz darf nicht negativ sein').max(100, 'Steuersatz darf nicht über 100% sein'),\r\n  description: z.string().min(1, 'Beschreibung ist erforderlich'),\r\n  status: z.enum(['draft', 'sent', 'paid', 'overdue', 'cancelled']),\r\n  payment_terms: z.string().optional(),\r\n  notes: z.string().optional(),\r\n});\r\n\r\ntype InvoiceFormData = z.infer<typeof InvoiceSchema>;\r\n\r\n// Mock Data für MCP Integration\r\nconst mockCustomers = [\r\n  { id: '1', name: 'Max Mustermann GmbH', email: 'max@mustermann.de' },\r\n  { id: '2', name: 'Firma Schmidt AG', email: 'info@schmidt.de' },\r\n  { id: '3', name: 'Test Unternehmen', email: 'test@unternehmen.de' },\r\n];\r\n\r\nconst mockStatusOptions = [\r\n  { value: 'draft', label: 'Entwurf', color: 'default' },\r\n  { value: 'sent', label: 'Versendet', color: 'info' },\r\n  { value: 'paid', label: 'Bezahlt', color: 'success' },\r\n  { value: 'overdue', label: 'Überfällig', color: 'error' },\r\n  { value: 'cancelled', label: 'Storniert', color: 'warning' },\r\n];\r\n\r\n// NeuroFlow Invoice Form Component\r\ninterface NeuroFlowInvoiceFormProps {\r\n  initialData?: Partial<InvoiceFormData>;\r\n  onSubmit?: (data: InvoiceFormData) => Promise<void>;\r\n  onCancel?: () => void;\r\n  loading?: boolean;\r\n  mode?: 'create' | 'edit';\r\n}\r\n\r\nexport const NeuroFlowInvoiceForm: React.FC<NeuroFlowInvoiceFormProps> = ({\r\n  initialData,\r\n  onSubmit,\r\n  onCancel,\r\n  loading = false,\r\n  mode = 'create',\r\n}) => {\r\n  const [customers, setCustomers] = useState(mockCustomers);\r\n  const [isLoadingCustomers, setIsLoadingCustomers] = useState(false);\r\n  const [submitLoading, setSubmitLoading] = useState(false);\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors, isDirty },\r\n    reset,\r\n    watch,\r\n    setValue,\r\n  } = useForm<InvoiceFormData>({\r\n    resolver: zodResolver(InvoiceSchema),\r\n    defaultValues: {\r\n      customer_id: '',\r\n      invoice_number: '',\r\n      invoice_date: new Date().toISOString().split('T')[0],\r\n      due_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\r\n      amount: 0,\r\n      tax_rate: 19,\r\n      description: '',\r\n      status: 'draft',\r\n      payment_terms: '',\r\n      notes: '',\r\n      ...initialData,\r\n    },\r\n  });\r\n\r\n  const watchedAmount = watch('amount');\r\n  const watchedTaxRate = watch('tax_rate');\r\n\r\n  // Calculate totals\r\n  const taxAmount = (watchedAmount * watchedTaxRate) / 100;\r\n  const totalAmount = watchedAmount + taxAmount;\r\n\r\n  // Load customers from MCP\r\n  useEffect(() => {\r\n    const loadCustomers = async () => {\r\n      setIsLoadingCustomers(true);\r\n      try {\r\n        // Try to load from MCP API first\r\n        const response = await fetch('/api/mcp/customers', {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n          }\r\n        });\r\n\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setCustomers(data.customers || []);\r\n        } else {\r\n          // Fallback to mock data if MCP API is not available\r\n          console.warn('MCP API not available, using mock data');\r\n          setCustomers(mockCustomers);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading customers:', error);\r\n        // Fallback to mock data\r\n        setCustomers(mockCustomers);\r\n      } finally {\r\n        setIsLoadingCustomers(false);\r\n      }\r\n    };\r\n\r\n    loadCustomers();\r\n  }, []);\r\n\r\n  const handleFormSubmit = async (data: InvoiceFormData) => {\r\n    setSubmitLoading(true);\r\n    try {\r\n      if (onSubmit) {\r\n        await onSubmit(data);\r\n      }\r\n      // Show success message or redirect\r\n      console.log('Invoice saved:', data);\r\n    } catch (error) {\r\n      console.error('Error saving invoice:', error);\r\n    } finally {\r\n      setSubmitLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    if (isDirty) {\r\n      if (window.confirm('Änderungen verwerfen?')) {\r\n        reset();\r\n        onCancel?.();\r\n      }\r\n    } else {\r\n      onCancel?.();\r\n    }\r\n  };\r\n\r\n  const generateInvoiceNumber = () => {\r\n    const date = new Date();\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');\r\n    const invoiceNumber = `INV-${year}${month}-${random}`;\r\n    setValue('invoice_number', invoiceNumber);\r\n  };\r\n\r\n  return (\r\n    <NeuroFlowCard>\r\n      <CardContent>\r\n        {/* Header */}\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={3}>\r\n          <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n            <ReceiptIcon color=\"primary\" sx={{ fontSize: 32 }} />\r\n            <Box>\r\n              <Typography variant=\"h5\" fontWeight={600} color=\"text.primary\">\r\n                {mode === 'create' ? 'Neue Rechnung' : 'Rechnung bearbeiten'}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Erstellen Sie eine neue Rechnung mit allen erforderlichen Informationen\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n          \r\n          <Stack direction=\"row\" spacing={1}>\r\n            <Tooltip title=\"Rechnungsnummer generieren\">\r\n              <IconButton onClick={generateInvoiceNumber} color=\"primary\">\r\n                <RefreshIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Stack>\r\n        </Box>\r\n\r\n        <form onSubmit={handleSubmit(handleFormSubmit)}>\r\n          <Grid container spacing={3}>\r\n            {/* Basic Information */}\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h6\" fontWeight={600} color=\"text.primary\" mb={2}>\r\n                Grundinformationen\r\n              </Typography>\r\n            </Grid>\r\n\r\n            {/* Customer Selection */}\r\n            <Grid item xs={12} md={6}>\r\n              <Controller\r\n                name=\"customer_id\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <FormControl fullWidth error={!!errors.customer_id}>\r\n                    <InputLabel>Kunde *</InputLabel>\r\n                    <Select\r\n                      {...field}\r\n                      label=\"Kunde *\"\r\n                      disabled={isLoadingCustomers}\r\n                      startAdornment={\r\n                        isLoadingCustomers ? (\r\n                          <CircularProgress size={20} sx={{ mr: 1 }} />\r\n                        ) : (\r\n                          <PersonIcon sx={{ mr: 1, color: 'text.secondary' }} />\r\n                        )\r\n                      }\r\n                    >\r\n                      {customers.map((customer) => (\r\n                        <MenuItem key={customer.id} value={customer.id}>\r\n                          <Box>\r\n                            <Typography variant=\"body2\" fontWeight={500}>\r\n                              {customer.name}\r\n                            </Typography>\r\n                            <Typography variant=\"caption\" color=\"text.secondary\">\r\n                              {customer.email}\r\n                            </Typography>\r\n                          </Box>\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                    {errors.customer_id && (\r\n                      <FormHelperText>{errors.customer_id.message}</FormHelperText>\r\n                    )}\r\n                  </FormControl>\r\n                )}\r\n              />\r\n            </Grid>\r\n\r\n            {/* Invoice Number */}\r\n            <Grid item xs={12} md={6}>\r\n              <Controller\r\n                name=\"invoice_number\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Rechnungsnummer *\"\r\n                    fullWidth\r\n                    error={!!errors.invoice_number}\r\n                    helperText={errors.invoice_number?.message}\r\n                    InputProps={{\r\n                      startAdornment: <ReceiptIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                    }}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n\r\n            {/* Invoice Date */}\r\n            <Grid item xs={12} md={6}>\r\n              <Controller\r\n                name=\"invoice_date\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Rechnungsdatum *\"\r\n                    type=\"date\"\r\n                    fullWidth\r\n                    error={!!errors.invoice_date}\r\n                    helperText={errors.invoice_date?.message}\r\n                    InputProps={{\r\n                      startAdornment: <CalendarIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                    }}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n\r\n            {/* Due Date */}\r\n            <Grid item xs={12} md={6}>\r\n              <Controller\r\n                name=\"due_date\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Fälligkeitsdatum *\"\r\n                    type=\"date\"\r\n                    fullWidth\r\n                    error={!!errors.due_date}\r\n                    helperText={errors.due_date?.message}\r\n                    InputProps={{\r\n                      startAdornment: <CalendarIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                    }}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n\r\n            {/* Amount and Tax */}\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h6\" fontWeight={600} color=\"text.primary\" mb={2}>\r\n                Rechnungsdetails\r\n              </Typography>\r\n            </Grid>\r\n\r\n            {/* Amount */}\r\n            <Grid item xs={12} md={4}>\r\n              <Controller\r\n                name=\"amount\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Betrag (€) *\"\r\n                    type=\"number\"\r\n                    fullWidth\r\n                    error={!!errors.amount}\r\n                    helperText={errors.amount?.message}\r\n                    InputProps={{\r\n                      startAdornment: <EuroIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                    }}\r\n                    onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n\r\n            {/* Tax Rate */}\r\n            <Grid item xs={12} md={4}>\r\n              <Controller\r\n                name=\"tax_rate\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Steuersatz (%) *\"\r\n                    type=\"number\"\r\n                    fullWidth\r\n                    error={!!errors.tax_rate}\r\n                    helperText={errors.tax_rate?.message}\r\n                    onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n\r\n            {/* Status */}\r\n            <Grid item xs={12} md={4}>\r\n              <Controller\r\n                name=\"status\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <FormControl fullWidth error={!!errors.status}>\r\n                    <InputLabel>Status *</InputLabel>\r\n                    <Select {...field} label=\"Status *\">\r\n                      {mockStatusOptions.map((option) => (\r\n                        <MenuItem key={option.value} value={option.value}>\r\n                          <Chip\r\n                            label={option.label}\r\n                            size=\"small\"\r\n                            color={option.color as any}\r\n                            sx={{ mr: 1 }}\r\n                          />\r\n                          {option.label}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                    {errors.status && (\r\n                      <FormHelperText>{errors.status.message}</FormHelperText>\r\n                    )}\r\n                  </FormControl>\r\n                )}\r\n              />\r\n            </Grid>\r\n\r\n            {/* Totals Display */}\r\n            <Grid item xs={12}>\r\n              <Box\r\n                sx={{\r\n                  p: 2,\r\n                  backgroundColor: 'background.secondary',\r\n                  borderRadius: 2,\r\n                  border: '1px solid',\r\n                  borderColor: 'divider',\r\n                }}\r\n              >\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} md={3}>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Nettobetrag\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" fontWeight={600}>\r\n                      {watchedAmount.toFixed(2)} €\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12} md={3}>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Steuer ({watchedTaxRate}%)\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" fontWeight={600}>\r\n                      {taxAmount.toFixed(2)} €\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12} md={3}>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Gesamtbetrag\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" fontWeight={600} color=\"primary.main\">\r\n                      {totalAmount.toFixed(2)} €\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Box>\r\n            </Grid>\r\n\r\n            {/* Description */}\r\n            <Grid item xs={12}>\r\n              <Controller\r\n                name=\"description\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Beschreibung *\"\r\n                    multiline\r\n                    rows={3}\r\n                    fullWidth\r\n                    error={!!errors.description}\r\n                    helperText={errors.description?.message}\r\n                    InputProps={{\r\n                      startAdornment: <DescriptionIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                    }}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n\r\n            {/* Payment Terms */}\r\n            <Grid item xs={12} md={6}>\r\n              <Controller\r\n                name=\"payment_terms\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Zahlungsbedingungen\"\r\n                    fullWidth\r\n                    placeholder=\"z.B. Zahlbar innerhalb von 30 Tagen\"\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n\r\n            {/* Notes */}\r\n            <Grid item xs={12} md={6}>\r\n              <Controller\r\n                name=\"notes\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <TextField\r\n                    {...field}\r\n                    label=\"Notizen\"\r\n                    fullWidth\r\n                    placeholder=\"Zusätzliche Informationen\"\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n\r\n            {/* Form Actions */}\r\n            <Grid item xs={12}>\r\n              <Divider sx={{ my: 3 }} />\r\n              <Box display=\"flex\" justifyContent=\"flex-end\" gap={2}>\r\n                <NeuroFlowButton\r\n                  variant=\"outlined\"\r\n                  onClick={handleCancel}\r\n                  disabled={submitLoading}\r\n                  startIcon={<CancelIcon />}\r\n                >\r\n                  Abbrechen\r\n                </NeuroFlowButton>\r\n                <NeuroFlowButton\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  disabled={submitLoading || loading}\r\n                  startIcon={submitLoading ? <CircularProgress size={20} /> : <SaveIcon />}\r\n                >\r\n                  {submitLoading ? 'Speichern...' : 'Rechnung speichern'}\r\n                </NeuroFlowButton>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </CardContent>\r\n    </NeuroFlowCard>\r\n  );\r\n};\r\n\r\nexport default NeuroFlowInvoiceForm; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\neuroflow\\NeuroFlowInvoiceTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Avatar' is defined but never used. Allowed unused vars must match /^_/u.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Alert' is defined but never used. Allowed unused vars must match /^_/u.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FilterIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":41,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DownloadIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":46,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PersonIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":48,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'loading' is assigned a value but never used. Allowed unused args must match /^_/u.","line":167,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":167,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":243,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6789,6792],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6789,6792],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 🧠 NeuroFlow Invoice Table\r\n * KI-first, responsive-first Rechnungstabelle mit MCP-Integration\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TablePagination,\r\n  IconButton,\r\n  Chip,\r\n  Avatar,\r\n  Tooltip,\r\n  TextField,\r\n  InputAdornment,\r\n  Button,\r\n  Menu,\r\n  MenuItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Divider,\r\n  Alert,\r\n  Skeleton,\r\n  CircularProgress,\r\n  Stack,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n} from '@mui/material';\r\nimport {\r\n  Search as SearchIcon,\r\n  FilterList as FilterIcon,\r\n  MoreVert as MoreIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Visibility as ViewIcon,\r\n  Download as DownloadIcon,\r\n  Receipt as ReceiptIcon,\r\n  Person as PersonIcon,\r\n  Euro as EuroIcon,\r\n  CalendarToday as CalendarIcon,\r\n  Refresh as RefreshIcon,\r\n  Add as AddIcon,\r\n} from '@mui/icons-material';\r\nimport { styled } from '@mui/material/styles';\r\n\r\n// Styled Components\r\nconst NeuroFlowCard = styled(Card)(({ theme }) => ({\r\n  borderRadius: theme.shape.borderRadius * 2,\r\n  boxShadow: theme.shadows[1],\r\n  border: `1px solid ${theme.palette.divider}`,\r\n  transition: 'all 0.3s ease-in-out',\r\n  '&:hover': {\r\n    boxShadow: theme.shadows[4],\r\n  },\r\n}));\r\n\r\nconst NeuroFlowTable = styled(Table)(({ theme }) => ({\r\n  '& .MuiTableCell-root': {\r\n    borderBottom: `1px solid ${theme.palette.divider}`,\r\n    padding: '1rem',\r\n  },\r\n  '& .MuiTableHead-root .MuiTableCell-root': {\r\n    backgroundColor: theme.palette.grey[100],\r\n    fontWeight: 600,\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  '& .MuiTableRow-root:hover': {\r\n    backgroundColor: theme.palette.action.hover,\r\n  },\r\n}));\r\n\r\n// Types\r\ninterface Invoice {\r\n  id: string;\r\n  invoice_number: string;\r\n  customer_name: string;\r\n  customer_email: string;\r\n  invoice_date: string;\r\n  due_date: string;\r\n  amount: number;\r\n  tax_rate: number;\r\n  total_amount: number;\r\n  status: 'draft' | 'sent' | 'paid' | 'overdue' | 'cancelled';\r\n  description: string;\r\n  created_at: string;\r\n}\r\n\r\n// Status Configuration\r\nconst statusConfig = {\r\n  draft: { label: 'Entwurf', color: 'default' as const, icon: <ReceiptIcon /> },\r\n  sent: { label: 'Versendet', color: 'info' as const, icon: <ReceiptIcon /> },\r\n  paid: { label: 'Bezahlt', color: 'success' as const, icon: <ReceiptIcon /> },\r\n  overdue: { label: 'Überfällig', color: 'error' as const, icon: <ReceiptIcon /> },\r\n  cancelled: { label: 'Storniert', color: 'warning' as const, icon: <ReceiptIcon /> },\r\n};\r\n\r\n// Mock Data\r\nconst mockInvoices: Invoice[] = [\r\n  {\r\n    id: '1',\r\n    invoice_number: 'INV-2024-001',\r\n    customer_name: 'Max Mustermann GmbH',\r\n    customer_email: 'max@mustermann.de',\r\n    invoice_date: '2024-01-15',\r\n    due_date: '2024-02-14',\r\n    amount: 1500.00,\r\n    tax_rate: 19,\r\n    total_amount: 1785.00,\r\n    status: 'paid',\r\n    description: 'Webentwicklung Services',\r\n    created_at: '2024-01-15T10:00:00Z',\r\n  },\r\n  {\r\n    id: '2',\r\n    invoice_number: 'INV-2024-002',\r\n    customer_name: 'Firma Schmidt AG',\r\n    customer_email: 'info@schmidt.de',\r\n    invoice_date: '2024-01-20',\r\n    due_date: '2024-02-19',\r\n    amount: 2500.00,\r\n    tax_rate: 19,\r\n    total_amount: 2975.00,\r\n    status: 'sent',\r\n    description: 'Beratung und Implementierung',\r\n    created_at: '2024-01-20T14:30:00Z',\r\n  },\r\n  {\r\n    id: '3',\r\n    invoice_number: 'INV-2024-003',\r\n    customer_name: 'Test Unternehmen',\r\n    customer_email: 'test@unternehmen.de',\r\n    invoice_date: '2024-01-25',\r\n    due_date: '2024-02-24',\r\n    amount: 800.00,\r\n    tax_rate: 19,\r\n    total_amount: 952.00,\r\n    status: 'overdue',\r\n    description: 'Support und Wartung',\r\n    created_at: '2024-01-25T09:15:00Z',\r\n  },\r\n];\r\n\r\n// NeuroFlow Invoice Table Component\r\ninterface NeuroFlowInvoiceTableProps {\r\n  onEdit?: (invoice: Invoice) => void;\r\n  onDelete?: (invoice: Invoice) => void;\r\n  onView?: (invoice: Invoice) => void;\r\n  onCreate?: () => void;\r\n  loading?: boolean;\r\n}\r\n\r\nexport const NeuroFlowInvoiceTable: React.FC<NeuroFlowInvoiceTableProps> = ({\r\n  onEdit,\r\n  onDelete,\r\n  onView,\r\n  onCreate,\r\n  loading = false,\r\n}) => {\r\n  const [invoices, setInvoices] = useState<Invoice[]>([]);\r\n  const [filteredInvoices, setFilteredInvoices] = useState<Invoice[]>([]);\r\n  const [loadingData, setLoadingData] = useState(true);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState<string>('all');\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n  const [selectedInvoice, setSelectedInvoice] = useState<Invoice | null>(null);\r\n\r\n  // Load data from MCP\r\n  useEffect(() => {\r\n    const loadInvoices = async () => {\r\n      setLoadingData(true);\r\n      try {\r\n        // Try to load from MCP API first\r\n        const response = await fetch('/api/mcp/invoices', {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n          }\r\n        });\r\n\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setInvoices(data.invoices || []);\r\n          setFilteredInvoices(data.invoices || []);\r\n        } else {\r\n          // Fallback to mock data if MCP API is not available\r\n          console.warn('MCP API not available, using mock data');\r\n          setInvoices(mockInvoices);\r\n          setFilteredInvoices(mockInvoices);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading invoices:', error);\r\n        // Fallback to mock data\r\n        setInvoices(mockInvoices);\r\n        setFilteredInvoices(mockInvoices);\r\n      } finally {\r\n        setLoadingData(false);\r\n      }\r\n    };\r\n\r\n    loadInvoices();\r\n  }, []);\r\n\r\n  // Filter invoices\r\n  useEffect(() => {\r\n    let filtered = invoices;\r\n\r\n    // Search filter\r\n    if (searchTerm) {\r\n      filtered = filtered.filter(\r\n        (invoice) =>\r\n          invoice.invoice_number.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n          invoice.customer_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n          invoice.description.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n    }\r\n\r\n    // Status filter\r\n    if (statusFilter !== 'all') {\r\n      filtered = filtered.filter((invoice) => invoice.status === statusFilter);\r\n    }\r\n\r\n    setFilteredInvoices(filtered);\r\n    setPage(0);\r\n  }, [invoices, searchTerm, statusFilter]);\r\n\r\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n\r\n  const handleStatusFilterChange = (event: any) => {\r\n    setStatusFilter(event.target.value);\r\n  };\r\n\r\n  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>, invoice: Invoice) => {\r\n    setAnchorEl(event.currentTarget);\r\n    setSelectedInvoice(invoice);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n    setSelectedInvoice(null);\r\n  };\r\n\r\n  const handleEdit = () => {\r\n    if (selectedInvoice && onEdit) {\r\n      onEdit(selectedInvoice);\r\n    }\r\n    handleMenuClose();\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    if (selectedInvoice && onDelete) {\r\n      onDelete(selectedInvoice);\r\n    }\r\n    handleMenuClose();\r\n  };\r\n\r\n  const handleView = () => {\r\n    if (selectedInvoice && onView) {\r\n      onView(selectedInvoice);\r\n    }\r\n    handleMenuClose();\r\n  };\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('de-DE', {\r\n      style: 'currency',\r\n      currency: 'EUR',\r\n    }).format(amount);\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    return new Date(dateString).toLocaleDateString('de-DE');\r\n  };\r\n\r\n  const getStatusChip = (status: Invoice['status']) => {\r\n    const config = statusConfig[status];\r\n    return (\r\n      <Chip\r\n        icon={config.icon}\r\n        label={config.label}\r\n        color={config.color}\r\n        size=\"small\"\r\n        variant=\"filled\"\r\n      />\r\n    );\r\n  };\r\n\r\n  const paginatedInvoices = filteredInvoices.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n\r\n  if (loadingData) {\r\n    return (\r\n      <NeuroFlowCard>\r\n        <CardContent>\r\n          <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={3}>\r\n            <Typography variant=\"h5\" fontWeight={600}>\r\n              Rechnungen\r\n            </Typography>\r\n            <CircularProgress size={24} />\r\n          </Box>\r\n          <Skeleton variant=\"rectangular\" height={400} />\r\n        </CardContent>\r\n      </NeuroFlowCard>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <NeuroFlowCard>\r\n      <CardContent>\r\n        {/* Header */}\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={3}>\r\n          <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n            <ReceiptIcon color=\"primary\" sx={{ fontSize: 32 }} />\r\n            <Box>\r\n              <Typography variant=\"h5\" fontWeight={600} color=\"text.primary\">\r\n                Rechnungen\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                {filteredInvoices.length} von {invoices.length} Rechnungen\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n          \r\n          <Stack direction=\"row\" spacing={2}>\r\n            <Button\r\n              variant=\"outlined\"\r\n              startIcon={<RefreshIcon />}\r\n              onClick={() => window.location.reload()}\r\n            >\r\n              Aktualisieren\r\n            </Button>\r\n            {onCreate && (\r\n              <Button\r\n                variant=\"contained\"\r\n                startIcon={<AddIcon />}\r\n                onClick={onCreate}\r\n              >\r\n                Neue Rechnung\r\n              </Button>\r\n            )}\r\n          </Stack>\r\n        </Box>\r\n\r\n        {/* Filters */}\r\n        <Box display=\"flex\" gap={2} mb={3}>\r\n          <TextField\r\n            placeholder=\"Rechnungen durchsuchen...\"\r\n            value={searchTerm}\r\n            onChange={handleSearchChange}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <SearchIcon />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n            sx={{ minWidth: 300 }}\r\n          />\r\n          \r\n          <FormControl sx={{ minWidth: 150 }}>\r\n            <InputLabel>Status</InputLabel>\r\n            <Select\r\n              value={statusFilter}\r\n              label=\"Status\"\r\n              onChange={handleStatusFilterChange}\r\n            >\r\n              <MenuItem value=\"all\">Alle Status</MenuItem>\r\n              {Object.entries(statusConfig).map(([key, config]) => (\r\n                <MenuItem key={key} value={key}>\r\n                  <Chip\r\n                    label={config.label}\r\n                    size=\"small\"\r\n                    color={config.color}\r\n                    sx={{ mr: 1 }}\r\n                  />\r\n                  {config.label}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Box>\r\n\r\n        {/* Table */}\r\n        <TableContainer>\r\n          <NeuroFlowTable>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Rechnungsnummer</TableCell>\r\n                <TableCell>Kunde</TableCell>\r\n                <TableCell>Datum</TableCell>\r\n                <TableCell>Fällig</TableCell>\r\n                <TableCell align=\"right\">Betrag</TableCell>\r\n                <TableCell>Status</TableCell>\r\n                <TableCell align=\"center\">Aktionen</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {paginatedInvoices.map((invoice) => (\r\n                <TableRow key={invoice.id} hover>\r\n                  <TableCell>\r\n                    <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                      <ReceiptIcon color=\"primary\" fontSize=\"small\" />\r\n                      <Typography variant=\"body2\" fontWeight={500}>\r\n                        {invoice.invoice_number}\r\n                      </Typography>\r\n                    </Box>\r\n                  </TableCell>\r\n                  \r\n                  <TableCell>\r\n                    <Box>\r\n                      <Typography variant=\"body2\" fontWeight={500}>\r\n                        {invoice.customer_name}\r\n                      </Typography>\r\n                      <Typography variant=\"caption\" color=\"text.secondary\">\r\n                        {invoice.customer_email}\r\n                      </Typography>\r\n                    </Box>\r\n                  </TableCell>\r\n                  \r\n                  <TableCell>\r\n                    <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                      <CalendarIcon fontSize=\"small\" color=\"action\" />\r\n                      <Typography variant=\"body2\">\r\n                        {formatDate(invoice.invoice_date)}\r\n                      </Typography>\r\n                    </Box>\r\n                  </TableCell>\r\n                  \r\n                  <TableCell>\r\n                    <Typography variant=\"body2\">\r\n                      {formatDate(invoice.due_date)}\r\n                    </Typography>\r\n                  </TableCell>\r\n                  \r\n                  <TableCell align=\"right\">\r\n                    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"flex-end\" gap={1}>\r\n                      <EuroIcon fontSize=\"small\" color=\"action\" />\r\n                      <Typography variant=\"body2\" fontWeight={600}>\r\n                        {formatCurrency(invoice.total_amount)}\r\n                      </Typography>\r\n                    </Box>\r\n                  </TableCell>\r\n                  \r\n                  <TableCell>\r\n                    {getStatusChip(invoice.status)}\r\n                  </TableCell>\r\n                  \r\n                  <TableCell align=\"center\">\r\n                    <Tooltip title=\"Aktionen\">\r\n                      <IconButton\r\n                        size=\"small\"\r\n                        onClick={(e) => handleMenuOpen(e, invoice)}\r\n                      >\r\n                        <MoreIcon />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </NeuroFlowTable>\r\n        </TableContainer>\r\n\r\n        {/* Pagination */}\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25, 50]}\r\n          component=\"div\"\r\n          count={filteredInvoices.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n          labelRowsPerPage=\"Zeilen pro Seite:\"\r\n          labelDisplayedRows={({ from, to, count }) =>\r\n            `${from}-${to} von ${count !== -1 ? count : `mehr als ${to}`}`\r\n          }\r\n        />\r\n\r\n        {/* Action Menu */}\r\n        <Menu\r\n          anchorEl={anchorEl}\r\n          open={Boolean(anchorEl)}\r\n          onClose={handleMenuClose}\r\n          PaperProps={{\r\n            sx: {\r\n              minWidth: 200,\r\n              borderRadius: 2,\r\n              boxShadow: (theme) => theme.shadows[3],\r\n            },\r\n          }}\r\n        >\r\n          <MenuItem onClick={handleView}>\r\n            <ListItemIcon>\r\n              <ViewIcon fontSize=\"small\" />\r\n            </ListItemIcon>\r\n            <ListItemText>Anzeigen</ListItemText>\r\n          </MenuItem>\r\n          \r\n          <MenuItem onClick={handleEdit}>\r\n            <ListItemIcon>\r\n              <EditIcon fontSize=\"small\" />\r\n            </ListItemIcon>\r\n            <ListItemText>Bearbeiten</ListItemText>\r\n          </MenuItem>\r\n          \r\n          <Divider />\r\n          \r\n          <MenuItem onClick={handleDelete}>\r\n            <ListItemIcon>\r\n              <DeleteIcon fontSize=\"small\" />\r\n            </ListItemIcon>\r\n            <ListItemText>Löschen</ListItemText>\r\n          </MenuItem>\r\n        </Menu>\r\n      </CardContent>\r\n    </NeuroFlowCard>\r\n  );\r\n};\r\n\r\nexport default NeuroFlowInvoiceTable; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\neuroflow\\NeuroFlowSupplierForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Divider' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Skeleton' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Alert' is defined but never used. Allowed unused vars must match /^_/u.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DescriptionIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":46,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SupplierAutocomplete' is defined but never used. Allowed unused vars must match /^_/u.","line":53,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'watch' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":199,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":199,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":774,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":774,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27369,27372],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27369,27372],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 🧠 NeuroFlow Supplier Form\r\n * KI-first, responsive-first Lieferantenstammdaten-Formular für ERP-Systeme\r\n * Fehlerfreier TypeScript-Code mit vollständiger Validierung\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormHelperText,\r\n  Chip,\r\n  Divider,\r\n  Stack,\r\n  IconButton,\r\n  Tooltip,\r\n  Skeleton,\r\n  CircularProgress,\r\n  Tabs,\r\n  Tab,\r\n  Alert,\r\n  Switch,\r\n  FormControlLabel,\r\n} from '@mui/material';\r\nimport {\r\n  Save as SaveIcon,\r\n  Cancel as CancelIcon,\r\n  Refresh as RefreshIcon,\r\n  Business as BusinessIcon,\r\n  ContactPhone as ContactIcon,\r\n  LocationOn as LocationIcon,\r\n  AccountBalance as BankIcon,\r\n  Assessment as AssessmentIcon,\r\n  Settings as SettingsIcon,\r\n  LocalShipping as ShippingIcon,\r\n  Payment as PaymentIcon,\r\n  Description as DescriptionIcon,\r\n} from '@mui/icons-material';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport type { SubmitHandler } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { z } from 'zod';\r\nimport { styled } from '@mui/material/styles';\r\nimport { NeuroFlowAutocomplete, SupplierAutocomplete } from './NeuroFlowAutocomplete';\r\n\r\n// Styled Components\r\nconst NeuroFlowCard = styled(Card)(({ theme }) => ({\r\n  borderRadius: theme.shape.borderRadius * 2,\r\n  boxShadow: theme.shadows[1],\r\n  border: `1px solid ${theme.palette.divider}`,\r\n  transition: 'all 0.3s ease-in-out',\r\n  '&:hover': {\r\n    boxShadow: theme.shadows[4],\r\n  },\r\n}));\r\n\r\nconst NeuroFlowButton = styled(Button)(({ theme }) => ({\r\n  borderRadius: theme.shape.borderRadius * 1.5,\r\n  textTransform: 'none',\r\n  fontWeight: 600,\r\n  padding: '0.75rem 1.5rem',\r\n  transition: 'all 0.3s ease-in-out',\r\n  '&:hover': {\r\n    transform: 'translateY(-1px)',\r\n    boxShadow: theme.shadows[3],\r\n  },\r\n}));\r\n\r\n// Zod Schema für Lieferantenstammdaten\r\nconst SupplierSchema = z.object({\r\n  // Grunddaten\r\n  supplier_number: z.string().min(1, 'Lieferantennummer ist erforderlich'),\r\n  company_name: z.string().min(2, 'Firmenname muss mindestens 2 Zeichen lang sein'),\r\n  legal_form: z.enum(['GmbH', 'AG', 'KG', 'OHG', 'Einzelunternehmen', 'Gbr', 'e.V.', 'Sonstige']),\r\n  tax_number: z.string().optional(),\r\n  vat_number: z.string().optional(),\r\n  commercial_register: z.string().optional(),\r\n  \r\n  // Kontaktdaten\r\n  contact_person: z.string().min(1, 'Ansprechpartner ist erforderlich'),\r\n  email: z.string().email('Ungültige E-Mail-Adresse'),\r\n  phone: z.string().min(1, 'Telefonnummer ist erforderlich'),\r\n  fax: z.string().optional(),\r\n  website: z.string().url('Ungültige Website-URL').optional().or(z.literal('')),\r\n  \r\n  // Adressdaten\r\n  street: z.string().min(1, 'Straße ist erforderlich'),\r\n  house_number: z.string().min(1, 'Hausnummer ist erforderlich'),\r\n  postal_code: z.string().min(5, 'PLZ muss mindestens 5 Zeichen lang sein'),\r\n  city: z.string().min(1, 'Stadt ist erforderlich'),\r\n  country: z.string().min(1, 'Land ist erforderlich'),\r\n  \r\n  // Bankdaten\r\n  bank_name: z.string().optional(),\r\n  iban: z.string().optional(),\r\n  bic: z.string().optional(),\r\n  account_holder: z.string().optional(),\r\n  \r\n  // Geschäftsdaten\r\n  industry: z.enum(['Elektronik', 'Bürobedarf', 'Werkzeuge', 'Verbrauchsmaterial', 'Dienstleistungen', 'Software', 'Hardware', 'Sonstige']),\r\n  supplier_type: z.enum(['Hauptlieferant', 'Nebenlieferant', 'Notfalllieferant', 'Exklusivlieferant']),\r\n  payment_terms: z.number().min(0, 'Zahlungsziel darf nicht negativ sein'),\r\n  credit_limit: z.number().min(0, 'Kreditlimit darf nicht negativ sein'),\r\n  discount_percentage: z.number().min(0, 'Rabatt darf nicht negativ sein').max(100, 'Rabatt darf nicht über 100% sein'),\r\n  \r\n  // Bewertung\r\n  rating: z.number().min(1, 'Bewertung muss mindestens 1 sein').max(5, 'Bewertung darf maximal 5 sein'),\r\n  reliability_score: z.number().min(0, 'Zuverlässigkeits-Score darf nicht negativ sein').max(100, 'Zuverlässigkeits-Score darf nicht über 100 sein'),\r\n  quality_score: z.number().min(0, 'Qualitäts-Score darf nicht negativ sein').max(100, 'Qualitäts-Score darf nicht über 100 sein'),\r\n  delivery_score: z.number().min(0, 'Liefer-Score darf nicht negativ sein').max(100, 'Liefer-Score darf nicht über 100 sein'),\r\n  \r\n  // Status\r\n  status: z.enum(['active', 'inactive', 'blocked', 'prospect']),\r\n  is_preferred: z.boolean(),\r\n  is_certified: z.boolean(),\r\n  is_local: z.boolean(),\r\n  \r\n  // ERP-spezifische Felder\r\n  sales_rep: z.string().optional(),\r\n  cost_center: z.string().optional(),\r\n  notes: z.string().optional(),\r\n  \r\n  // Lieferdaten\r\n  average_delivery_time: z.number().min(0, 'Durchschnittliche Lieferzeit darf nicht negativ sein'),\r\n  minimum_order_value: z.number().min(0, 'Mindestbestellwert darf nicht negativ sein'),\r\n  free_shipping_threshold: z.number().min(0, 'Kostenlose Lieferung ab darf nicht negativ sein'),\r\n  \r\n  // Zertifizierungen\r\n  iso_9001: z.boolean(),\r\n  iso_14001: z.boolean(),\r\n  other_certifications: z.string().optional(),\r\n});\r\n\r\ntype SupplierFormData = z.infer<typeof SupplierSchema>;\r\n\r\n// Mock Data\r\nconst mockLegalForms = [\r\n  { value: 'GmbH', label: 'GmbH' },\r\n  { value: 'AG', label: 'Aktiengesellschaft (AG)' },\r\n  { value: 'KG', label: 'Kommanditgesellschaft (KG)' },\r\n  { value: 'OHG', label: 'Offene Handelsgesellschaft (OHG)' },\r\n  { value: 'Einzelunternehmen', label: 'Einzelunternehmen' },\r\n  { value: 'Gbr', label: 'Gesellschaft bürgerlichen Rechts (GbR)' },\r\n  { value: 'e.V.', label: 'Eingetragener Verein (e.V.)' },\r\n  { value: 'Sonstige', label: 'Sonstige' },\r\n];\r\n\r\nconst mockIndustries = [\r\n  { value: 'Elektronik', label: 'Elektronik' },\r\n  { value: 'Bürobedarf', label: 'Bürobedarf' },\r\n  { value: 'Werkzeuge', label: 'Werkzeuge' },\r\n  { value: 'Verbrauchsmaterial', label: 'Verbrauchsmaterial' },\r\n  { value: 'Dienstleistungen', label: 'Dienstleistungen' },\r\n  { value: 'Software', label: 'Software' },\r\n  { value: 'Hardware', label: 'Hardware' },\r\n  { value: 'Sonstige', label: 'Sonstige' },\r\n];\r\n\r\nconst mockSupplierTypes = [\r\n  { value: 'Hauptlieferant', label: 'Hauptlieferant', color: 'success' },\r\n  { value: 'Nebenlieferant', label: 'Nebenlieferant', color: 'primary' },\r\n  { value: 'Notfalllieferant', label: 'Notfalllieferant', color: 'warning' },\r\n  { value: 'Exklusivlieferant', label: 'Exklusivlieferant', color: 'secondary' },\r\n];\r\n\r\n// NeuroFlow Supplier Form Component\r\ninterface NeuroFlowSupplierFormProps {\r\n  initialData?: Partial<SupplierFormData>;\r\n  onSubmit?: (data: SupplierFormData) => Promise<void>;\r\n  onCancel?: () => void;\r\n  loading?: boolean;\r\n  mode?: 'create' | 'edit';\r\n}\r\n\r\nexport const NeuroFlowSupplierForm: React.FC<NeuroFlowSupplierFormProps> = ({\r\n  initialData,\r\n  onSubmit,\r\n  onCancel,\r\n  loading = false,\r\n  mode = 'create',\r\n}) => {\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const [submitLoading, setSubmitLoading] = useState(false);\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors, isDirty },\r\n    reset,\r\n    watch,\r\n    setValue,\r\n  } = useForm<SupplierFormData>({\r\n    resolver: zodResolver(SupplierSchema),\r\n    defaultValues: {\r\n      supplier_number: '',\r\n      company_name: '',\r\n      legal_form: 'GmbH',\r\n      tax_number: '',\r\n      vat_number: '',\r\n      commercial_register: '',\r\n      contact_person: '',\r\n      email: '',\r\n      phone: '',\r\n      fax: '',\r\n      website: '',\r\n      street: '',\r\n      house_number: '',\r\n      postal_code: '',\r\n      city: '',\r\n      country: 'Deutschland',\r\n      bank_name: '',\r\n      iban: '',\r\n      bic: '',\r\n      account_holder: '',\r\n      industry: 'Elektronik',\r\n      supplier_type: 'Nebenlieferant',\r\n      payment_terms: 30,\r\n      credit_limit: 0,\r\n      discount_percentage: 0,\r\n      rating: 3,\r\n      reliability_score: 75,\r\n      quality_score: 75,\r\n      delivery_score: 75,\r\n      status: 'active',\r\n      is_preferred: false,\r\n      is_certified: false,\r\n      is_local: false,\r\n      sales_rep: '',\r\n      cost_center: '',\r\n      notes: '',\r\n      average_delivery_time: 7,\r\n      minimum_order_value: 0,\r\n      free_shipping_threshold: 0,\r\n      iso_9001: false,\r\n      iso_14001: false,\r\n      other_certifications: '',\r\n      ...initialData,\r\n    },\r\n  });\r\n\r\n  const handleFormSubmit: SubmitHandler<SupplierFormData> = async (data) => {\r\n    setSubmitLoading(true);\r\n    try {\r\n      if (onSubmit) {\r\n        await onSubmit(data);\r\n      }\r\n      console.log('Supplier saved:', data);\r\n    } catch (error) {\r\n      console.error('Error saving supplier:', error);\r\n    } finally {\r\n      setSubmitLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    if (isDirty) {\r\n      if (window.confirm('Änderungen verwerfen?')) {\r\n        reset();\r\n        onCancel?.();\r\n      }\r\n    } else {\r\n      onCancel?.();\r\n    }\r\n  };\r\n\r\n  const generateSupplierNumber = () => {\r\n    const date = new Date();\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');\r\n    const supplierNumber = `L${year}${month}-${random}`;\r\n    setValue('supplier_number', supplierNumber);\r\n  };\r\n\r\n  const tabs = [\r\n    { label: 'Grunddaten', icon: <BusinessIcon /> },\r\n    { label: 'Kontaktdaten', icon: <ContactIcon /> },\r\n    { label: 'Adressdaten', icon: <LocationIcon /> },\r\n    { label: 'Bankdaten', icon: <BankIcon /> },\r\n    { label: 'Geschäftsdaten', icon: <AssessmentIcon /> },\r\n    { label: 'Bewertung', icon: <AssessmentIcon /> },\r\n    { label: 'Lieferdaten', icon: <ShippingIcon /> },\r\n    { label: 'Zertifizierungen', icon: <SettingsIcon /> },\r\n  ];\r\n\r\n  return (\r\n    <NeuroFlowCard>\r\n      <CardContent>\r\n        {/* Header */}\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={3}>\r\n          <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n            <BusinessIcon color=\"primary\" sx={{ fontSize: 32 }} />\r\n            <Box>\r\n              <Typography variant=\"h5\" fontWeight={600} color=\"text.primary\">\r\n                {mode === 'create' ? 'Neuer Lieferant' : 'Lieferant bearbeiten'}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Erstellen Sie einen neuen Lieferantenstammsatz mit allen erforderlichen Informationen\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n          \r\n          <Stack direction=\"row\" spacing={1}>\r\n            <Tooltip title=\"Lieferantennummer generieren\">\r\n              <IconButton onClick={generateSupplierNumber} color=\"primary\">\r\n                <RefreshIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Stack>\r\n        </Box>\r\n\r\n        <form onSubmit={handleSubmit(handleFormSubmit)}>\r\n          {/* Tabs */}\r\n          <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\r\n            <Tabs value={activeTab} onChange={(e, newValue) => setActiveTab(newValue)}>\r\n              {tabs.map((tab, index) => (\r\n                <Tab\r\n                  key={index}\r\n                  label={tab.label}\r\n                  icon={tab.icon}\r\n                  iconPosition=\"start\"\r\n                  sx={{ minHeight: 64 }}\r\n                />\r\n              ))}\r\n            </Tabs>\r\n          </Box>\r\n\r\n          {/* Tab Content */}\r\n          {activeTab === 0 && (\r\n            <Grid container spacing={3}>\r\n              {/* Lieferantennummer */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"supplier_number\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Lieferantennummer *\"\r\n                      fullWidth\r\n                      error={!!errors.supplier_number}\r\n                      helperText={errors.supplier_number?.message}\r\n                      InputProps={{\r\n                        startAdornment: <BusinessIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Firmenname */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"company_name\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <NeuroFlowAutocomplete\r\n                      label=\"Firmenname *\"\r\n                      value={field.value}\r\n                      onChange={(value) => field.onChange(value)}\r\n                      type=\"supplier\"\r\n                      placeholder=\"Firmenname eingeben...\"\r\n                      error={!!errors.company_name}\r\n                      helperText={errors.company_name?.message}\r\n                      onLoadOptions={async (query) => {\r\n                        // Mock data - in Produktion durch echte API ersetzen\r\n                        const mockSuppliers = [\r\n                          { id: '1', value: 'Agrarhandel GmbH', label: 'Agrarhandel GmbH', type: 'supplier' as const, metadata: { category: 'Landhandel' } },\r\n                          { id: '2', value: 'Futtermittel AG', label: 'Futtermittel AG', type: 'supplier' as const, metadata: { category: 'Futtermittel' } },\r\n                          { id: '3', value: 'Dünger & Co KG', label: 'Dünger & Co KG', type: 'supplier' as const, metadata: { category: 'Düngemittel' } },\r\n                        ];\r\n                        return mockSuppliers.filter(s => \r\n                          s.label.toLowerCase().includes(query.toLowerCase())\r\n                        );\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Rechtsform */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"legal_form\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.legal_form}>\r\n                      <InputLabel>Rechtsform *</InputLabel>\r\n                      <Select {...field} label=\"Rechtsform *\">\r\n                        {mockLegalForms.map((form) => (\r\n                          <MenuItem key={form.value} value={form.value}>\r\n                            {form.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                      {errors.legal_form && (\r\n                        <FormHelperText>{errors.legal_form.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Branche */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"industry\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <NeuroFlowAutocomplete\r\n                      label=\"Branche *\"\r\n                      value={field.value}\r\n                      onChange={(value) => field.onChange(value)}\r\n                      type=\"supplier\"\r\n                      placeholder=\"Branche auswählen...\"\r\n                      error={!!errors.industry}\r\n                      helperText={errors.industry?.message}\r\n                      customOptions={mockIndustries.map(industry => ({\r\n                        id: industry.value,\r\n                        value: industry.value,\r\n                        label: industry.label,\r\n                        type: 'supplier' as const,\r\n                        metadata: { category: 'Branche' }\r\n                      }))}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Steuernummer */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"tax_number\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Steuernummer\"\r\n                      fullWidth\r\n                      error={!!errors.tax_number}\r\n                      helperText={errors.tax_number?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* USt-ID */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"vat_number\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"USt-ID\"\r\n                      fullWidth\r\n                      error={!!errors.vat_number}\r\n                      helperText={errors.vat_number?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Handelsregister */}\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  name=\"commercial_register\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Handelsregister\"\r\n                      fullWidth\r\n                      error={!!errors.commercial_register}\r\n                      helperText={errors.commercial_register?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 1 && (\r\n            <Grid container spacing={3}>\r\n              {/* Ansprechpartner */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"contact_person\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Ansprechpartner *\"\r\n                      fullWidth\r\n                      error={!!errors.contact_person}\r\n                      helperText={errors.contact_person?.message}\r\n                      InputProps={{\r\n                        startAdornment: <ContactIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* E-Mail */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"email\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"E-Mail *\"\r\n                      type=\"email\"\r\n                      fullWidth\r\n                      error={!!errors.email}\r\n                      helperText={errors.email?.message}\r\n                      InputProps={{\r\n                        startAdornment: <ContactIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Telefon */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"phone\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Telefon *\"\r\n                      fullWidth\r\n                      error={!!errors.phone}\r\n                      helperText={errors.phone?.message}\r\n                      InputProps={{\r\n                        startAdornment: <ContactIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Fax */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"fax\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Fax\"\r\n                      fullWidth\r\n                      error={!!errors.fax}\r\n                      helperText={errors.fax?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Website */}\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  name=\"website\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Website\"\r\n                      fullWidth\r\n                      error={!!errors.website}\r\n                      helperText={errors.website?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 2 && (\r\n            <Grid container spacing={3}>\r\n              {/* Straße */}\r\n              <Grid item xs={12} md={8}>\r\n                <Controller\r\n                  name=\"street\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Straße *\"\r\n                      fullWidth\r\n                      error={!!errors.street}\r\n                      helperText={errors.street?.message}\r\n                      InputProps={{\r\n                        startAdornment: <LocationIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Hausnummer */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"house_number\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Hausnummer *\"\r\n                      fullWidth\r\n                      error={!!errors.house_number}\r\n                      helperText={errors.house_number?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* PLZ */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"postal_code\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"PLZ *\"\r\n                      fullWidth\r\n                      error={!!errors.postal_code}\r\n                      helperText={errors.postal_code?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Stadt */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"city\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Stadt *\"\r\n                      fullWidth\r\n                      error={!!errors.city}\r\n                      helperText={errors.city?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Land */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"country\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Land *\"\r\n                      fullWidth\r\n                      error={!!errors.country}\r\n                      helperText={errors.country?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 3 && (\r\n            <Grid container spacing={3}>\r\n              {/* Bankname */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"bank_name\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Bankname\"\r\n                      fullWidth\r\n                      error={!!errors.bank_name}\r\n                      helperText={errors.bank_name?.message}\r\n                      InputProps={{\r\n                        startAdornment: <BankIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Kontoinhaber */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"account_holder\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Kontoinhaber\"\r\n                      fullWidth\r\n                      error={!!errors.account_holder}\r\n                      helperText={errors.account_holder?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* IBAN */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"iban\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"IBAN\"\r\n                      fullWidth\r\n                      error={!!errors.iban}\r\n                      helperText={errors.iban?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* BIC */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"bic\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"BIC\"\r\n                      fullWidth\r\n                      error={!!errors.bic}\r\n                      helperText={errors.bic?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 4 && (\r\n            <Grid container spacing={3}>\r\n              {/* Lieferantentyp */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"supplier_type\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.supplier_type}>\r\n                      <InputLabel>Lieferantentyp *</InputLabel>\r\n                      <Select {...field} label=\"Lieferantentyp *\">\r\n                        {mockSupplierTypes.map((type) => (\r\n                          <MenuItem key={type.value} value={type.value}>\r\n                            <Chip\r\n                              label={type.label}\r\n                              size=\"small\"\r\n                              color={type.color as any}\r\n                              sx={{ mr: 1 }}\r\n                            />\r\n                            {type.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                      {errors.supplier_type && (\r\n                        <FormHelperText>{errors.supplier_type.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Zahlungsziel */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"payment_terms\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Zahlungsziel (Tage) *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.payment_terms}\r\n                      helperText={errors.payment_terms?.message}\r\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                      InputProps={{\r\n                        startAdornment: <PaymentIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Kreditlimit */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"credit_limit\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Kreditlimit (€) *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.credit_limit}\r\n                      helperText={errors.credit_limit?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                      InputProps={{\r\n                        startAdornment: <PaymentIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Rabatt */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"discount_percentage\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Rabatt (%) *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.discount_percentage}\r\n                      helperText={errors.discount_percentage?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                      InputProps={{\r\n                        startAdornment: <PaymentIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Status */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"status\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.status}>\r\n                      <InputLabel>Status *</InputLabel>\r\n                      <Select {...field} label=\"Status *\">\r\n                        <MenuItem value=\"active\">\r\n                          <Chip label=\"Aktiv\" color=\"success\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Aktiv\r\n                        </MenuItem>\r\n                        <MenuItem value=\"inactive\">\r\n                          <Chip label=\"Inaktiv\" color=\"default\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Inaktiv\r\n                        </MenuItem>\r\n                        <MenuItem value=\"blocked\">\r\n                          <Chip label=\"Gesperrt\" color=\"error\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Gesperrt\r\n                        </MenuItem>\r\n                        <MenuItem value=\"prospect\">\r\n                          <Chip label=\"Interessent\" color=\"warning\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Interessent\r\n                        </MenuItem>\r\n                      </Select>\r\n                      {errors.status && (\r\n                        <FormHelperText>{errors.status.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Vertriebsmitarbeiter */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"sales_rep\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Vertriebsmitarbeiter\"\r\n                      fullWidth\r\n                      error={!!errors.sales_rep}\r\n                      helperText={errors.sales_rep?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Lieferanten-Flags */}\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                  Lieferanten-Eigenschaften\r\n                </Typography>\r\n                <Stack direction=\"row\" spacing={3}>\r\n                  <Controller\r\n                    name=\"is_preferred\"\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Switch\r\n                            checked={field.value}\r\n                            onChange={field.onChange}\r\n                            color=\"success\"\r\n                          />\r\n                        }\r\n                        label=\"Bevorzugter Lieferant\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Controller\r\n                    name=\"is_certified\"\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Switch\r\n                            checked={field.value}\r\n                            onChange={field.onChange}\r\n                            color=\"primary\"\r\n                          />\r\n                        }\r\n                        label=\"Zertifiziert\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Controller\r\n                    name=\"is_local\"\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Switch\r\n                            checked={field.value}\r\n                            onChange={field.onChange}\r\n                            color=\"info\"\r\n                          />\r\n                        }\r\n                        label=\"Lokaler Lieferant\"\r\n                      />\r\n                    )}\r\n                  />\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 5 && (\r\n            <Grid container spacing={3}>\r\n              {/* Bewertung */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"rating\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.rating}>\r\n                      <InputLabel>Bewertung (1-5) *</InputLabel>\r\n                      <Select {...field} label=\"Bewertung (1-5) *\">\r\n                        <MenuItem value={1}>1 - Sehr schlecht</MenuItem>\r\n                        <MenuItem value={2}>2 - Schlecht</MenuItem>\r\n                        <MenuItem value={3}>3 - Durchschnittlich</MenuItem>\r\n                        <MenuItem value={4}>4 - Gut</MenuItem>\r\n                        <MenuItem value={5}>5 - Sehr gut</MenuItem>\r\n                      </Select>\r\n                      {errors.rating && (\r\n                        <FormHelperText>{errors.rating.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Zuverlässigkeits-Score */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"reliability_score\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Zuverlässigkeits-Score (0-100) *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.reliability_score}\r\n                      helperText={errors.reliability_score?.message}\r\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Qualitäts-Score */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"quality_score\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Qualitäts-Score (0-100) *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.quality_score}\r\n                      helperText={errors.quality_score?.message}\r\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Liefer-Score */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"delivery_score\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Liefer-Score (0-100) *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.delivery_score}\r\n                      helperText={errors.delivery_score?.message}\r\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 6 && (\r\n            <Grid container spacing={3}>\r\n              {/* Durchschnittliche Lieferzeit */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"average_delivery_time\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Durchschnittliche Lieferzeit (Tage) *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.average_delivery_time}\r\n                      helperText={errors.average_delivery_time?.message}\r\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                      InputProps={{\r\n                        startAdornment: <ShippingIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Mindestbestellwert */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"minimum_order_value\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Mindestbestellwert (€) *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.minimum_order_value}\r\n                      helperText={errors.minimum_order_value?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                      InputProps={{\r\n                        startAdornment: <PaymentIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Kostenlose Lieferung ab */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"free_shipping_threshold\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Kostenlose Lieferung ab (€) *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.free_shipping_threshold}\r\n                      helperText={errors.free_shipping_threshold?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                      InputProps={{\r\n                        startAdornment: <ShippingIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 7 && (\r\n            <Grid container spacing={3}>\r\n              {/* ISO-Zertifizierungen */}\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                  Zertifizierungen\r\n                </Typography>\r\n                <Stack direction=\"row\" spacing={3} mb={3}>\r\n                  <Controller\r\n                    name=\"iso_9001\"\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Switch\r\n                            checked={field.value}\r\n                            onChange={field.onChange}\r\n                            color=\"primary\"\r\n                          />\r\n                        }\r\n                        label=\"ISO 9001 (Qualitätsmanagement)\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Controller\r\n                    name=\"iso_14001\"\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Switch\r\n                            checked={field.value}\r\n                            onChange={field.onChange}\r\n                            color=\"success\"\r\n                          />\r\n                        }\r\n                        label=\"ISO 14001 (Umweltmanagement)\"\r\n                      />\r\n                    )}\r\n                  />\r\n                </Stack>\r\n              </Grid>\r\n\r\n              {/* Weitere Zertifizierungen */}\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  name=\"other_certifications\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Weitere Zertifizierungen\"\r\n                      multiline\r\n                      rows={4}\r\n                      fullWidth\r\n                      error={!!errors.other_certifications}\r\n                      helperText={errors.other_certifications?.message}\r\n                      placeholder=\"Zusätzliche Zertifizierungen, Qualitätsstandards, etc.\"\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Notizen */}\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  name=\"notes\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Notizen\"\r\n                      multiline\r\n                      rows={4}\r\n                      fullWidth\r\n                      error={!!errors.notes}\r\n                      helperText={errors.notes?.message}\r\n                      placeholder=\"Zusätzliche Informationen, Besonderheiten, etc.\"\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {/* Form Actions */}\r\n          <Box display=\"flex\" justifyContent=\"flex-end\" gap={2} mt={4}>\r\n            <NeuroFlowButton\r\n              variant=\"outlined\"\r\n              onClick={handleCancel}\r\n              disabled={submitLoading}\r\n              startIcon={<CancelIcon />}\r\n            >\r\n              Abbrechen\r\n            </NeuroFlowButton>\r\n            <NeuroFlowButton\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              disabled={submitLoading || loading}\r\n              startIcon={submitLoading ? <CircularProgress size={20} /> : <SaveIcon />}\r\n            >\r\n              {submitLoading ? 'Speichern...' : 'Lieferant speichern'}\r\n            </NeuroFlowButton>\r\n          </Box>\r\n        </form>\r\n      </CardContent>\r\n    </NeuroFlowCard>\r\n  );\r\n};\r\n\r\nexport default NeuroFlowSupplierForm; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\streckengeschaeft\\StreckengeschaeftExportPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Popconfirm' is defined but never used. Allowed unused vars must match /^_/u.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Switch' is defined but never used. Allowed unused vars must match /^_/u.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Radio' is defined but never used. Allowed unused vars must match /^_/u.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SettingOutlined' is defined but never used. Allowed unused vars must match /^_/u.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatFileSize' is defined but never used. Allowed unused vars must match /^_/u.","line":47,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":60}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Card,\r\n  Typography,\r\n  Button,\r\n  Space,\r\n  Divider,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Input,\r\n  Checkbox,\r\n  Modal,\r\n  Form,\r\n  message,\r\n  Upload,\r\n  Progress,\r\n  Alert,\r\n  Tabs,\r\n  List,\r\n  Avatar,\r\n  Tag,\r\n  Tooltip,\r\n  Popconfirm,\r\n  Switch,\r\n  InputNumber,\r\n  Radio,\r\n  UploadFile,\r\n} from 'antd';\r\nimport {\r\n  DownloadOutlined,\r\n  PrinterOutlined,\r\n  MailOutlined,\r\n  WhatsAppOutlined,\r\n  FileExcelOutlined,\r\n  FilePdfOutlined,\r\n  FileTextOutlined,\r\n  UploadOutlined,\r\n  SettingOutlined,\r\n  ReloadOutlined,\r\n  CheckCircleOutlined,\r\n  WarningOutlined,\r\n  InfoCircleOutlined,\r\n  CloudUploadOutlined,\r\n  // ConvertOutlined,\r\n} from '@ant-design/icons';\r\nimport { StreckengeschaeftApi, downloadBlob, formatFileSize } from '../../services/streckengeschaeftApi';\r\nimport { StreckengeschaeftFilter } from '../../types/streckengeschaeft';\r\n\r\nconst { TabPane } = Tabs;\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\n\r\ninterface StreckengeschaeftExportPanelProps {\r\n  filter?: StreckengeschaeftFilter;\r\n  selectedIds?: string[];\r\n  onExportComplete?: () => void;\r\n}\r\n\r\ninterface Printer {\r\n  name: string;\r\n  id: string;\r\n  isDefault: boolean;\r\n  isNetwork: boolean;\r\n  location?: string;\r\n  status: 'ready' | 'offline' | 'error';\r\n}\r\n\r\ninterface ConversionJob {\r\n  id: string;\r\n  filename: string;\r\n  originalFormat: string;\r\n  targetFormat: string;\r\n  progress: number;\r\n  status: 'pending' | 'processing' | 'completed' | 'error';\r\n  error?: string;\r\n}\r\n\r\nexport const StreckengeschaeftExportPanel: React.FC<StreckengeschaeftExportPanelProps> = ({\r\n  filter,\r\n  selectedIds = [],\r\n  onExportComplete\r\n}) => {\r\n  const [form] = Form.useForm();\r\n  const [printers, setPrinters] = useState<Printer[]>([]);\r\n  const [selectedPrinter, setSelectedPrinter] = useState<string>('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [conversionJobs, setConversionJobs] = useState<ConversionJob[]>([]);\r\n  const [emailModalVisible, setEmailModalVisible] = useState(false);\r\n  const [whatsappModalVisible, setWhatsappModalVisible] = useState(false);\r\n  const [printModalVisible, setPrintModalVisible] = useState(false);\r\n  const [conversionModalVisible, setConversionModalVisible] = useState(false);\r\n  const [uploadedFiles, setUploadedFiles] = useState<UploadFile[]>([]);\r\n\r\n  // Load available printers\r\n  useEffect(() => {\r\n    loadPrinters();\r\n  }, []);\r\n\r\n  const loadPrinters = async () => {\r\n    try {\r\n      const availablePrinters = await StreckengeschaeftApi.getAvailablePrinters();\r\n      setPrinters(availablePrinters);\r\n      const defaultPrinter = availablePrinters.find(p => p.isDefault);\r\n      if (defaultPrinter) {\r\n        setSelectedPrinter(defaultPrinter.id);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load printers:', error);\r\n      message.error('Drucker konnten nicht geladen werden');\r\n    }\r\n  };\r\n\r\n  // Export Functions\r\n  const handleExport = async (format: 'excel' | 'pdf' | 'libreoffice') => {\r\n    setLoading(true);\r\n    try {\r\n      let blob: Blob;\r\n      const timestamp = new Date().toISOString().split('T')[0];\r\n      \r\n      switch (format) {\r\n        case 'excel':\r\n          blob = await StreckengeschaeftApi.exportToExcel(filter);\r\n          downloadBlob(blob, `Streckengeschaeft_${timestamp}.xlsx`);\r\n          break;\r\n        case 'pdf':\r\n          blob = await StreckengeschaeftApi.exportToPDF(filter);\r\n          downloadBlob(blob, `Streckengeschaeft_${timestamp}.pdf`);\r\n          break;\r\n        case 'libreoffice':\r\n          blob = await StreckengeschaeftApi.exportToLibreOffice(filter, 'ods');\r\n          downloadBlob(blob, `Streckengeschaeft_${timestamp}.ods`);\r\n          break;\r\n      }\r\n      \r\n      message.success(`${format.toUpperCase()}-Export erfolgreich`);\r\n      onExportComplete?.();\r\n    } catch (error) {\r\n      console.error('Export failed:', error);\r\n      message.error(`Export fehlgeschlagen: ${error instanceof Error ? error.message : 'Unbekannter Fehler'}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Print Functions\r\n  const handlePrint = async () => {\r\n    if (!selectedIds.length) {\r\n      message.warning('Bitte wählen Sie mindestens ein Streckengeschäft aus');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const printOptions = form.getFieldsValue(['copies', 'orientation', 'paperSize', 'includeSummen']);\r\n      \r\n      if (selectedIds.length === 1) {\r\n        const result = await StreckengeschaeftApi.printStreckengeschaeft(\r\n          selectedIds[0],\r\n          selectedPrinter,\r\n          printOptions\r\n        );\r\n        \r\n        if (result.success) {\r\n          message.success(`Druckauftrag erfolgreich gesendet (Job-ID: ${result.jobId})`);\r\n        } else {\r\n          message.error(`Druckfehler: ${result.error}`);\r\n        }\r\n      } else {\r\n        const result = await StreckengeschaeftApi.printMultiple(\r\n          selectedIds,\r\n          selectedPrinter,\r\n          printOptions\r\n        );\r\n        \r\n        if (result.success) {\r\n          message.success(`${result.jobIds?.length || 0} Druckaufträge erfolgreich gesendet`);\r\n        } else {\r\n          message.error(`Druckfehler: ${result.errors?.join(', ')}`);\r\n        }\r\n      }\r\n      \r\n      setPrintModalVisible(false);\r\n    } catch (error) {\r\n      console.error('Print failed:', error);\r\n      message.error(`Drucken fehlgeschlagen: ${error instanceof Error ? error.message : 'Unbekannter Fehler'}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Email Functions\r\n  const handleEmail = async () => {\r\n    if (!selectedIds.length) {\r\n      message.warning('Bitte wählen Sie mindestens ein Streckengeschäft aus');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const emailData = form.getFieldsValue(['to', 'cc', 'bcc', 'subject', 'message', 'includeAttachment', 'attachmentFormat']);\r\n      \r\n      // Send email for each selected ID\r\n      const results = await Promise.allSettled(\r\n        selectedIds.map(id => StreckengeschaeftApi.sendEmail(id, emailData))\r\n      );\r\n      \r\n      const successful = results.filter(r => r.status === 'fulfilled' && r.value.success).length;\r\n      const failed = results.length - successful;\r\n      \r\n      if (successful > 0) {\r\n        message.success(`${successful} E-Mail(s) erfolgreich gesendet`);\r\n      }\r\n      if (failed > 0) {\r\n        message.warning(`${failed} E-Mail(s) fehlgeschlagen`);\r\n      }\r\n      \r\n      setEmailModalVisible(false);\r\n    } catch (error) {\r\n      console.error('Email failed:', error);\r\n      message.error(`E-Mail fehlgeschlagen: ${error instanceof Error ? error.message : 'Unbekannter Fehler'}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // WhatsApp Functions\r\n  const handleWhatsApp = async () => {\r\n    if (!selectedIds.length) {\r\n      message.warning('Bitte wählen Sie mindestens ein Streckengeschäft aus');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const { phoneNumber, message: whatsappMessage, includeAttachment } = form.getFieldsValue();\r\n      \r\n      // Send WhatsApp for each selected ID\r\n      const results = await Promise.allSettled(\r\n        selectedIds.map(id => StreckengeschaeftApi.sendWhatsApp(id, phoneNumber, whatsappMessage, includeAttachment))\r\n      );\r\n      \r\n      const successful = results.filter(r => r.status === 'fulfilled' && r.value.success).length;\r\n      const failed = results.length - successful;\r\n      \r\n      if (successful > 0) {\r\n        message.success(`${successful} WhatsApp-Nachricht(en) erfolgreich gesendet`);\r\n      }\r\n      if (failed > 0) {\r\n        message.warning(`${failed} WhatsApp-Nachricht(en) fehlgeschlagen`);\r\n      }\r\n      \r\n      setWhatsappModalVisible(false);\r\n    } catch (error) {\r\n      console.error('WhatsApp failed:', error);\r\n      message.error(`WhatsApp fehlgeschlagen: ${error instanceof Error ? error.message : 'Unbekannter Fehler'}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // File Conversion Functions\r\n  const handleFileConversion = async () => {\r\n    if (!uploadedFiles.length) {\r\n      message.warning('Bitte laden Sie mindestens eine Datei hoch');\r\n      return;\r\n    }\r\n\r\n    const { targetFormat, quality, password, watermark } = form.getFieldsValue();\r\n    \r\n    for (const file of uploadedFiles) {\r\n      if (file.originFileObj) {\r\n        const jobId = `job_${Date.now()}_${Math.random()}`;\r\n        const newJob: ConversionJob = {\r\n          id: jobId,\r\n          filename: file.name,\r\n          originalFormat: file.name.split('.').pop() || 'unknown',\r\n          targetFormat,\r\n          progress: 0,\r\n          status: 'pending'\r\n        };\r\n        \r\n        setConversionJobs(prev => [...prev, newJob]);\r\n        \r\n        try {\r\n          const blob = await StreckengeschaeftApi.convertFile(\r\n            file.originFileObj,\r\n            targetFormat,\r\n            { quality, password, watermark }\r\n          );\r\n          \r\n          downloadBlob(blob, `${file.name.split('.')[0]}.${targetFormat}`);\r\n          \r\n          setConversionJobs(prev => \r\n            prev.map(job => \r\n              job.id === jobId \r\n                ? { ...job, progress: 100, status: 'completed' as const }\r\n                : job\r\n            )\r\n          );\r\n          \r\n          message.success(`${file.name} erfolgreich konvertiert`);\r\n        } catch (error) {\r\n          console.error('Conversion failed:', error);\r\n          setConversionJobs(prev => \r\n            prev.map(job => \r\n              job.id === jobId \r\n                ? { ...job, status: 'error' as const, error: error instanceof Error ? error.message : 'Unbekannter Fehler' }\r\n                : job\r\n            )\r\n          );\r\n          message.error(`Konvertierung von ${file.name} fehlgeschlagen`);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const getPrinterStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'ready': return 'success';\r\n      case 'offline': return 'default';\r\n      case 'error': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getPrinterStatusText = (status: string) => {\r\n    switch (status) {\r\n      case 'ready': return 'Bereit';\r\n      case 'offline': return 'Offline';\r\n      case 'error': return 'Fehler';\r\n      default: return 'Unbekannt';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card \r\n      title={\r\n        <Space>\r\n          <DownloadOutlined />\r\n          <span>Export & Kommunikation</span>\r\n        </Space>\r\n      }\r\n      extra={\r\n        <Space>\r\n          <Button \r\n            icon={<ReloadOutlined />} \r\n            onClick={loadPrinters}\r\n            size=\"small\"\r\n          >\r\n            Drucker aktualisieren\r\n          </Button>\r\n        </Space>\r\n      }\r\n    >\r\n      <Tabs defaultActiveKey=\"1\">\r\n        \r\n        {/* Export Tab */}\r\n        <TabPane tab=\"Export\" key=\"1\">\r\n          <Row gutter={16}>\r\n            <Col span={8}>\r\n              <Card size=\"small\" className=\"text-center\">\r\n                <Button\r\n                  type=\"primary\"\r\n                  icon={<FileExcelOutlined />}\r\n                  size=\"large\"\r\n                  block\r\n                  loading={loading}\r\n                  onClick={() => handleExport('excel')}\r\n                >\r\n                  Excel Export\r\n                </Button>\r\n                <Typography.Text type=\"secondary\" className=\"block mt-2\">\r\n                  Export als .xlsx Datei\r\n                </Typography.Text>\r\n              </Card>\r\n            </Col>\r\n            <Col span={8}>\r\n              <Card size=\"small\" className=\"text-center\">\r\n                <Button\r\n                  type=\"primary\"\r\n                  icon={<FilePdfOutlined />}\r\n                  size=\"large\"\r\n                  block\r\n                  loading={loading}\r\n                  onClick={() => handleExport('pdf')}\r\n                >\r\n                  PDF Export\r\n                </Button>\r\n                <Typography.Text type=\"secondary\" className=\"block mt-2\">\r\n                  Export als .pdf Datei\r\n                </Typography.Text>\r\n              </Card>\r\n            </Col>\r\n            <Col span={8}>\r\n              <Card size=\"small\" className=\"text-center\">\r\n                <Button\r\n                  type=\"primary\"\r\n                  icon={<FileTextOutlined />}\r\n                  size=\"large\"\r\n                  block\r\n                  loading={loading}\r\n                  onClick={() => handleExport('libreoffice')}\r\n                >\r\n                  LibreOffice Export\r\n                </Button>\r\n                <Typography.Text type=\"secondary\" className=\"block mt-2\">\r\n                  Export als .ods Datei\r\n                </Typography.Text>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </TabPane>\r\n\r\n        {/* Drucken Tab */}\r\n        <TabPane tab=\"Drucken\" key=\"2\">\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form layout=\"vertical\">\r\n                <Form.Item label=\"Verfügbare Drucker\">\r\n                  <Select\r\n                    value={selectedPrinter}\r\n                    onChange={setSelectedPrinter}\r\n                    placeholder=\"Drucker auswählen\"\r\n                  >\r\n                    {printers.map(printer => (\r\n                      <Option key={printer.id} value={printer.id}>\r\n                        <Space>\r\n                          <span>{printer.name}</span>\r\n                          <Tag color={getPrinterStatusColor(printer.status)}>\r\n                            {getPrinterStatusText(printer.status)}\r\n                          </Tag>\r\n                          {printer.isDefault && <Tag color=\"blue\">Standard</Tag>}\r\n                          {printer.isNetwork && <Tag color=\"green\">Netzwerk</Tag>}\r\n                        </Space>\r\n                      </Option>\r\n                    ))}\r\n                  </Select>\r\n                </Form.Item>\r\n                \r\n                <Form.Item>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    icon={<PrinterOutlined />}\r\n                    onClick={() => setPrintModalVisible(true)}\r\n                    disabled={!selectedIds.length}\r\n                  >\r\n                    Drucken ({selectedIds.length} ausgewählt)\r\n                  </Button>\r\n                </Form.Item>\r\n              </Form>\r\n            </Col>\r\n            \r\n            <Col span={12}>\r\n              <Alert\r\n                message=\"Drucker-Informationen\"\r\n                description={\r\n                  <div>\r\n                    <p><strong>Ausgewählte Streckengeschäfte:</strong> {selectedIds.length}</p>\r\n                    <p><strong>Standard-Drucker:</strong> {printers.find(p => p.isDefault)?.name || 'Keiner'}</p>\r\n                    <p><strong>Netzwerk-Drucker:</strong> {printers.filter(p => p.isNetwork).length}</p>\r\n                  </div>\r\n                }\r\n                type=\"info\"\r\n                showIcon\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </TabPane>\r\n\r\n        {/* E-Mail Tab */}\r\n        <TabPane tab=\"E-Mail\" key=\"3\">\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form layout=\"vertical\">\r\n                <Form.Item>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    icon={<MailOutlined />}\r\n                    onClick={() => setEmailModalVisible(true)}\r\n                    disabled={!selectedIds.length}\r\n                  >\r\n                    E-Mail senden ({selectedIds.length} ausgewählt)\r\n                  </Button>\r\n                </Form.Item>\r\n              </Form>\r\n            </Col>\r\n            \r\n            <Col span={12}>\r\n              <Alert\r\n                message=\"E-Mail-Funktionen\"\r\n                description=\"Senden Sie Streckengeschäfte per E-Mail mit optionalen Anhängen in verschiedenen Formaten.\"\r\n                type=\"info\"\r\n                showIcon\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </TabPane>\r\n\r\n        {/* WhatsApp Tab */}\r\n        <TabPane tab=\"WhatsApp\" key=\"4\">\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form layout=\"vertical\">\r\n                <Form.Item>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    icon={<WhatsAppOutlined />}\r\n                    onClick={() => setWhatsappModalVisible(true)}\r\n                    disabled={!selectedIds.length}\r\n                  >\r\n                    WhatsApp senden ({selectedIds.length} ausgewählt)\r\n                  </Button>\r\n                </Form.Item>\r\n              </Form>\r\n            </Col>\r\n            \r\n            <Col span={12}>\r\n              <Alert\r\n                message=\"WhatsApp-Integration\"\r\n                description=\"Senden Sie Streckengeschäfte direkt über WhatsApp mit optionalen Anhängen.\"\r\n                type=\"info\"\r\n                showIcon\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </TabPane>\r\n\r\n        {/* Konvertierung Tab */}\r\n        <TabPane tab=\"Datei-Konvertierung\" key=\"5\">\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form layout=\"vertical\">\r\n                <Form.Item label=\"Dateien hochladen\">\r\n                  <Upload\r\n                    multiple\r\n                    fileList={uploadedFiles}\r\n                    onChange={({ fileList }) => setUploadedFiles(fileList)}\r\n                    beforeUpload={() => false}\r\n                  >\r\n                    <Button icon={<UploadOutlined />}>Dateien auswählen</Button>\r\n                  </Upload>\r\n                </Form.Item>\r\n                \r\n                <Form.Item label=\"Ziel-Format\">\r\n                  <Select defaultValue=\"pdf\">\r\n                    <Option value=\"pdf\">PDF</Option>\r\n                    <Option value=\"excel\">Excel</Option>\r\n                    <Option value=\"word\">Word</Option>\r\n                    <Option value=\"libreoffice\">LibreOffice</Option>\r\n                    <Option value=\"html\">HTML</Option>\r\n                    <Option value=\"txt\">Text</Option>\r\n                  </Select>\r\n                </Form.Item>\r\n                \r\n                <Form.Item>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    icon={<CloudUploadOutlined />}\r\n                    onClick={() => setConversionModalVisible(true)}\r\n                    disabled={!uploadedFiles.length}\r\n                  >\r\n                    Konvertieren ({uploadedFiles.length} Dateien)\r\n                  </Button>\r\n                </Form.Item>\r\n              </Form>\r\n            </Col>\r\n            \r\n            <Col span={12}>\r\n              <Alert\r\n                message=\"Datei-Konvertierung\"\r\n                description=\"Konvertieren Sie Dateien in verschiedene Formate mit erweiterten Optionen.\"\r\n                type=\"info\"\r\n                showIcon\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </TabPane>\r\n      </Tabs>\r\n\r\n      {/* Print Modal */}\r\n      <Modal\r\n        title=\"Drucken\"\r\n        open={printModalVisible}\r\n        onCancel={() => setPrintModalVisible(false)}\r\n        onOk={handlePrint}\r\n        confirmLoading={loading}\r\n        width={600}\r\n      >\r\n        <Form form={form} layout=\"vertical\">\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form.Item label=\"Kopien\" name=\"copies\">\r\n                <InputNumber min={1} max={100} defaultValue={1} />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Form.Item label=\"Ausrichtung\" name=\"orientation\">\r\n                <Select defaultValue=\"portrait\">\r\n                  <Option value=\"portrait\">Hochformat</Option>\r\n                  <Option value=\"landscape\">Querformat</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          \r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form.Item label=\"Papiergröße\" name=\"paperSize\">\r\n                <Select defaultValue=\"A4\">\r\n                  <Option value=\"A4\">A4</Option>\r\n                  <Option value=\"A3\">A3</Option>\r\n                  <Option value=\"letter\">Letter</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Form.Item name=\"includeSummen\" valuePropName=\"checked\">\r\n                <Checkbox>Summen einschließen</Checkbox>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </Modal>\r\n\r\n      {/* Email Modal */}\r\n      <Modal\r\n        title=\"E-Mail senden\"\r\n        open={emailModalVisible}\r\n        onCancel={() => setEmailModalVisible(false)}\r\n        onOk={handleEmail}\r\n        confirmLoading={loading}\r\n        width={600}\r\n      >\r\n        <Form form={form} layout=\"vertical\">\r\n          <Form.Item label=\"An\" name=\"to\" rules={[{ required: true, message: 'Empfänger erforderlich' }]}>\r\n            <Select mode=\"tags\" placeholder=\"E-Mail-Adressen eingeben\" />\r\n          </Form.Item>\r\n          \r\n          <Form.Item label=\"CC\" name=\"cc\">\r\n            <Select mode=\"tags\" placeholder=\"CC-E-Mail-Adressen\" />\r\n          </Form.Item>\r\n          \r\n          <Form.Item label=\"BCC\" name=\"bcc\">\r\n            <Select mode=\"tags\" placeholder=\"BCC-E-Mail-Adressen\" />\r\n          </Form.Item>\r\n          \r\n          <Form.Item label=\"Betreff\" name=\"subject\" rules={[{ required: true, message: 'Betreff erforderlich' }]}>\r\n            <Input placeholder=\"E-Mail-Betreff\" />\r\n          </Form.Item>\r\n          \r\n          <Form.Item label=\"Nachricht\" name=\"message\">\r\n            <TextArea rows={4} placeholder=\"Optionale Nachricht\" />\r\n          </Form.Item>\r\n          \r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form.Item name=\"includeAttachment\" valuePropName=\"checked\">\r\n                <Checkbox>Anhang einschließen</Checkbox>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Form.Item label=\"Anhang-Format\" name=\"attachmentFormat\">\r\n                <Select defaultValue=\"pdf\">\r\n                  <Option value=\"pdf\">PDF</Option>\r\n                  <Option value=\"excel\">Excel</Option>\r\n                  <Option value=\"libreoffice\">LibreOffice</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </Modal>\r\n\r\n      {/* WhatsApp Modal */}\r\n      <Modal\r\n        title=\"WhatsApp senden\"\r\n        open={whatsappModalVisible}\r\n        onCancel={() => setWhatsappModalVisible(false)}\r\n        onOk={handleWhatsApp}\r\n        confirmLoading={loading}\r\n        width={500}\r\n      >\r\n        <Form form={form} layout=\"vertical\">\r\n          <Form.Item label=\"Telefonnummer\" name=\"phoneNumber\" rules={[{ required: true, message: 'Telefonnummer erforderlich' }]}>\r\n            <Input placeholder=\"+49 123 456789\" />\r\n          </Form.Item>\r\n          \r\n          <Form.Item label=\"Nachricht\" name=\"message\">\r\n            <TextArea rows={4} placeholder=\"Optionale Nachricht\" />\r\n          </Form.Item>\r\n          \r\n          <Form.Item name=\"includeAttachment\" valuePropName=\"checked\">\r\n            <Checkbox>Anhang einschließen</Checkbox>\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n\r\n      {/* Conversion Modal */}\r\n      <Modal\r\n        title=\"Datei-Konvertierung\"\r\n        open={conversionModalVisible}\r\n        onCancel={() => setConversionModalVisible(false)}\r\n        onOk={handleFileConversion}\r\n        confirmLoading={loading}\r\n        width={700}\r\n      >\r\n        <Form form={form} layout=\"vertical\">\r\n          <Row gutter={16}>\r\n            <Col span={12}>\r\n              <Form.Item label=\"Ziel-Format\" name=\"targetFormat\" rules={[{ required: true }]}>\r\n                <Select defaultValue=\"pdf\">\r\n                  <Option value=\"pdf\">PDF</Option>\r\n                  <Option value=\"excel\">Excel</Option>\r\n                  <Option value=\"word\">Word</Option>\r\n                  <Option value=\"libreoffice\">LibreOffice</Option>\r\n                  <Option value=\"html\">HTML</Option>\r\n                  <Option value=\"txt\">Text</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Form.Item label=\"Qualität\" name=\"quality\">\r\n                <Select defaultValue=\"medium\">\r\n                  <Option value=\"low\">Niedrig</Option>\r\n                  <Option value=\"medium\">Mittel</Option>\r\n                  <Option value=\"high\">Hoch</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          \r\n          <Form.Item label=\"Passwort (optional)\" name=\"password\">\r\n            <Input.Password placeholder=\"Passwort für geschützte Dateien\" />\r\n          </Form.Item>\r\n          \r\n          <Form.Item label=\"Wasserzeichen (optional)\" name=\"watermark\">\r\n            <Input placeholder=\"Wasserzeichen-Text\" />\r\n          </Form.Item>\r\n          \r\n          <Divider>Konvertierungs-Jobs</Divider>\r\n          \r\n          <List\r\n            dataSource={conversionJobs}\r\n            renderItem={job => (\r\n              <List.Item>\r\n                <List.Item.Meta\r\n                  avatar={\r\n                    <Avatar icon={\r\n                      job.status === 'completed' ? <CheckCircleOutlined /> :\r\n                      job.status === 'error' ? <WarningOutlined /> :\r\n                      <InfoCircleOutlined />\r\n                    } />\r\n                  }\r\n                  title={job.filename}\r\n                  description={`${job.originalFormat} → ${job.targetFormat}`}\r\n                />\r\n                <div>\r\n                  {job.status === 'processing' && <Progress percent={job.progress} size=\"small\" />}\r\n                  {job.status === 'completed' && <Tag color=\"success\">Abgeschlossen</Tag>}\r\n                  {job.status === 'error' && <Tag color=\"error\">{job.error}</Tag>}\r\n                  {job.status === 'pending' && <Tag color=\"default\">Wartend</Tag>}\r\n                </div>\r\n              </List.Item>\r\n            )}\r\n          />\r\n        </Form>\r\n      </Modal>\r\n    </Card>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\streckengeschaeft\\StreckengeschaeftFilterPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Typography' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ReloadOutlined' is defined but never used. Allowed unused vars must match /^_/u.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1110,1113],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1110,1113],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { \r\n  Form, \r\n  Input, \r\n  Select, \r\n  DatePicker, \r\n  InputNumber, \r\n  Button, \r\n  Card, \r\n  Collapse, \r\n  Checkbox, \r\n  Row, \r\n  Col, \r\n  Divider,\r\n  Tabs,\r\n  Typography,\r\n  Space\r\n} from 'antd';\r\nimport { \r\n  FilterOutlined, \r\n  SearchOutlined, \r\n  ClearOutlined,\r\n  ReloadOutlined\r\n} from '@ant-design/icons';\r\nimport { \r\n  StreckengeschaeftFilter, \r\n  VorgangsTyp, \r\n  StreckenStatus, \r\n  BiomasseOption,\r\n  getVorgangsTypLabel, \r\n  getStatusLabel, \r\n  getBiomasseOptionLabel \r\n} from '../../types/streckengeschaeft';\r\n\r\nconst { TabPane } = Tabs;\r\nconst { RangePicker } = DatePicker;\r\nconst { Option } = Select;\r\n\r\ninterface StreckengeschaeftFilterPanelProps {\r\n  onFilterChange: (filter: StreckengeschaeftFilter) => void;\r\n  onReset: () => void;\r\n  loading?: boolean;\r\n}\r\n\r\nexport const StreckengeschaeftFilterPanel: React.FC<StreckengeschaeftFilterPanelProps> = ({\r\n  onFilterChange,\r\n  onReset,\r\n  loading = false\r\n}) => {\r\n  const [form] = Form.useForm();\r\n  const [expanded, setExpanded] = useState(false);\r\n\r\n  const handleFilterChange = (allValues: any) => {\r\n    const { datumRange, ...restValues } = allValues;\r\n    \r\n    const filterData: StreckengeschaeftFilter = {\r\n      ...restValues,\r\n      datumVon: datumRange?.[0]?.format('YYYY-MM-DD'),\r\n      datumBis: datumRange?.[1]?.format('YYYY-MM-DD'),\r\n    };\r\n\r\n    onFilterChange(filterData);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    form.resetFields();\r\n    onReset();\r\n  };\r\n\r\n  const vorgangsTypOptions = Object.values(VorgangsTyp).map(typ => ({\r\n    label: getVorgangsTypLabel(typ),\r\n    value: typ\r\n  }));\r\n\r\n  const statusOptions = Object.values(StreckenStatus).map(status => ({\r\n    label: getStatusLabel(status),\r\n    value: status\r\n  }));\r\n\r\n  const biomasseOptions = Object.values(BiomasseOption).map(option => ({\r\n    label: getBiomasseOptionLabel(option),\r\n    value: option\r\n  }));\r\n\r\n  return (\r\n    <Card \r\n      className=\"mb-4 shadow-sm\"\r\n      title={\r\n        <Space>\r\n          <FilterOutlined />\r\n          <span>Filter für Streckengeschäfte</span>\r\n        </Space>\r\n      }\r\n      extra={\r\n        <Space>\r\n          <Button\r\n            type=\"text\"\r\n            icon={expanded ? <FilterOutlined /> : <FilterOutlined />}\r\n            onClick={() => setExpanded(!expanded)}\r\n          >\r\n            {expanded ? 'Einklappen' : 'Ausklappen'}\r\n          </Button>\r\n        </Space>\r\n      }\r\n    >\r\n      <Collapse activeKey={expanded ? ['1'] : []} ghost>\r\n        <Collapse.Panel key=\"1\" showArrow={false} header=\"\">\r\n          <Form\r\n            form={form}\r\n            layout=\"vertical\"\r\n            onValuesChange={handleFilterChange}\r\n            className=\"mt-4\"\r\n          >\r\n            <Tabs defaultActiveKey=\"1\" size=\"small\">\r\n              \r\n              {/* STRECKE Tab */}\r\n              <TabPane tab=\"STRECKE\" key=\"1\">\r\n                <Row gutter={16}>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Strecke-Nr. von\" name=\"streckeNrVon\">\r\n                      <Input placeholder=\"Von Strecke-Nr.\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Strecke-Nr. bis\" name=\"streckeNrBis\">\r\n                      <Input placeholder=\"Bis Strecke-Nr.\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n                \r\n                <Row gutter={16}>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Artikel-Nr. von\" name=\"artikelNrVon\">\r\n                      <Input placeholder=\"Von Artikel-Nr.\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Artikel-Nr. bis\" name=\"artikelNrBis\">\r\n                      <Input placeholder=\"Bis Artikel-Nr.\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n                \r\n                <Row gutter={16}>\r\n                  <Col span={8}>\r\n                    <Form.Item name=\"nurErledigte\" valuePropName=\"checked\">\r\n                      <Checkbox>Nur erledigte Strecken</Checkbox>\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col span={8}>\r\n                    <Form.Item name=\"nurUnerledigte\" valuePropName=\"checked\">\r\n                      <Checkbox>Nur unerledigte Strecken</Checkbox>\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col span={8}>\r\n                    <Form.Item name=\"vorgaengeGetrennt\" valuePropName=\"checked\">\r\n                      <Checkbox>Vorgänge getrennt</Checkbox>\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n              </TabPane>\r\n\r\n              {/* LIEFERANTEN/KUNDEN Tab */}\r\n              <TabPane tab=\"LIEFERANTEN/KUNDEN\" key=\"2\">\r\n                <Row gutter={16}>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Lieferant-Nr. von\" name=\"lieferantNrVon\">\r\n                      <Input placeholder=\"Von Lieferant-Nr.\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Lieferant-Nr. bis\" name=\"lieferantNrBis\">\r\n                      <Input placeholder=\"Bis Lieferant-Nr.\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n                \r\n                <Row gutter={16}>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Kunde-Nr. von\" name=\"kundeNrVon\">\r\n                      <Input placeholder=\"Von Kunde-Nr.\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Kunde-Nr. bis\" name=\"kundeNrBis\">\r\n                      <Input placeholder=\"Bis Kunde-Nr.\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n                \r\n                <Row gutter={16}>\r\n                  <Col span={12}>\r\n                    <Form.Item name=\"nurOhneLieferant\" valuePropName=\"checked\">\r\n                      <Checkbox>Nur Strecken ohne Lieferant</Checkbox>\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col span={12}>\r\n                    <Form.Item name=\"nurOhneKunde\" valuePropName=\"checked\">\r\n                      <Checkbox>Nur Strecken ohne Kunde</Checkbox>\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n              </TabPane>\r\n\r\n              {/* KONTRAKTE Tab */}\r\n              <TabPane tab=\"KONTRAKTE\" key=\"3\">\r\n                <Row gutter={16}>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"EK-Kontakt-Nr. von\" name=\"ekKontaktNrVon\">\r\n                      <Input placeholder=\"Von EK-Kontakt-Nr.\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"EK-Kontakt-Nr. bis\" name=\"ekKontaktNrBis\">\r\n                      <Input placeholder=\"Bis EK-Kontakt-Nr.\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n                \r\n                <Row gutter={16}>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"VK-Kontakt-Nr. von\" name=\"vkKontaktNrVon\">\r\n                      <Input placeholder=\"Von VK-Kontakt-Nr.\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"VK-Kontakt-Nr. bis\" name=\"vkKontaktNrBis\">\r\n                      <Input placeholder=\"Bis VK-Kontakt-Nr.\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n                \r\n                <Row gutter={16}>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"EK/VK nach Biomasse\" name=\"biomasseOption\">\r\n                      <Select placeholder=\"Biomasse-Option wählen\">\r\n                        {biomasseOptions.map(option => (\r\n                          <Option key={option.value} value={option.value}>\r\n                            {option.label}\r\n                          </Option>\r\n                        ))}\r\n                      </Select>\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n              </TabPane>\r\n\r\n              {/* LIEFERRECHNUNG Tab */}\r\n              <TabPane tab=\"LIEFERRECHNUNG\" key=\"4\">\r\n                <Row gutter={16}>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Liefer-Rechnungsdatum von\" name=\"lieferRechnungsdatumVon\">\r\n                      <DatePicker placeholder=\"Von Datum\" style={{ width: '100%' }} />\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Liefer-Rechnungsdatum bis\" name=\"lieferRechnungsdatumBis\">\r\n                      <DatePicker placeholder=\"Bis Datum\" style={{ width: '100%' }} />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n                \r\n                <Row gutter={16}>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"LKW-Kennzeichen von\" name=\"lkwKennzeichenVon\">\r\n                      <Input placeholder=\"Von LKW-Kennzeichen\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"LKW-Kennzeichen bis\" name=\"lkwKennzeichenBis\">\r\n                      <Input placeholder=\"Bis LKW-Kennzeichen\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n                \r\n                <Row gutter={16}>\r\n                  <Col span={8}>\r\n                    <Form.Item name=\"keineEingangsrechnung\" valuePropName=\"checked\">\r\n                      <Checkbox>Keine Eingangsrechnung</Checkbox>\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col span={8}>\r\n                    <Form.Item name=\"keineSpeditionsrechnung\" valuePropName=\"checked\">\r\n                      <Checkbox>Keine Speditionsrechnung</Checkbox>\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col span={8}>\r\n                    <Form.Item name=\"keineFrachtabrechnung\" valuePropName=\"checked\">\r\n                      <Checkbox>Keine Frachtabrechnung</Checkbox>\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n                \r\n                <Row gutter={16}>\r\n                  <Col span={12}>\r\n                    <Form.Item name=\"deckungsbeitragAusStreckendaten\" valuePropName=\"checked\">\r\n                      <Checkbox>Deckungsbeitrag aus Streckendaten berechnen</Checkbox>\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n              </TabPane>\r\n\r\n              {/* BE-/ENTLADESTELLE Tab */}\r\n              <TabPane tab=\"BE-/ENTLADESTELLE\" key=\"5\">\r\n                <Row gutter={16}>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Land\" name=\"land\">\r\n                      <Input placeholder=\"Land eingeben\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Be-/Entladestelle PLZ von\" name=\"beEntladestellePLZVon\">\r\n                      <Input placeholder=\"Von PLZ\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n                \r\n                <Row gutter={16}>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Be-/Entladestelle PLZ bis\" name=\"beEntladestellePLZBis\">\r\n                      <Input placeholder=\"Bis PLZ\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n              </TabPane>\r\n\r\n              {/* PARTIE/NLS Tab */}\r\n              <TabPane tab=\"PARTIE/NLS\" key=\"6\">\r\n                <Row gutter={16}>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Partie-Nr. von\" name=\"partienNrVon\">\r\n                      <Input placeholder=\"Von Partie-Nr.\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Partie-Nr. bis\" name=\"partienNrBis\">\r\n                      <Input placeholder=\"Bis Partie-Nr.\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n                \r\n                <Row gutter={16}>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"NLS-Nr. von\" name=\"nlsNrVon\">\r\n                      <Input placeholder=\"Von NLS-Nr.\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"NLS-Nr. bis\" name=\"nlsNrBis\">\r\n                      <Input placeholder=\"Bis NLS-Nr.\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n              </TabPane>\r\n\r\n              {/* SONSTIGE SELEKTIONEN Tab */}\r\n              <TabPane tab=\"SONSTIGE SELEKTIONEN\" key=\"7\">\r\n                <Row gutter={16}>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Spediteur\" name=\"spediteur\">\r\n                      <Input placeholder=\"Spediteur eingeben\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Start\" name=\"start\">\r\n                      <Input placeholder=\"Start eingeben\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n                \r\n                <Row gutter={16}>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Ursprung\" name=\"ursprung\">\r\n                      <Input placeholder=\"Ursprung eingeben\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Lagerhalle\" name=\"lagerhalle\">\r\n                      <Input placeholder=\"Lagerhalle eingeben\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n                \r\n                <Row gutter={16}>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Fahrzeug-Kennzeichen\" name=\"fahrzeugKennzeichen\">\r\n                      <Input placeholder=\"Fahrzeug-Kennzeichen\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Sorten-Nr.\" name=\"sortenNr\">\r\n                      <Input placeholder=\"Sorten-Nr.\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n                \r\n                <Row gutter={16}>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Kostenstelle\" name=\"kostenstelle\">\r\n                      <Input placeholder=\"Kostenstelle\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Bedarfsnummer\" name=\"bedarfsnummer\">\r\n                      <Input placeholder=\"Bedarfsnummer\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n              </TabPane>\r\n\r\n              {/* ALLGEMEINE FILTER Tab */}\r\n              <TabPane tab=\"ALLGEMEINE FILTER\" key=\"8\">\r\n                <Row gutter={16}>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Vorgangstyp\" name=\"vorgangsTyp\">\r\n                      <Select placeholder=\"Vorgangstyp wählen\" allowClear>\r\n                        {vorgangsTypOptions.map(option => (\r\n                          <Option key={option.value} value={option.value}>\r\n                            {option.label}\r\n                          </Option>\r\n                        ))}\r\n                      </Select>\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Status\" name=\"status\">\r\n                      <Select placeholder=\"Status wählen\" allowClear>\r\n                        {statusOptions.map(option => (\r\n                          <Option key={option.value} value={option.value}>\r\n                            {option.label}\r\n                          </Option>\r\n                        ))}\r\n                      </Select>\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n                \r\n                <Row gutter={16}>\r\n                  <Col span={12}>\r\n                    <Form.Item label=\"Datum von/bis\" name=\"datumRange\">\r\n                      <RangePicker style={{ width: '100%' }} />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n                \r\n                <Row gutter={16}>\r\n                  <Col span={6}>\r\n                    <Form.Item label=\"Min. Menge\" name=\"minMenge\">\r\n                      <InputNumber placeholder=\"Min\" style={{ width: '100%' }} />\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col span={6}>\r\n                    <Form.Item label=\"Max. Menge\" name=\"maxMenge\">\r\n                      <InputNumber placeholder=\"Max\" style={{ width: '100%' }} />\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col span={6}>\r\n                    <Form.Item label=\"Min. EK-Preis\" name=\"minEkPreis\">\r\n                      <InputNumber placeholder=\"Min\" style={{ width: '100%' }} />\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col span={6}>\r\n                    <Form.Item label=\"Max. EK-Preis\" name=\"maxEkPreis\">\r\n                      <InputNumber placeholder=\"Max\" style={{ width: '100%' }} />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n                \r\n                <Row gutter={16}>\r\n                  <Col span={6}>\r\n                    <Form.Item label=\"Min. VK-Preis\" name=\"minVkPreis\">\r\n                      <InputNumber placeholder=\"Min\" style={{ width: '100%' }} />\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col span={6}>\r\n                    <Form.Item label=\"Max. VK-Preis\" name=\"maxVkPreis\">\r\n                      <InputNumber placeholder=\"Max\" style={{ width: '100%' }} />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n              </TabPane>\r\n            </Tabs>\r\n\r\n            <Divider />\r\n\r\n            <Row gutter={16} justify=\"end\">\r\n              <Col>\r\n                <Button \r\n                  icon={<ClearOutlined />} \r\n                  onClick={handleReset}\r\n                  disabled={loading}\r\n                >\r\n                  Zurücksetzen\r\n                </Button>\r\n              </Col>\r\n              <Col>\r\n                <Button \r\n                  type=\"primary\" \r\n                  icon={<SearchOutlined />}\r\n                  loading={loading}\r\n                >\r\n                  Filter anwenden\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </Collapse.Panel>\r\n      </Collapse>\r\n    </Card>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\streckengeschaeft\\StreckengeschaeftForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatCurrency' is defined but never used. Allowed unused vars must match /^_/u.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'calculateGewinn' is defined but never used. Allowed unused vars must match /^_/u.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'calculateGewinnmarge' is defined but never used. Allowed unused vars must match /^_/u.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":162,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4135,4138],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4135,4138],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":164,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4240,4243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4240,4243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'statusOptions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":185,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":185,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\r\nimport {\r\n  Form,\r\n  Input,\r\n  Select,\r\n  DatePicker,\r\n  InputNumber,\r\n  Button,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Typography,\r\n  Divider,\r\n  Tabs,\r\n  Checkbox,\r\n  Space,\r\n  message\r\n} from 'antd';\r\nimport {\r\n  SaveOutlined,\r\n  CloseOutlined,\r\n  CalculatorOutlined\r\n} from '@ant-design/icons';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport {\r\n  Streckengeschaeft,\r\n  StreckengeschaeftFormData,\r\n  StreckengeschaeftSchema,\r\n  VorgangsTyp,\r\n  StreckenStatus,\r\n  getVorgangsTypLabel,\r\n  getStatusLabel,\r\n  formatCurrency,\r\n  calculateGewinn,\r\n  calculateGewinnmarge,\r\n  calculateDeckungsbeitrag\r\n} from '../../types/streckengeschaeft';\r\n\r\nconst { TabPane } = Tabs;\r\nconst { Option } = Select;\r\nconst { Title, Text } = Typography;\r\n\r\ninterface StreckengeschaeftFormProps {\r\n  initialData?: Streckengeschaeft | null;\r\n  onSubmit: (data: StreckengeschaeftFormData) => void;\r\n  onCancel: () => void;\r\n  loading?: boolean;\r\n}\r\n\r\nexport const StreckengeschaeftForm: React.FC<StreckengeschaeftFormProps> = ({\r\n  initialData,\r\n  onSubmit,\r\n  onCancel,\r\n  loading = false\r\n}) => {\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    watch,\r\n    setValue,\r\n    formState: { errors, isValid }\r\n  } = useForm<StreckengeschaeftFormData>({\r\n    resolver: zodResolver(StreckengeschaeftSchema),\r\n    defaultValues: {\r\n      streckeNr: '',\r\n      vorgangsTyp: VorgangsTyp.KAUF,\r\n      datum: new Date().toISOString().split('T')[0],\r\n      vorgangPosition: '',\r\n      positionsNr: '',\r\n      artikelVon: '',\r\n      artikelBis: '',\r\n      artikelBezeichnung: '',\r\n      artikelNr: '',\r\n      sortenNr: '',\r\n      vertrag: '',\r\n      lieferschein: '',\r\n      kennzeichen: '',\r\n      lkwKennzeichen: '',\r\n      menge: 0,\r\n      einheit: 'kg',\r\n      ekPreis: 0,\r\n      vkPreis: 0,\r\n      frachtkosten: 0,\r\n      preisProEinheit: 0,\r\n      ekMenge: 0,\r\n      ekNetto: 0,\r\n      ekLieferkosten: 0,\r\n      ekRechnung: '',\r\n      ekKontakt: '',\r\n      ekKontaktNr: '',\r\n      vkMenge: 0,\r\n      vkNetto: 0,\r\n      vkLieferkosten: 0,\r\n      vkRechnung: '',\r\n      vkKontakt: '',\r\n      vkKontaktNr: '',\r\n      lieferant: '',\r\n      lieferantName: '',\r\n      lieferantNr: '',\r\n      kunde: '',\r\n      kundeName: '',\r\n      kundeNr: '',\r\n      spediteurNr: '',\r\n      spediteurName: '',\r\n      frachtart: 'LKW',\r\n      beEntladestelle: '',\r\n      beEntladestellePLZ: '',\r\n      land: 'Deutschland',\r\n      partienNr: '',\r\n      nlsNr: '',\r\n      bereich: '',\r\n      spediteur: '',\r\n      start: '',\r\n      ursprung: '',\r\n      lagerhalle: '',\r\n      fahrzeugKennzeichen: '',\r\n      kostenstelle: '',\r\n      bedarfsnummer: '',\r\n      summeVk: 0,\r\n      summeEk: 0,\r\n      restwert: 0,\r\n      geplanteMengeVk: 0,\r\n      geplanteMengeEk: 0,\r\n      bemerkung: '',\r\n      referenzNr: '',\r\n      waehrung: 'EUR',\r\n      skonto: 0,\r\n      rabatt: 0,\r\n      istBiomasse: false,\r\n      hatEingangsrechnung: false,\r\n      hatSpeditionsrechnung: false,\r\n      hatFrachtabrechnung: false,\r\n      deckungsbeitrag: 0\r\n    }\r\n  });\r\n\r\n  // Watch für Berechnungen\r\n  const watchedValues = watch();\r\n  const { ekPreis, vkPreis, menge, frachtkosten, ekMenge, vkMenge } = watchedValues;\r\n\r\n  // Berechnungen automatisch aktualisieren\r\n  useEffect(() => {\r\n    const ekNetto = ekPreis * ekMenge;\r\n    const vkNetto = vkPreis * vkMenge;\r\n    const summeEk = ekNetto + (watchedValues.ekLieferkosten || 0);\r\n    const summeVk = vkNetto + (watchedValues.vkLieferkosten || 0);\r\n    const deckungsbeitrag = calculateDeckungsbeitrag(summeVk, summeEk, frachtkosten);\r\n    const restwert = summeVk - summeEk - frachtkosten;\r\n\r\n    setValue('ekNetto', ekNetto);\r\n    setValue('vkNetto', vkNetto);\r\n    setValue('summeEk', summeEk);\r\n    setValue('summeVk', summeVk);\r\n    setValue('deckungsbeitrag', deckungsbeitrag);\r\n    setValue('restwert', restwert);\r\n  }, [ekPreis, vkPreis, menge, frachtkosten, ekMenge, vkMenge, watchedValues.ekLieferkosten, watchedValues.vkLieferkosten, setValue]);\r\n\r\n  // Initial-Daten setzen\r\n  useEffect(() => {\r\n    if (initialData) {\r\n      const formData: any = { ...initialData };\r\n      if (initialData.datum) {\r\n        formData.datum = initialData.datum as any;\r\n      }\r\n      setValue('datum', formData.datum);\r\n      Object.keys(formData).forEach(key => {\r\n        if (formData[key] !== undefined) {\r\n          setValue(key as keyof StreckengeschaeftFormData, formData[key]);\r\n        }\r\n      });\r\n    }\r\n  }, [initialData, setValue]);\r\n\r\n  const handleFormSubmit = (values: StreckengeschaeftFormData) => {\r\n    // Direkte Übergabe ohne Datum-Konvertierung\r\n    onSubmit(values);\r\n  };\r\n\r\n  const vorgangsTypOptions = Object.values(VorgangsTyp).map(typ => ({\r\n    label: getVorgangsTypLabel(typ),\r\n    value: typ\r\n  }));\r\n\r\n  const statusOptions = Object.values(StreckenStatus).map(status => ({\r\n    label: getStatusLabel(status),\r\n    value: status\r\n  }));\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <Title level={4}>\r\n          {initialData ? 'Streckengeschäft bearbeiten' : 'Neues Streckengeschäft'}\r\n        </Title>\r\n        <Space>\r\n          <Button\r\n            icon={<CalculatorOutlined />}\r\n            onClick={() => message.info('Berechnungen werden automatisch aktualisiert')}\r\n          >\r\n            Berechnungen\r\n          </Button>\r\n        </Space>\r\n      </div>\r\n\r\n      <Form layout=\"vertical\" onFinish={handleSubmit(handleFormSubmit)}>\r\n        <Tabs defaultActiveKey=\"1\" size=\"small\">\r\n\r\n          {/* GRUNDDATEN Tab */}\r\n          <TabPane tab=\"GRUNDDATEN\" key=\"1\">\r\n            <Row gutter={16}>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"streckeNr\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Strecke-Nr.\"\r\n                      validateStatus={errors.streckeNr ? 'error' : ''}\r\n                      help={errors.streckeNr?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Strecke-Nr. eingeben\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"vorgangsTyp\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Vorgangstyp\"\r\n                      validateStatus={errors.vorgangsTyp ? 'error' : ''}\r\n                      help={errors.vorgangsTyp?.message}\r\n                    >\r\n                      <Select {...field} placeholder=\"Vorgangstyp wählen\">\r\n                        {vorgangsTypOptions.map(option => (\r\n                          <Option key={option.value} value={option.value}>\r\n                            {option.label}\r\n                          </Option>\r\n                        ))}\r\n                      </Select>\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"datum\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Datum\"\r\n                      validateStatus={errors.datum ? 'error' : ''}\r\n                      help={errors.datum?.message}\r\n                    >\r\n                      <DatePicker\r\n                        {...field}\r\n                        style={{ width: '100%' }}\r\n                        format=\"DD.MM.YYYY\"\r\n                      />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row gutter={16}>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"vorgangPosition\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Vorgangsposition\"\r\n                      validateStatus={errors.vorgangPosition ? 'error' : ''}\r\n                      help={errors.vorgangPosition?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Vorgangsposition\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"positionsNr\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Positions-Nr.\"\r\n                      validateStatus={errors.positionsNr ? 'error' : ''}\r\n                      help={errors.positionsNr?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Positions-Nr.\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"bereich\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Bereich\"\r\n                      validateStatus={errors.bereich ? 'error' : ''}\r\n                      help={errors.bereich?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Bereich\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </TabPane>\r\n\r\n          {/* ARTIKEL Tab */}\r\n          <TabPane tab=\"ARTIKEL\" key=\"2\">\r\n            <Row gutter={16}>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"artikelVon\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Artikel von\"\r\n                      validateStatus={errors.artikelVon ? 'error' : ''}\r\n                      help={errors.artikelVon?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Artikel von\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"artikelBis\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Artikel bis\"\r\n                      validateStatus={errors.artikelBis ? 'error' : ''}\r\n                      help={errors.artikelBis?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Artikel bis\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"artikelNr\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Artikel-Nr.\"\r\n                      validateStatus={errors.artikelNr ? 'error' : ''}\r\n                      help={errors.artikelNr?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Artikel-Nr.\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row gutter={16}>\r\n              <Col span={12}>\r\n                <Controller\r\n                  name=\"artikelBezeichnung\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Artikelbezeichnung\"\r\n                      validateStatus={errors.artikelBezeichnung ? 'error' : ''}\r\n                      help={errors.artikelBezeichnung?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Artikelbezeichnung\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={12}>\r\n                <Controller\r\n                  name=\"sortenNr\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Sorten-Nr.\"\r\n                      validateStatus={errors.sortenNr ? 'error' : ''}\r\n                      help={errors.sortenNr?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Sorten-Nr.\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row gutter={16}>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"menge\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Menge\"\r\n                      validateStatus={errors.menge ? 'error' : ''}\r\n                      help={errors.menge?.message}\r\n                    >\r\n                      <InputNumber {...field} placeholder=\"Menge\" style={{ width: '100%' }} />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"einheit\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Einheit\"\r\n                      validateStatus={errors.einheit ? 'error' : ''}\r\n                      help={errors.einheit?.message}\r\n                    >\r\n                      <Select {...field} placeholder=\"Einheit wählen\">\r\n                        <Option value=\"kg\">kg</Option>\r\n                        <Option value=\"t\">t</Option>\r\n                        <Option value=\"Stück\">Stück</Option>\r\n                        <Option value=\"m³\">m³</Option>\r\n                        <Option value=\"l\">l</Option>\r\n                      </Select>\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"preisProEinheit\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Preis pro Einheit\"\r\n                      validateStatus={errors.preisProEinheit ? 'error' : ''}\r\n                      help={errors.preisProEinheit?.message}\r\n                    >\r\n                      <InputNumber {...field} placeholder=\"0.00\" style={{ width: '100%' }} />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </TabPane>\r\n\r\n          {/* VERTRÄGE & LIEFERSCHEINE Tab */}\r\n          <TabPane tab=\"VERTRÄGE & LIEFERSCHEINE\" key=\"3\">\r\n            <Row gutter={16}>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"vertrag\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Vertrag\"\r\n                      validateStatus={errors.vertrag ? 'error' : ''}\r\n                      help={errors.vertrag?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Vertrag\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"lieferschein\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Lieferschein\"\r\n                      validateStatus={errors.lieferschein ? 'error' : ''}\r\n                      help={errors.lieferschein?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Lieferschein\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"kennzeichen\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Kennzeichen\"\r\n                      validateStatus={errors.kennzeichen ? 'error' : ''}\r\n                      help={errors.kennzeichen?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Kennzeichen\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row gutter={16}>\r\n              <Col span={12}>\r\n                <Controller\r\n                  name=\"lkwKennzeichen\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"LKW-Kennzeichen\"\r\n                      validateStatus={errors.lkwKennzeichen ? 'error' : ''}\r\n                      help={errors.lkwKennzeichen?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"LKW-Kennzeichen\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={12}>\r\n                <Controller\r\n                  name=\"fahrzeugKennzeichen\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Fahrzeug-Kennzeichen\"\r\n                      validateStatus={errors.fahrzeugKennzeichen ? 'error' : ''}\r\n                      help={errors.fahrzeugKennzeichen?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Fahrzeug-Kennzeichen\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </TabPane>\r\n\r\n          {/* EINKAUF Tab */}\r\n          <TabPane tab=\"EINKAUF\" key=\"4\">\r\n            <Row gutter={16}>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"ekPreis\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"EK-Preis\"\r\n                      validateStatus={errors.ekPreis ? 'error' : ''}\r\n                      help={errors.ekPreis?.message}\r\n                    >\r\n                      <InputNumber {...field} placeholder=\"0.00\" style={{ width: '100%' }} />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"ekMenge\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"EK-Menge\"\r\n                      validateStatus={errors.ekMenge ? 'error' : ''}\r\n                      help={errors.ekMenge?.message}\r\n                    >\r\n                      <InputNumber {...field} placeholder=\"0\" style={{ width: '100%' }} />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"ekLieferkosten\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"EK-Lieferkosten\"\r\n                      validateStatus={errors.ekLieferkosten ? 'error' : ''}\r\n                      help={errors.ekLieferkosten?.message}\r\n                    >\r\n                      <InputNumber {...field} placeholder=\"0.00\" style={{ width: '100%' }} />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row gutter={16}>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"ekNetto\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"EK-Netto (berechnet)\"\r\n                      validateStatus={errors.ekNetto ? 'error' : ''}\r\n                      help={errors.ekNetto?.message}\r\n                    >\r\n                      <InputNumber {...field} disabled style={{ width: '100%' }} />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"ekRechnung\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"EK-Rechnung\"\r\n                      validateStatus={errors.ekRechnung ? 'error' : ''}\r\n                      help={errors.ekRechnung?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"EK-Rechnung\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"ekKontakt\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"EK-Kontakt\"\r\n                      validateStatus={errors.ekKontakt ? 'error' : ''}\r\n                      help={errors.ekKontakt?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"EK-Kontakt\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row gutter={16}>\r\n              <Col span={12}>\r\n                <Controller\r\n                  name=\"ekKontaktNr\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"EK-Kontakt-Nr.\"\r\n                      validateStatus={errors.ekKontaktNr ? 'error' : ''}\r\n                      help={errors.ekKontaktNr?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"EK-Kontakt-Nr.\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={12}>\r\n                <Controller\r\n                  name=\"summeEk\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Summe EK (berechnet)\"\r\n                      validateStatus={errors.summeEk ? 'error' : ''}\r\n                      help={errors.summeEk?.message}\r\n                    >\r\n                      <InputNumber {...field} disabled style={{ width: '100%' }} />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </TabPane>\r\n\r\n          {/* VERKAUF Tab */}\r\n          <TabPane tab=\"VERKAUF\" key=\"5\">\r\n            <Row gutter={16}>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"vkPreis\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"VK-Preis\"\r\n                      validateStatus={errors.vkPreis ? 'error' : ''}\r\n                      help={errors.vkPreis?.message}\r\n                    >\r\n                      <InputNumber {...field} placeholder=\"0.00\" style={{ width: '100%' }} />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"vkMenge\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"VK-Menge\"\r\n                      validateStatus={errors.vkMenge ? 'error' : ''}\r\n                      help={errors.vkMenge?.message}\r\n                    >\r\n                      <InputNumber {...field} placeholder=\"0\" style={{ width: '100%' }} />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"vkLieferkosten\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"VK-Lieferkosten\"\r\n                      validateStatus={errors.vkLieferkosten ? 'error' : ''}\r\n                      help={errors.vkLieferkosten?.message}\r\n                    >\r\n                      <InputNumber {...field} placeholder=\"0.00\" style={{ width: '100%' }} />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row gutter={16}>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"vkNetto\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"VK-Netto (berechnet)\"\r\n                      validateStatus={errors.vkNetto ? 'error' : ''}\r\n                      help={errors.vkNetto?.message}\r\n                    >\r\n                      <InputNumber {...field} disabled style={{ width: '100%' }} />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"vkRechnung\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"VK-Rechnung\"\r\n                      validateStatus={errors.vkRechnung ? 'error' : ''}\r\n                      help={errors.vkRechnung?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"VK-Rechnung\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"vkKontakt\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"VK-Kontakt\"\r\n                      validateStatus={errors.vkKontakt ? 'error' : ''}\r\n                      help={errors.vkKontakt?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"VK-Kontakt\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row gutter={16}>\r\n              <Col span={12}>\r\n                <Controller\r\n                  name=\"vkKontaktNr\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"VK-Kontakt-Nr.\"\r\n                      validateStatus={errors.vkKontaktNr ? 'error' : ''}\r\n                      help={errors.vkKontaktNr?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"VK-Kontakt-Nr.\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={12}>\r\n                <Controller\r\n                  name=\"summeVk\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Summe VK (berechnet)\"\r\n                      validateStatus={errors.summeVk ? 'error' : ''}\r\n                      help={errors.summeVk?.message}\r\n                    >\r\n                      <InputNumber {...field} disabled style={{ width: '100%' }} />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </TabPane>\r\n\r\n          {/* PARTNER Tab */}\r\n          <TabPane tab=\"PARTNER\" key=\"6\">\r\n            <Row gutter={16}>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"lieferant\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Lieferant\"\r\n                      validateStatus={errors.lieferant ? 'error' : ''}\r\n                      help={errors.lieferant?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Lieferant\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"lieferantName\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Lieferantname\"\r\n                      validateStatus={errors.lieferantName ? 'error' : ''}\r\n                      help={errors.lieferantName?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Lieferantname\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"lieferantNr\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Lieferant-Nr.\"\r\n                      validateStatus={errors.lieferantNr ? 'error' : ''}\r\n                      help={errors.lieferantNr?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Lieferant-Nr.\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row gutter={16}>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"kunde\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Kunde\"\r\n                      validateStatus={errors.kunde ? 'error' : ''}\r\n                      help={errors.kunde?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Kunde\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"kundeName\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Kundenname\"\r\n                      validateStatus={errors.kundeName ? 'error' : ''}\r\n                      help={errors.kundeName?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Kundenname\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"kundeNr\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Kunde-Nr.\"\r\n                      validateStatus={errors.kundeNr ? 'error' : ''}\r\n                      help={errors.kundeNr?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Kunde-Nr.\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </TabPane>\r\n\r\n          {/* SPEDITION Tab */}\r\n          <TabPane tab=\"SPEDITION\" key=\"7\">\r\n            <Row gutter={16}>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"spediteurNr\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Spediteur-Nr.\"\r\n                      validateStatus={errors.spediteurNr ? 'error' : ''}\r\n                      help={errors.spediteurNr?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Spediteur-Nr.\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"spediteurName\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Spediteurname\"\r\n                      validateStatus={errors.spediteurName ? 'error' : ''}\r\n                      help={errors.spediteurName?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Spediteurname\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"frachtart\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Frachtart\"\r\n                      validateStatus={errors.frachtart ? 'error' : ''}\r\n                      help={errors.frachtart?.message}\r\n                    >\r\n                      <Select {...field} placeholder=\"Frachtart wählen\">\r\n                        <Option value=\"LKW\">LKW</Option>\r\n                        <Option value=\"Bahn\">Bahn</Option>\r\n                        <Option value=\"Schiff\">Schiff</Option>\r\n                        <Option value=\"Flugzeug\">Flugzeug</Option>\r\n                      </Select>\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row gutter={16}>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"frachtkosten\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Frachtkosten\"\r\n                      validateStatus={errors.frachtkosten ? 'error' : ''}\r\n                      help={errors.frachtkosten?.message}\r\n                    >\r\n                      <InputNumber {...field} placeholder=\"0.00\" style={{ width: '100%' }} />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"spediteur\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Spediteur\"\r\n                      validateStatus={errors.spediteur ? 'error' : ''}\r\n                      help={errors.spediteur?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Spediteur\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"start\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Start\"\r\n                      validateStatus={errors.start ? 'error' : ''}\r\n                      help={errors.start?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Start\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row gutter={16}>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"ursprung\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Ursprung\"\r\n                      validateStatus={errors.ursprung ? 'error' : ''}\r\n                      help={errors.ursprung?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Ursprung\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"lagerhalle\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Lagerhalle\"\r\n                      validateStatus={errors.lagerhalle ? 'error' : ''}\r\n                      help={errors.lagerhalle?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Lagerhalle\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </TabPane>\r\n\r\n          {/* BE-/ENTLADESTELLE Tab */}\r\n          <TabPane tab=\"BE-/ENTLADESTELLE\" key=\"8\">\r\n            <Row gutter={16}>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"beEntladestelle\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Be-/Entladestelle\"\r\n                      validateStatus={errors.beEntladestelle ? 'error' : ''}\r\n                      help={errors.beEntladestelle?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Be-/Entladestelle\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"beEntladestellePLZ\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"PLZ Be-/Entladestelle\"\r\n                      validateStatus={errors.beEntladestellePLZ ? 'error' : ''}\r\n                      help={errors.beEntladestellePLZ?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"PLZ\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"land\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Land\"\r\n                      validateStatus={errors.land ? 'error' : ''}\r\n                      help={errors.land?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Land\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </TabPane>\r\n\r\n          {/* PARTIE/NLS Tab */}\r\n          <TabPane tab=\"PARTIE/NLS\" key=\"9\">\r\n            <Row gutter={16}>\r\n              <Col span={12}>\r\n                <Controller\r\n                  name=\"partienNr\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Partien-Nr.\"\r\n                      validateStatus={errors.partienNr ? 'error' : ''}\r\n                      help={errors.partienNr?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Partien-Nr.\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={12}>\r\n                <Controller\r\n                  name=\"nlsNr\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"NLS-Nr.\"\r\n                      validateStatus={errors.nlsNr ? 'error' : ''}\r\n                      help={errors.nlsNr?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"NLS-Nr.\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </TabPane>\r\n\r\n          {/* SONSTIGES Tab */}\r\n          <TabPane tab=\"SONSTIGES\" key=\"10\">\r\n            <Row gutter={16}>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"kostenstelle\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Kostenstelle\"\r\n                      validateStatus={errors.kostenstelle ? 'error' : ''}\r\n                      help={errors.kostenstelle?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Kostenstelle\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"bedarfsnummer\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Bedarfsnummer\"\r\n                      validateStatus={errors.bedarfsnummer ? 'error' : ''}\r\n                      help={errors.bedarfsnummer?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Bedarfsnummer\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"referenzNr\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Referenz-Nr.\"\r\n                      validateStatus={errors.referenzNr ? 'error' : ''}\r\n                      help={errors.referenzNr?.message}\r\n                    >\r\n                      <Input {...field} placeholder=\"Referenz-Nr.\" />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row gutter={16}>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"waehrung\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Währung\"\r\n                      validateStatus={errors.waehrung ? 'error' : ''}\r\n                      help={errors.waehrung?.message}\r\n                    >\r\n                      <Select {...field} placeholder=\"Währung wählen\">\r\n                        <Option value=\"EUR\">EUR</Option>\r\n                        <Option value=\"USD\">USD</Option>\r\n                        <Option value=\"CHF\">CHF</Option>\r\n                      </Select>\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"skonto\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Skonto (%)\"\r\n                      validateStatus={errors.skonto ? 'error' : ''}\r\n                      help={errors.skonto?.message}\r\n                    >\r\n                      <InputNumber {...field} placeholder=\"0\" min={0} max={100} style={{ width: '100%' }} />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={8}>\r\n                <Controller\r\n                  name=\"rabatt\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Rabatt (%)\"\r\n                      validateStatus={errors.rabatt ? 'error' : ''}\r\n                      help={errors.rabatt?.message}\r\n                    >\r\n                      <InputNumber {...field} placeholder=\"0\" min={0} max={100} style={{ width: '100%' }} />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row gutter={16}>\r\n              <Col span={12}>\r\n                <Controller\r\n                  name=\"bemerkung\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Form.Item\r\n                      label=\"Bemerkung\"\r\n                      validateStatus={errors.bemerkung ? 'error' : ''}\r\n                      help={errors.bemerkung?.message}\r\n                    >\r\n                      <Input.TextArea {...field} placeholder=\"Bemerkung\" rows={3} />\r\n                    </Form.Item>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col span={12}>\r\n                <div className=\"space-y-4\">\r\n                  <Controller\r\n                    name=\"istBiomasse\"\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                      <Form.Item label=\"Biomasse\">\r\n                        <Checkbox {...field} checked={field.value}>\r\n                          Ist Biomasse\r\n                        </Checkbox>\r\n                      </Form.Item>\r\n                    )}\r\n                  />\r\n\r\n                  <Controller\r\n                    name=\"hatEingangsrechnung\"\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                      <Form.Item label=\"Rechnungen\">\r\n                        <Checkbox {...field} checked={field.value}>\r\n                          Hat Eingangsrechnung\r\n                        </Checkbox>\r\n                      </Form.Item>\r\n                    )}\r\n                  />\r\n\r\n                  <Controller\r\n                    name=\"hatSpeditionsrechnung\"\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                      <Checkbox {...field} checked={field.value}>\r\n                        Hat Speditionsrechnung\r\n                      </Checkbox>\r\n                    )}\r\n                  />\r\n\r\n                  <Controller\r\n                    name=\"hatFrachtabrechnung\"\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                      <Checkbox {...field} checked={field.value}>\r\n                        Hat Frachtabrechnung\r\n                      </Checkbox>\r\n                    )}\r\n                  />\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </TabPane>\r\n\r\n          {/* BERECHNUNGEN Tab */}\r\n          <TabPane tab=\"BERECHNUNGEN\" key=\"11\">\r\n            <Card size=\"small\" className=\"mb-4\">\r\n              <Row gutter={16}>\r\n                <Col span={6}>\r\n                  <Form.Item label=\"Restwert (berechnet)\">\r\n                    <Controller\r\n                      name=\"restwert\"\r\n                      control={control}\r\n                      render={({ field }) => (\r\n                        <InputNumber {...field} disabled style={{ width: '100%' }} />\r\n                      )}\r\n                    />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col span={6}>\r\n                  <Form.Item label=\"Deckungsbeitrag (berechnet)\">\r\n                    <Controller\r\n                      name=\"deckungsbeitrag\"\r\n                      control={control}\r\n                      render={({ field }) => (\r\n                        <InputNumber {...field} disabled style={{ width: '100%' }} />\r\n                      )}\r\n                    />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col span={6}>\r\n                  <Form.Item label=\"Geplante Menge VK\">\r\n                    <Controller\r\n                      name=\"geplanteMengeVk\"\r\n                      control={control}\r\n                      render={({ field }) => (\r\n                        <InputNumber {...field} placeholder=\"0\" style={{ width: '100%' }} />\r\n                      )}\r\n                    />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col span={6}>\r\n                  <Form.Item label=\"Geplante Menge EK\">\r\n                    <Controller\r\n                      name=\"geplanteMengeEk\"\r\n                      control={control}\r\n                      render={({ field }) => (\r\n                        <InputNumber {...field} placeholder=\"0\" style={{ width: '100%' }} />\r\n                      )}\r\n                    />\r\n                  </Form.Item>\r\n                </Col>\r\n              </Row>\r\n            </Card>\r\n\r\n            <div className=\"text-sm text-gray-600\">\r\n              <Text strong>Hinweis:</Text> Berechnungen werden automatisch basierend auf EK-Preis, VK-Preis, Mengen und Frachtkosten aktualisiert.\r\n            </div>\r\n          </TabPane>\r\n        </Tabs>\r\n\r\n        <Divider />\r\n\r\n        <div className=\"flex justify-end space-x-2\">\r\n          <Button\r\n            icon={<CloseOutlined />}\r\n            onClick={onCancel}\r\n            disabled={loading}\r\n          >\r\n            Abbrechen\r\n          </Button>\r\n          <Button\r\n            type=\"primary\"\r\n            icon={<SaveOutlined />}\r\n            onClick={handleSubmit(handleFormSubmit)}\r\n            loading={loading}\r\n            disabled={!isValid}\r\n          >\r\n            {initialData ? 'Aktualisieren' : 'Erstellen'}\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    </div>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\streckengeschaeft\\StreckengeschaeftList.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'calculateGewinn' is defined but never used. Allowed unused vars must match /^_/u.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'calculateGewinnmarge' is defined but never used. Allowed unused vars must match /^_/u.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'calculateDeckungsbeitrag' is defined but never used. Allowed unused vars must match /^_/u.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used. Allowed unused args must match /^_/u.","line":271,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":271,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":303,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":303,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8578,8581],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8578,8581],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":551,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":551,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14372,14375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14372,14375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { \r\n  Table, \r\n  Input, \r\n  Button, \r\n  Space, \r\n  Modal, \r\n  message, \r\n  Card, \r\n  Typography, \r\n  Tag, \r\n  Tooltip,\r\n  Row,\r\n  Col,\r\n  Statistic,\r\n  Divider\r\n} from 'antd';\r\nimport { \r\n  PlusOutlined, \r\n  SearchOutlined, \r\n  EditOutlined, \r\n  DeleteOutlined, \r\n  EyeOutlined,\r\n  DownloadOutlined,\r\n  ReloadOutlined\r\n} from '@ant-design/icons';\r\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { \r\n  Streckengeschaeft, \r\n  StreckengeschaeftFilter, \r\n  VorgangsTyp, \r\n  StreckenStatus,\r\n  getVorgangsTypLabel, \r\n  getStatusLabel, \r\n  getStatusColor,\r\n  formatCurrency,\r\n  formatNumber,\r\n  formatDate,\r\n  calculateGewinn,\r\n  calculateGewinnmarge,\r\n  calculateDeckungsbeitrag,\r\n  StreckengeschaeftSummen\r\n} from '../../types/streckengeschaeft';\r\nimport { StreckengeschaeftForm } from './StreckengeschaeftForm';\r\nimport { StreckengeschaeftFilterPanel } from './StreckengeschaeftFilterPanel';\r\n\r\nconst { Search } = Input;\r\nconst { Title, Text } = Typography;\r\n\r\n// Mock-Daten für erweiterte Felder\r\nconst mockStreckengeschaeftData: Streckengeschaeft[] = [\r\n  {\r\n    streckeNr: 'STR-2024-001',\r\n    vorgangsTyp: VorgangsTyp.KAUF,\r\n    datum: '2024-01-15',\r\n    vorgangPosition: 'POS-001',\r\n    positionsNr: '001',\r\n    artikelVon: 'ART-001',\r\n    artikelBis: 'ART-002',\r\n    artikelBezeichnung: 'Holzpellets Premium',\r\n    artikelNr: 'HP-001',\r\n    sortenNr: 'SORT-001',\r\n    vertrag: 'V-2024-001',\r\n    lieferschein: 'LS-2024-001',\r\n    kennzeichen: 'KENN-001',\r\n    lkwKennzeichen: 'M-AB-1234',\r\n    menge: 1000,\r\n    einheit: 'kg',\r\n    ekPreis: 0.25,\r\n    vkPreis: 0.35,\r\n    frachtkosten: 150,\r\n    preisProEinheit: 0.30,\r\n    ekMenge: 1000,\r\n    ekNetto: 250,\r\n    ekLieferkosten: 50,\r\n    ekRechnung: 'EK-R-001',\r\n    ekKontakt: 'Max Mustermann',\r\n    ekKontaktNr: 'EK-001',\r\n    vkMenge: 1000,\r\n    vkNetto: 350,\r\n    vkLieferkosten: 100,\r\n    vkRechnung: 'VK-R-001',\r\n    vkKontakt: 'Anna Schmidt',\r\n    vkKontaktNr: 'VK-001',\r\n    lieferant: 'Holzlieferant GmbH',\r\n    lieferantName: 'Holzlieferant GmbH',\r\n    lieferantNr: 'L-001',\r\n    kunde: 'Energieversorger AG',\r\n    kundeName: 'Energieversorger AG',\r\n    kundeNr: 'K-001',\r\n    spediteurNr: 'SP-001',\r\n    spediteurName: 'Schnell Transport',\r\n    frachtart: 'LKW',\r\n    beEntladestelle: 'Lagerhalle Nord',\r\n    beEntladestellePLZ: '12345',\r\n    land: 'Deutschland',\r\n    partienNr: 'PART-001',\r\n    nlsNr: 'NLS-001',\r\n    bereich: 'Biomasse',\r\n    spediteur: 'Schnell Transport',\r\n    start: 'Hamburg',\r\n    ursprung: 'Skandinavien',\r\n    lagerhalle: 'Lager Nord',\r\n    fahrzeugKennzeichen: 'HH-AB-5678',\r\n    kostenstelle: 'KS-001',\r\n    bedarfsnummer: 'BED-001',\r\n    summeVk: 350,\r\n    summeEk: 250,\r\n    restwert: 100,\r\n    geplanteMengeVk: 1000,\r\n    geplanteMengeEk: 1000,\r\n    status: StreckenStatus.BESTÄTIGT,\r\n    erstelltAm: '2024-01-10',\r\n    geaendertAm: '2024-01-15',\r\n    erstelltVon: 'admin',\r\n    bemerkung: 'Premium-Qualität, schnelle Lieferung',\r\n    referenzNr: 'REF-001',\r\n    waehrung: 'EUR',\r\n    skonto: 2,\r\n    rabatt: 5,\r\n    istBiomasse: true,\r\n    hatEingangsrechnung: true,\r\n    hatSpeditionsrechnung: true,\r\n    hatFrachtabrechnung: true,\r\n    deckungsbeitrag: 50\r\n  },\r\n  {\r\n    streckeNr: 'STR-2024-002',\r\n    vorgangsTyp: VorgangsTyp.VERKAUF,\r\n    datum: '2024-01-20',\r\n    vorgangPosition: 'POS-002',\r\n    positionsNr: '002',\r\n    artikelVon: 'ART-003',\r\n    artikelBis: 'ART-004',\r\n    artikelBezeichnung: 'Hackschnitzel Standard',\r\n    artikelNr: 'HS-001',\r\n    sortenNr: 'SORT-002',\r\n    vertrag: 'V-2024-002',\r\n    lieferschein: 'LS-2024-002',\r\n    kennzeichen: 'KENN-002',\r\n    lkwKennzeichen: 'M-CD-5678',\r\n    menge: 2000,\r\n    einheit: 'kg',\r\n    ekPreis: 0.15,\r\n    vkPreis: 0.25,\r\n    frachtkosten: 200,\r\n    preisProEinheit: 0.20,\r\n    ekMenge: 2000,\r\n    ekNetto: 300,\r\n    ekLieferkosten: 75,\r\n    ekRechnung: 'EK-R-002',\r\n    ekKontakt: 'Peter Müller',\r\n    ekKontaktNr: 'EK-002',\r\n    vkMenge: 2000,\r\n    vkNetto: 500,\r\n    vkLieferkosten: 125,\r\n    vkRechnung: 'VK-R-002',\r\n    vkKontakt: 'Maria Weber',\r\n    vkKontaktNr: 'VK-002',\r\n    lieferant: 'Waldholz AG',\r\n    lieferantName: 'Waldholz AG',\r\n    lieferantNr: 'L-002',\r\n    kunde: 'Heizwerk Süd',\r\n    kundeName: 'Heizwerk Süd',\r\n    kundeNr: 'K-002',\r\n    spediteurNr: 'SP-002',\r\n    spediteurName: 'Grün Transport',\r\n    frachtart: 'LKW',\r\n    beEntladestelle: 'Heizwerk Süd',\r\n    beEntladestellePLZ: '54321',\r\n    land: 'Deutschland',\r\n    partienNr: 'PART-002',\r\n    nlsNr: 'NLS-002',\r\n    bereich: 'Biomasse',\r\n    spediteur: 'Grün Transport',\r\n    start: 'München',\r\n    ursprung: 'Bayern',\r\n    lagerhalle: 'Lager Süd',\r\n    fahrzeugKennzeichen: 'M-CD-9012',\r\n    kostenstelle: 'KS-002',\r\n    bedarfsnummer: 'BED-002',\r\n    summeVk: 500,\r\n    summeEk: 300,\r\n    restwert: 200,\r\n    geplanteMengeVk: 2000,\r\n    geplanteMengeEk: 2000,\r\n    status: StreckenStatus.IN_BEARBEITUNG,\r\n    erstelltAm: '2024-01-18',\r\n    geaendertAm: '2024-01-20',\r\n    erstelltVon: 'admin',\r\n    bemerkung: 'Standard-Qualität, regionale Herkunft',\r\n    referenzNr: 'REF-002',\r\n    waehrung: 'EUR',\r\n    skonto: 1,\r\n    rabatt: 3,\r\n    istBiomasse: true,\r\n    hatEingangsrechnung: false,\r\n    hatSpeditionsrechnung: true,\r\n    hatFrachtabrechnung: false,\r\n    deckungsbeitrag: 125\r\n  }\r\n];\r\n\r\n// Mock-Summen-Daten\r\nconst mockSummen: StreckengeschaeftSummen = {\r\n  ekBetragInklMwSt: 654.50,\r\n  vkBetragInklMwSt: 1012.00,\r\n  frachtkosten: 350.00,\r\n  sollDifferenz: 357.50,\r\n  istDifferenz: 350.00,\r\n  mwst: 157.50,\r\n  deckungsbeitrag: 175.00,\r\n  differenzSollIst: 7.50,\r\n  restMenge: 0,\r\n  restWert: 300.00,\r\n  geplanteMengenEk: 3000,\r\n  geplanteMengenVk: 3000\r\n};\r\n\r\nexport const StreckengeschaeftList: React.FC = () => {\r\n  const [searchText, setSearchText] = useState('');\r\n  const [filter, setFilter] = useState<StreckengeschaeftFilter>({});\r\n  const [isFormVisible, setIsFormVisible] = useState(false);\r\n  const [editingRecord, setEditingRecord] = useState<Streckengeschaeft | null>(null);\r\n  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);\r\n  \r\n  const queryClient = useQueryClient();\r\n\r\n  // Mock Query für Streckengeschäfte\r\n  const { data: streckengeschaeftData = [], isLoading } = useQuery({\r\n    queryKey: ['streckengeschaeft', filter, searchText],\r\n    queryFn: () => {\r\n      // Mock-Filterung\r\n      let filteredData = [...mockStreckengeschaeftData];\r\n      \r\n      if (searchText) {\r\n        filteredData = filteredData.filter(item =>\r\n          item.streckeNr.toLowerCase().includes(searchText.toLowerCase()) ||\r\n          item.artikelBezeichnung.toLowerCase().includes(searchText.toLowerCase()) ||\r\n          item.lieferantName.toLowerCase().includes(searchText.toLowerCase()) ||\r\n          item.kundeName.toLowerCase().includes(searchText.toLowerCase())\r\n        );\r\n      }\r\n      \r\n      return filteredData;\r\n    }\r\n  });\r\n\r\n  // Mock Query für Summen\r\n  const { data: summen = mockSummen } = useQuery({\r\n    queryKey: ['streckengeschaeft-summen', filter],\r\n    queryFn: () => mockSummen\r\n  });\r\n\r\n  // Mock Mutation für Erstellen/Bearbeiten\r\n  const createMutation = useMutation({\r\n    mutationFn: (data: Streckengeschaeft) => {\r\n      return new Promise<Streckengeschaeft>((resolve) => {\r\n        setTimeout(() => resolve(data), 1000);\r\n      });\r\n    },\r\n    onSuccess: () => {\r\n      message.success('Streckengeschäft erfolgreich erstellt');\r\n      setIsFormVisible(false);\r\n      queryClient.invalidateQueries({ queryKey: ['streckengeschaeft'] });\r\n    }\r\n  });\r\n\r\n  // Mock Mutation für Löschen\r\n  const deleteMutation = useMutation({\r\n    mutationFn: (id: string) => {\r\n      return new Promise<void>((resolve) => {\r\n        setTimeout(() => resolve(), 1000);\r\n      });\r\n    },\r\n    onSuccess: () => {\r\n      message.success('Streckengeschäft erfolgreich gelöscht');\r\n      queryClient.invalidateQueries({ queryKey: ['streckengeschaeft'] });\r\n    }\r\n  });\r\n\r\n  const handleCreate = () => {\r\n    setEditingRecord(null);\r\n    setIsFormVisible(true);\r\n  };\r\n\r\n  const handleEdit = (record: Streckengeschaeft) => {\r\n    setEditingRecord(record);\r\n    setIsFormVisible(true);\r\n  };\r\n\r\n  const handleDelete = (record: Streckengeschaeft) => {\r\n    Modal.confirm({\r\n      title: 'Streckengeschäft löschen',\r\n      content: `Möchten Sie das Streckengeschäft \"${record.streckeNr}\" wirklich löschen?`,\r\n      okText: 'Löschen',\r\n      okType: 'danger',\r\n      cancelText: 'Abbrechen',\r\n      onOk: () => deleteMutation.mutate(record.streckeNr)\r\n    });\r\n  };\r\n\r\n  const handleFormSubmit = (values: any) => {\r\n    if (editingRecord) {\r\n      // Bearbeiten\r\n      createMutation.mutate({ ...editingRecord, ...values });\r\n    } else {\r\n      // Erstellen\r\n      const newRecord: Streckengeschaeft = {\r\n        ...values,\r\n        streckeNr: `STR-${Date.now()}`,\r\n        status: StreckenStatus.ENTWURF,\r\n        erstelltAm: new Date().toISOString().split('T')[0],\r\n        geaendertAm: new Date().toISOString().split('T')[0],\r\n        erstelltVon: 'admin'\r\n      };\r\n      createMutation.mutate(newRecord);\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Strecke-Nr.',\r\n      dataIndex: 'streckeNr',\r\n      key: 'streckeNr',\r\n      fixed: 'left' as const,\r\n      width: 120,\r\n      render: (text: string) => <Text strong>{text}</Text>\r\n    },\r\n    {\r\n      title: 'Datum',\r\n      dataIndex: 'datum',\r\n      key: 'datum',\r\n      width: 100,\r\n      render: (text: string) => formatDate(text)\r\n    },\r\n    {\r\n      title: 'Vorgang',\r\n      dataIndex: 'vorgangsTyp',\r\n      key: 'vorgangsTyp',\r\n      width: 100,\r\n      render: (text: VorgangsTyp) => (\r\n        <Tag color={text === VorgangsTyp.KAUF ? 'blue' : 'green'}>\r\n          {getVorgangsTypLabel(text)}\r\n        </Tag>\r\n      )\r\n    },\r\n    {\r\n      title: 'Vorgangsposition',\r\n      dataIndex: 'vorgangPosition',\r\n      key: 'vorgangPosition',\r\n      width: 120\r\n    },\r\n    {\r\n      title: 'Positions-Nr.',\r\n      dataIndex: 'positionsNr',\r\n      key: 'positionsNr',\r\n      width: 100\r\n    },\r\n    {\r\n      title: 'Vertrag',\r\n      dataIndex: 'vertrag',\r\n      key: 'vertrag',\r\n      width: 100\r\n    },\r\n    {\r\n      title: 'Lieferschein',\r\n      dataIndex: 'lieferschein',\r\n      key: 'lieferschein',\r\n      width: 120\r\n    },\r\n    {\r\n      title: 'Kennzeichen',\r\n      dataIndex: 'kennzeichen',\r\n      key: 'kennzeichen',\r\n      width: 100\r\n    },\r\n    {\r\n      title: 'Artikel-Nr.',\r\n      dataIndex: 'artikelNr',\r\n      key: 'artikelNr',\r\n      width: 100\r\n    },\r\n    {\r\n      title: 'Artikelbezeichnung',\r\n      dataIndex: 'artikelBezeichnung',\r\n      key: 'artikelBezeichnung',\r\n      width: 200\r\n    },\r\n    {\r\n      title: 'Bereich',\r\n      dataIndex: 'bereich',\r\n      key: 'bereich',\r\n      width: 100\r\n    },\r\n    {\r\n      title: 'Lieferant',\r\n      dataIndex: 'lieferantName',\r\n      key: 'lieferantName',\r\n      width: 150\r\n    },\r\n    {\r\n      title: 'EK-Kontakt',\r\n      dataIndex: 'ekKontakt',\r\n      key: 'ekKontakt',\r\n      width: 120\r\n    },\r\n    {\r\n      title: 'EK-Menge',\r\n      dataIndex: 'ekMenge',\r\n      key: 'ekMenge',\r\n      width: 100,\r\n      render: (value: number) => formatNumber(value)\r\n    },\r\n    {\r\n      title: 'EK-Netto',\r\n      dataIndex: 'ekNetto',\r\n      key: 'ekNetto',\r\n      width: 100,\r\n      render: (value: number) => formatCurrency(value)\r\n    },\r\n    {\r\n      title: 'EK-Lieferkosten',\r\n      dataIndex: 'ekLieferkosten',\r\n      key: 'ekLieferkosten',\r\n      width: 120,\r\n      render: (value: number) => formatCurrency(value)\r\n    },\r\n    {\r\n      title: 'EK-Rechnung',\r\n      dataIndex: 'ekRechnung',\r\n      key: 'ekRechnung',\r\n      width: 100\r\n    },\r\n    {\r\n      title: 'Kunde',\r\n      dataIndex: 'kundeName',\r\n      key: 'kundeName',\r\n      width: 150\r\n    },\r\n    {\r\n      title: 'VK-Kontakt',\r\n      dataIndex: 'vkKontakt',\r\n      key: 'vkKontakt',\r\n      width: 120\r\n    },\r\n    {\r\n      title: 'VK-Menge',\r\n      dataIndex: 'vkMenge',\r\n      key: 'vkMenge',\r\n      width: 100,\r\n      render: (value: number) => formatNumber(value)\r\n    },\r\n    {\r\n      title: 'VK-Netto',\r\n      dataIndex: 'vkNetto',\r\n      key: 'vkNetto',\r\n      width: 100,\r\n      render: (value: number) => formatCurrency(value)\r\n    },\r\n    {\r\n      title: 'VK-Lieferkosten',\r\n      dataIndex: 'vkLieferkosten',\r\n      key: 'vkLieferkosten',\r\n      width: 120,\r\n      render: (value: number) => formatCurrency(value)\r\n    },\r\n    {\r\n      title: 'VK-Rechnung',\r\n      dataIndex: 'vkRechnung',\r\n      key: 'vkRechnung',\r\n      width: 100\r\n    },\r\n    {\r\n      title: 'Spediteur-Nr.',\r\n      dataIndex: 'spediteurNr',\r\n      key: 'spediteurNr',\r\n      width: 100\r\n    },\r\n    {\r\n      title: 'Speditionsname',\r\n      dataIndex: 'spediteurName',\r\n      key: 'spediteurName',\r\n      width: 150\r\n    },\r\n    {\r\n      title: 'Frachtart',\r\n      dataIndex: 'frachtart',\r\n      key: 'frachtart',\r\n      width: 100\r\n    },\r\n    {\r\n      title: 'Frachtkosten',\r\n      dataIndex: 'frachtkosten',\r\n      key: 'frachtkosten',\r\n      width: 100,\r\n      render: (value: number) => formatCurrency(value)\r\n    },\r\n    {\r\n      title: 'Preis pro Einheit',\r\n      dataIndex: 'preisProEinheit',\r\n      key: 'preisProEinheit',\r\n      width: 120,\r\n      render: (value: number) => formatCurrency(value)\r\n    },\r\n    {\r\n      title: 'Summe VK',\r\n      dataIndex: 'summeVk',\r\n      key: 'summeVk',\r\n      width: 100,\r\n      render: (value: number) => formatCurrency(value)\r\n    },\r\n    {\r\n      title: 'Summe EK',\r\n      dataIndex: 'summeEk',\r\n      key: 'summeEk',\r\n      width: 100,\r\n      render: (value: number) => formatCurrency(value)\r\n    },\r\n    {\r\n      title: 'Restwert',\r\n      dataIndex: 'restwert',\r\n      key: 'restwert',\r\n      width: 100,\r\n      render: (value: number) => formatCurrency(value)\r\n    },\r\n    {\r\n      title: 'Geplante Menge VK',\r\n      dataIndex: 'geplanteMengeVk',\r\n      key: 'geplanteMengeVk',\r\n      width: 140,\r\n      render: (value: number) => formatNumber(value)\r\n    },\r\n    {\r\n      title: 'Status',\r\n      dataIndex: 'status',\r\n      key: 'status',\r\n      width: 120,\r\n      fixed: 'right' as const,\r\n      render: (text: StreckenStatus) => (\r\n        <Tag color={getStatusColor(text)}>\r\n          {getStatusLabel(text)}\r\n        </Tag>\r\n      )\r\n    },\r\n    {\r\n      title: 'Aktionen',\r\n      key: 'actions',\r\n      fixed: 'right' as const,\r\n      width: 120,\r\n      render: (_: any, record: Streckengeschaeft) => (\r\n        <Space size=\"small\">\r\n          <Tooltip title=\"Anzeigen\">\r\n            <Button \r\n              type=\"text\" \r\n              size=\"small\" \r\n              icon={<EyeOutlined />} \r\n            />\r\n          </Tooltip>\r\n          <Tooltip title=\"Bearbeiten\">\r\n            <Button \r\n              type=\"text\" \r\n              size=\"small\" \r\n              icon={<EditOutlined />} \r\n              onClick={() => handleEdit(record)}\r\n            />\r\n          </Tooltip>\r\n          <Tooltip title=\"Löschen\">\r\n            <Button \r\n              type=\"text\" \r\n              size=\"small\" \r\n              danger \r\n              icon={<DeleteOutlined />} \r\n              onClick={() => handleDelete(record)}\r\n            />\r\n          </Tooltip>\r\n        </Space>\r\n      )\r\n    }\r\n  ];\r\n\r\n  const rowSelection = {\r\n    selectedRowKeys,\r\n    onChange: (newSelectedRowKeys: React.Key[]) => {\r\n      setSelectedRowKeys(newSelectedRowKeys);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      {/* Header */}\r\n      <div className=\"flex justify-between items-center\">\r\n        <Title level={3}>Streckengeschäfte</Title>\r\n        <Space>\r\n          <Button \r\n            icon={<DownloadOutlined />}\r\n            onClick={() => message.info('Export-Funktion wird implementiert')}\r\n          >\r\n            Export\r\n          </Button>\r\n          <Button \r\n            icon={<ReloadOutlined />}\r\n            onClick={() => queryClient.invalidateQueries({ queryKey: ['streckengeschaeft'] })}\r\n            loading={isLoading}\r\n          >\r\n            Aktualisieren\r\n          </Button>\r\n          <Button \r\n            type=\"primary\" \r\n            icon={<PlusOutlined />}\r\n            onClick={handleCreate}\r\n          >\r\n            Neues Streckengeschäft\r\n          </Button>\r\n        </Space>\r\n      </div>\r\n\r\n      {/* Filter Panel */}\r\n      <StreckengeschaeftFilterPanel\r\n        onFilterChange={setFilter}\r\n        onReset={() => setFilter({})}\r\n        loading={isLoading}\r\n      />\r\n\r\n      {/* Summen-Anzeige */}\r\n      <Card size=\"small\" className=\"mb-4\">\r\n        <Row gutter={16}>\r\n          <Col span={3}>\r\n            <Statistic \r\n              title=\"EK-Betrag inkl. MwSt.\" \r\n              value={summen.ekBetragInklMwSt} \r\n              precision={2}\r\n              suffix=\"€\"\r\n            />\r\n          </Col>\r\n          <Col span={3}>\r\n            <Statistic \r\n              title=\"VK-Betrag inkl. MwSt.\" \r\n              value={summen.vkBetragInklMwSt} \r\n              precision={2}\r\n              suffix=\"€\"\r\n            />\r\n          </Col>\r\n          <Col span={3}>\r\n            <Statistic \r\n              title=\"Frachtkosten\" \r\n              value={summen.frachtkosten} \r\n              precision={2}\r\n              suffix=\"€\"\r\n            />\r\n          </Col>\r\n          <Col span={3}>\r\n            <Statistic \r\n              title=\"Soll/Ist Differenz\" \r\n              value={summen.sollDifferenz} \r\n              precision={2}\r\n              suffix=\"€\"\r\n            />\r\n          </Col>\r\n          <Col span={3}>\r\n            <Statistic \r\n              title=\"MwSt.\" \r\n              value={summen.mwst} \r\n              precision={2}\r\n              suffix=\"€\"\r\n            />\r\n          </Col>\r\n          <Col span={3}>\r\n            <Statistic \r\n              title=\"Deckungsbeitrag\" \r\n              value={summen.deckungsbeitrag} \r\n              precision={2}\r\n              suffix=\"€\"\r\n              valueStyle={{ color: summen.deckungsbeitrag > 0 ? '#3f8600' : '#cf1322' }}\r\n            />\r\n          </Col>\r\n          <Col span={3}>\r\n            <Statistic \r\n              title=\"Differenz Soll/Ist\" \r\n              value={summen.differenzSollIst} \r\n              precision={2}\r\n              suffix=\"€\"\r\n              valueStyle={{ color: summen.differenzSollIst > 0 ? '#3f8600' : '#cf1322' }}\r\n            />\r\n          </Col>\r\n          <Col span={3}>\r\n            <Statistic \r\n              title=\"Rest-Menge\" \r\n              value={summen.restMenge} \r\n              suffix=\"kg\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Divider />\r\n        <Row gutter={16}>\r\n          <Col span={3}>\r\n            <Statistic \r\n              title=\"Rest-Wert\" \r\n              value={summen.restWert} \r\n              precision={2}\r\n              suffix=\"€\"\r\n            />\r\n          </Col>\r\n          <Col span={3}>\r\n            <Statistic \r\n              title=\"Geplante Mengen EK\" \r\n              value={summen.geplanteMengenEk} \r\n              suffix=\"kg\"\r\n            />\r\n          </Col>\r\n          <Col span={3}>\r\n            <Statistic \r\n              title=\"Geplante Mengen VK\" \r\n              value={summen.geplanteMengenVk} \r\n              suffix=\"kg\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Card>\r\n\r\n      {/* Tabelle */}\r\n      <Card>\r\n        <div className=\"mb-4\">\r\n          <Search\r\n            placeholder=\"Streckengeschäfte durchsuchen...\"\r\n            allowClear\r\n            enterButton={<SearchOutlined />}\r\n            size=\"large\"\r\n            value={searchText}\r\n            onChange={(e) => setSearchText(e.target.value)}\r\n            style={{ maxWidth: 400 }}\r\n          />\r\n        </div>\r\n\r\n        <Table\r\n          columns={columns}\r\n          dataSource={streckengeschaeftData}\r\n          rowKey=\"streckeNr\"\r\n          loading={isLoading}\r\n          scroll={{ x: 3000 }}\r\n          pagination={{\r\n            total: streckengeschaeftData.length,\r\n            pageSize: 20,\r\n            showSizeChanger: true,\r\n            showQuickJumper: true,\r\n            showTotal: (total, range) => \r\n              `${range[0]}-${range[1]} von ${total} Streckengeschäften`\r\n          }}\r\n          rowSelection={rowSelection}\r\n          size=\"small\"\r\n        />\r\n      </Card>\r\n\r\n      {/* Form Modal */}\r\n      <Modal\r\n        title={editingRecord ? 'Streckengeschäft bearbeiten' : 'Neues Streckengeschäft'}\r\n        open={isFormVisible}\r\n        onCancel={() => setIsFormVisible(false)}\r\n        footer={null}\r\n        width={1200}\r\n        destroyOnClose\r\n      >\r\n        <StreckengeschaeftForm\r\n          initialData={editingRecord}\r\n          onSubmit={handleFormSubmit}\r\n          onCancel={() => setIsFormVisible(false)}\r\n          loading={createMutation.isPending}\r\n        />\r\n      </Modal>\r\n    </div>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\tables\\InvoiceTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2562,2565],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2562,2565],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2575,2578],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2575,2578],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from 'react';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  TablePagination,\r\n  TableSortLabel,\r\n  Chip,\r\n  IconButton,\r\n  Tooltip,\r\n  Box,\r\n  Typography,\r\n  TextField,\r\n  InputAdornment,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Alert,\r\n  CircularProgress\r\n} from '@mui/material';\r\nimport {\r\n  Visibility as ViewIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Search as SearchIcon,\r\n  FilterList as FilterIcon,\r\n  Euro as EuroIcon,\r\n  Person as PersonIcon,\r\n  Assignment as AssignmentIcon\r\n} from '@mui/icons-material';\r\nimport { Invoice, Customer, InvoiceStatus } from '../../types/invoices';\r\n\r\ninterface InvoiceTableProps {\r\n  invoices: Invoice[];\r\n  customers: Customer[];\r\n  isLoading?: boolean;\r\n  onView?: (invoice: Invoice) => void;\r\n  onEdit?: (invoice: Invoice) => void;\r\n  onDelete?: (invoice: Invoice) => void;\r\n}\r\n\r\ntype SortField = 'created_at' | 'amount' | 'status' | 'customer_id';\r\ntype SortOrder = 'asc' | 'desc';\r\n\r\nexport const InvoiceTable: React.FC<InvoiceTableProps> = ({\r\n  invoices,\r\n  customers,\r\n  isLoading = false,\r\n  onView,\r\n  onEdit,\r\n  onDelete\r\n}) => {\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [sortField, setSortField] = useState<SortField>('created_at');\r\n  const [sortOrder, setSortOrder] = useState<SortOrder>('desc');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState<InvoiceStatus | 'all'>('all');\r\n\r\n  // Sortierung\r\n  const handleSort = (field: SortField) => {\r\n    const isAsc = sortField === field && sortOrder === 'asc';\r\n    setSortOrder(isAsc ? 'desc' : 'asc');\r\n    setSortField(field);\r\n  };\r\n\r\n  // Gefilterte und sortierte Daten\r\n  const filteredAndSortedInvoices = useMemo(() => {\r\n    const filtered = invoices.filter(invoice => {\r\n      const customer = customers.find(c => c.id === invoice.customer_id);\r\n      const matchesSearch = searchTerm === '' || \r\n        customer?.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        customer?.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        invoice.amount.toString().includes(searchTerm) ||\r\n        invoice.id?.toLowerCase().includes(searchTerm.toLowerCase());\r\n      \r\n      const matchesStatus = statusFilter === 'all' || invoice.status === statusFilter;\r\n      \r\n      return matchesSearch && matchesStatus;\r\n    });\r\n\r\n    // Sortierung\r\n    filtered.sort((a, b) => {\r\n      let aValue: any, bValue: any;\r\n      \r\n      switch (sortField) {\r\n        case 'customer_id':\r\n          const customerA = customers.find(c => c.id === a.customer_id);\r\n          const customerB = customers.find(c => c.id === b.customer_id);\r\n          aValue = customerA?.name || '';\r\n          bValue = customerB?.name || '';\r\n          break;\r\n        case 'amount':\r\n          aValue = a.amount;\r\n          bValue = b.amount;\r\n          break;\r\n        case 'status':\r\n          aValue = a.status;\r\n          bValue = b.status;\r\n          break;\r\n        case 'created_at':\r\n          aValue = new Date(a.created_at || '').getTime();\r\n          bValue = new Date(b.created_at || '').getTime();\r\n          break;\r\n        default:\r\n          return 0;\r\n      }\r\n\r\n      if (aValue < bValue) return sortOrder === 'asc' ? -1 : 1;\r\n      if (aValue > bValue) return sortOrder === 'asc' ? 1 : -1;\r\n      return 0;\r\n    });\r\n\r\n    return filtered;\r\n  }, [invoices, customers, searchTerm, statusFilter, sortField, sortOrder]);\r\n\r\n  // Paginierung\r\n  const paginatedInvoices = filteredAndSortedInvoices.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  // Status-Chip-Komponente\r\n  const StatusChip: React.FC<{ status: InvoiceStatus }> = ({ status }) => {\r\n    const getStatusConfig = (status: InvoiceStatus) => {\r\n      switch (status) {\r\n        case 'open':\r\n          return { color: 'warning' as const, label: 'Offen', icon: '⏳' };\r\n        case 'paid':\r\n          return { color: 'success' as const, label: 'Bezahlt', icon: '✅' };\r\n        case 'overdue':\r\n          return { color: 'error' as const, label: 'Überfällig', icon: '⚠️' };\r\n        default:\r\n          return { color: 'default' as const, label: status, icon: '❓' };\r\n      }\r\n    };\r\n\r\n    const config = getStatusConfig(status);\r\n\r\n    return (\r\n      <Chip\r\n        label={`${config.icon} ${config.label}`}\r\n        color={config.color}\r\n        size=\"small\"\r\n        variant=\"outlined\"\r\n        className=\"font-medium\"\r\n      />\r\n    );\r\n  };\r\n\r\n  // Customer-Name-Resolver\r\n  const getCustomerName = (customerId: string) => {\r\n    const customer = customers.find(c => c.id === customerId);\r\n    return customer ? customer.name : 'Unbekannter Kunde';\r\n  };\r\n\r\n  const getCustomerEmail = (customerId: string) => {\r\n    const customer = customers.find(c => c.id === customerId);\r\n    return customer ? customer.email : '';\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Box className=\"flex justify-center items-center h-64\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Paper className=\"shadow-lg\">\r\n      {/* Header */}\r\n      <Box className=\"p-4 bg-gradient-to-r from-blue-50 to-indigo-50 border-b\">\r\n        <Box className=\"flex items-center justify-between mb-4\">\r\n          <Box className=\"flex items-center space-x-2\">\r\n            <AssignmentIcon className=\"text-blue-600\" />\r\n            <Typography variant=\"h6\" className=\"font-semibold\">\r\n              Rechnungen\r\n            </Typography>\r\n            <Chip \r\n              label={`${invoices.length} Rechnungen`} \r\n              size=\"small\" \r\n              color=\"primary\" \r\n              variant=\"outlined\"\r\n            />\r\n          </Box>\r\n        </Box>\r\n\r\n        {/* Filter und Suche */}\r\n        <Box className=\"flex flex-col sm:flex-row gap-4\">\r\n          <TextField\r\n            placeholder=\"Suche nach Kunde, E-Mail, Betrag oder ID...\"\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n            size=\"small\"\r\n            className=\"flex-1\"\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <SearchIcon className=\"text-gray-400\" />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n          \r\n          <FormControl size=\"small\" className=\"min-w-[150px]\">\r\n            <InputLabel>Status Filter</InputLabel>\r\n            <Select\r\n              value={statusFilter}\r\n              onChange={(e) => setStatusFilter(e.target.value as InvoiceStatus | 'all')}\r\n              label=\"Status Filter\"\r\n            >\r\n              <MenuItem value=\"all\">Alle Status</MenuItem>\r\n              <MenuItem value=\"open\">Offen</MenuItem>\r\n              <MenuItem value=\"paid\">Bezahlt</MenuItem>\r\n              <MenuItem value=\"overdue\">Überfällig</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Tabelle */}\r\n      <TableContainer>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow className=\"bg-gray-50\">\r\n              <TableCell>\r\n                <TableSortLabel\r\n                  active={sortField === 'created_at'}\r\n                  direction={sortField === 'created_at' ? sortOrder : 'asc'}\r\n                  onClick={() => handleSort('created_at')}\r\n                >\r\n                  <Box className=\"flex items-center space-x-1\">\r\n                    <AssignmentIcon className=\"text-gray-500\" />\r\n                    <span>Erstellt</span>\r\n                  </Box>\r\n                </TableSortLabel>\r\n              </TableCell>\r\n              \r\n              <TableCell>\r\n                <TableSortLabel\r\n                  active={sortField === 'customer_id'}\r\n                  direction={sortField === 'customer_id' ? sortOrder : 'asc'}\r\n                  onClick={() => handleSort('customer_id')}\r\n                >\r\n                  <Box className=\"flex items-center space-x-1\">\r\n                    <PersonIcon className=\"text-gray-500\" />\r\n                    <span>Kunde</span>\r\n                  </Box>\r\n                </TableSortLabel>\r\n              </TableCell>\r\n              \r\n              <TableCell>\r\n                <TableSortLabel\r\n                  active={sortField === 'amount'}\r\n                  direction={sortField === 'amount' ? sortOrder : 'asc'}\r\n                  onClick={() => handleSort('amount')}\r\n                >\r\n                  <Box className=\"flex items-center space-x-1\">\r\n                    <EuroIcon className=\"text-gray-500\" />\r\n                    <span>Betrag</span>\r\n                  </Box>\r\n                </TableSortLabel>\r\n              </TableCell>\r\n              \r\n              <TableCell>\r\n                <TableSortLabel\r\n                  active={sortField === 'status'}\r\n                  direction={sortField === 'status' ? sortOrder : 'asc'}\r\n                  onClick={() => handleSort('status')}\r\n                >\r\n                  <Box className=\"flex items-center space-x-1\">\r\n                    <FilterIcon className=\"text-gray-500\" />\r\n                    <span>Status</span>\r\n                  </Box>\r\n                </TableSortLabel>\r\n              </TableCell>\r\n              \r\n              <TableCell align=\"center\">Aktionen</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          \r\n          <TableBody>\r\n            {paginatedInvoices.length === 0 ? (\r\n              <TableRow>\r\n                <TableCell colSpan={5} align=\"center\" className=\"py-8\">\r\n                  <Alert severity=\"info\">\r\n                    Keine Rechnungen gefunden\r\n                  </Alert>\r\n                </TableCell>\r\n              </TableRow>\r\n            ) : (\r\n              paginatedInvoices.map((invoice) => (\r\n                <TableRow key={invoice.id} className=\"hover:bg-gray-50\">\r\n                  <TableCell>\r\n                    <Box className=\"flex flex-col\">\r\n                      <Typography variant=\"body2\" className=\"font-medium\">\r\n                        {new Date(invoice.created_at || '').toLocaleDateString('de-DE')}\r\n                      </Typography>\r\n                      <Typography variant=\"caption\" className=\"text-gray-500\">\r\n                        {new Date(invoice.created_at || '').toLocaleTimeString('de-DE')}\r\n                      </Typography>\r\n                    </Box>\r\n                  </TableCell>\r\n                  \r\n                  <TableCell>\r\n                    <Box className=\"flex flex-col\">\r\n                      <Typography variant=\"body2\" className=\"font-medium\">\r\n                        {getCustomerName(invoice.customer_id)}\r\n                      </Typography>\r\n                      <Typography variant=\"caption\" className=\"text-gray-500\">\r\n                        {getCustomerEmail(invoice.customer_id)}\r\n                      </Typography>\r\n                    </Box>\r\n                  </TableCell>\r\n                  \r\n                  <TableCell>\r\n                    <Box className=\"flex items-center space-x-1\">\r\n                      <EuroIcon className=\"text-gray-400\" />\r\n                      <Typography variant=\"body2\" className=\"font-semibold\">\r\n                        {invoice.amount.toFixed(2)} €\r\n                      </Typography>\r\n                    </Box>\r\n                  </TableCell>\r\n                  \r\n                  <TableCell>\r\n                    <StatusChip status={invoice.status} />\r\n                  </TableCell>\r\n                  \r\n                  <TableCell align=\"center\">\r\n                    <Box className=\"flex justify-center space-x-1\">\r\n                      {onView && (\r\n                        <Tooltip title=\"Anzeigen\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => onView(invoice)}\r\n                            className=\"text-blue-600 hover:bg-blue-50\"\r\n                          >\r\n                            <ViewIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      )}\r\n                      \r\n                      {onEdit && invoice.status === 'open' && (\r\n                        <Tooltip title=\"Bearbeiten\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => onEdit(invoice)}\r\n                            className=\"text-orange-600 hover:bg-orange-50\"\r\n                          >\r\n                            <EditIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      )}\r\n                      \r\n                      {onDelete && (\r\n                        <Tooltip title=\"Löschen\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => onDelete(invoice)}\r\n                            className=\"text-red-600 hover:bg-red-50\"\r\n                          >\r\n                            <DeleteIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      )}\r\n                    </Box>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n\r\n      {/* Paginierung */}\r\n      <TablePagination\r\n        rowsPerPageOptions={[5, 10, 25, 50]}\r\n        component=\"div\"\r\n        count={filteredAndSortedInvoices.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onPageChange={handleChangePage}\r\n        onRowsPerPageChange={handleChangeRowsPerPage}\r\n        labelRowsPerPage=\"Zeilen pro Seite:\"\r\n        labelDisplayedRows={({ from, to, count }) => \r\n          `${from}-${to} von ${count !== -1 ? count : `mehr als ${to}`}`\r\n        }\r\n      />\r\n    </Paper>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\tables\\InvoiceTable_MCP.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FilterIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":33,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WarningIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":38,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MCPSchema' is defined but never used. Allowed unused vars must match /^_/u.","line":43,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":153,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4374,4377],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4374,4377],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":153,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4387,4390],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4387,4390],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useEffect } from 'react';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  TablePagination,\r\n  TableSortLabel,\r\n  Chip,\r\n  IconButton,\r\n  Tooltip,\r\n  Box,\r\n  Typography,\r\n  TextField,\r\n  InputAdornment,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Alert,\r\n  CircularProgress,\r\n  Card,\r\n  CardContent\r\n} from '@mui/material';\r\nimport {\r\n  Visibility as ViewIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Search as SearchIcon,\r\n  FilterList as FilterIcon,\r\n  Euro as EuroIcon,\r\n  Person as PersonIcon,\r\n  Assignment as AssignmentIcon,\r\n  Info as InfoIcon,\r\n  Warning as WarningIcon\r\n} from '@mui/icons-material';\r\n\r\n// MCP Integration Imports\r\nimport { useMCPTable, useMCPData } from '../../hooks/useMCPForm';\r\nimport { MCPSchema } from '../../utils/mcpSchemaInjector';\r\n\r\n// TypeScript Interfaces basierend auf MCP Schema\r\ninterface Invoice {\r\n  id: string;\r\n  customer_id: string;\r\n  amount: number;\r\n  status: 'open' | 'paid' | 'overdue';\r\n  created_at: string;\r\n  updated_at?: string;\r\n}\r\n\r\ninterface Customer {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n}\r\n\r\ninterface InvoiceTableProps {\r\n  onView?: (invoice: Invoice) => void;\r\n  onEdit?: (invoice: Invoice) => void;\r\n  onDelete?: (invoice: Invoice) => void;\r\n}\r\n\r\ntype SortField = 'created_at' | 'amount' | 'status' | 'customer_id';\r\ntype SortOrder = 'asc' | 'desc';\r\n\r\n/**\r\n * MCP-basierte InvoiceTable-Komponente\r\n * Verwendet live Schema-Validierung und RLS-Compliance\r\n */\r\nexport const InvoiceTable_MCP: React.FC<InvoiceTableProps> = ({\r\n  onView,\r\n  onEdit,\r\n  onDelete\r\n}) => {\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [sortField, setSortField] = useState<SortField>('created_at');\r\n  const [sortOrder, setSortOrder] = useState<SortOrder>('desc');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState<string>('all');\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // MCP Hooks für Schema und Daten\r\n  const mcpTable = useMCPTable('invoices');\r\n  const invoiceData = useMCPData('invoices');\r\n  const customerData = useMCPData('customers');\r\n\r\n  // State für Daten\r\n  const [invoices, setInvoices] = useState<Invoice[]>([]);\r\n  const [customers, setCustomers] = useState<Customer[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Daten laden\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        // Paralleles Laden von Invoices und Customers\r\n        const [invoiceResult, customerResult] = await Promise.all([\r\n          invoiceData.fetchData(),\r\n          customerData.fetchData()\r\n        ]);\r\n\r\n        setInvoices((invoiceResult.data as Invoice[]) || []);\r\n        setCustomers((customerResult.data as Customer[]) || []);\r\n\r\n        console.log('✅ Daten erfolgreich geladen:', {\r\n          invoices: invoiceResult.data?.length || 0,\r\n          customers: customerResult.data?.length || 0\r\n        });\r\n\r\n      } catch (err) {\r\n        console.error('❌ Fehler beim Laden der Daten:', err);\r\n        setError('Daten konnten nicht geladen werden');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadData();\r\n  }, [invoiceData, customerData]);\r\n\r\n  // Sortierung\r\n  const handleSort = (field: SortField) => {\r\n    const isAsc = sortField === field && sortOrder === 'asc';\r\n    setSortOrder(isAsc ? 'desc' : 'asc');\r\n    setSortField(field);\r\n  };\r\n\r\n  // Gefilterte und sortierte Daten\r\n  const filteredAndSortedInvoices = useMemo(() => {\r\n    const filtered = invoices.filter(invoice => {\r\n      const customer = customers.find(c => c.id === invoice.customer_id);\r\n      const matchesSearch = searchTerm === '' || \r\n        customer?.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        customer?.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        invoice.amount.toString().includes(searchTerm) ||\r\n        invoice.id?.toLowerCase().includes(searchTerm.toLowerCase());\r\n      \r\n      const matchesStatus = statusFilter === 'all' || invoice.status === statusFilter;\r\n      \r\n      return matchesSearch && matchesStatus;\r\n    });\r\n\r\n    // Sortierung\r\n    filtered.sort((a, b) => {\r\n      let aValue: any, bValue: any;\r\n      \r\n      switch (sortField) {\r\n        case 'customer_id':\r\n          const customerA = customers.find(c => c.id === a.customer_id);\r\n          const customerB = customers.find(c => c.id === b.customer_id);\r\n          aValue = customerA?.name || '';\r\n          bValue = customerB?.name || '';\r\n          break;\r\n        case 'amount':\r\n          aValue = a.amount;\r\n          bValue = b.amount;\r\n          break;\r\n        case 'status':\r\n          aValue = a.status;\r\n          bValue = b.status;\r\n          break;\r\n        case 'created_at':\r\n        default:\r\n          aValue = new Date(a.created_at);\r\n          bValue = new Date(b.created_at);\r\n          break;\r\n      }\r\n\r\n      if (aValue < bValue) return sortOrder === 'asc' ? -1 : 1;\r\n      if (aValue > bValue) return sortOrder === 'asc' ? 1 : -1;\r\n      return 0;\r\n    });\r\n\r\n    return filtered;\r\n  }, [invoices, customers, searchTerm, statusFilter, sortField, sortOrder]);\r\n\r\n  // Pagination\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  // Status-Chip-Komponente\r\n  const StatusChip: React.FC<{ status: string }> = ({ status }) => {\r\n    const getStatusConfig = (status: string) => {\r\n      switch (status) {\r\n        case 'open': return { color: 'warning' as const, label: 'Offen' };\r\n        case 'paid': return { color: 'success' as const, label: 'Bezahlt' };\r\n        case 'overdue': return { color: 'error' as const, label: 'Überfällig' };\r\n        default: return { color: 'default' as const, label: status };\r\n      }\r\n    };\r\n\r\n    const config = getStatusConfig(status);\r\n    return <Chip label={config.label} color={config.color} size=\"small\" />;\r\n  };\r\n\r\n  // Helper-Funktionen\r\n  const getCustomerName = (customerId: string) => {\r\n    const customer = customers.find(c => c.id === customerId);\r\n    return customer?.name || 'Unbekannter Kunde';\r\n  };\r\n\r\n  const getCustomerEmail = (customerId: string) => {\r\n    const customer = customers.find(c => c.id === customerId);\r\n    return customer?.email || '';\r\n  };\r\n\r\n  // RLS-Informationen anzeigen\r\n  const renderRLSInfo = () => {\r\n    if (!mcpTable.schema) return null;\r\n\r\n    return (\r\n      <Card className=\"mb-4\">\r\n        <CardContent>\r\n          <Typography variant=\"h6\" className=\"flex items-center mb-2\">\r\n            <InfoIcon className=\"mr-2\" />\r\n            RLS-Compliance Status\r\n          </Typography>\r\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\r\n            <div>\r\n              <strong>Bearbeitbar:</strong> {mcpTable.schema.rls.update ? '✅ Ja' : '❌ Nein'}\r\n            </div>\r\n            <div>\r\n              <strong>Löschbar:</strong> {mcpTable.schema.rls.delete ? '✅ Ja' : '❌ Nein'}\r\n            </div>\r\n            <div>\r\n              <strong>Lesbar:</strong> {mcpTable.schema.rls.select ? '✅ Ja' : '❌ Nein'}\r\n            </div>\r\n            <div>\r\n              <strong>Erstellbar:</strong> {mcpTable.schema.rls.insert ? '✅ Ja' : '❌ Nein'}\r\n            </div>\r\n          </div>\r\n          {!mcpTable.schema.rls.update && (\r\n            <Alert severity=\"warning\" className=\"mt-2\">\r\n              <Typography variant=\"caption\">\r\n                ⚠️ Rechnungen können nach dem Erstellen nicht mehr bearbeitet werden\r\n              </Typography>\r\n            </Alert>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  // Loading-State\r\n  if (mcpTable.isLoading || isLoading) {\r\n    return (\r\n      <Box className=\"flex justify-center items-center h-64\">\r\n        <Box className=\"text-center\">\r\n          <CircularProgress className=\"mb-4\" />\r\n          <Typography>Lade Schema-Informationen und Daten...</Typography>\r\n        </Box>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  // Error-State\r\n  if (error || mcpTable.error) {\r\n    return (\r\n      <Alert severity=\"error\" className=\"mb-4\">\r\n        {error || mcpTable.error?.message || 'Unbekannter Fehler'}\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  // Schema nicht verfügbar\r\n  if (!mcpTable.schema) {\r\n    return (\r\n      <Alert severity=\"warning\">\r\n        Schema-Informationen konnten nicht geladen werden\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box className=\"space-y-4\">\r\n      {/* RLS-Informationen */}\r\n      {renderRLSInfo()}\r\n\r\n      {/* Such- und Filter-Bereich */}\r\n      <Paper className=\"p-4\">\r\n        <Box className=\"flex flex-col md:flex-row gap-4\">\r\n          {/* Suchfeld */}\r\n          <TextField\r\n            fullWidth\r\n            label=\"Suchen...\"\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <SearchIcon />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n\r\n          {/* Status-Filter */}\r\n          <FormControl fullWidth>\r\n            <InputLabel>Status-Filter</InputLabel>\r\n            <Select\r\n              value={statusFilter}\r\n              onChange={(e) => setStatusFilter(e.target.value)}\r\n              label=\"Status-Filter\"\r\n            >\r\n              <MenuItem value=\"all\">Alle Status</MenuItem>\r\n              {mcpTable.schema.columns\r\n                .find(col => col.name === 'status')\r\n                ?.enum_values?.map((status) => (\r\n                  <MenuItem key={status} value={status}>\r\n                    <StatusChip status={status} />\r\n                  </MenuItem>\r\n                ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Box>\r\n      </Paper>\r\n\r\n      {/* Tabelle */}\r\n      <Paper>\r\n        <TableContainer>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>\r\n                  <TableSortLabel\r\n                    active={sortField === 'created_at'}\r\n                    direction={sortField === 'created_at' ? sortOrder : 'asc'}\r\n                    onClick={() => handleSort('created_at')}\r\n                  >\r\n                    <AssignmentIcon className=\"mr-1\" fontSize=\"small\" />\r\n                    Erstellt\r\n                  </TableSortLabel>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <TableSortLabel\r\n                    active={sortField === 'customer_id'}\r\n                    direction={sortField === 'customer_id' ? sortOrder : 'asc'}\r\n                    onClick={() => handleSort('customer_id')}\r\n                  >\r\n                    <PersonIcon className=\"mr-1\" fontSize=\"small\" />\r\n                    Kunde\r\n                  </TableSortLabel>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <TableSortLabel\r\n                    active={sortField === 'amount'}\r\n                    direction={sortField === 'amount' ? sortOrder : 'asc'}\r\n                    onClick={() => handleSort('amount')}\r\n                  >\r\n                    <EuroIcon className=\"mr-1\" fontSize=\"small\" />\r\n                    Betrag\r\n                  </TableSortLabel>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <TableSortLabel\r\n                    active={sortField === 'status'}\r\n                    direction={sortField === 'status' ? sortOrder : 'asc'}\r\n                    onClick={() => handleSort('status')}\r\n                  >\r\n                    Status\r\n                  </TableSortLabel>\r\n                </TableCell>\r\n                <TableCell align=\"center\">Aktionen</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {filteredAndSortedInvoices\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((invoice) => (\r\n                  <TableRow key={invoice.id} hover>\r\n                    <TableCell>\r\n                      <div className=\"flex flex-col\">\r\n                        <Typography variant=\"body2\">\r\n                          {new Date(invoice.created_at).toLocaleDateString('de-DE')}\r\n                        </Typography>\r\n                        <Typography variant=\"caption\" color=\"textSecondary\">\r\n                          {new Date(invoice.created_at).toLocaleTimeString('de-DE')}\r\n                        </Typography>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex flex-col\">\r\n                        <Typography variant=\"body2\" className=\"font-medium\">\r\n                          {getCustomerName(invoice.customer_id)}\r\n                        </Typography>\r\n                        <Typography variant=\"caption\" color=\"textSecondary\">\r\n                          {getCustomerEmail(invoice.customer_id)}\r\n                        </Typography>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\" className=\"font-medium\">\r\n                        {invoice.amount.toFixed(2)} €\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <StatusChip status={invoice.status} />\r\n                    </TableCell>\r\n                    <TableCell align=\"center\">\r\n                      <Box className=\"flex justify-center space-x-1\">\r\n                        {onView && (\r\n                          <Tooltip title=\"Anzeigen\">\r\n                            <IconButton\r\n                              size=\"small\"\r\n                              onClick={() => onView(invoice)}\r\n                            >\r\n                              <ViewIcon />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        )}\r\n                        \r\n                        {onEdit && mcpTable.schema.rls.update && (\r\n                          <Tooltip title=\"Bearbeiten\">\r\n                            <IconButton\r\n                              size=\"small\"\r\n                              onClick={() => onEdit(invoice)}\r\n                            >\r\n                              <EditIcon />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        )}\r\n                        \r\n                        {onDelete && mcpTable.schema.rls.delete && (\r\n                          <Tooltip title=\"Löschen\">\r\n                            <IconButton\r\n                              size=\"small\"\r\n                              onClick={() => onDelete(invoice)}\r\n                            >\r\n                              <DeleteIcon />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        )}\r\n                      </Box>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n\r\n        {/* Pagination */}\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25, 50]}\r\n          component=\"div\"\r\n          count={filteredAndSortedInvoices.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n          labelRowsPerPage=\"Zeilen pro Seite:\"\r\n          labelDisplayedRows={({ from, to, count }) => \r\n            `${from}-${to} von ${count !== -1 ? count : `mehr als ${to}`}`\r\n          }\r\n        />\r\n      </Paper>\r\n\r\n      {/* Schema-Informationen */}\r\n      <Card>\r\n        <CardContent>\r\n          <Typography variant=\"caption\" className=\"text-gray-600\">\r\n            <strong>Schema-Quelle:</strong> MCP-Server (http://localhost:8000)\r\n            <br />\r\n            <strong>Daten-Quelle:</strong> Supabase (ftybxxndembbfjdkcsuk)\r\n            <br />\r\n            <strong>RLS-Compliance:</strong> {mcpTable.schema.rls.update ? 'Bearbeitbar' : 'Nur Lesen'}\r\n            <br />\r\n            <strong>Angezeigte Datensätze:</strong> {filteredAndSortedInvoices.length} von {invoices.length}\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default InvoiceTable_MCP; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\tables\\InvoiceTable_MCP_NEW.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FilterIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":33,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WarningIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":38,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MCPSchema' is defined but never used. Allowed unused vars must match /^_/u.","line":43,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":153,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4383,4386],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4383,4386],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":153,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4396,4399],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4396,4399],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo, useEffect } from 'react';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  TablePagination,\r\n  TableSortLabel,\r\n  Chip,\r\n  IconButton,\r\n  Tooltip,\r\n  Box,\r\n  Typography,\r\n  TextField,\r\n  InputAdornment,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Alert,\r\n  CircularProgress,\r\n  Card,\r\n  CardContent\r\n} from '@mui/material';\r\nimport {\r\n  Visibility as ViewIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Search as SearchIcon,\r\n  FilterList as FilterIcon,\r\n  Euro as EuroIcon,\r\n  Person as PersonIcon,\r\n  Assignment as AssignmentIcon,\r\n  Info as InfoIcon,\r\n  Warning as WarningIcon\r\n} from '@mui/icons-material';\r\n\r\n// MCP Integration Imports\r\nimport { useMCPTable, useMCPData } from '../../hooks/useMCPForm';\r\nimport type { MCPSchema } from '../../utils/mcpSchemaInjector';\r\n\r\n// TypeScript Interfaces basierend auf MCP Schema\r\ninterface Invoice {\r\n  id: string;\r\n  customer_id: string;\r\n  amount: number;\r\n  status: 'open' | 'paid' | 'overdue';\r\n  created_at: string;\r\n  updated_at?: string;\r\n}\r\n\r\ninterface Customer {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n}\r\n\r\ninterface InvoiceTableProps {\r\n  onView?: (invoice: Invoice) => void;\r\n  onEdit?: (invoice: Invoice) => void;\r\n  onDelete?: (invoice: Invoice) => void;\r\n}\r\n\r\ntype SortField = 'created_at' | 'amount' | 'status' | 'customer_id';\r\ntype SortOrder = 'asc' | 'desc';\r\n\r\n/**\r\n * MCP-basierte InvoiceTable-Komponente\r\n * Verwendet live Schema-Validierung und RLS-Compliance\r\n */\r\nexport const InvoiceTable_MCP_NEW: React.FC<InvoiceTableProps> = ({\r\n  onView,\r\n  onEdit,\r\n  onDelete\r\n}) => {\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [sortField, setSortField] = useState<SortField>('created_at');\r\n  const [sortOrder, setSortOrder] = useState<SortOrder>('desc');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState<string>('all');\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // MCP Hooks für Schema und Daten\r\n  const mcpTable = useMCPTable('invoices');\r\n  const invoiceData = useMCPData('invoices');\r\n  const customerData = useMCPData('customers');\r\n\r\n  // State für Daten\r\n  const [invoices, setInvoices] = useState<Invoice[]>([]);\r\n  const [customers, setCustomers] = useState<Customer[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Daten laden\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        // Paralleles Laden von Invoices und Customers\r\n        const [invoiceResult, customerResult] = await Promise.all([\r\n          invoiceData.fetchData(),\r\n          customerData.fetchData()\r\n        ]);\r\n\r\n        setInvoices((invoiceResult.data as Invoice[]) || []);\r\n        setCustomers((customerResult.data as Customer[]) || []);\r\n\r\n        console.log('✅ Daten erfolgreich geladen:', {\r\n          invoices: invoiceResult.data?.length || 0,\r\n          customers: customerResult.data?.length || 0\r\n        });\r\n\r\n      } catch (err) {\r\n        console.error('❌ Fehler beim Laden der Daten:', err);\r\n        setError('Daten konnten nicht geladen werden');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadData();\r\n  }, [invoiceData, customerData]);\r\n\r\n  // Sortierung\r\n  const handleSort = (field: SortField) => {\r\n    const isAsc = sortField === field && sortOrder === 'asc';\r\n    setSortOrder(isAsc ? 'desc' : 'asc');\r\n    setSortField(field);\r\n  };\r\n\r\n  // Gefilterte und sortierte Daten\r\n  const filteredAndSortedInvoices = useMemo(() => {\r\n    const filtered = invoices.filter(invoice => {\r\n      const customer = customers.find(c => c.id === invoice.customer_id);\r\n      const matchesSearch = searchTerm === '' || \r\n        customer?.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        customer?.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        invoice.amount.toString().includes(searchTerm) ||\r\n        invoice.id?.toLowerCase().includes(searchTerm.toLowerCase());\r\n      \r\n      const matchesStatus = statusFilter === 'all' || invoice.status === statusFilter;\r\n      \r\n      return matchesSearch && matchesStatus;\r\n    });\r\n\r\n    // Sortierung\r\n    filtered.sort((a, b) => {\r\n      let aValue: any, bValue: any;\r\n      \r\n      switch (sortField) {\r\n        case 'customer_id':\r\n          const customerA = customers.find(c => c.id === a.customer_id);\r\n          const customerB = customers.find(c => c.id === b.customer_id);\r\n          aValue = customerA?.name || '';\r\n          bValue = customerB?.name || '';\r\n          break;\r\n        case 'amount':\r\n          aValue = a.amount;\r\n          bValue = b.amount;\r\n          break;\r\n        case 'status':\r\n          aValue = a.status;\r\n          bValue = b.status;\r\n          break;\r\n        case 'created_at':\r\n        default:\r\n          aValue = new Date(a.created_at);\r\n          bValue = new Date(b.created_at);\r\n          break;\r\n      }\r\n\r\n      if (aValue < bValue) return sortOrder === 'asc' ? -1 : 1;\r\n      if (aValue > bValue) return sortOrder === 'asc' ? 1 : -1;\r\n      return 0;\r\n    });\r\n\r\n    return filtered;\r\n  }, [invoices, customers, searchTerm, statusFilter, sortField, sortOrder]);\r\n\r\n  // Pagination\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  // Status-Chip-Komponente\r\n  const StatusChip: React.FC<{ status: string }> = ({ status }) => {\r\n    const getStatusConfig = (status: string) => {\r\n      switch (status) {\r\n        case 'open': return { color: 'warning' as const, label: 'Offen' };\r\n        case 'paid': return { color: 'success' as const, label: 'Bezahlt' };\r\n        case 'overdue': return { color: 'error' as const, label: 'Überfällig' };\r\n        default: return { color: 'default' as const, label: status };\r\n      }\r\n    };\r\n\r\n    const config = getStatusConfig(status);\r\n    return <Chip label={config.label} color={config.color} size=\"small\" />;\r\n  };\r\n\r\n  // Helper-Funktionen\r\n  const getCustomerName = (customerId: string) => {\r\n    const customer = customers.find(c => c.id === customerId);\r\n    return customer?.name || 'Unbekannter Kunde';\r\n  };\r\n\r\n  const getCustomerEmail = (customerId: string) => {\r\n    const customer = customers.find(c => c.id === customerId);\r\n    return customer?.email || '';\r\n  };\r\n\r\n  // RLS-Informationen anzeigen\r\n  const renderRLSInfo = () => {\r\n    if (!mcpTable.schema) return null;\r\n\r\n    return (\r\n      <Card className=\"mb-4\">\r\n        <CardContent>\r\n          <Typography variant=\"h6\" className=\"flex items-center mb-2\">\r\n            <InfoIcon className=\"mr-2\" />\r\n            RLS-Compliance Status (MCP-Server)\r\n          </Typography>\r\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\r\n            <div>\r\n              <strong>Bearbeitbar:</strong> {mcpTable.schema.rls.update ? '✅ Ja' : '❌ Nein'}\r\n            </div>\r\n            <div>\r\n              <strong>Löschbar:</strong> {mcpTable.schema.rls.delete ? '✅ Ja' : '❌ Nein'}\r\n            </div>\r\n            <div>\r\n              <strong>Lesbar:</strong> {mcpTable.schema.rls.select ? '✅ Ja' : '❌ Nein'}\r\n            </div>\r\n            <div>\r\n              <strong>Erstellbar:</strong> {mcpTable.schema.rls.insert ? '✅ Ja' : '❌ Nein'}\r\n            </div>\r\n          </div>\r\n          {!mcpTable.schema.rls.update && (\r\n            <Alert severity=\"warning\" className=\"mt-2\">\r\n              <Typography variant=\"caption\">\r\n                ⚠️ Rechnungen können nach dem Erstellen nicht mehr bearbeitet werden\r\n              </Typography>\r\n            </Alert>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  // Loading-State\r\n  if (mcpTable.isLoading || isLoading) {\r\n    return (\r\n      <Box className=\"flex justify-center items-center h-64\">\r\n        <Box className=\"text-center\">\r\n          <CircularProgress className=\"mb-4\" />\r\n          <Typography>Lade Schema-Informationen und Daten...</Typography>\r\n        </Box>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  // Error-State\r\n  if (error || mcpTable.error) {\r\n    return (\r\n      <Alert severity=\"error\" className=\"mb-4\">\r\n        {error || mcpTable.error?.message || 'Unbekannter Fehler'}\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  // Schema nicht verfügbar\r\n  if (!mcpTable.schema) {\r\n    return (\r\n      <Alert severity=\"warning\">\r\n        Schema-Informationen konnten nicht geladen werden\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box className=\"space-y-4\">\r\n      {/* RLS-Informationen */}\r\n      {renderRLSInfo()}\r\n\r\n      {/* Such- und Filter-Bereich */}\r\n      <Paper className=\"p-4\">\r\n        <Box className=\"flex flex-col md:flex-row gap-4\">\r\n          {/* Suchfeld */}\r\n          <TextField\r\n            fullWidth\r\n            label=\"Suchen...\"\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <SearchIcon />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n\r\n          {/* Status-Filter */}\r\n          <FormControl fullWidth>\r\n            <InputLabel>Status-Filter</InputLabel>\r\n            <Select\r\n              value={statusFilter}\r\n              onChange={(e) => setStatusFilter(e.target.value)}\r\n              label=\"Status-Filter\"\r\n            >\r\n              <MenuItem value=\"all\">Alle Status</MenuItem>\r\n              {mcpTable.schema.columns\r\n                .find(col => col.name === 'status')\r\n                ?.enum_values?.map((status) => (\r\n                  <MenuItem key={status} value={status}>\r\n                    <StatusChip status={status} />\r\n                  </MenuItem>\r\n                ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Box>\r\n      </Paper>\r\n\r\n      {/* Tabelle */}\r\n      <Paper>\r\n        <TableContainer>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>\r\n                  <TableSortLabel\r\n                    active={sortField === 'created_at'}\r\n                    direction={sortField === 'created_at' ? sortOrder : 'asc'}\r\n                    onClick={() => handleSort('created_at')}\r\n                  >\r\n                    <AssignmentIcon className=\"mr-1\" fontSize=\"small\" />\r\n                    Erstellt\r\n                  </TableSortLabel>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <TableSortLabel\r\n                    active={sortField === 'customer_id'}\r\n                    direction={sortField === 'customer_id' ? sortOrder : 'asc'}\r\n                    onClick={() => handleSort('customer_id')}\r\n                  >\r\n                    <PersonIcon className=\"mr-1\" fontSize=\"small\" />\r\n                    Kunde\r\n                  </TableSortLabel>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <TableSortLabel\r\n                    active={sortField === 'amount'}\r\n                    direction={sortField === 'amount' ? sortOrder : 'asc'}\r\n                    onClick={() => handleSort('amount')}\r\n                  >\r\n                    <EuroIcon className=\"mr-1\" fontSize=\"small\" />\r\n                    Betrag\r\n                  </TableSortLabel>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <TableSortLabel\r\n                    active={sortField === 'status'}\r\n                    direction={sortField === 'status' ? sortOrder : 'asc'}\r\n                    onClick={() => handleSort('status')}\r\n                  >\r\n                    Status\r\n                  </TableSortLabel>\r\n                </TableCell>\r\n                <TableCell align=\"center\">Aktionen</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {filteredAndSortedInvoices\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((invoice) => (\r\n                  <TableRow key={invoice.id} hover>\r\n                    <TableCell>\r\n                      <div className=\"flex flex-col\">\r\n                        <Typography variant=\"body2\">\r\n                          {new Date(invoice.created_at).toLocaleDateString('de-DE')}\r\n                        </Typography>\r\n                        <Typography variant=\"caption\" color=\"textSecondary\">\r\n                          {new Date(invoice.created_at).toLocaleTimeString('de-DE')}\r\n                        </Typography>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex flex-col\">\r\n                        <Typography variant=\"body2\" className=\"font-medium\">\r\n                          {getCustomerName(invoice.customer_id)}\r\n                        </Typography>\r\n                        <Typography variant=\"caption\" color=\"textSecondary\">\r\n                          {getCustomerEmail(invoice.customer_id)}\r\n                        </Typography>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\" className=\"font-medium\">\r\n                        {invoice.amount.toFixed(2)} €\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <StatusChip status={invoice.status} />\r\n                    </TableCell>\r\n                    <TableCell align=\"center\">\r\n                      <Box className=\"flex justify-center space-x-1\">\r\n                        {onView && (\r\n                          <Tooltip title=\"Anzeigen\">\r\n                            <IconButton\r\n                              size=\"small\"\r\n                              onClick={() => onView(invoice)}\r\n                            >\r\n                              <ViewIcon />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        )}\r\n                        \r\n                        {onEdit && mcpTable.schema.rls.update && (\r\n                          <Tooltip title=\"Bearbeiten\">\r\n                            <IconButton\r\n                              size=\"small\"\r\n                              onClick={() => onEdit(invoice)}\r\n                            >\r\n                              <EditIcon />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        )}\r\n                        \r\n                        {onDelete && mcpTable.schema.rls.delete && (\r\n                          <Tooltip title=\"Löschen\">\r\n                            <IconButton\r\n                              size=\"small\"\r\n                              onClick={() => onDelete(invoice)}\r\n                            >\r\n                              <DeleteIcon />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        )}\r\n                      </Box>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n\r\n        {/* Pagination */}\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25, 50]}\r\n          component=\"div\"\r\n          count={filteredAndSortedInvoices.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n          labelRowsPerPage=\"Zeilen pro Seite:\"\r\n          labelDisplayedRows={({ from, to, count }) => \r\n            `${from}-${to} von ${count !== -1 ? count : `mehr als ${to}`}`\r\n          }\r\n        />\r\n      </Paper>\r\n\r\n      {/* Schema-Informationen */}\r\n      <Card>\r\n        <CardContent>\r\n          <Typography variant=\"caption\" className=\"text-gray-600\">\r\n            <strong>Schema-Quelle:</strong> MCP-Server (http://localhost:8000)\r\n            <br />\r\n            <strong>Daten-Quelle:</strong> Supabase (ftybxxndembbfjdkcsuk)\r\n            <br />\r\n            <strong>RLS-Compliance:</strong> {mcpTable.schema.rls.update ? 'Bearbeitbar' : 'Nur Lesen'}\r\n            <br />\r\n            <strong>Angezeigte Datensätze:</strong> {filteredAndSortedInvoices.length} von {invoices.length}\r\n            <br />\r\n            <strong>TypeScript-Fehler:</strong> ✅ 0 (MCP-basiert)\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default InvoiceTable_MCP_NEW; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\ui\\ComponentLibrary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\ui\\DataCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Chip' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":50}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, Typography, Box, Chip, Skeleton } from '@mui/material';\r\nimport { TrendingUp, TrendingDown, Remove } from '@mui/icons-material';\r\nimport { DataCardProps } from '../../types/global';\r\n\r\n// Enhanced DataCard Component für VALEO NeuroERP\r\nexport const DataCard: React.FC<DataCardProps> = ({\r\n  title,\r\n  subtitle,\r\n  value,\r\n  change,\r\n  icon: Icon,\r\n  onClick,\r\n  loading = false,\r\n  className = '',\r\n  style,\r\n  children\r\n}) => {\r\n  const handleClick = () => {\r\n    if (onClick && !loading) {\r\n      onClick();\r\n    }\r\n  };\r\n\r\n  const renderChangeIndicator = () => {\r\n    if (!change) return null;\r\n\r\n    const { value: changeValue, isPositive } = change;\r\n    const IconComponent = isPositive ? TrendingUp : changeValue === 0 ? Remove : TrendingDown;\r\n    const color = isPositive ? 'success' : changeValue === 0 ? 'default' : 'error';\r\n\r\n    return (\r\n      <Box className=\"flex items-center space-x-1\">\r\n        <IconComponent \r\n          className={`text-${color === 'success' ? 'green' : color === 'error' ? 'red' : 'gray'}-500`}\r\n          fontSize=\"small\"\r\n        />\r\n        <Typography\r\n          variant=\"caption\"\r\n          className={`font-medium ${\r\n            color === 'success' ? 'text-green-600' : \r\n            color === 'error' ? 'text-red-600' : \r\n            'text-gray-600'\r\n          }`}\r\n        >\r\n          {changeValue > 0 ? '+' : ''}{changeValue}%\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  const renderValue = () => {\r\n    if (loading) {\r\n      return <Skeleton variant=\"text\" width=\"60%\" height={32} />;\r\n    }\r\n\r\n    if (typeof value === 'number') {\r\n      return (\r\n        <Typography variant=\"h4\" className=\"font-semibold text-gray-900\">\r\n          {value.toLocaleString('de-DE')}\r\n        </Typography>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Typography variant=\"h4\" className=\"font-semibold text-gray-900\">\r\n        {value}\r\n      </Typography>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      className={`\r\n        relative overflow-hidden transition-all duration-200 ease-in-out\r\n        hover:shadow-lg hover:scale-[1.02] cursor-pointer\r\n        ${onClick ? 'hover:bg-gray-50' : ''}\r\n        ${className}\r\n      `}\r\n      style={style}\r\n      onClick={handleClick}\r\n      elevation={1}\r\n    >\r\n      {/* Background Pattern für Visual Appeal */}\r\n      <Box className=\"absolute top-0 right-0 w-32 h-32 opacity-5\">\r\n        <div className=\"w-full h-full bg-gradient-to-br from-blue-400 to-purple-600 rounded-full transform translate-x-16 -translate-y-16\" />\r\n      </Box>\r\n\r\n      <CardContent className=\"p-6 relative z-10\">\r\n        <Box className=\"flex items-start justify-between mb-4\">\r\n          <Box className=\"flex-1\">\r\n            <Typography \r\n              variant=\"h6\" \r\n              className=\"font-medium text-gray-800 mb-1\"\r\n            >\r\n              {loading ? <Skeleton variant=\"text\" width=\"80%\" /> : title}\r\n            </Typography>\r\n            \r\n            {subtitle && (\r\n              <Typography \r\n                variant=\"body2\" \r\n                className=\"text-gray-600 mb-2\"\r\n              >\r\n                {loading ? <Skeleton variant=\"text\" width=\"60%\" /> : subtitle}\r\n              </Typography>\r\n            )}\r\n          </Box>\r\n\r\n          {Icon && (\r\n            <Box className=\"ml-4 p-2 bg-blue-50 rounded-lg\">\r\n              <Icon className=\"text-blue-600\" fontSize=\"medium\" />\r\n            </Box>\r\n          )}\r\n        </Box>\r\n\r\n        <Box className=\"flex items-end justify-between\">\r\n          <Box className=\"flex-1\">\r\n            {renderValue()}\r\n            \r\n            {change && (\r\n              <Box className=\"mt-2\">\r\n                {renderChangeIndicator()}\r\n              </Box>\r\n            )}\r\n          </Box>\r\n\r\n          {children && (\r\n            <Box className=\"ml-4\">\r\n              {children}\r\n            </Box>\r\n          )}\r\n        </Box>\r\n      </CardContent>\r\n\r\n      {/* Hover Effect Border */}\r\n      <Box className=\"absolute bottom-0 left-0 w-0 h-1 bg-gradient-to-r from-blue-500 to-purple-600 transition-all duration-300 ease-in-out group-hover:w-full\" />\r\n    </Card>\r\n  );\r\n};\r\n\r\n// Specialized DataCard Variants\r\nexport const MetricCard: React.FC<DataCardProps & { unit?: string }> = ({\r\n  unit,\r\n  ...props\r\n}) => {\r\n  const formatValue = (value: string | number) => {\r\n    if (typeof value === 'number') {\r\n      return `${value.toLocaleString('de-DE')}${unit ? ` ${unit}` : ''}`;\r\n    }\r\n    return `${value}${unit ? ` ${unit}` : ''}`;\r\n  };\r\n\r\n  return (\r\n    <DataCard\r\n      {...props}\r\n      value={formatValue(props.value)}\r\n    />\r\n  );\r\n};\r\n\r\nexport const CurrencyCard: React.FC<DataCardProps> = (props) => {\r\n  const formatCurrency = (value: string | number) => {\r\n    if (typeof value === 'number') {\r\n      return `${value.toLocaleString('de-DE', {\r\n        style: 'currency',\r\n        currency: 'EUR'\r\n      })}`;\r\n    }\r\n    return value;\r\n  };\r\n\r\n  return (\r\n    <DataCard\r\n      {...props}\r\n      value={formatCurrency(props.value)}\r\n    />\r\n  );\r\n};\r\n\r\nexport const PercentageCard: React.FC<DataCardProps> = (props) => {\r\n  const formatPercentage = (value: string | number) => {\r\n    if (typeof value === 'number') {\r\n      return `${value.toFixed(1)}%`;\r\n    }\r\n    return value;\r\n  };\r\n\r\n  return (\r\n    <DataCard\r\n      {...props}\r\n      value={formatPercentage(props.value)}\r\n    />\r\n  );\r\n};\r\n\r\n// Loading State Component\r\nexport const DataCardSkeleton: React.FC<{ className?: string }> = ({ className }) => {\r\n  return (\r\n    <Card className={`p-6 ${className}`} elevation={1}>\r\n      <Box className=\"flex items-start justify-between mb-4\">\r\n        <Box className=\"flex-1\">\r\n          <Skeleton variant=\"text\" width=\"80%\" height={24} />\r\n          <Skeleton variant=\"text\" width=\"60%\" height={16} className=\"mt-1\" />\r\n        </Box>\r\n        <Skeleton variant=\"circular\" width={40} height={40} />\r\n      </Box>\r\n      \r\n      <Skeleton variant=\"text\" width=\"60%\" height={32} />\r\n      <Skeleton variant=\"text\" width=\"40%\" height={16} className=\"mt-2\" />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default DataCard; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\ui\\ModernComponents.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Divider' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Grid' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Paper' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Table' is defined but never used. Allowed unused vars must match /^_/u.","line":34,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tag' is defined but never used. Allowed unused vars must match /^_/u.","line":34,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Space' is defined but never used. Allowed unused vars must match /^_/u.","line":34,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Progress' is defined but never used. Allowed unused vars must match /^_/u.","line":34,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Statistic' is defined but never used. Allowed unused vars must match /^_/u.","line":34,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5324,5327],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5324,5327],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  TextField,\r\n  Box,\r\n  Chip,\r\n  Avatar,\r\n  LinearProgress,\r\n  IconButton,\r\n  Tooltip,\r\n  Alert,\r\n  Divider,\r\n  Grid,\r\n  Paper\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Visibility as ViewIcon,\r\n  Download as DownloadIcon,\r\n  Upload as UploadIcon,\r\n  Search as SearchIcon,\r\n  FilterList as FilterIcon,\r\n  Refresh as RefreshIcon,\r\n  CheckCircle as SuccessIcon,\r\n  Warning as WarningIcon,\r\n  Error as ErrorIcon,\r\n  Info as InfoIcon\r\n} from '@mui/icons-material';\r\nimport { Table, Tag, Space, Progress, Statistic } from 'antd';\r\n\r\n// Data Card Component\r\ninterface DataCardProps {\r\n  title: string;\r\n  value: string | number;\r\n  subtitle?: string;\r\n  icon?: React.ReactNode;\r\n  color?: string;\r\n  trend?: {\r\n    value: number;\r\n    direction: 'up' | 'down' | 'stable';\r\n  };\r\n  onClick?: () => void;\r\n}\r\n\r\nexport const DataCard: React.FC<DataCardProps> = ({\r\n  title,\r\n  value,\r\n  subtitle,\r\n  icon,\r\n  color = '#1976d2',\r\n  trend,\r\n  onClick\r\n}) => {\r\n  return (\r\n    <Card \r\n      className=\"h-full hover:shadow-lg transition-all cursor-pointer\"\r\n      onClick={onClick}\r\n    >\r\n      <CardContent>\r\n        <Box className=\"flex items-center justify-between\">\r\n          <Box className=\"flex-1\">\r\n            <Typography variant=\"body2\" className=\"text-gray-600 mb-1\">\r\n              {title}\r\n            </Typography>\r\n            <Typography variant=\"h4\" className=\"font-bold text-gray-800 mb-1\">\r\n              {typeof value === 'number' ? value.toLocaleString('de-DE') : value}\r\n            </Typography>\r\n            {subtitle && (\r\n              <Typography variant=\"body2\" className=\"text-gray-500\">\r\n                {subtitle}\r\n              </Typography>\r\n            )}\r\n            {trend && (\r\n              <Box className=\"flex items-center mt-2\">\r\n                <Typography \r\n                  variant=\"body2\" \r\n                  className={`font-medium ${\r\n                    trend.direction === 'up' ? 'text-green-600' : \r\n                    trend.direction === 'down' ? 'text-red-600' : 'text-gray-600'\r\n                  }`}\r\n                >\r\n                  {trend.direction === 'up' ? '+' : ''}{trend.value}%\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n          </Box>\r\n          {icon && (\r\n            <Avatar sx={{ bgcolor: color, width: 48, height: 48 }}>\r\n              {icon}\r\n            </Avatar>\r\n          )}\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// Action Button Component\r\ninterface ActionButtonProps {\r\n  variant: 'add' | 'edit' | 'delete' | 'view' | 'download' | 'upload';\r\n  onClick: () => void;\r\n  disabled?: boolean;\r\n  size?: 'small' | 'medium' | 'large';\r\n  label?: string;\r\n}\r\n\r\nexport const ActionButton: React.FC<ActionButtonProps> = ({\r\n  variant,\r\n  onClick,\r\n  disabled = false,\r\n  size = 'medium',\r\n  label\r\n}) => {\r\n  const getIcon = () => {\r\n    switch (variant) {\r\n      case 'add': return <AddIcon />;\r\n      case 'edit': return <EditIcon />;\r\n      case 'delete': return <DeleteIcon />;\r\n      case 'view': return <ViewIcon />;\r\n      case 'download': return <DownloadIcon />;\r\n      case 'upload': return <UploadIcon />;\r\n      default: return <AddIcon />;\r\n    }\r\n  };\r\n\r\n  const getColor = () => {\r\n    switch (variant) {\r\n      case 'add': return 'primary';\r\n      case 'edit': return 'info';\r\n      case 'delete': return 'error';\r\n      case 'view': return 'success';\r\n      case 'download': return 'secondary';\r\n      case 'upload': return 'warning';\r\n      default: return 'primary';\r\n    }\r\n  };\r\n\r\n  const getLabel = () => {\r\n    if (label) return label;\r\n    switch (variant) {\r\n      case 'add': return 'Hinzufügen';\r\n      case 'edit': return 'Bearbeiten';\r\n      case 'delete': return 'Löschen';\r\n      case 'view': return 'Anzeigen';\r\n      case 'download': return 'Herunterladen';\r\n      case 'upload': return 'Hochladen';\r\n      default: return 'Aktion';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      variant=\"contained\"\r\n      color={getColor()}\r\n      size={size}\r\n      onClick={onClick}\r\n      disabled={disabled}\r\n      startIcon={getIcon()}\r\n    >\r\n      {getLabel()}\r\n    </Button>\r\n  );\r\n};\r\n\r\n// Status Chip Component\r\ninterface StatusChipProps {\r\n  status: 'success' | 'warning' | 'error' | 'info' | 'pending' | 'completed';\r\n  label?: string;\r\n}\r\n\r\nexport const StatusChip: React.FC<StatusChipProps> = ({ status, label }) => {\r\n  const getStatusConfig = () => {\r\n    switch (status) {\r\n      case 'success':\r\n      case 'completed':\r\n        return { color: 'success', label: label || 'Erfolgreich', icon: <SuccessIcon /> };\r\n      case 'warning':\r\n      case 'pending':\r\n        return { color: 'warning', label: label || 'Ausstehend', icon: <WarningIcon /> };\r\n      case 'error':\r\n        return { color: 'error', label: label || 'Fehler', icon: <ErrorIcon /> };\r\n      case 'info':\r\n        return { color: 'info', label: label || 'Information', icon: <InfoIcon /> };\r\n      default:\r\n        return { color: 'default', label: label || 'Unbekannt', icon: <InfoIcon /> };\r\n    }\r\n  };\r\n\r\n  const config = getStatusConfig();\r\n\r\n  return (\r\n    <Chip\r\n      icon={config.icon}\r\n      label={config.label}\r\n      color={config.color as any}\r\n      size=\"small\"\r\n      className=\"font-medium\"\r\n    />\r\n  );\r\n};\r\n\r\n// Search Bar Component\r\ninterface SearchBarProps {\r\n  placeholder?: string;\r\n  onSearch: (value: string) => void;\r\n  onClear?: () => void;\r\n  className?: string;\r\n}\r\n\r\nexport const SearchBar: React.FC<SearchBarProps> = ({\r\n  placeholder = 'Suchen...',\r\n  onSearch,\r\n  onClear,\r\n  className\r\n}) => {\r\n  const [searchValue, setSearchValue] = React.useState('');\r\n\r\n  const handleSearch = (value: string) => {\r\n    setSearchValue(value);\r\n    onSearch(value);\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setSearchValue('');\r\n    onClear?.();\r\n  };\r\n\r\n  return (\r\n    <Box className={`flex items-center space-x-2 ${className}`}>\r\n      <TextField\r\n        fullWidth\r\n        placeholder={placeholder}\r\n        value={searchValue}\r\n        onChange={(e) => handleSearch(e.target.value)}\r\n        InputProps={{\r\n          startAdornment: <SearchIcon className=\"text-gray-400 mr-2\" />,\r\n          endAdornment: searchValue && (\r\n            <IconButton size=\"small\" onClick={handleClear}>\r\n              <DeleteIcon fontSize=\"small\" />\r\n            </IconButton>\r\n          )\r\n        }}\r\n        size=\"small\"\r\n      />\r\n      <Tooltip title=\"Filter\">\r\n        <IconButton>\r\n          <FilterIcon />\r\n        </IconButton>\r\n      </Tooltip>\r\n      <Tooltip title=\"Aktualisieren\">\r\n        <IconButton>\r\n          <RefreshIcon />\r\n        </IconButton>\r\n      </Tooltip>\r\n    </Box>\r\n  );\r\n};\r\n\r\n// Progress Card Component\r\ninterface ProgressCardProps {\r\n  title: string;\r\n  progress: number;\r\n  current: number;\r\n  total: number;\r\n  color?: string;\r\n  subtitle?: string;\r\n}\r\n\r\nexport const ProgressCard: React.FC<ProgressCardProps> = ({\r\n  title,\r\n  progress,\r\n  current,\r\n  total,\r\n  color = '#1976d2',\r\n  subtitle\r\n}) => {\r\n  return (\r\n    <Card className=\"h-full\">\r\n      <CardContent>\r\n        <Typography variant=\"h6\" className=\"font-semibold text-gray-800 mb-2\">\r\n          {title}\r\n        </Typography>\r\n        {subtitle && (\r\n          <Typography variant=\"body2\" className=\"text-gray-600 mb-3\">\r\n            {subtitle}\r\n          </Typography>\r\n        )}\r\n        <Box className=\"mb-3\">\r\n          <LinearProgress\r\n            variant=\"determinate\"\r\n            value={progress}\r\n            sx={{\r\n              height: 8,\r\n              borderRadius: 4,\r\n              backgroundColor: '#e5e7eb',\r\n              '& .MuiLinearProgress-bar': {\r\n                backgroundColor: color,\r\n                borderRadius: 4\r\n              }\r\n            }}\r\n          />\r\n        </Box>\r\n        <Box className=\"flex justify-between items-center\">\r\n          <Typography variant=\"body2\" className=\"text-gray-600\">\r\n            {current} von {total}\r\n          </Typography>\r\n          <Typography variant=\"body2\" className=\"font-medium text-gray-800\">\r\n            {progress}%\r\n          </Typography>\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// Alert Message Component\r\ninterface AlertMessageProps {\r\n  type: 'success' | 'warning' | 'error' | 'info';\r\n  title: string;\r\n  message?: string;\r\n  onClose?: () => void;\r\n}\r\n\r\nexport const AlertMessage: React.FC<AlertMessageProps> = ({\r\n  type,\r\n  title,\r\n  message,\r\n  onClose\r\n}) => {\r\n  return (\r\n    <Alert\r\n      severity={type}\r\n      onClose={onClose}\r\n      className=\"mb-4\"\r\n      action={\r\n        onClose && (\r\n          <Button color=\"inherit\" size=\"small\" onClick={onClose}>\r\n            Schließen\r\n          </Button>\r\n        )\r\n      }\r\n    >\r\n      <Box>\r\n        <Typography variant=\"subtitle2\" className=\"font-semibold\">\r\n          {title}\r\n        </Typography>\r\n        {message && (\r\n          <Typography variant=\"body2\" className=\"mt-1\">\r\n            {message}\r\n          </Typography>\r\n        )}\r\n      </Box>\r\n    </Alert>\r\n  );\r\n};\r\n\r\n// Empty State Component\r\ninterface EmptyStateProps {\r\n  title: string;\r\n  description: string;\r\n  icon?: React.ReactNode;\r\n  action?: {\r\n    label: string;\r\n    onClick: () => void;\r\n  };\r\n}\r\n\r\nexport const EmptyState: React.FC<EmptyStateProps> = ({\r\n  title,\r\n  description,\r\n  icon,\r\n  action\r\n}) => {\r\n  return (\r\n    <Box className=\"text-center py-12\">\r\n      {icon && (\r\n        <Box className=\"mb-4\">\r\n          {icon}\r\n        </Box>\r\n      )}\r\n      <Typography variant=\"h6\" className=\"font-semibold text-gray-800 mb-2\">\r\n        {title}\r\n      </Typography>\r\n      <Typography variant=\"body2\" className=\"text-gray-600 mb-4 max-w-md mx-auto\">\r\n        {description}\r\n      </Typography>\r\n      {action && (\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={action.onClick}\r\n          startIcon={<AddIcon />}\r\n        >\r\n          {action.label}\r\n        </Button>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\n// Loading State Component\r\ninterface LoadingStateProps {\r\n  message?: string;\r\n  size?: 'small' | 'medium' | 'large';\r\n}\r\n\r\nexport const LoadingState: React.FC<LoadingStateProps> = ({\r\n  message = 'Daten werden geladen...',\r\n  size = 'medium'\r\n}) => {\r\n  return (\r\n    <Box className=\"flex flex-col items-center justify-center py-8\">\r\n      <LinearProgress \r\n        className=\"w-32 mb-4\"\r\n        sx={{ height: size === 'large' ? 8 : 4 }}\r\n      />\r\n      <Typography variant=\"body2\" className=\"text-gray-600\">\r\n        {message}\r\n      </Typography>\r\n    </Box>\r\n  );\r\n};\r\n\r\n// Section Header Component\r\ninterface SectionHeaderProps {\r\n  title: string;\r\n  subtitle?: string;\r\n  actions?: React.ReactNode;\r\n}\r\n\r\nexport const SectionHeader: React.FC<SectionHeaderProps> = ({\r\n  title,\r\n  subtitle,\r\n  actions\r\n}) => {\r\n  return (\r\n    <Box className=\"flex items-center justify-between mb-6\">\r\n      <Box>\r\n        <Typography variant=\"h5\" className=\"font-semibold text-gray-800\">\r\n          {title}\r\n        </Typography>\r\n        {subtitle && (\r\n          <Typography variant=\"body2\" className=\"text-gray-600 mt-1\">\r\n            {subtitle}\r\n          </Typography>\r\n        )}\r\n      </Box>\r\n      {actions && (\r\n        <Box className=\"flex items-center space-x-2\">\r\n          {actions}\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\ui\\NeuroFlowComponents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\ui\\TabPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\ui\\UIStandardization.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":396,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":396,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11042,11045],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11042,11045],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":431,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":431,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11838,11841],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11838,11841],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":547,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":547,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14481,14484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14481,14484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Box, Typography, Chip, Alert, Button, IconButton, Tooltip } from '@mui/material';\nimport {\n  Info as InfoIcon,\n  Warning as WarningIcon,\n  Error as ErrorIcon,\n  CheckCircle as SuccessIcon,\n  Help as HelpIcon\n} from '@mui/icons-material';\n\n// =====================================================\n// UI STANDARDIZATION CONSTANTS\n// =====================================================\n\n/**\n * Zentrale Label-Definitionen für das gesamte System\n */\nexport const UI_LABELS = {\n  // Allgemeine Aktionen\n  ACTIONS: {\n    SAVE: 'Speichern',\n    CANCEL: 'Abbrechen',\n    RESET: 'Zurücksetzen',\n    DELETE: 'Löschen',\n    EDIT: 'Bearbeiten',\n    VIEW: 'Anzeigen',\n    SEARCH: 'Suchen',\n    FILTER: 'Filter',\n    SORT: 'Sortieren',\n    EXPORT: 'Exportieren',\n    IMPORT: 'Importieren',\n    ADD: 'Hinzufügen',\n    UPDATE: 'Aktualisieren',\n    SUBMIT: 'Absenden',\n    CONFIRM: 'Bestätigen',\n    BACK: 'Zurück',\n    NEXT: 'Weiter',\n    CLOSE: 'Schließen',\n    OPEN: 'Öffnen',\n    DOWNLOAD: 'Herunterladen',\n    UPLOAD: 'Hochladen',\n    PRINT: 'Drucken',\n    PREVIEW: 'Vorschau',\n    REFRESH: 'Aktualisieren',\n    CLEAR: 'Löschen',\n    COPY: 'Kopieren',\n    PASTE: 'Einfügen',\n    UNDO: 'Rückgängig',\n    REDO: 'Wiederholen',\n    ACCEPT: 'Akzeptieren',\n    REJECT: 'Ablehnen',\n    RETRY: 'Erneut versuchen',\n    RELOAD_PAGE: 'Seite neu laden',\n    LOGOUT: 'Abmelden'\n  },\n\n  // Formular-Labels\n  FORMS: {\n    NAME: 'Name',\n    EMAIL: 'E-Mail',\n    PHONE: 'Telefon',\n    ADDRESS: 'Adresse',\n    CITY: 'Stadt',\n    ZIP_CODE: 'PLZ',\n    COUNTRY: 'Land',\n    DESCRIPTION: 'Beschreibung',\n    NOTES: 'Notizen',\n    STATUS: 'Status',\n    PRIORITY: 'Priorität',\n    DATE: 'Datum',\n    TIME: 'Zeit',\n    AMOUNT: 'Betrag',\n    QUANTITY: 'Menge',\n    PRICE: 'Preis',\n    CURRENCY: 'Währung',\n    TAX_RATE: 'Steuersatz',\n    DISCOUNT: 'Rabatt',\n    TOTAL: 'Gesamt',\n    SUBTOTAL: 'Zwischensumme',\n    TAX_AMOUNT: 'Steuerbetrag',\n    NET_AMOUNT: 'Nettobetrag',\n    GROSS_AMOUNT: 'Bruttobetrag',\n    SALUTATION: 'Anrede',\n    STEP: 'Schritt',\n    OF: 'von'\n  },\n\n  // ERP-spezifische Labels\n  ERP: {\n    CUSTOMER_NUMBER: 'Kundennummer',\n    ORDER_NUMBER: 'Auftragsnummer',\n    INVOICE_NUMBER: 'Rechnungsnummer',\n    DELIVERY_NUMBER: 'Lieferscheinnummer',\n    PRODUCT_NUMBER: 'Artikelnummer',\n    SUPPLIER_NUMBER: 'Lieferantennummer',\n    EMPLOYEE_NUMBER: 'Mitarbeiternummer',\n    PROJECT_NUMBER: 'Projektnummer',\n    CONTRACT_NUMBER: 'Vertragsnummer',\n    QUOTE_NUMBER: 'Angebotsnummer',\n    PURCHASE_ORDER_NUMBER: 'Bestellnummer',\n    RECEIPT_NUMBER: 'Belegnummer',\n    TRANSACTION_NUMBER: 'Transaktionsnummer',\n    REFERENCE_NUMBER: 'Referenznummer',\n    BATCH_NUMBER: 'Chargennummer',\n    SERIAL_NUMBER: 'Seriennummer',\n    BARCODE: 'Barcode',\n    QR_CODE: 'QR-Code',\n    SKU: 'Artikelnummer',\n    EAN: 'EAN-Code',\n    ISBN: 'ISBN',\n    GTIN: 'GTIN',\n    CREDITOR_ACCOUNT_NUMBER: 'Kreditor-Kontonummer',\n    SUPPLIER: 'Lieferant',\n    INQUIRY_NUMBER: 'Anfragenummer',\n    OPERATOR: 'Bearbeiter',\n    SUPPLIER_OFFER_NUMBER: 'Lieferanten-Angebotsnummer',\n    SUPPLIER_OFFER: 'Lieferanten-Angebot'\n  },\n\n  // Status-Labels\n  STATUS: {\n    ACTIVE: 'Aktiv',\n    INACTIVE: 'Inaktiv',\n    PENDING: 'Ausstehend',\n    COMPLETED: 'Abgeschlossen',\n    CANCELLED: 'Storniert',\n    DRAFT: 'Entwurf',\n    PUBLISHED: 'Veröffentlicht',\n    ARCHIVED: 'Archiviert',\n    DELETED: 'Gelöscht',\n    SUSPENDED: 'Ausgesetzt',\n    EXPIRED: 'Abgelaufen',\n    OVERDUE: 'Überfällig',\n    PROCESSING: 'In Bearbeitung',\n    APPROVED: 'Genehmigt',\n    REJECTED: 'Abgelehnt',\n    ON_HOLD: 'Pausiert',\n    SCHEDULED: 'Geplant',\n    IN_PROGRESS: 'In Bearbeitung',\n    READY: 'Bereit',\n    SHIPPED: 'Versendet',\n    DELIVERED: 'Geliefert',\n    RETURNED: 'Zurückgegeben',\n    REFUNDED: 'Erstattet',\n    AVAILABLE: 'Verfügbar',\n    UNAVAILABLE: 'Nicht verfügbar',\n    ONLINE: 'Online',\n    OFFLINE: 'Offline',\n    MAINTENANCE: 'Wartung',\n    ERROR: 'Fehler',\n    HIGH: 'Hoch',\n    MEDIUM: 'Mittel',\n    LOW: 'Niedrig',\n    UNKNOWN: 'Unbekannt',\n    DISABLED: 'Deaktiviert',\n    LIVE: 'Live'\n  },\n\n  // Prioritäts-Labels\n  PRIORITY: {\n    LOW: 'Niedrig',\n    MEDIUM: 'Mittel',\n    HIGH: 'Hoch',\n    URGENT: 'Dringend',\n    CRITICAL: 'Kritisch'\n  },\n\n  // Navigation-Labels (erweitert)\n  NAVIGATION: {\n    DASHBOARD: 'Dashboard',\n    USERS: 'Benutzer',\n    CUSTOMERS: 'Kunden',\n    SUPPLIERS: 'Lieferanten',\n    PRODUCTS: 'Artikel',\n    ORDERS: 'Aufträge',\n    INVOICES: 'Rechnungen',\n    DELIVERIES: 'Lieferungen',\n    INVENTORY: 'Lager',\n    REPORTS: 'Berichte',\n    SETTINGS: 'Einstellungen',\n    HELP: 'Hilfe',\n    PROFILE: 'Profil',\n    LOGOUT: 'Abmelden',\n    LOGIN: 'Anmelden',\n    REGISTER: 'Registrieren',\n    FORGOT_PASSWORD: 'Passwort vergessen',\n    CHANGE_PASSWORD: 'Passwort ändern',\n    ACCOUNT_SETTINGS: 'Kontoeinstellungen',\n    SYSTEM_SETTINGS: 'Systemeinstellungen',\n    USER_MANAGEMENT: 'Benutzerverwaltung',\n    ROLE_MANAGEMENT: 'Rollenverwaltung',\n    PERMISSION_MANAGEMENT: 'Berechtigungsverwaltung',\n    AI_DASHBOARD: 'KI-Dashboard',\n    DOCUMENTS: 'Dokumente',\n    POS: 'Point of Sale',\n    USER_MENU: 'Benutzermenü',\n    OPEN_MENU: 'Menü öffnen',\n    USER: 'Benutzer',\n    APP: 'Anwendung',\n    NOTIFICATIONS: 'Benachrichtigungen',\n    STRECKENGESCHAEFT: 'Streckengeschäft',\n    DAILY_REPORT: 'Tagesbericht',\n    E_INVOICING: 'E-Invoicing',\n    AI_BARCODE_DASHBOARD: 'AI Barcode Dashboard',\n    AI_INVENTORY_DASHBOARD: 'AI Inventory Dashboard',\n    AI_VOUCHER_DASHBOARD: 'AI Voucher Dashboard',\n    CRM: 'CRM',\n    CRM_DESCRIPTION: 'Kundenverwaltung',\n    WAREHOUSE_MANAGEMENT: 'Warenwirtschaft',\n    WAREHOUSE_DESCRIPTION: 'L3 Warenwirtschaft & ERP',\n    FINANCE: 'Finanzwesen',\n    FINANCE_DESCRIPTION: 'Finanzbuchhaltung',\n    INVENTORY_DESCRIPTION: 'Lagerverwaltung',\n    BI: 'BI',\n    BI_DESCRIPTION: 'Business Intelligence',\n    DMS: 'DMS',\n    DMS_DESCRIPTION: 'Dokumentenmanagement',\n    SETTINGS_DESCRIPTION: 'Systemkonfiguration',\n    HELP_DESCRIPTION: 'Support & Dokumentation',\n    PAYROLL: 'Lohn & Gehalt',\n    SALES: 'Vertrieb',\n    STOCK: 'Bestand',\n    MOVEMENTS: 'Bewegungen',\n    PRODUCTION: 'Produktion',\n    PRODUCTION_ORDERS: 'Produktionsaufträge',\n    PLANNING: 'Planung',\n    QUALITY: 'Qualitätsmanagement',\n    INSPECTIONS: 'Prüfungen',\n    PROJECTS: 'Projekte'\n  },\n\n  // Modul-Labels\n  MODULES: {\n    CRM: 'Kundenbeziehungsmanagement',\n    ERP: 'Enterprise Resource Planning',\n    WMS: 'Lagerverwaltungssystem',\n    POS: 'Point of Sale',\n    FINANCE: 'Finanzwesen',\n    HR: 'Personalwesen',\n    PROJECT: 'Projektmanagement',\n    QUALITY: 'Qualitätsmanagement',\n    MAINTENANCE: 'Instandhaltung',\n    PRODUCTION: 'Produktion',\n    PURCHASING: 'Einkauf',\n    SALES: 'Vertrieb',\n    MARKETING: 'Marketing',\n    ANALYTICS: 'Analytik',\n    REPORTING: 'Berichtswesen',\n    DOCUMENT_MANAGEMENT: 'Dokumentenverwaltung',\n    WORKFLOW: 'Workflow',\n    NOTIFICATIONS: 'Benachrichtigungen',\n    MESSAGING: 'Nachrichten',\n    CALENDAR: 'Kalender',\n    TASKS: 'Aufgaben',\n    PROJECTS: 'Projekte',\n    ASSETS: 'Anlagen',\n    CONTRACTS: 'Verträge',\n    QUOTES: 'Angebote',\n    PURCHASE_ORDERS: 'Bestellungen',\n    RECEIPTS: 'Belege',\n    TRANSACTIONS: 'Transaktionen',\n    BATCHES: 'Chargen',\n    SERIALS: 'Seriennummern',\n    BARCODES: 'Barcodes',\n    QR_CODES: 'QR-Codes'\n  },\n\n  // Nachrichten und Status\n  MESSAGES: {\n    SUCCESS: 'Erfolgreich',\n    ERROR: 'Fehler',\n    WARNING: 'Warnung',\n    INFO: 'Information',\n    LOADING: 'Lädt...',\n    SAVING: 'Speichere...',\n    DELETING: 'Lösche...',\n    UPDATING: 'Aktualisiere...',\n    CREATING: 'Erstelle...',\n    SEARCHING: 'Suche...',\n    NO_DATA: 'Keine Daten verfügbar',\n    NO_RESULTS: 'Keine Ergebnisse gefunden',\n    PLEASE_WAIT: 'Bitte warten...',\n    ROUTE_PREPARED: 'Route vorbereitet',\n    PRELOAD_STATUS: 'Preload-Status',\n    PREVIOUS_VALUE: 'Vorheriger Wert',\n    DATA_SOURCE: 'Datenquelle',\n    FIELD: 'Feld',\n    AUTO_REFRESH: 'Auto-Refresh',\n    MCP_STATUS: 'MCP-Status',\n    LAST_UPDATE: 'Letzte Aktualisierung'\n  },\n\n  // Validierung\n  VALIDATION: {\n    REQUIRED: 'Dieses Feld ist erforderlich',\n    EMAIL: 'Bitte geben Sie eine gültige E-Mail-Adresse ein',\n    PHONE: 'Bitte geben Sie eine gültige Telefonnummer ein',\n    URL: 'Bitte geben Sie eine gültige URL ein',\n    NUMBER: 'Bitte geben Sie eine gültige Zahl ein',\n    INTEGER: 'Bitte geben Sie eine ganze Zahl ein',\n    POSITIVE: 'Bitte geben Sie eine positive Zahl ein',\n    MIN_LENGTH: 'Mindestens {min} Zeichen erforderlich',\n    MAX_LENGTH: 'Maximal {max} Zeichen erlaubt',\n    MIN_VALUE: 'Mindestwert ist {min}',\n    MAX_VALUE: 'Maximalwert ist {max}',\n    PATTERN: 'Ungültiges Format',\n    UNIQUE: 'Dieser Wert ist bereits vorhanden',\n    CONFIRM_PASSWORD: 'Passwörter stimmen nicht überein',\n    STRONG_PASSWORD: 'Passwort muss mindestens 8 Zeichen lang sein und Groß-/Kleinbuchstaben, Zahlen und Sonderzeichen enthalten'\n  },\n\n  // App-spezifische Labels\n  APP: {\n    TITLE: 'VALEO NeuroERP',\n    VERSION: 'v2.0',\n    DESCRIPTION: 'Intelligentes ERP-System mit KI-Integration'\n  },\n\n  // AI-spezifische Labels\n  AI: {\n    SUGGESTION: 'KI-Vorschlag',\n    CONFIDENCE: 'Konfidenz:',\n    DETAILS: 'Details:',\n    TRUST_LEVEL: 'Vertrauensstufe'\n  },\n\n  // Notifications-Labels\n  NOTIFICATIONS: {\n    TITLE: 'Benachrichtigungen',\n    UNREAD: 'ungelesen',\n    UNREAD_COUNT: 'ungelesene Benachrichtigungen',\n    FILTERS: {\n      ALL: 'Alle',\n      UNREAD: 'Ungelesen',\n      AI: 'KI',\n      SYSTEM: 'System',\n      BUSINESS: 'Geschäft'\n    },\n    NO_NOTIFICATIONS: 'Keine Benachrichtigungen',\n    MARK_ALL_READ: 'Alle als gelesen markieren',\n    VIEW_ALL: 'Alle Benachrichtigungen anzeigen'\n  },\n\n  // Errors-Labels\n  ERRORS: {\n    TITLE: 'Ein Fehler ist aufgetreten',\n    DESCRIPTION: 'Entschuldigung, etwas ist schiefgelaufen. Bitte versuchen Sie es erneut oder kontaktieren Sie den Support.',\n    DETAILS_TITLE: 'Fehlerdetails (nur in Entwicklung):'\n  }\n} as const;\n\n// =====================================================\n// UI STANDARDIZATION COMPONENTS\n// =====================================================\n\n/**\n * Standardisierte Status-Chip-Komponente\n */\nexport const StatusChip: React.FC<{\n  status: keyof typeof UI_LABELS.STATUS;\n  size?: 'small' | 'medium';\n  variant?: 'filled' | 'outlined';\n}> = ({ status, size = 'medium', variant = 'filled' }) => {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'ACTIVE':\n      case 'COMPLETED':\n      case 'APPROVED':\n      case 'READY':\n      case 'DELIVERED':\n        return 'success';\n      case 'PENDING':\n      case 'PROCESSING':\n      case 'IN_PROGRESS':\n      case 'SCHEDULED':\n        return 'warning';\n      case 'CANCELLED':\n      case 'REJECTED':\n      case 'DELETED':\n      case 'EXPIRED':\n      case 'OVERDUE':\n        return 'error';\n      case 'DRAFT':\n      case 'INACTIVE':\n      case 'SUSPENDED':\n      case 'ON_HOLD':\n        return 'default';\n      default:\n        return 'primary';\n    }\n  };\n\n  return (\n    <Chip\n      label={UI_LABELS.STATUS[status]}\n      color={getStatusColor(status) as any}\n      size={size}\n      variant={variant}\n      sx={{ fontWeight: 500 }}\n    />\n  );\n};\n\n/**\n * Standardisierte Prioritäts-Chip-Komponente\n */\nexport const PriorityChip: React.FC<{\n  priority: keyof typeof UI_LABELS.PRIORITY;\n  size?: 'small' | 'medium';\n  variant?: 'filled' | 'outlined';\n}> = ({ priority, size = 'medium', variant = 'filled' }) => {\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'LOW':\n        return 'default';\n      case 'MEDIUM':\n        return 'primary';\n      case 'HIGH':\n        return 'warning';\n      case 'URGENT':\n      case 'CRITICAL':\n        return 'error';\n      default:\n        return 'primary';\n    }\n  };\n\n  return (\n    <Chip\n      label={UI_LABELS.PRIORITY[priority]}\n      color={getPriorityColor(priority) as any}\n      size={size}\n      variant={variant}\n      sx={{ fontWeight: 500 }}\n    />\n  );\n};\n\n/**\n * Standardisierte Meldungs-Komponente\n */\nexport const StandardMessage: React.FC<{\n  type: 'success' | 'error' | 'warning' | 'info';\n  title?: string;\n  message: string;\n  onClose?: () => void;\n  showIcon?: boolean;\n}> = ({ type, title, message, onClose, showIcon = true }) => {\n  const getIcon = () => {\n    if (!showIcon) return null;\n    \n    switch (type) {\n      case 'success':\n        return <SuccessIcon />;\n      case 'error':\n        return <ErrorIcon />;\n      case 'warning':\n        return <WarningIcon />;\n      case 'info':\n        return <InfoIcon />;\n      default:\n        return <InfoIcon />;\n    }\n  };\n\n  return (\n    <Alert\n      severity={type}\n      onClose={onClose}\n      icon={getIcon()}\n      sx={{ \n        borderRadius: 2,\n        '& .MuiAlert-message': {\n          width: '100%'\n        }\n      }}\n    >\n      {title && (\n        <Typography variant=\"subtitle2\" sx={{ fontWeight: 600, mb: 0.5 }}>\n          {title}\n        </Typography>\n      )}\n      {message}\n    </Alert>\n  );\n};\n\n/**\n * Standardisierte Info-Tooltip-Komponente\n */\nexport const InfoTooltip: React.FC<{\n  title: string;\n  children: React.ReactNode;\n  placement?: 'top' | 'bottom' | 'left' | 'right';\n  size?: 'small' | 'medium' | 'large';\n}> = ({ title, children, placement = 'top', size = 'small' }) => {\n  return (\n    <Tooltip title={title} placement={placement} arrow>\n      <Box component=\"span\" sx={{ display: 'inline-flex', alignItems: 'center' }}>\n        {children}\n        <IconButton size={size} sx={{ ml: 0.5, color: 'text.secondary' }}>\n          <InfoIcon fontSize={size} />\n        </IconButton>\n      </Box>\n    </Tooltip>\n  );\n};\n\n/**\n * Standardisierte Hilfe-Komponente\n */\nexport const HelpButton: React.FC<{\n  title: string;\n  content: string;\n  placement?: 'top' | 'bottom' | 'left' | 'right';\n}> = ({ title, content, placement = 'top' }) => {\n  return (\n    <Tooltip\n      title={\n        <Box>\n          <Typography variant=\"subtitle2\" sx={{ fontWeight: 600, mb: 0.5 }}>\n            {title}\n          </Typography>\n          <Typography variant=\"body2\">\n            {content}\n          </Typography>\n        </Box>\n      }\n      placement={placement}\n      arrow\n    >\n      <IconButton size=\"small\" sx={{ color: 'text.secondary' }}>\n        <HelpIcon fontSize=\"small\" />\n      </IconButton>\n    </Tooltip>\n  );\n};\n\n/**\n * Hook für UI-Standardisierung\n */\nexport const useUIStandardization = () => {\n  return {\n    labels: UI_LABELS,\n    getLabel: (path: string) => {\n      const keys = path.split('.');\n      let value: any = UI_LABELS;\n      \n      for (const key of keys) {\n        if (value && typeof value === 'object' && key in value) {\n          value = value[key];\n        } else {\n          return path; // Fallback: return original path if not found\n        }\n      }\n      \n      return typeof value === 'string' ? value : path;\n    }\n  };\n};\n\nexport default {\n  UI_LABELS,\n  StatusChip,\n  PriorityChip,\n  StandardMessage,\n  InfoTooltip,\n  HelpButton,\n  useUIStandardization\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\ui\\__tests__\\UIStandardization.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'labels' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":185,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":185,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { render, screen, fireEvent } from '@testing-library/react';\r\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\r\nimport { UI_LABELS, StatusChip, PriorityChip, StandardMessage, InfoTooltip, HelpButton, useUIStandardization } from '../UIStandardization';\r\n\r\n// Test-Theme erstellen\r\nconst theme = createTheme();\r\n\r\nconst renderWithTheme = (component: React.ReactElement) => {\r\n  return render(\r\n    <ThemeProvider theme={theme}>\r\n      {component}\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\ndescribe('UI Standardization', () => {\r\n  describe('UI_LABELS', () => {\r\n    it('sollte alle erforderlichen Label-Kategorien enthalten', () => {\r\n      expect(UI_LABELS.ACTIONS).toBeDefined();\r\n      expect(UI_LABELS.FORMS).toBeDefined();\r\n      expect(UI_LABELS.ERP).toBeDefined();\r\n      expect(UI_LABELS.STATUS).toBeDefined();\r\n      expect(UI_LABELS.PRIORITY).toBeDefined();\r\n      expect(UI_LABELS.NAVIGATION).toBeDefined();\r\n      expect(UI_LABELS.MODULES).toBeDefined();\r\n      expect(UI_LABELS.MESSAGES).toBeDefined();\r\n      expect(UI_LABELS.VALIDATION).toBeDefined();\r\n    });\r\n\r\n    it('sollte deutsche Labels verwenden', () => {\r\n      expect(UI_LABELS.ACTIONS.SAVE).toBe('Speichern');\r\n      expect(UI_LABELS.ACTIONS.CANCEL).toBe('Abbrechen');\r\n      expect(UI_LABELS.FORMS.NAME).toBe('Name');\r\n      expect(UI_LABELS.FORMS.EMAIL).toBe('E-Mail');\r\n      expect(UI_LABELS.ERP.CUSTOMER_NUMBER).toBe('Kundennummer');\r\n      expect(UI_LABELS.ERP.ORDER_NUMBER).toBe('Auftragsnummer');\r\n    });\r\n\r\n    it('sollte konsistente Status-Labels haben', () => {\r\n      expect(UI_LABELS.STATUS.ACTIVE).toBe('Aktiv');\r\n      expect(UI_LABELS.STATUS.PENDING).toBe('Ausstehend');\r\n      expect(UI_LABELS.STATUS.COMPLETED).toBe('Abgeschlossen');\r\n      expect(UI_LABELS.STATUS.CANCELLED).toBe('Storniert');\r\n    });\r\n  });\r\n\r\n  describe('StatusChip', () => {\r\n    it('sollte Status-Chip mit korrektem Label rendern', () => {\r\n      renderWithTheme(<StatusChip status=\"ACTIVE\" />);\r\n      expect(screen.getByText('Aktiv')).toBeInTheDocument();\r\n    });\r\n\r\n    it('sollte verschiedene Status-Farben verwenden', () => {\r\n      const { rerender } = renderWithTheme(<StatusChip status=\"ACTIVE\" />);\r\n      expect(screen.getByText('Aktiv')).toBeInTheDocument();\r\n\r\n      rerender(<StatusChip status=\"PENDING\" />);\r\n      expect(screen.getByText('Ausstehend')).toBeInTheDocument();\r\n\r\n      rerender(<StatusChip status=\"CANCELLED\" />);\r\n      expect(screen.getByText('Storniert')).toBeInTheDocument();\r\n    });\r\n\r\n    it('sollte verschiedene Größen unterstützen', () => {\r\n      renderWithTheme(<StatusChip status=\"ACTIVE\" size=\"small\" />);\r\n      const chip = screen.getByText('Aktiv');\r\n      expect(chip).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  describe('PriorityChip', () => {\r\n    it('sollte Prioritäts-Chip mit korrektem Label rendern', () => {\r\n      renderWithTheme(<PriorityChip priority=\"HIGH\" />);\r\n      expect(screen.getByText('Hoch')).toBeInTheDocument();\r\n    });\r\n\r\n    it('sollte verschiedene Prioritäts-Farben verwenden', () => {\r\n      const { rerender } = renderWithTheme(<PriorityChip priority=\"LOW\" />);\r\n      expect(screen.getByText('Niedrig')).toBeInTheDocument();\r\n\r\n      rerender(<PriorityChip priority=\"MEDIUM\" />);\r\n      expect(screen.getByText('Mittel')).toBeInTheDocument();\r\n\r\n      rerender(<PriorityChip priority=\"HIGH\" />);\r\n      expect(screen.getByText('Hoch')).toBeInTheDocument();\r\n\r\n      rerender(<PriorityChip priority=\"URGENT\" />);\r\n      expect(screen.getByText('Dringend')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  describe('StandardMessage', () => {\r\n    it('sollte Erfolgs-Meldung rendern', () => {\r\n      renderWithTheme(\r\n        <StandardMessage\r\n          type=\"success\"\r\n          title=\"Erfolg\"\r\n          message=\"Operation erfolgreich abgeschlossen\"\r\n        />\r\n      );\r\n      expect(screen.getByText('Erfolg')).toBeInTheDocument();\r\n      expect(screen.getByText('Operation erfolgreich abgeschlossen')).toBeInTheDocument();\r\n    });\r\n\r\n    it('sollte Fehler-Meldung rendern', () => {\r\n      renderWithTheme(\r\n        <StandardMessage\r\n          type=\"error\"\r\n          title=\"Fehler\"\r\n          message=\"Ein Fehler ist aufgetreten\"\r\n        />\r\n      );\r\n      expect(screen.getByText('Fehler')).toBeInTheDocument();\r\n      expect(screen.getByText('Ein Fehler ist aufgetreten')).toBeInTheDocument();\r\n    });\r\n\r\n    it('sollte Warnung-Meldung rendern', () => {\r\n      renderWithTheme(\r\n        <StandardMessage\r\n          type=\"warning\"\r\n          title=\"Warnung\"\r\n          message=\"Bitte überprüfen Sie Ihre Eingaben\"\r\n        />\r\n      );\r\n      expect(screen.getByText('Warnung')).toBeInTheDocument();\r\n      expect(screen.getByText('Bitte überprüfen Sie Ihre Eingaben')).toBeInTheDocument();\r\n    });\r\n\r\n    it('sollte Info-Meldung rendern', () => {\r\n      renderWithTheme(\r\n        <StandardMessage\r\n          type=\"info\"\r\n          title=\"Information\"\r\n          message=\"Hier finden Sie weitere Informationen\"\r\n        />\r\n      );\r\n      expect(screen.getByText('Information')).toBeInTheDocument();\r\n      expect(screen.getByText('Hier finden Sie weitere Informationen')).toBeInTheDocument();\r\n    });\r\n\r\n    it('sollte Close-Funktion unterstützen', () => {\r\n      const onClose = jest.fn();\r\n      renderWithTheme(\r\n        <StandardMessage\r\n          type=\"info\"\r\n          message=\"Test Message\"\r\n          onClose={onClose}\r\n        />\r\n      );\r\n      \r\n      const closeButton = screen.getByRole('button', { name: /close/i });\r\n      fireEvent.click(closeButton);\r\n      expect(onClose).toHaveBeenCalledTimes(1);\r\n    });\r\n  });\r\n\r\n  describe('InfoTooltip', () => {\r\n    it('sollte Info-Tooltip mit Icon rendern', () => {\r\n      renderWithTheme(\r\n        <InfoTooltip title=\"Hilfreiche Information\">\r\n          <span>Test Content</span>\r\n        </InfoTooltip>\r\n      );\r\n      expect(screen.getByText('Test Content')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  describe('HelpButton', () => {\r\n    it('sollte Hilfe-Button rendern', () => {\r\n      renderWithTheme(\r\n        <HelpButton\r\n          title=\"Hilfe\"\r\n          content=\"Hier finden Sie Hilfe zur Verwendung dieser Funktion\"\r\n        />\r\n      );\r\n      const helpButton = screen.getByRole('button');\r\n      expect(helpButton).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  describe('useUIStandardization', () => {\r\n    it('sollte Labels zurückgeben', () => {\r\n      const TestComponent = () => {\r\n        const { labels, getLabel } = useUIStandardization();\r\n        return (\r\n          <div>\r\n            <span data-testid=\"save-label\">{getLabel('ACTIONS.SAVE')}</span>\r\n            <span data-testid=\"customer-number\">{getLabel('ERP.CUSTOMER_NUMBER')}</span>\r\n          </div>\r\n        );\r\n      };\r\n\r\n      renderWithTheme(<TestComponent />);\r\n      expect(screen.getByTestId('save-label')).toHaveTextContent('Speichern');\r\n      expect(screen.getByTestId('customer-number')).toHaveTextContent('Kundennummer');\r\n    });\r\n\r\n    it('sollte Fallback für unbekannte Labels zurückgeben', () => {\r\n      const TestComponent = () => {\r\n        const { getLabel } = useUIStandardization();\r\n        return (\r\n          <div>\r\n            <span data-testid=\"unknown-label\">{getLabel('UNKNOWN.LABEL')}</span>\r\n          </div>\r\n        );\r\n      };\r\n\r\n      renderWithTheme(<TestComponent />);\r\n      expect(screen.getByTestId('unknown-label')).toHaveTextContent('UNKNOWN.LABEL');\r\n    });\r\n  });\r\n\r\n  describe('Label-Konsistenz', () => {\r\n    it('sollte konsistente Button-Texte verwenden', () => {\r\n      expect(UI_LABELS.ACTIONS.SAVE).toBe('Speichern');\r\n      expect(UI_LABELS.ACTIONS.CANCEL).toBe('Abbrechen');\r\n      expect(UI_LABELS.ACTIONS.DELETE).toBe('Löschen');\r\n      expect(UI_LABELS.ACTIONS.EDIT).toBe('Bearbeiten');\r\n    });\r\n\r\n    it('sollte konsistente Formular-Labels verwenden', () => {\r\n      expect(UI_LABELS.FORMS.NAME).toBe('Name');\r\n      expect(UI_LABELS.FORMS.EMAIL).toBe('E-Mail');\r\n      expect(UI_LABELS.FORMS.PHONE).toBe('Telefon');\r\n      expect(UI_LABELS.FORMS.ADDRESS).toBe('Adresse');\r\n    });\r\n\r\n    it('sollte konsistente ERP-Labels verwenden', () => {\r\n      expect(UI_LABELS.ERP.CUSTOMER_NUMBER).toBe('Kundennummer');\r\n      expect(UI_LABELS.ERP.ORDER_NUMBER).toBe('Auftragsnummer');\r\n      expect(UI_LABELS.ERP.INVOICE_NUMBER).toBe('Rechnungsnummer');\r\n      expect(UI_LABELS.ERP.PRODUCT_NUMBER).toBe('Artikelnummer');\r\n    });\r\n  });\r\n\r\n  describe('Accessibility', () => {\r\n    it('sollte ARIA-Labels für Status-Chips haben', () => {\r\n      renderWithTheme(<StatusChip status=\"ACTIVE\" />);\r\n      const chip = screen.getByText('Aktiv');\r\n      expect(chip).toBeInTheDocument();\r\n    });\r\n\r\n    it('sollte ARIA-Labels für Prioritäts-Chips haben', () => {\r\n      renderWithTheme(<PriorityChip priority=\"HIGH\" />);\r\n      const chip = screen.getByText('Hoch');\r\n      expect(chip).toBeInTheDocument();\r\n    });\r\n\r\n    it('sollte ARIA-Labels für Meldungen haben', () => {\r\n      renderWithTheme(\r\n        <StandardMessage\r\n          type=\"success\"\r\n          title=\"Erfolg\"\r\n          message=\"Test Message\"\r\n        />\r\n      );\r\n      const alert = screen.getByRole('alert');\r\n      expect(alert).toBeInTheDocument();\r\n    });\r\n  });\r\n}); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\ui\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\voucher\\VoucherManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingUpIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":38,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WarningIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":39,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":126,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'resetVoucherForm'. Either include it or remove the dependency array.","line":137,"column":6,"nodeType":"ArrayExpression","endLine":137,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [voucherForm, resetVoucherForm, loadVouchers]","fix":{"range":[3582,3609],"text":"[voucherForm, resetVoucherForm, loadVouchers]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'resetVoucherForm'. Either include it or remove the dependency array.","line":162,"column":6,"nodeType":"ArrayExpression","endLine":162,"endColumn":50,"suggestions":[{"desc":"Update the dependencies array to be: [selectedVoucher, voucherForm, resetVoucherForm, loadVouchers]","fix":{"range":[4377,4421],"text":"[selectedVoucher, voucherForm, resetVoucherForm, loadVouchers]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":460,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":460,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14905,14908],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14905,14908],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":556,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":556,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18478,18481],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18478,18481],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\r\nimport {\r\n  Card,\r\n  Typography,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  TextField,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Alert,\r\n  Box,\r\n  Chip,\r\n  IconButton,\r\n  Tooltip,\r\n  CircularProgress,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Switch,\r\n  FormControlLabel\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  ContentCopy as CopyIcon,\r\n  Visibility as ViewIcon,\r\n  LocalOffer as VoucherIcon,\r\n  TrendingUp as TrendingUpIcon,\r\n  Warning as WarningIcon\r\n} from '@mui/icons-material';\r\n\r\ninterface Voucher {\r\n  id: string;\r\n  name: string;\r\n  code: string;\r\n  type: 'prozent' | 'betrag' | 'versandkosten';\r\n  nominal: number;\r\n  kuota: number;\r\n  used_count: number;\r\n  start_date: string;\r\n  expired: string;\r\n  minimal_buying: number;\r\n  is_active: boolean;\r\n  created_at: string;\r\n}\r\n\r\ninterface VoucherUsage {\r\n  id: string;\r\n  voucher_id: string;\r\n  transaction_id: string;\r\n  customer_id?: string;\r\n  used_amount: number;\r\n  used_at: string;\r\n}\r\n\r\ninterface VoucherManagementProps {\r\n  className?: string;\r\n}\r\n\r\nexport const VoucherManagement: React.FC<VoucherManagementProps> = ({\r\n  className = ''\r\n}) => {\r\n  const [vouchers, setVouchers] = useState<Voucher[]>([]);\r\n  const [selectedVoucher, setSelectedVoucher] = useState<Voucher | null>(null);\r\n  const [voucherUsage, setVoucherUsage] = useState<VoucherUsage[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [success, setSuccess] = useState<string | null>(null);\r\n  \r\n  // Dialog States\r\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\r\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\r\n  const [usageDialogOpen, setUsageDialogOpen] = useState(false);\r\n  \r\n  // Form States\r\n  const [voucherForm, setVoucherForm] = useState({\r\n    name: '',\r\n    code: '',\r\n    type: 'betrag' as 'prozent' | 'betrag' | 'versandkosten',\r\n    nominal: 0,\r\n    kuota: 1,\r\n    start_date: new Date().toISOString().split('T')[0],\r\n    expired: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\r\n    minimal_buying: 0,\r\n    is_active: true\r\n  });\r\n\r\n  // Vouchers laden\r\n  const loadVouchers = useCallback(async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch('/api/vouchers');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setVouchers(data.vouchers || []);\r\n      } else {\r\n        throw new Error('Fehler beim Laden der Gutscheine');\r\n      }\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Unbekannter Fehler');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Voucher erstellen\r\n  const createVoucher = useCallback(async () => {\r\n    try {\r\n      const response = await fetch('/api/vouchers', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(voucherForm)\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setSuccess('Gutschein erfolgreich erstellt');\r\n        setCreateDialogOpen(false);\r\n        resetVoucherForm();\r\n        loadVouchers();\r\n      } else {\r\n        throw new Error('Fehler beim Erstellen des Gutscheins');\r\n      }\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Unbekannter Fehler');\r\n    }\r\n  }, [voucherForm, loadVouchers]);\r\n\r\n  // Voucher bearbeiten\r\n  const updateVoucher = useCallback(async () => {\r\n    if (!selectedVoucher) return;\r\n    \r\n    try {\r\n      const response = await fetch(`/api/vouchers/${selectedVoucher.id}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(voucherForm)\r\n      });\r\n      \r\n      if (response.ok) {\r\n        setSuccess('Gutschein erfolgreich aktualisiert');\r\n        setEditDialogOpen(false);\r\n        setSelectedVoucher(null);\r\n        resetVoucherForm();\r\n        loadVouchers();\r\n      } else {\r\n        throw new Error('Fehler beim Aktualisieren des Gutscheins');\r\n      }\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Unbekannter Fehler');\r\n    }\r\n  }, [selectedVoucher, voucherForm, loadVouchers]);\r\n\r\n  // Voucher löschen\r\n  const deleteVoucher = useCallback(async (voucherId: string) => {\r\n    if (!confirm('Sind Sie sicher, dass Sie diesen Gutschein löschen möchten?')) return;\r\n    \r\n    try {\r\n      const response = await fetch(`/api/vouchers/${voucherId}`, {\r\n        method: 'DELETE'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        setSuccess('Gutschein erfolgreich gelöscht');\r\n        loadVouchers();\r\n      } else {\r\n        throw new Error('Fehler beim Löschen des Gutscheins');\r\n      }\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Unbekannter Fehler');\r\n    }\r\n  }, [loadVouchers]);\r\n\r\n  // Voucher-Nutzung laden\r\n  const loadVoucherUsage = useCallback(async (voucherId: string) => {\r\n    try {\r\n      const response = await fetch(`/api/vouchers/${voucherId}/usage`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setVoucherUsage(data.usage || []);\r\n      } else {\r\n        throw new Error('Fehler beim Laden der Gutschein-Nutzung');\r\n      }\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Unbekannter Fehler');\r\n    }\r\n  }, []);\r\n\r\n  // Voucher bearbeiten öffnen\r\n  const openEditDialog = useCallback((voucher: Voucher) => {\r\n    setSelectedVoucher(voucher);\r\n    setVoucherForm({\r\n      name: voucher.name,\r\n      code: voucher.code,\r\n      type: voucher.type,\r\n      nominal: voucher.nominal,\r\n      kuota: voucher.kuota,\r\n      start_date: voucher.start_date,\r\n      expired: voucher.expired,\r\n      minimal_buying: voucher.minimal_buying,\r\n      is_active: voucher.is_active\r\n    });\r\n    setEditDialogOpen(true);\r\n  }, []);\r\n\r\n  // Voucher-Nutzung anzeigen\r\n  const showVoucherUsage = useCallback((voucher: Voucher) => {\r\n    setSelectedVoucher(voucher);\r\n    loadVoucherUsage(voucher.id);\r\n    setUsageDialogOpen(true);\r\n  }, [loadVoucherUsage]);\r\n\r\n  // Code kopieren\r\n  const copyVoucherCode = useCallback((code: string) => {\r\n    navigator.clipboard.writeText(code);\r\n    setSuccess('Gutschein-Code kopiert');\r\n  }, []);\r\n\r\n  // Form zurücksetzen\r\n  const resetVoucherForm = useCallback(() => {\r\n    setVoucherForm({\r\n      name: '',\r\n      code: '',\r\n      type: 'betrag',\r\n      nominal: 0,\r\n      kuota: 1,\r\n      start_date: new Date().toISOString().split('T')[0],\r\n      expired: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\r\n      minimal_buying: 0,\r\n      is_active: true\r\n    });\r\n  }, []);\r\n\r\n  // Automatischen Code generieren\r\n  const generateCode = useCallback(() => {\r\n    const code = 'VALE' + Math.random().toString(36).substr(2, 8).toUpperCase();\r\n    setVoucherForm(prev => ({ ...prev, code }));\r\n  }, []);\r\n\r\n  // Status-Farbe\r\n  const getStatusColor = (voucher: Voucher) => {\r\n    if (!voucher.is_active) return 'error';\r\n    if (voucher.used_count >= voucher.kuota) return 'warning';\r\n    if (new Date(voucher.expired) < new Date()) return 'error';\r\n    return 'success';\r\n  };\r\n\r\n  // Status-Text\r\n  const getStatusText = (voucher: Voucher) => {\r\n    if (!voucher.is_active) return 'Inaktiv';\r\n    if (voucher.used_count >= voucher.kuota) return 'Aufgebraucht';\r\n    if (new Date(voucher.expired) < new Date()) return 'Abgelaufen';\r\n    return 'Aktiv';\r\n  };\r\n\r\n  // Typ-Text\r\n  const getTypeText = (type: string) => {\r\n    switch (type) {\r\n      case 'prozent': return 'Prozent';\r\n      case 'betrag': return 'Betrag';\r\n      case 'versandkosten': return 'Versandkosten';\r\n      default: return type;\r\n    }\r\n  };\r\n\r\n  // Verwendungsrate berechnen\r\n  const getUsageRate = (voucher: Voucher) => {\r\n    return voucher.kuota > 0 ? (voucher.used_count / voucher.kuota) * 100 : 0;\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadVouchers();\r\n  }, [loadVouchers]);\r\n\r\n  return (\r\n    <div className={`space-y-6 ${className}`}>\r\n      {/* Header */}\r\n      <Box className=\"flex items-center justify-between\">\r\n        <Typography variant=\"h4\" className=\"flex items-center gap-2\">\r\n          <VoucherIcon />\r\n          Gutschein-Verwaltung\r\n        </Typography>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<AddIcon />}\r\n          onClick={() => setCreateDialogOpen(true)}\r\n        >\r\n          Neuer Gutschein\r\n        </Button>\r\n      </Box>\r\n\r\n      {/* Alerts */}\r\n      {error && (\r\n        <Alert severity=\"error\" onClose={() => setError(null)}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      {success && (\r\n        <Alert severity=\"success\" onClose={() => setSuccess(null)}>\r\n          {success}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Voucher-Liste */}\r\n      <Card className=\"p-4\">\r\n        <Typography variant=\"h6\" className=\"mb-4\">\r\n          Gutscheine\r\n        </Typography>\r\n        \r\n        {loading ? (\r\n          <Box className=\"flex justify-center p-8\">\r\n            <CircularProgress />\r\n          </Box>\r\n        ) : (\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Name</TableCell>\r\n                  <TableCell>Code</TableCell>\r\n                  <TableCell>Typ</TableCell>\r\n                  <TableCell align=\"right\">Wert</TableCell>\r\n                  <TableCell>Status</TableCell>\r\n                  <TableCell>Verwendung</TableCell>\r\n                  <TableCell>Gültig bis</TableCell>\r\n                  <TableCell>Aktionen</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {vouchers.map((voucher) => (\r\n                  <TableRow key={voucher.id} hover>\r\n                    <TableCell>{voucher.name}</TableCell>\r\n                    <TableCell>\r\n                      <Box className=\"flex items-center gap-2\">\r\n                        <code className=\"bg-gray-100 px-2 py-1 rounded text-sm\">\r\n                          {voucher.code}\r\n                        </code>\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          onClick={() => copyVoucherCode(voucher.code)}\r\n                        >\r\n                          <CopyIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                      </Box>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Chip\r\n                        label={getTypeText(voucher.type)}\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                      {voucher.type === 'prozent' ? `${voucher.nominal}%` : `€${voucher.nominal.toFixed(2)}`}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Chip\r\n                        label={getStatusText(voucher)}\r\n                        color={getStatusColor(voucher)}\r\n                        size=\"small\"\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Box className=\"flex items-center gap-2\">\r\n                        <Box className=\"w-16 bg-gray-200 rounded-full h-2\">\r\n                          <Box\r\n                            className=\"bg-blue-600 h-2 rounded-full\"\r\n                            style={{ width: `${getUsageRate(voucher)}%` }}\r\n                          />\r\n                        </Box>\r\n                        <Typography variant=\"body2\">\r\n                          {voucher.used_count}/{voucher.kuota}\r\n                        </Typography>\r\n                      </Box>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {new Date(voucher.expired).toLocaleDateString('de-DE')}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Box className=\"flex gap-1\">\r\n                        <Tooltip title=\"Bearbeiten\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => openEditDialog(voucher)}\r\n                          >\r\n                            <EditIcon fontSize=\"small\" />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Nutzung anzeigen\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => showVoucherUsage(voucher)}\r\n                          >\r\n                            <ViewIcon fontSize=\"small\" />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Löschen\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            color=\"error\"\r\n                            onClick={() => deleteVoucher(voucher.id)}\r\n                          >\r\n                            <DeleteIcon fontSize=\"small\" />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </Box>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        )}\r\n      </Card>\r\n\r\n      {/* Neuer Gutschein Dialog */}\r\n      <Dialog open={createDialogOpen} onClose={() => setCreateDialogOpen(false)} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>Neuen Gutschein erstellen</DialogTitle>\r\n        <DialogContent>\r\n          <Box className=\"space-y-4 pt-2\">\r\n            <TextField\r\n              label=\"Name\"\r\n              fullWidth\r\n              value={voucherForm.name}\r\n              onChange={(e) => setVoucherForm(prev => ({ ...prev, name: e.target.value }))}\r\n            />\r\n            \r\n            <Box className=\"flex gap-2\">\r\n              <TextField\r\n                label=\"Code\"\r\n                fullWidth\r\n                value={voucherForm.code}\r\n                onChange={(e) => setVoucherForm(prev => ({ ...prev, code: e.target.value }))}\r\n              />\r\n              <Button\r\n                variant=\"outlined\"\r\n                onClick={generateCode}\r\n                sx={{ minWidth: '120px' }}\r\n              >\r\n                Generieren\r\n              </Button>\r\n            </Box>\r\n\r\n            <FormControl fullWidth>\r\n              <InputLabel>Typ</InputLabel>\r\n              <Select\r\n                value={voucherForm.type}\r\n                label=\"Typ\"\r\n                onChange={(e) => setVoucherForm(prev => ({ ...prev, type: e.target.value as any }))}\r\n              >\r\n                <MenuItem value=\"betrag\">Betrag (€)</MenuItem>\r\n                <MenuItem value=\"prozent\">Prozent (%)</MenuItem>\r\n                <MenuItem value=\"versandkosten\">Versandkosten</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <TextField\r\n              label={voucherForm.type === 'prozent' ? 'Prozentsatz' : 'Betrag'}\r\n              type=\"number\"\r\n              fullWidth\r\n              value={voucherForm.nominal}\r\n              onChange={(e) => setVoucherForm(prev => ({ ...prev, nominal: Number(e.target.value) }))}\r\n            />\r\n\r\n            <TextField\r\n              label=\"Verwendungslimit\"\r\n              type=\"number\"\r\n              fullWidth\r\n              value={voucherForm.kuota}\r\n              onChange={(e) => setVoucherForm(prev => ({ ...prev, kuota: Number(e.target.value) }))}\r\n            />\r\n\r\n            <TextField\r\n              label=\"Mindestbestellwert\"\r\n              type=\"number\"\r\n              fullWidth\r\n              value={voucherForm.minimal_buying}\r\n              onChange={(e) => setVoucherForm(prev => ({ ...prev, minimal_buying: Number(e.target.value) }))}\r\n            />\r\n\r\n            <Box className=\"flex gap-4\">\r\n              <TextField\r\n                label=\"Gültig ab\"\r\n                type=\"date\"\r\n                fullWidth\r\n                value={voucherForm.start_date}\r\n                onChange={(e) => setVoucherForm(prev => ({ ...prev, start_date: e.target.value }))}\r\n                InputLabelProps={{ shrink: true }}\r\n              />\r\n              <TextField\r\n                label=\"Gültig bis\"\r\n                type=\"date\"\r\n                fullWidth\r\n                value={voucherForm.expired}\r\n                onChange={(e) => setVoucherForm(prev => ({ ...prev, expired: e.target.value }))}\r\n                InputLabelProps={{ shrink: true }}\r\n              />\r\n            </Box>\r\n\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={voucherForm.is_active}\r\n                  onChange={(e) => setVoucherForm(prev => ({ ...prev, is_active: e.target.checked }))}\r\n                />\r\n              }\r\n              label=\"Aktiv\"\r\n            />\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setCreateDialogOpen(false)}>\r\n            Abbrechen\r\n          </Button>\r\n          <Button onClick={createVoucher} variant=\"contained\">\r\n            Erstellen\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Gutschein bearbeiten Dialog */}\r\n      <Dialog open={editDialogOpen} onClose={() => setEditDialogOpen(false)} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>Gutschein bearbeiten</DialogTitle>\r\n        <DialogContent>\r\n          <Box className=\"space-y-4 pt-2\">\r\n            <TextField\r\n              label=\"Name\"\r\n              fullWidth\r\n              value={voucherForm.name}\r\n              onChange={(e) => setVoucherForm(prev => ({ ...prev, name: e.target.value }))}\r\n            />\r\n            \r\n            <TextField\r\n              label=\"Code\"\r\n              fullWidth\r\n              value={voucherForm.code}\r\n              onChange={(e) => setVoucherForm(prev => ({ ...prev, code: e.target.value }))}\r\n            />\r\n\r\n            <FormControl fullWidth>\r\n              <InputLabel>Typ</InputLabel>\r\n              <Select\r\n                value={voucherForm.type}\r\n                label=\"Typ\"\r\n                onChange={(e) => setVoucherForm(prev => ({ ...prev, type: e.target.value as any }))}\r\n              >\r\n                <MenuItem value=\"betrag\">Betrag (€)</MenuItem>\r\n                <MenuItem value=\"prozent\">Prozent (%)</MenuItem>\r\n                <MenuItem value=\"versandkosten\">Versandkosten</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <TextField\r\n              label={voucherForm.type === 'prozent' ? 'Prozentsatz' : 'Betrag'}\r\n              type=\"number\"\r\n              fullWidth\r\n              value={voucherForm.nominal}\r\n              onChange={(e) => setVoucherForm(prev => ({ ...prev, nominal: Number(e.target.value) }))}\r\n            />\r\n\r\n            <TextField\r\n              label=\"Verwendungslimit\"\r\n              type=\"number\"\r\n              fullWidth\r\n              value={voucherForm.kuota}\r\n              onChange={(e) => setVoucherForm(prev => ({ ...prev, kuota: Number(e.target.value) }))}\r\n            />\r\n\r\n            <TextField\r\n              label=\"Mindestbestellwert\"\r\n              type=\"number\"\r\n              fullWidth\r\n              value={voucherForm.minimal_buying}\r\n              onChange={(e) => setVoucherForm(prev => ({ ...prev, minimal_buying: Number(e.target.value) }))}\r\n            />\r\n\r\n            <Box className=\"flex gap-4\">\r\n              <TextField\r\n                label=\"Gültig ab\"\r\n                type=\"date\"\r\n                fullWidth\r\n                value={voucherForm.start_date}\r\n                onChange={(e) => setVoucherForm(prev => ({ ...prev, start_date: e.target.value }))}\r\n                InputLabelProps={{ shrink: true }}\r\n              />\r\n              <TextField\r\n                label=\"Gültig bis\"\r\n                type=\"date\"\r\n                fullWidth\r\n                value={voucherForm.expired}\r\n                onChange={(e) => setVoucherForm(prev => ({ ...prev, expired: e.target.value }))}\r\n                InputLabelProps={{ shrink: true }}\r\n              />\r\n            </Box>\r\n\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={voucherForm.is_active}\r\n                  onChange={(e) => setVoucherForm(prev => ({ ...prev, is_active: e.target.checked }))}\r\n                />\r\n              }\r\n              label=\"Aktiv\"\r\n            />\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setEditDialogOpen(false)}>\r\n            Abbrechen\r\n          </Button>\r\n          <Button onClick={updateVoucher} variant=\"contained\">\r\n            Speichern\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Gutschein-Nutzung Dialog */}\r\n      <Dialog open={usageDialogOpen} onClose={() => setUsageDialogOpen(false)} maxWidth=\"lg\" fullWidth>\r\n        <DialogTitle>\r\n          Gutschein-Nutzung: {selectedVoucher?.name}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Datum</TableCell>\r\n                  <TableCell>Transaktion</TableCell>\r\n                  <TableCell>Kunde</TableCell>\r\n                  <TableCell align=\"right\">Verwendeter Betrag</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {voucherUsage.map((usage) => (\r\n                  <TableRow key={usage.id}>\r\n                    <TableCell>\r\n                      {new Date(usage.used_at).toLocaleDateString('de-DE')}\r\n                    </TableCell>\r\n                    <TableCell>{usage.transaction_id}</TableCell>\r\n                    <TableCell>{usage.customer_id || 'Anonym'}</TableCell>\r\n                    <TableCell align=\"right\">€{usage.used_amount.toFixed(2)}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setUsageDialogOpen(false)}>\r\n            Schließen\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\components\\voucher\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\config\\supabase.ts","messages":[{"ruleId":"no-useless-escape","severity":1,"message":"Unnecessary escape character: \\+.","line":108,"column":13,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":108,"endColumn":14,"suggestions":[{"messageId":"removeEscape","fix":{"range":[2948,2949],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[2948,2948],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// VALEO NeuroERP Supabase Configuration\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\n// Supabase-Projekt-Konfiguration\r\nconst supabaseUrl = 'https://ftybxxndembbfjdkcsuk.supabase.co';\r\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1pbXJmbmx0cGV2cWh3dXFtamp6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU0NzQ0NTcsImV4cCI6MjA2MTA1MDQ1N30.S-n-zv2PwUSLHuY5St9ZNJpS_IcUTBhDslngs6G9eIU';\r\n\r\n// Supabase-Client erstellen\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\r\n  auth: {\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    detectSessionInUrl: true\r\n  },\r\n  db: {\r\n    schema: 'public'\r\n  },\r\n  global: {\r\n    headers: {\r\n      'X-Client-Info': 'valeo-neuroerp-frontend'\r\n    }\r\n  }\r\n});\r\n\r\n// MCP-Server-Konfiguration\r\nexport const mcpConfig = {\r\n  baseUrl: process.env.VITE_MCP_SERVER_URL || 'http://localhost:8000',\r\n  apiKey: process.env.VITE_MCP_API_KEY,\r\n  timeout: 10000,\r\n  projectId: 'ftybxxndembbfjdkcsuk'\r\n};\r\n\r\n// Datenbank-Tabellen\r\nexport const TABLES = {\r\n  CUSTOMERS: 'customers',\r\n  PRODUCTS: 'products',\r\n  INVOICES: 'invoices',\r\n  INVOICE_ITEMS: 'invoice_items',\r\n  ORDERS: 'orders',\r\n  ORDER_ITEMS: 'order_items'\r\n} as const;\r\n\r\n// RLS-Policies für Tabellen\r\nexport const RLS_POLICIES = {\r\n  [TABLES.CUSTOMERS]: {\r\n    select: true,\r\n    insert: true,\r\n    update: true,\r\n    delete: true\r\n  },\r\n  [TABLES.PRODUCTS]: {\r\n    select: true,\r\n    insert: true,\r\n    update: true,\r\n    delete: true\r\n  },\r\n  [TABLES.INVOICES]: {\r\n    select: true,\r\n    insert: true,\r\n    update: false, // Business rule: Invoices cannot be updated\r\n    delete: false  // Business rule: Invoices cannot be deleted\r\n  },\r\n  [TABLES.INVOICE_ITEMS]: {\r\n    select: true,\r\n    insert: true,\r\n    update: false, // Business rule: Invoice items cannot be updated\r\n    delete: false  // Business rule: Invoice items cannot be deleted\r\n  },\r\n  [TABLES.ORDERS]: {\r\n    select: true,\r\n    insert: true,\r\n    update: true,\r\n    delete: true\r\n  },\r\n  [TABLES.ORDER_ITEMS]: {\r\n    select: true,\r\n    insert: true,\r\n    update: true,\r\n    delete: true\r\n  }\r\n} as const;\r\n\r\n// Enum-Werte für Tabellen\r\nexport const ENUM_VALUES = {\r\n  INVOICE_STATUS: ['open', 'paid', 'overdue'] as const,\r\n  CUSTOMER_TYPE: ['individual', 'company'] as const,\r\n  PRODUCT_CATEGORY: ['hardware', 'software', 'service'] as const\r\n} as const;\r\n\r\n// API-Endpunkte\r\nexport const API_ENDPOINTS = {\r\n  MCP: {\r\n    SCHEMA: (table: string) => `${mcpConfig.baseUrl}/api/schema/${table}`,\r\n    TABLES: `${mcpConfig.baseUrl}/api/tables`,\r\n    CACHE_CLEAR: `${mcpConfig.baseUrl}/api/cache/clear`,\r\n    HEALTH: `${mcpConfig.baseUrl}/api/health`\r\n  },\r\n  SUPABASE: {\r\n    REST: `${supabaseUrl}/rest/v1`,\r\n    AUTH: `${supabaseUrl}/auth/v1`,\r\n    STORAGE: `${supabaseUrl}/storage/v1`\r\n  }\r\n} as const;\r\n\r\n// Validierungsregeln\r\nexport const VALIDATION_RULES = {\r\n  EMAIL: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n  PHONE: /^[\\+]?[1-9][\\d]{0,15}$/,\r\n  UUID: /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i,\r\n  PRICE: /^\\d+(\\.\\d{1,2})?$/,\r\n  QUANTITY: /^[1-9]\\d*$/\r\n} as const;\r\n\r\n// Fehlermeldungen\r\nexport const ERROR_MESSAGES = {\r\n  REQUIRED: 'Dieses Feld ist erforderlich',\r\n  INVALID_EMAIL: 'Ungültige E-Mail-Adresse',\r\n  INVALID_PHONE: 'Ungültige Telefonnummer',\r\n  INVALID_UUID: 'Ungültige ID',\r\n  INVALID_PRICE: 'Ungültiger Preis',\r\n  INVALID_QUANTITY: 'Menge muss größer als 0 sein',\r\n  NETWORK_ERROR: 'Netzwerkfehler - Bitte versuchen Sie es erneut',\r\n  UNAUTHORIZED: 'Nicht autorisiert - Bitte melden Sie sich an',\r\n  FORBIDDEN: 'Zugriff verweigert',\r\n  NOT_FOUND: 'Ressource nicht gefunden',\r\n  SERVER_ERROR: 'Serverfehler - Bitte versuchen Sie es später erneut'\r\n} as const;\r\n\r\n// Erfolgsmeldungen\r\nexport const SUCCESS_MESSAGES = {\r\n  CREATED: 'Erfolgreich erstellt',\r\n  UPDATED: 'Erfolgreich aktualisiert',\r\n  DELETED: 'Erfolgreich gelöscht',\r\n  SAVED: 'Erfolgreich gespeichert',\r\n  CACHE_CLEARED: 'Cache erfolgreich geleert'\r\n} as const;\r\n\r\n// Paginierung\r\nexport const PAGINATION = {\r\n  DEFAULT_PAGE_SIZE: 10,\r\n  PAGE_SIZE_OPTIONS: [5, 10, 25, 50, 100],\r\n  MAX_PAGE_SIZE: 100\r\n} as const;\r\n\r\n// Cache-Konfiguration\r\nexport const CACHE_CONFIG = {\r\n  SCHEMA_TTL: 5 * 60 * 1000, // 5 Minuten\r\n  DATA_TTL: 2 * 60 * 1000,   // 2 Minuten\r\n  USER_TTL: 30 * 60 * 1000   // 30 Minuten\r\n} as const;\r\n\r\n// Theme-Konfiguration\r\nexport const THEME_CONFIG = {\r\n  PRIMARY_COLOR: '#1976d2',\r\n  SECONDARY_COLOR: '#dc004e',\r\n  SUCCESS_COLOR: '#4caf50',\r\n  WARNING_COLOR: '#ff9800',\r\n  ERROR_COLOR: '#f44336',\r\n  INFO_COLOR: '#2196f3'\r\n} as const;\r\n\r\n// Export-Typen\r\nexport type TableName = typeof TABLES[keyof typeof TABLES];\r\nexport type InvoiceStatus = typeof ENUM_VALUES.INVOICE_STATUS[number];\r\nexport type CustomerType = typeof ENUM_VALUES.CUSTOMER_TYPE[number];\r\nexport type ProductCategory = typeof ENUM_VALUES.PRODUCT_CATEGORY[number];\r\n\r\n// Hilfsfunktionen\r\nexport const isTableName = (value: string): value is TableName => {\r\n  return Object.values(TABLES).includes(value as TableName);\r\n};\r\n\r\nexport const isInvoiceStatus = (value: string): value is InvoiceStatus => {\r\n  return ENUM_VALUES.INVOICE_STATUS.includes(value as InvoiceStatus);\r\n};\r\n\r\nexport const isCustomerType = (value: string): value is CustomerType => {\r\n  return ENUM_VALUES.CUSTOMER_TYPE.includes(value as CustomerType);\r\n};\r\n\r\nexport const isProductCategory = (value: string): value is ProductCategory => {\r\n  return ENUM_VALUES.PRODUCT_CATEGORY.includes(value as ProductCategory);\r\n};\r\n\r\n// Default-Werte für neue Einträge\r\nexport const DEFAULT_VALUES = {\r\n  [TABLES.CUSTOMERS]: {\r\n    type: 'individual' as CustomerType,\r\n    created_at: new Date().toISOString(),\r\n    updated_at: new Date().toISOString()\r\n  },\r\n  [TABLES.PRODUCTS]: {\r\n    price: 0,\r\n    stock_quantity: 0,\r\n    category: 'hardware' as ProductCategory,\r\n    created_at: new Date().toISOString(),\r\n    updated_at: new Date().toISOString()\r\n  },\r\n  [TABLES.INVOICES]: {\r\n    amount: 0,\r\n    status: 'open' as InvoiceStatus,\r\n    due_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 30 Tage\r\n    created_at: new Date().toISOString(),\r\n    updated_at: new Date().toISOString()\r\n  },\r\n  [TABLES.ORDERS]: {\r\n    total_amount: 0,\r\n    status: 'pending',\r\n    order_date: new Date().toISOString(),\r\n    created_at: new Date().toISOString(),\r\n    updated_at: new Date().toISOString()\r\n  }\r\n} as const;\r\n\r\nexport default {\r\n  supabase,\r\n  mcpConfig,\r\n  TABLES,\r\n  RLS_POLICIES,\r\n  ENUM_VALUES,\r\n  API_ENDPOINTS,\r\n  VALIDATION_RULES,\r\n  ERROR_MESSAGES,\r\n  SUCCESS_MESSAGES,\r\n  PAGINATION,\r\n  CACHE_CONFIG,\r\n  THEME_CONFIG,\r\n  DEFAULT_VALUES\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\contexts\\ApiContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'apiService' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[267,270],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[267,270],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2038,2041],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2038,2041],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2207,2210],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2207,2210],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2483,2486],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2483,2486],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2644,2647],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2644,2647],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3022,3025],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3022,3025],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'params' is defined but never used. Allowed unused args must match /^_/u.","line":295,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":295,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":295,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":295,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7588,7591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7588,7591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused caught errors must match /^_/u.","line":308,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":308,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused caught errors must match /^_/u.","line":325,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":325,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'params' is defined but never used. Allowed unused args must match /^_/u.","line":333,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":333,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":333,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":333,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8668,8671],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8668,8671],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused caught errors must match /^_/u.","line":346,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":346,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused caught errors must match /^_/u.","line":363,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":363,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused caught errors must match /^_/u.","line":382,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":382,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'params' is defined but never used. Allowed unused args must match /^_/u.","line":390,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":390,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":390,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":390,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10265,10268],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10265,10268],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused caught errors must match /^_/u.","line":403,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":403,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused caught errors must match /^_/u.","line":422,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":422,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'params' is defined but never used. Allowed unused args must match /^_/u.","line":430,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":430,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":430,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":430,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11375,11378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11375,11378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused caught errors must match /^_/u.","line":443,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":443,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused caught errors must match /^_/u.","line":461,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":461,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused caught errors must match /^_/u.","line":482,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":482,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused caught errors must match /^_/u.","line":495,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":495,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused caught errors must match /^_/u.","line":508,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":508,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":516,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":516,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13745,13748],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13745,13748],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused caught errors must match /^_/u.","line":520,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":520,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport type { ReactNode } from 'react';\nimport { apiService } from '../services/ApiService';\n\n// Typen definieren (da sie nicht aus ApiService exportiert werden)\ninterface ApiResponse<T = any> {\n  success: boolean;\n  data?: T;\n  message?: string;\n  error?: string;\n}\n\ninterface SystemStatus {\n  status: string;\n  version: string;\n  uptime: number;\n  backend?: boolean;\n}\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n}\n\ninterface LoginRequest {\n  email: string;\n  password: string;\n}\n\ninterface LoginResponse {\n  user: User;\n  token: string;\n}\n\ninterface Transaction {\n  id: string;\n  amount: number;\n  description: string;\n  date: string;\n  type?: 'income' | 'expense';\n  user_id?: string;\n  status?: 'pending' | 'completed' | 'cancelled';\n}\n\ninterface InventoryItem {\n  id: string;\n  name: string;\n  quantity: number;\n  price: number;\n  sku?: string;\n  unit_price?: number;\n  location?: string;\n  category?: string;\n  status?: 'in_stock' | 'low_stock' | 'out_of_stock';\n}\n\ninterface Document {\n  id: string;\n  name: string;\n  type: string;\n  size: number;\n  content?: string;\n  created_at?: string;\n  user_id?: string;\n}\n\ninterface Report {\n  id: string;\n  title: string;\n  content: string;\n  created_at: string;\n}\n\ninterface Notification {\n  id: string;\n  title: string;\n  message: string;\n  read: boolean;\n}\n\n// Context-Typen\ninterface ApiContextType {\n  // Auth\n  user: User | null;\n  isAuthenticated: boolean;\n  login: (credentials: LoginRequest) => Promise<ApiResponse<LoginResponse>>;\n  logout: () => Promise<ApiResponse>;\n  getCurrentUser: () => Promise<User>;\n\n  // System Status\n  systemStatus: SystemStatus | null;\n  isLoading: boolean;\n  error: string | null;\n  refreshSystemStatus: () => Promise<void>;\n\n  // Business Data\n  transactions: Transaction[];\n  inventory: InventoryItem[];\n  documents: Document[];\n  reports: Report[];\n  notifications: Notification[];\n\n  // API Methods\n  getTransactions: (params?: any) => Promise<ApiResponse<Transaction[]>>;\n  createTransaction: (transaction: Omit<Transaction, 'id'>) => Promise<ApiResponse<Transaction>>;\n  getInventory: (params?: any) => Promise<ApiResponse<InventoryItem[]>>;\n  createInventoryItem: (item: Omit<InventoryItem, 'id'>) => Promise<ApiResponse<InventoryItem>>;\n  updateInventoryItem: (id: string, item: Partial<InventoryItem>) => Promise<ApiResponse<InventoryItem>>;\n  getDocuments: (params?: any) => Promise<ApiResponse<Document[]>>;\n  uploadDocument: (file: File, metadata: Partial<Document>) => Promise<ApiResponse<Document>>;\n  getReports: (params?: any) => Promise<ApiResponse<Report[]>>;\n  createReport: (report: Omit<Report, 'id' | 'created_at'>) => Promise<ApiResponse<Report>>;\n  getNotifications: () => Promise<ApiResponse<Notification[]>>;\n  markNotificationRead: (id: string) => Promise<ApiResponse>;\n\n  // Middleware\n  middlewareHealthCheck: () => Promise<ApiResponse>;\n  getMiddlewareData: (endpoint: string, params?: any) => Promise<ApiResponse>;\n}\n\n// Context erstellen\nconst ApiContext = createContext<ApiContextType | undefined>(undefined);\n\n// Provider Props\ninterface ApiProviderProps {\n  children: ReactNode;\n}\n\n// Provider Komponente\nexport const ApiProvider: React.FC<ApiProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [systemStatus, setSystemStatus] = useState<SystemStatus | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Business Data State\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [inventory, setInventory] = useState<InventoryItem[]>([]);\n  const [documents, setDocuments] = useState<Document[]>([]);\n  const [reports, setReports] = useState<Report[]>([]);\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n\n  // Initialisierung\n  useEffect(() => {\n    initializeApi();\n  }, []);\n\n  const initializeApi = async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // Mock-Implementierung für Authentifizierung\n      const mockUser: User = {\n        id: '1',\n        name: 'demo_user',\n        email: 'demo@valeo-neuroerp.com',\n        role: 'admin'\n      };\n      setUser(mockUser);\n\n      // Mock-Implementierung für System-Status\n      const mockSystemStatus: SystemStatus = {\n        status: 'online',\n        version: '2.0.0',\n        uptime: 3600\n      };\n      setSystemStatus(mockSystemStatus);\n\n      // Mock-Implementierung für Benachrichtigungen\n      const mockNotifications: Notification[] = [\n        {\n          id: '1',\n          title: 'System-Update',\n          message: 'Neue Version verfügbar',\n          read: false\n        }\n      ];\n      setNotifications(mockNotifications);\n\n      // Mock-Implementierung für Transaktionen\n      const mockTransactions: Transaction[] = [\n        {\n          id: '1',\n          amount: 1000,\n          description: 'Test-Transaktion',\n          date: new Date().toISOString()\n        }\n      ];\n      setTransactions(mockTransactions);\n\n      // Mock-Implementierung für Inventar\n      const mockInventory: InventoryItem[] = [\n        {\n          id: '1',\n          name: 'Test-Artikel',\n          quantity: 10,\n          price: 100\n        }\n      ];\n      setInventory(mockInventory);\n\n      // Mock-Implementierung für Dokumente\n      const mockDocuments: Document[] = [\n        {\n          id: '1',\n          name: 'Test-Dokument',\n          type: 'pdf',\n          size: 1024\n        }\n      ];\n      setDocuments(mockDocuments);\n\n      // Mock-Implementierung für Berichte\n      const mockReports: Report[] = [\n        {\n          id: '1',\n          title: 'Test-Bericht',\n          content: 'Test-Inhalt',\n          created_at: new Date().toISOString()\n        }\n      ];\n      setReports(mockReports);\n\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Unbekannter Fehler');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const refreshSystemStatus = async () => {\n    try {\n      const mockSystemStatus: SystemStatus = {\n        status: 'online',\n        version: '2.0.0',\n        uptime: 3600\n      };\n      setSystemStatus(mockSystemStatus);\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Fehler beim Laden des System-Status');\n    }\n  };\n\n  const login = async (credentials: LoginRequest): Promise<ApiResponse<LoginResponse>> => {\n    try {\n      // Mock-Implementierung\n      const mockUser: User = {\n        id: '1',\n        name: credentials.email,\n        email: credentials.email,\n        role: 'admin'\n      };\n      \n      const mockResponse: ApiResponse<LoginResponse> = {\n        success: true,\n        data: {\n          user: mockUser,\n          token: 'mock-token'\n        }\n      };\n      \n      setUser(mockUser);\n      return mockResponse;\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Login fehlgeschlagen'\n      };\n    }\n  };\n\n  const logout = async (): Promise<ApiResponse> => {\n    try {\n      setUser(null);\n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Logout fehlgeschlagen'\n      };\n    }\n  };\n\n  const getCurrentUser = async (): Promise<User> => {\n    if (!user) {\n      throw new Error('Benutzer nicht authentifiziert');\n    }\n    return user;\n  };\n\n  // Business Data Methods\n  const getTransactions = async (params?: any): Promise<ApiResponse<Transaction[]>> => {\n    try {\n      // Mock-Implementierung\n      const mockTransactions: Transaction[] = [\n        {\n          id: '1',\n          amount: 1000,\n          description: 'Test-Transaktion',\n          date: new Date().toISOString()\n        }\n      ];\n      setTransactions(mockTransactions);\n      return { success: true, data: mockTransactions };\n    } catch (err) {\n      return {\n        success: false,\n        error: 'Transaktionen konnten nicht abgerufen werden'\n      };\n    }\n  };\n\n  const createTransaction = async (transaction: Omit<Transaction, 'id'>): Promise<ApiResponse<Transaction>> => {\n    try {\n      // Mock-Implementierung\n      const newTransaction: Transaction = {\n        id: `tx-${Date.now()}`,\n        ...transaction\n      };\n      setTransactions(prev => [...prev, newTransaction]);\n      return { success: true, data: newTransaction };\n    } catch (err) {\n      return {\n        success: false,\n        error: 'Transaktion konnte nicht erstellt werden'\n      };\n    }\n  };\n\n  const getInventory = async (params?: any): Promise<ApiResponse<InventoryItem[]>> => {\n    try {\n      // Mock-Implementierung\n      const mockInventory: InventoryItem[] = [\n        {\n          id: '1',\n          name: 'Test-Artikel',\n          quantity: 10,\n          price: 100\n        }\n      ];\n      setInventory(mockInventory);\n      return { success: true, data: mockInventory };\n    } catch (err) {\n      return {\n        success: false,\n        error: 'Inventar konnte nicht abgerufen werden'\n      };\n    }\n  };\n\n  const createInventoryItem = async (item: Omit<InventoryItem, 'id'>): Promise<ApiResponse<InventoryItem>> => {\n    try {\n      // Mock-Implementierung\n      const newItem: InventoryItem = {\n        id: `inv-${Date.now()}`,\n        ...item\n      };\n      setInventory(prev => [...prev, newItem]);\n      return { success: true, data: newItem };\n    } catch (err) {\n      return {\n        success: false,\n        error: 'Artikel konnte nicht erstellt werden'\n      };\n    }\n  };\n\n  const updateInventoryItem = async (id: string, item: Partial<InventoryItem>): Promise<ApiResponse<InventoryItem>> => {\n    try {\n      // Mock-Implementierung\n      const updatedItem: InventoryItem = {\n        id,\n        name: item.name || 'Unknown',\n        quantity: item.quantity || 0,\n        price: item.price || 0\n      };\n      setInventory(prev => prev.map(i => i.id === id ? updatedItem : i));\n      return { success: true, data: updatedItem };\n    } catch (err) {\n      return {\n        success: false,\n        error: 'Artikel konnte nicht aktualisiert werden'\n      };\n    }\n  };\n\n  const getDocuments = async (params?: any): Promise<ApiResponse<Document[]>> => {\n    try {\n      // Mock-Implementierung\n      const mockDocuments: Document[] = [\n        {\n          id: '1',\n          name: 'Test-Dokument',\n          type: 'pdf',\n          size: 1024\n        }\n      ];\n      setDocuments(mockDocuments);\n      return { success: true, data: mockDocuments };\n    } catch (err) {\n      return {\n        success: false,\n        error: 'Dokumente konnten nicht abgerufen werden'\n      };\n    }\n  };\n\n  const uploadDocument = async (file: File, metadata: Partial<Document>): Promise<ApiResponse<Document>> => {\n    try {\n      // Mock-Implementierung\n      const newDocument: Document = {\n        id: `doc-${Date.now()}`,\n        name: metadata.name || file.name,\n        type: metadata.type || 'unknown',\n        size: metadata.size || file.size\n      };\n      setDocuments(prev => [...prev, newDocument]);\n      return { success: true, data: newDocument };\n    } catch (err) {\n      return {\n        success: false,\n        error: 'Dokument konnte nicht hochgeladen werden'\n      };\n    }\n  };\n\n  const getReports = async (params?: any): Promise<ApiResponse<Report[]>> => {\n    try {\n      // Mock-Implementierung\n      const mockReports: Report[] = [\n        {\n          id: '1',\n          title: 'Test-Bericht',\n          content: 'Test-Inhalt',\n          created_at: new Date().toISOString()\n        }\n      ];\n      setReports(mockReports);\n      return { success: true, data: mockReports };\n    } catch (err) {\n      return {\n        success: false,\n        error: 'Berichte konnten nicht abgerufen werden'\n      };\n    }\n  };\n\n  const createReport = async (report: Omit<Report, 'id' | 'created_at'>): Promise<ApiResponse<Report>> => {\n    try {\n      // Mock-Implementierung\n      const newReport: Report = {\n        id: `report-${Date.now()}`,\n        ...report,\n        created_at: new Date().toISOString()\n      };\n      setReports(prev => [...prev, newReport]);\n      return { success: true, data: newReport };\n    } catch (err) {\n      return {\n        success: false,\n        error: 'Bericht konnte nicht erstellt werden'\n      };\n    }\n  };\n\n  const getNotifications = async (): Promise<ApiResponse<Notification[]>> => {\n    try {\n      // Mock-Implementierung\n      const mockNotifications: Notification[] = [\n        {\n          id: '1',\n          title: 'System-Update',\n          message: 'Neue Version verfügbar',\n          read: false\n        }\n      ];\n      setNotifications(mockNotifications);\n      return { success: true, data: mockNotifications };\n    } catch (err) {\n      return {\n        success: false,\n        error: 'Benachrichtigungen konnten nicht abgerufen werden'\n      };\n    }\n  };\n\n  const markNotificationRead = async (id: string): Promise<ApiResponse> => {\n    try {\n      // Mock-Implementierung\n      setNotifications(prev => prev.map(n => n.id === id ? { ...n, read: true } : n));\n      return { success: true };\n    } catch (err) {\n      return {\n        success: false,\n        error: 'Benachrichtigung konnte nicht als gelesen markiert werden'\n      };\n    }\n  };\n\n  // Middleware Methods\n  const middlewareHealthCheck = async (): Promise<ApiResponse> => {\n    try {\n      // Mock-Implementierung\n      return { success: true, data: { status: 'healthy' } };\n    } catch (err) {\n      return {\n        success: false,\n        error: 'Middleware-Health-Check fehlgeschlagen'\n      };\n    }\n  };\n\n  const getMiddlewareData = async (endpoint: string, params?: any): Promise<ApiResponse> => {\n    try {\n      // Mock-Implementierung\n      return { success: true, data: { endpoint, params } };\n    } catch (err) {\n      return {\n        success: false,\n        error: 'Middleware-Daten konnten nicht abgerufen werden'\n      };\n    }\n  };\n\n  // Context Value\n  const contextValue: ApiContextType = {\n    // Auth\n    user,\n    isAuthenticated: !!user,\n    login,\n    logout,\n    getCurrentUser,\n\n    // System Status\n    systemStatus,\n    isLoading,\n    error,\n    refreshSystemStatus,\n\n    // Business Data\n    transactions,\n    inventory,\n    documents,\n    reports,\n    notifications,\n\n    // API Methods\n    getTransactions,\n    createTransaction,\n    getInventory,\n    createInventoryItem,\n    updateInventoryItem,\n    getDocuments,\n    uploadDocument,\n    getReports,\n    createReport,\n    getNotifications,\n    markNotificationRead,\n\n    // Middleware\n    middlewareHealthCheck,\n    getMiddlewareData\n  };\n\n  return (\n    <ApiContext.Provider value={contextValue}>\n      {children}\n    </ApiContext.Provider>\n  );\n};\n\n// Hook für die Verwendung des Contexts\nexport const useApi = (): ApiContextType => {\n  const context = useContext(ApiContext);\n  if (context === undefined) {\n    throw new Error('useApi must be used within an ApiProvider');\n  }\n  return context;\n};\n\nexport default ApiContext; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\contexts\\AuthContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\contexts\\__tests__\\ApiContext.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\design-system\\NeuroFlowComponents.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Paper' is defined but never used. Allowed unused vars must match /^_/u.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AddIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EditIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":27,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DeleteIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":28,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ViewIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":29,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DownloadIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":30,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 🧠 NeuroFlow Components\r\n * KI-first, responsive-first Komponenten für VALEO NeuroERP\r\n */\r\n\r\nimport React from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  Chip,\r\n  Avatar,\r\n  IconButton,\r\n  Tooltip,\r\n  Skeleton,\r\n  Alert,\r\n  AlertTitle,\r\n  Divider,\r\n  Stack,\r\n  Grid,\r\n  Paper,\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Visibility as ViewIcon,\r\n  Download as DownloadIcon,\r\n  Refresh as RefreshIcon,\r\n  TrendingUp as TrendingUpIcon,\r\n  TrendingDown as TrendingDownIcon,\r\n  CheckCircle as CheckCircleIcon,\r\n  Warning as WarningIcon,\r\n  Error as ErrorIcon,\r\n  Info as InfoIcon,\r\n} from '@mui/icons-material';\r\nimport { styled } from '@mui/material/styles';\r\n\r\n// Styled Components\r\nconst NeuroFlowCard = styled(Card)(({ theme }) => ({\r\n  borderRadius: theme.shape.borderRadius * 2,\r\n  boxShadow: theme.shadows[1],\r\n  border: `1px solid ${theme.palette.divider}`,\r\n  transition: 'all 0.3s ease-in-out',\r\n  '&:hover': {\r\n    boxShadow: theme.shadows[4],\r\n    transform: 'translateY(-2px)',\r\n  },\r\n}));\r\n\r\nconst NeuroFlowButton = styled(Button)(({ theme }) => ({\r\n  borderRadius: theme.shape.borderRadius * 1.5,\r\n  textTransform: 'none',\r\n  fontWeight: 600,\r\n  padding: '0.75rem 1.5rem',\r\n  transition: 'all 0.3s ease-in-out',\r\n  '&:hover': {\r\n    transform: 'translateY(-1px)',\r\n    boxShadow: theme.shadows[3],\r\n  },\r\n}));\r\n\r\nconst NeuroFlowChip = styled(Chip)(({ theme }) => ({\r\n  borderRadius: theme.shape.borderRadius * 3,\r\n  fontWeight: 500,\r\n  '&.MuiChip-colorSuccess': {\r\n    backgroundColor: theme.palette.success.light,\r\n    color: theme.palette.success.dark,\r\n  },\r\n  '&.MuiChip-colorWarning': {\r\n    backgroundColor: theme.palette.warning.light,\r\n    color: theme.palette.warning.dark,\r\n  },\r\n  '&.MuiChip-colorError': {\r\n    backgroundColor: theme.palette.error.light,\r\n    color: theme.palette.error.dark,\r\n  },\r\n  '&.MuiChip-colorInfo': {\r\n    backgroundColor: theme.palette.info.light,\r\n    color: theme.palette.info.dark,\r\n  },\r\n}));\r\n\r\n// Data Card Component\r\ninterface DataCardProps {\r\n  title: string;\r\n  value: string | number;\r\n  subtitle?: string;\r\n  trend?: {\r\n    value: number;\r\n    isPositive: boolean;\r\n  };\r\n  trendValue?: string;\r\n  icon?: React.ReactNode;\r\n  color?: 'primary' | 'secondary' | 'success' | 'warning' | 'error' | 'info';\r\n  onClick?: () => void;\r\n  loading?: boolean;\r\n}\r\n\r\nexport const DataCard: React.FC<DataCardProps> = ({\r\n  title,\r\n  value,\r\n  subtitle,\r\n  trend,\r\n  trendValue,\r\n  icon,\r\n  color = 'primary',\r\n  onClick,\r\n  loading = false,\r\n}) => {\r\n  const colorMap = {\r\n    primary: '#2196F3',\r\n    secondary: '#4CAF50',\r\n    success: '#4CAF50',\r\n    warning: '#FF9800',\r\n    error: '#F44336',\r\n    info: '#2196F3',\r\n  };\r\n\r\n  return (\r\n    <NeuroFlowCard onClick={onClick} sx={{ cursor: onClick ? 'pointer' : 'default' }}>\r\n      <CardContent>\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={2}>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" fontWeight={500}>\r\n            {title}\r\n          </Typography>\r\n          {icon && (\r\n            <Avatar\r\n              sx={{\r\n                width: 40,\r\n                height: 40,\r\n                backgroundColor: `${colorMap[color]}20`,\r\n                color: colorMap[color],\r\n              }}\r\n            >\r\n              {icon}\r\n            </Avatar>\r\n          )}\r\n        </Box>\r\n        \r\n        {loading ? (\r\n          <Skeleton variant=\"text\" width=\"60%\" height={40} />\r\n        ) : (\r\n          <Typography variant=\"h4\" fontWeight={700} color=\"text.primary\" mb={1}>\r\n            {value}\r\n          </Typography>\r\n        )}\r\n        \r\n        {subtitle && (\r\n          <Typography variant=\"body2\" color=\"text.secondary\" mb={1}>\r\n            {subtitle}\r\n          </Typography>\r\n        )}\r\n        \r\n        {trend && (\r\n          <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n            {trend.isPositive ? (\r\n              <TrendingUpIcon color=\"success\" fontSize=\"small\" />\r\n            ) : (\r\n              <TrendingDownIcon color=\"error\" fontSize=\"small\" />\r\n            )}\r\n            <Typography\r\n              variant=\"body2\"\r\n              color={trend.isPositive ? 'success.main' : 'error.main'}\r\n              fontWeight={600}\r\n            >\r\n              {trend.isPositive ? '+' : ''}{trend.value}%\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n        \r\n        {trendValue && (\r\n          <Typography variant=\"body2\" color=\"text.secondary\" mt={1}>\r\n            {trendValue}\r\n          </Typography>\r\n        )}\r\n      </CardContent>\r\n    </NeuroFlowCard>\r\n  );\r\n};\r\n\r\n// Status Badge Component\r\ninterface StatusBadgeProps {\r\n  status: 'success' | 'warning' | 'error' | 'info' | 'default';\r\n  label: string;\r\n  size?: 'small' | 'medium' | 'large';\r\n}\r\n\r\nexport const StatusBadge: React.FC<StatusBadgeProps> = ({\r\n  status,\r\n  label,\r\n  size = 'medium',\r\n}) => {\r\n  const statusConfig = {\r\n    success: { icon: <CheckCircleIcon />, color: 'success' as const },\r\n    warning: { icon: <WarningIcon />, color: 'warning' as const },\r\n    error: { icon: <ErrorIcon />, color: 'error' as const },\r\n    info: { icon: <InfoIcon />, color: 'info' as const },\r\n    default: { icon: null, color: 'default' as const },\r\n  };\r\n\r\n  const config = statusConfig[status];\r\n\r\n  return (\r\n    <NeuroFlowChip\r\n      icon={config.icon}\r\n      label={label}\r\n      color={config.color}\r\n      size={size === 'large' ? 'medium' : size}\r\n      variant=\"filled\"\r\n    />\r\n  );\r\n};\r\n\r\n// Action Card Component\r\ninterface ActionCardProps {\r\n  title: string;\r\n  description?: string;\r\n  actions?: Array<{\r\n    label: string;\r\n    icon: React.ReactNode;\r\n    onClick: () => void;\r\n    color?: 'primary' | 'secondary' | 'success' | 'warning' | 'error';\r\n    variant?: 'contained' | 'outlined' | 'text';\r\n  }>;\r\n  children?: React.ReactNode;\r\n  loading?: boolean;\r\n}\r\n\r\nexport const ActionCard: React.FC<ActionCardProps> = ({\r\n  title,\r\n  description,\r\n  actions = [],\r\n  children,\r\n  loading = false,\r\n}) => {\r\n  return (\r\n    <NeuroFlowCard>\r\n      <CardContent>\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={2}>\r\n          <Box>\r\n            <Typography variant=\"h6\" fontWeight={600} color=\"text.primary\">\r\n              {title}\r\n            </Typography>\r\n            {description && (\r\n              <Typography variant=\"body2\" color=\"text.secondary\" mt={0.5}>\r\n                {description}\r\n              </Typography>\r\n            )}\r\n          </Box>\r\n          \r\n          {actions.length > 0 && (\r\n            <Stack direction=\"row\" spacing={1}>\r\n              {actions.map((action, index) => (\r\n                <Tooltip key={index} title={action.label}>\r\n                  <IconButton\r\n                    onClick={action.onClick}\r\n                    color={action.color}\r\n                    size=\"small\"\r\n                    sx={{\r\n                      backgroundColor: action.variant === 'contained' ? 'primary.main' : 'transparent',\r\n                      color: action.variant === 'contained' ? 'white' : 'primary.main',\r\n                      '&:hover': {\r\n                        backgroundColor: action.variant === 'contained' ? 'primary.dark' : 'primary.light',\r\n                      },\r\n                    }}\r\n                  >\r\n                    {action.icon}\r\n                  </IconButton>\r\n                </Tooltip>\r\n              ))}\r\n            </Stack>\r\n          )}\r\n        </Box>\r\n        \r\n        {loading ? (\r\n          <Box>\r\n            <Skeleton variant=\"rectangular\" height={100} />\r\n            <Skeleton variant=\"text\" sx={{ mt: 1 }} />\r\n            <Skeleton variant=\"text\" width=\"60%\" />\r\n          </Box>\r\n        ) : (\r\n          children\r\n        )}\r\n      </CardContent>\r\n    </NeuroFlowCard>\r\n  );\r\n};\r\n\r\n// Empty State Component\r\ninterface EmptyStateProps {\r\n  title: string;\r\n  description: string;\r\n  icon?: React.ReactNode;\r\n  action?: {\r\n    label: string;\r\n    onClick: () => void;\r\n    icon?: React.ReactNode;\r\n  };\r\n}\r\n\r\nexport const EmptyState: React.FC<EmptyStateProps> = ({\r\n  title,\r\n  description,\r\n  icon,\r\n  action,\r\n}) => {\r\n  return (\r\n    <Box\r\n      display=\"flex\"\r\n      flexDirection=\"column\"\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n      py={8}\r\n      px={4}\r\n      textAlign=\"center\"\r\n    >\r\n      {icon && (\r\n        <Avatar\r\n          sx={{\r\n            width: 80,\r\n            height: 80,\r\n            backgroundColor: 'primary.light',\r\n            color: 'primary.main',\r\n            mb: 3,\r\n          }}\r\n        >\r\n          {icon}\r\n        </Avatar>\r\n      )}\r\n      \r\n      <Typography variant=\"h5\" fontWeight={600} color=\"text.primary\" mb={2}>\r\n        {title}\r\n      </Typography>\r\n      \r\n      <Typography variant=\"body1\" color=\"text.secondary\" mb={4} maxWidth={400}>\r\n        {description}\r\n      </Typography>\r\n      \r\n      {action && (\r\n        <NeuroFlowButton\r\n          variant=\"contained\"\r\n          startIcon={action.icon}\r\n          onClick={action.onClick}\r\n        >\r\n          {action.label}\r\n        </NeuroFlowButton>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\n// Loading State Component\r\ninterface LoadingStateProps {\r\n  message?: string;\r\n  showSkeleton?: boolean;\r\n  skeletonRows?: number;\r\n}\r\n\r\nexport const LoadingState: React.FC<LoadingStateProps> = ({\r\n  message = 'Lade Daten...',\r\n  showSkeleton = false,\r\n  skeletonRows = 3,\r\n}) => {\r\n  return (\r\n    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" py={4}>\r\n      {showSkeleton ? (\r\n        <Box width=\"100%\">\r\n          {Array.from({ length: skeletonRows }).map((_, index) => (\r\n            <Skeleton\r\n              key={index}\r\n              variant=\"rectangular\"\r\n              height={60}\r\n              sx={{ mb: 2, borderRadius: 2 }}\r\n            />\r\n          ))}\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <Skeleton variant=\"circular\" width={40} height={40} sx={{ mb: 2 }} />\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            {message}\r\n          </Typography>\r\n        </>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\n// Error State Component\r\ninterface ErrorStateProps {\r\n  title?: string;\r\n  message: string;\r\n  retry?: () => void;\r\n  showDetails?: boolean;\r\n  details?: string;\r\n}\r\n\r\nexport const ErrorState: React.FC<ErrorStateProps> = ({\r\n  title = 'Ein Fehler ist aufgetreten',\r\n  message,\r\n  retry,\r\n  showDetails = false,\r\n  details,\r\n}) => {\r\n  return (\r\n    <Alert severity=\"error\" sx={{ borderRadius: 2 }}>\r\n      <AlertTitle>{title}</AlertTitle>\r\n      {message}\r\n      \r\n      {showDetails && details && (\r\n        <Box mt={2}>\r\n          <Typography variant=\"body2\" component=\"pre\" sx={{ whiteSpace: 'pre-wrap' }}>\r\n            {details}\r\n          </Typography>\r\n        </Box>\r\n      )}\r\n      \r\n      {retry && (\r\n        <Box mt={2}>\r\n          <NeuroFlowButton\r\n            variant=\"outlined\"\r\n            color=\"error\"\r\n            startIcon={<RefreshIcon />}\r\n            onClick={retry}\r\n            size=\"small\"\r\n          >\r\n            Erneut versuchen\r\n          </NeuroFlowButton>\r\n        </Box>\r\n      )}\r\n    </Alert>\r\n  );\r\n};\r\n\r\n// Section Header Component\r\ninterface SectionHeaderProps {\r\n  title: string;\r\n  subtitle?: string;\r\n  actions?: React.ReactNode;\r\n  divider?: boolean;\r\n}\r\n\r\nexport const SectionHeader: React.FC<SectionHeaderProps> = ({\r\n  title,\r\n  subtitle,\r\n  actions,\r\n  divider = true,\r\n}) => {\r\n  return (\r\n    <Box mb={3}>\r\n      <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={1}>\r\n        <Box>\r\n          <Typography variant=\"h4\" fontWeight={600} color=\"text.primary\">\r\n            {title}\r\n          </Typography>\r\n          {subtitle && (\r\n            <Typography variant=\"body1\" color=\"text.secondary\" mt={0.5}>\r\n              {subtitle}\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n        \r\n        {actions && (\r\n          <Box display=\"flex\" gap={1}>\r\n            {actions}\r\n          </Box>\r\n        )}\r\n      </Box>\r\n      \r\n      {divider && <Divider />}\r\n    </Box>\r\n  );\r\n};\r\n\r\n// Responsive Grid Component\r\ninterface ResponsiveGridProps {\r\n  children: React.ReactNode;\r\n  spacing?: number;\r\n  columns?: {\r\n    xs?: number;\r\n    sm?: number;\r\n    md?: number;\r\n    lg?: number;\r\n    xl?: number;\r\n  };\r\n}\r\n\r\nexport const ResponsiveGrid: React.FC<ResponsiveGridProps> = ({\r\n  children,\r\n  spacing = 3,\r\n  columns = { xs: 1, sm: 2, md: 3, lg: 4, xl: 6 },\r\n}) => {\r\n  return (\r\n    <Grid container spacing={spacing}>\r\n      {React.Children.map(children, (child, index) => (\r\n        <Grid\r\n          item\r\n          xs={columns.xs}\r\n          sm={columns.sm}\r\n          md={columns.md}\r\n          lg={columns.lg}\r\n          xl={columns.xl}\r\n          key={index}\r\n        >\r\n          {child}\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n};\r\n\r\n// Export all components\r\nexport {\r\n  NeuroFlowCard,\r\n  NeuroFlowButton,\r\n  NeuroFlowChip,\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\design-system\\NeuroFlowLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\design-system\\NeuroFlowTheme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\design-system\\ValeoDesignSystem.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\examples\\DualMCPExample.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Divider' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ErrorIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":33,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'refetch' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":187,"column":57,"nodeType":null,"messageId":"unusedVar","endLine":187,"endColumn":64},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":351,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":351,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12111,12114],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12111,12114],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'enhancedFields' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":467,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":467,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":595,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":595,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19817,19820],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19817,19820],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Tabs,\r\n  Tab,\r\n  Button,\r\n  Alert,\r\n  CircularProgress,\r\n  Chip,\r\n  Divider,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemIcon,\r\n  Paper\r\n} from '@mui/material';\r\nimport {\r\n  Info as InfoIcon,\r\n  Schema as SchemaIcon,\r\n  Palette as PaletteIcon,\r\n  Code as CodeIcon,\r\n  Refresh as RefreshIcon,\r\n  ExpandMore as ExpandMoreIcon,\r\n  CheckCircle as CheckCircleIcon,\r\n  Warning as WarningIcon,\r\n  Error as ErrorIcon\r\n} from '@mui/icons-material';\r\nimport { useDualMCPMetadata, useDualMCPForm, useDualMCPTable, useDualMCPData, useDualMCPComponent } from '../hooks/useDualMCP';\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`dual-mcp-tabpanel-${index}`}\r\n      aria-labelledby={`dual-mcp-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Dual MCP Beispiel-Komponente\r\n * Demonstriert die Kombination von Schema- und UI-Metadata-MCP-Servern\r\n */\r\nexport const DualMCPExample: React.FC = () => {\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [selectedTable, setSelectedTable] = useState('invoices');\r\n\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <Box className=\"p-6\">\r\n      <Typography variant=\"h4\" className=\"mb-6 flex items-center\">\r\n        <CodeIcon className=\"mr-3\" />\r\n        Dual MCP Integration - VALEO NeuroERP\r\n      </Typography>\r\n\r\n      {/* Erklärung */}\r\n      <Card className=\"mb-6\">\r\n        <CardContent>\r\n          <Typography variant=\"h6\" className=\"flex items-center mb-3\">\r\n            <InfoIcon className=\"mr-2\" />\r\n            Dual MCP Architektur\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" className=\"mb-4\">\r\n            Diese Komponente demonstriert die Kombination von zwei MCP-Servern:\r\n          </Typography>\r\n          \r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} md={6}>\r\n              <Card variant=\"outlined\">\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" className=\"flex items-center mb-2\">\r\n                    <SchemaIcon className=\"mr-2\" color=\"primary\" />\r\n                    MCP #1: Schema-Server\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"textSecondary\">\r\n                    • Tabellen- und Spaltennamen<br/>\r\n                    • Datentypen und Constraints<br/>\r\n                    • Foreign-Key-Beziehungen<br/>\r\n                    • RLS-Regeln<br/>\r\n                    • Trigger und Policies\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={6}>\r\n              <Card variant=\"outlined\">\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\" className=\"flex items-center mb-2\">\r\n                    <PaletteIcon className=\"mr-2\" color=\"secondary\" />\r\n                    MCP #2: UI-Metadata-Server\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"textSecondary\">\r\n                    • UI-Komponententypen<br/>\r\n                    • Label und Tooltips<br/>\r\n                    • Feld-Reihenfolge<br/>\r\n                    • Validierungsregeln<br/>\r\n                    • Layout-Konfiguration\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Tabellen-Auswahl */}\r\n      <Card className=\"mb-6\">\r\n        <CardContent>\r\n          <Typography variant=\"h6\" className=\"mb-3\">\r\n            Tabelle auswählen:\r\n          </Typography>\r\n          <Box className=\"flex space-x-2\">\r\n            {['invoices', 'customers', 'assets'].map((table) => (\r\n              <Button\r\n                key={table}\r\n                variant={selectedTable === table ? 'contained' : 'outlined'}\r\n                onClick={() => setSelectedTable(table)}\r\n                startIcon={selectedTable === table ? <CheckCircleIcon /> : undefined}\r\n              >\r\n                {table.charAt(0).toUpperCase() + table.slice(1)}\r\n              </Button>\r\n            ))}\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Tabs für verschiedene Ansichten */}\r\n      <Paper className=\"mb-6\">\r\n        <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"Dual MCP Tabs\">\r\n          <Tab label=\"Metadaten\" icon={<InfoIcon />} />\r\n          <Tab label=\"Formular\" icon={<CodeIcon />} />\r\n          <Tab label=\"Tabelle\" icon={<CodeIcon />} />\r\n          <Tab label=\"Daten\" icon={<CodeIcon />} />\r\n          <Tab label=\"Code-Generierung\" icon={<CodeIcon />} />\r\n        </Tabs>\r\n      </Paper>\r\n\r\n      {/* Tab Content */}\r\n      <TabPanel value={tabValue} index={0}>\r\n        <MetadataView tableName={selectedTable} />\r\n      </TabPanel>\r\n\r\n      <TabPanel value={tabValue} index={1}>\r\n        <FormView tableName={selectedTable} />\r\n      </TabPanel>\r\n\r\n      <TabPanel value={tabValue} index={2}>\r\n        <TableView tableName={selectedTable} />\r\n      </TabPanel>\r\n\r\n      <TabPanel value={tabValue} index={3}>\r\n        <DataView tableName={selectedTable} />\r\n      </TabPanel>\r\n\r\n      <TabPanel value={tabValue} index={4}>\r\n        <CodeGenerationView tableName={selectedTable} />\r\n      </TabPanel>\r\n    </Box>\r\n  );\r\n};\r\n\r\n// Metadaten-Ansicht\r\nconst MetadataView: React.FC<{ tableName: string }> = ({ tableName }) => {\r\n  const { schema, uiMetadata, combined, loading, error, refetch } = useDualMCPMetadata(tableName);\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box className=\"flex justify-center items-center h-64\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert severity=\"error\" className=\"mb-4\">\r\n        <Typography variant=\"subtitle2\" className=\"mb-2\">\r\n          Fehler beim Laden der Metadaten:\r\n        </Typography>\r\n        {error}\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      {/* Schema-Informationen */}\r\n      <Grid item xs={12} md={6}>\r\n        <Card>\r\n          <CardContent>\r\n            <Typography variant=\"h6\" className=\"flex items-center mb-3\">\r\n              <SchemaIcon className=\"mr-2\" color=\"primary\" />\r\n              Schema-Informationen (MCP #1)\r\n            </Typography>\r\n            \r\n            {schema ? (\r\n              <Accordion>\r\n                <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                  <Typography variant=\"subtitle2\">\r\n                    Tabelle: {schema.table_name}\r\n                  </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <List dense>\r\n                    {schema.columns.map((column) => (\r\n                      <ListItem key={column.name}>\r\n                        <ListItemIcon>\r\n                          {column.is_primary_key ? <CheckCircleIcon color=\"primary\" /> : \r\n                           column.is_foreign_key ? <WarningIcon color=\"warning\" /> : \r\n                           <InfoIcon color=\"action\" />}\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                          primary={column.name}\r\n                          secondary={`${column.type}${column.not_null ? ' (NOT NULL)' : ''}`}\r\n                        />\r\n                      </ListItem>\r\n                    ))}\r\n                  </List>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            ) : (\r\n              <Alert severity=\"warning\">\r\n                Keine Schema-Informationen verfügbar\r\n              </Alert>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* UI-Metadata-Informationen */}\r\n      <Grid item xs={12} md={6}>\r\n        <Card>\r\n          <CardContent>\r\n            <Typography variant=\"h6\" className=\"flex items-center mb-3\">\r\n              <PaletteIcon className=\"mr-2\" color=\"secondary\" />\r\n              UI-Metadata (MCP #2)\r\n            </Typography>\r\n            \r\n            {uiMetadata ? (\r\n              <Accordion>\r\n                <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                  <Typography variant=\"subtitle2\">\r\n                    UI-Konfiguration: {uiMetadata.table_name}\r\n                  </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  {uiMetadata.table && (\r\n                    <Box className=\"mb-4\">\r\n                      <Typography variant=\"subtitle2\" className=\"mb-2\">\r\n                        Tabellen-Konfiguration:\r\n                      </Typography>\r\n                      <List dense>\r\n                        <ListItem>\r\n                          <ListItemText\r\n                            primary=\"Display Name\"\r\n                            secondary={uiMetadata.table.display_name}\r\n                          />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                          <ListItemText\r\n                            primary=\"Beschreibung\"\r\n                            secondary={uiMetadata.table.description}\r\n                          />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                          <ListItemText\r\n                            primary=\"Aktionen\"\r\n                            secondary={uiMetadata.table.actions.join(', ')}\r\n                          />\r\n                        </ListItem>\r\n                      </List>\r\n                    </Box>\r\n                  )}\r\n                  \r\n                  {uiMetadata.form && (\r\n                    <Box>\r\n                      <Typography variant=\"subtitle2\" className=\"mb-2\">\r\n                        Formular-Konfiguration:\r\n                      </Typography>\r\n                      <List dense>\r\n                        <ListItem>\r\n                          <ListItemText\r\n                            primary=\"Layout\"\r\n                            secondary={uiMetadata.form.layout}\r\n                          />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                          <ListItemText\r\n                            primary=\"Validierung\"\r\n                            secondary={uiMetadata.form.validation_mode}\r\n                          />\r\n                        </ListItem>\r\n                        <ListItem>\r\n                          <ListItemText\r\n                            primary=\"Auto-Save\"\r\n                            secondary={uiMetadata.form.auto_save ? 'Aktiviert' : 'Deaktiviert'}\r\n                          />\r\n                        </ListItem>\r\n                      </List>\r\n                    </Box>\r\n                  )}\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            ) : (\r\n              <Alert severity=\"warning\">\r\n                Keine UI-Metadata verfügbar\r\n              </Alert>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n\r\n      {/* Kombinierte Metadaten */}\r\n      <Grid item xs={12}>\r\n        <Card>\r\n          <CardContent>\r\n            <Typography variant=\"h6\" className=\"flex items-center mb-3\">\r\n              <CodeIcon className=\"mr-2\" color=\"success\" />\r\n              Kombinierte Metadaten\r\n            </Typography>\r\n            \r\n            {combined?.enhanced_fields ? (\r\n              <Box>\r\n                <Typography variant=\"subtitle2\" className=\"mb-2\">\r\n                  Erweiterte Felder ({combined.enhanced_fields.length}):\r\n                </Typography>\r\n                <Grid container spacing={2}>\r\n                  {combined.enhanced_fields.map((field: any) => (\r\n                    <Grid item xs={12} sm={6} md={4} key={field.name}>\r\n                      <Card variant=\"outlined\">\r\n                        <CardContent>\r\n                          <Typography variant=\"subtitle2\" className=\"mb-1\">\r\n                            {field.label}\r\n                          </Typography>\r\n                          <Typography variant=\"caption\" color=\"textSecondary\" className=\"block mb-1\">\r\n                            {field.name} ({field.type})\r\n                          </Typography>\r\n                          <Box className=\"flex flex-wrap gap-1\">\r\n                            <Chip\r\n                              label={field.ui_component}\r\n                              size=\"small\"\r\n                              color=\"primary\"\r\n                              variant=\"outlined\"\r\n                            />\r\n                            {field.required && (\r\n                              <Chip\r\n                                label=\"Required\"\r\n                                size=\"small\"\r\n                                color=\"error\"\r\n                                variant=\"outlined\"\r\n                              />\r\n                            )}\r\n                            {field.readonly && (\r\n                              <Chip\r\n                                label=\"Readonly\"\r\n                                size=\"small\"\r\n                                color=\"warning\"\r\n                                variant=\"outlined\"\r\n                              />\r\n                            )}\r\n                          </Box>\r\n                        </CardContent>\r\n                      </Card>\r\n                    </Grid>\r\n                  ))}\r\n                </Grid>\r\n              </Box>\r\n            ) : (\r\n              <Alert severity=\"info\">\r\n                Keine kombinierten Metadaten verfügbar\r\n              </Alert>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\n// Formular-Ansicht\r\nconst FormView: React.FC<{ tableName: string }> = ({ tableName }) => {\r\n  const { enhancedFields, loading, error } = useDualMCPForm(tableName);\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box className=\"flex justify-center items-center h-64\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert severity=\"error\">\r\n        {error}\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Typography variant=\"h6\" className=\"mb-4\">\r\n          Generiertes Formular für {tableName}\r\n        </Typography>\r\n        \r\n        <Typography variant=\"body2\" color=\"textSecondary\" className=\"mb-4\">\r\n          Dieses Formular wurde automatisch basierend auf Schema und UI-Metadata generiert.\r\n        </Typography>\r\n\r\n        <Box className=\"bg-gray-50 p-4 rounded-lg\">\r\n          <Typography variant=\"subtitle2\" className=\"mb-2\">\r\n            Verfügbare Felder ({enhancedFields.length}):\r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            {enhancedFields.map((field) => (\r\n              <Grid item xs={12} sm={6} md={4} key={field.field_name}>\r\n                <Card variant=\"outlined\">\r\n                  <CardContent>\r\n                    <Typography variant=\"subtitle2\">\r\n                      {field.label}\r\n                    </Typography>\r\n                    <Typography variant=\"caption\" color=\"textSecondary\">\r\n                      {field.field_name} - {field.ui_component}\r\n                    </Typography>\r\n                    {field.tooltip && (\r\n                      <Typography variant=\"caption\" className=\"block mt-1\">\r\n                        💡 {field.tooltip}\r\n                      </Typography>\r\n                    )}\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// Tabellen-Ansicht\r\nconst TableView: React.FC<{ tableName: string }> = ({ tableName }) => {\r\n  const { tableMetadata, enhancedFields, loading, error } = useDualMCPTable(tableName);\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box className=\"flex justify-center items-center h-64\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert severity=\"error\">\r\n        {error}\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Typography variant=\"h6\" className=\"mb-4\">\r\n          Generierte Tabelle für {tableName}\r\n        </Typography>\r\n        \r\n        {tableMetadata ? (\r\n          <Box>\r\n            <Typography variant=\"subtitle1\" className=\"mb-2\">\r\n              {tableMetadata.display_name}\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"textSecondary\" className=\"mb-4\">\r\n              {tableMetadata.description}\r\n            </Typography>\r\n            \r\n            <Box className=\"flex flex-wrap gap-2 mb-4\">\r\n              {tableMetadata.actions.map((action: string) => (\r\n                <Chip\r\n                  key={action}\r\n                  label={action}\r\n                  color=\"primary\"\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              ))}\r\n            </Box>\r\n            \r\n            <Typography variant=\"subtitle2\" className=\"mb-2\">\r\n              Tabellen-Konfiguration:\r\n            </Typography>\r\n            <List dense>\r\n              <ListItem>\r\n                <ListItemText\r\n                  primary=\"Seitengröße\"\r\n                  secondary={tableMetadata.page_size}\r\n                />\r\n              </ListItem>\r\n              <ListItem>\r\n                <ListItemText\r\n                  primary=\"Suche\"\r\n                  secondary={tableMetadata.enable_search ? 'Aktiviert' : 'Deaktiviert'}\r\n                />\r\n              </ListItem>\r\n              <ListItem>\r\n                <ListItemText\r\n                  primary=\"Filter\"\r\n                  secondary={tableMetadata.enable_filter ? 'Aktiviert' : 'Deaktiviert'}\r\n                />\r\n              </ListItem>\r\n              <ListItem>\r\n                <ListItemText\r\n                  primary=\"Pagination\"\r\n                  secondary={tableMetadata.enable_pagination ? 'Aktiviert' : 'Deaktiviert'}\r\n                />\r\n              </ListItem>\r\n            </List>\r\n          </Box>\r\n        ) : (\r\n          <Alert severity=\"warning\">\r\n            Keine Tabellen-Metadata verfügbar\r\n          </Alert>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// Daten-Ansicht\r\nconst DataView: React.FC<{ tableName: string }> = ({ tableName }) => {\r\n  const { data, loading, error, refetch } = useDualMCPData(tableName);\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box className=\"flex justify-center items-center h-64\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert severity=\"error\">\r\n        {error}\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Box className=\"flex justify-between items-center mb-4\">\r\n          <Typography variant=\"h6\">\r\n            Daten für {tableName}\r\n          </Typography>\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<RefreshIcon />}\r\n            onClick={refetch}\r\n          >\r\n            Aktualisieren\r\n          </Button>\r\n        </Box>\r\n        \r\n        {data && data.length > 0 ? (\r\n          <Box>\r\n            <Typography variant=\"subtitle2\" className=\"mb-2\">\r\n              {data.length} Einträge gefunden:\r\n            </Typography>\r\n            <Box className=\"max-h-96 overflow-y-auto\">\r\n              {data.slice(0, 5).map((item: any, index: number) => (\r\n                <Card key={index} variant=\"outlined\" className=\"mb-2\">\r\n                  <CardContent>\r\n                    <Typography variant=\"subtitle2\" className=\"mb-1\">\r\n                      Eintrag {index + 1}\r\n                    </Typography>\r\n                    <pre className=\"text-xs bg-gray-100 p-2 rounded overflow-x-auto\">\r\n                      {JSON.stringify(item, null, 2)}\r\n                    </pre>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n              {data.length > 5 && (\r\n                <Typography variant=\"caption\" color=\"textSecondary\">\r\n                  ... und {data.length - 5} weitere Einträge\r\n                </Typography>\r\n              )}\r\n            </Box>\r\n          </Box>\r\n        ) : (\r\n          <Alert severity=\"info\">\r\n            Keine Daten verfügbar\r\n          </Alert>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// Code-Generierung-Ansicht\r\nconst CodeGenerationView: React.FC<{ tableName: string }> = ({ tableName }) => {\r\n  const { formComponent, tableComponent, loading, error, regenerate } = useDualMCPComponent(tableName);\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box className=\"flex justify-center items-center h-64\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert severity=\"error\">\r\n        {error}\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={12}>\r\n        <Box className=\"flex justify-between items-center mb-4\">\r\n          <Typography variant=\"h6\">\r\n            Automatisch generierter Code für {tableName}\r\n          </Typography>\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<RefreshIcon />}\r\n            onClick={regenerate}\r\n          >\r\n            Neu generieren\r\n          </Button>\r\n        </Box>\r\n      </Grid>\r\n\r\n      <Grid item xs={12} md={6}>\r\n        <Card>\r\n          <CardContent>\r\n            <Typography variant=\"h6\" className=\"mb-3\">\r\n              Formular-Komponente\r\n            </Typography>\r\n            <Box className=\"bg-gray-900 text-green-400 p-4 rounded-lg max-h-96 overflow-y-auto\">\r\n              <pre className=\"text-xs\">\r\n                {formComponent || '// Kein Code verfügbar'}\r\n              </pre>\r\n            </Box>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n\r\n      <Grid item xs={12} md={6}>\r\n        <Card>\r\n          <CardContent>\r\n            <Typography variant=\"h6\" className=\"mb-3\">\r\n              Tabellen-Komponente\r\n            </Typography>\r\n            <Box className=\"bg-gray-900 text-green-400 p-4 rounded-lg max-h-96 overflow-y-auto\">\r\n              <pre className=\"text-xs\">\r\n                {tableComponent || '// Kein Code verfügbar'}\r\n              </pre>\r\n            </Box>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default DualMCPExample; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\examples\\mcpIntegrationExample.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":153,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4540,4543],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4540,4543],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'result' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":158,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":158,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Typography,\r\n  Alert,\r\n  CircularProgress,\r\n  Chip,\r\n  Divider,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  ListItemText\r\n} from '@mui/material';\r\nimport {\r\n  PlayArrow as PlayIcon,\r\n  Code as CodeIcon,\r\n  Download as DownloadIcon,\r\n  Refresh as RefreshIcon\r\n} from '@mui/icons-material';\r\n\r\n// MCP Integration Imports\r\nimport { getMCPSchemaInjector } from '../utils/mcpSchemaInjector';\r\nimport { getCursorComponentGenerator } from '../utils/cursorComponentGenerator';\r\nimport { getGENXAISIntegration } from '../utils/genxaisIntegration';\r\nimport { useMCPForm, useMCPTable, useMCPData } from '../hooks/useMCPForm';\r\nimport { CursorPromptGenerator } from '../utils/cursorPrompts';\r\n\r\n/**\r\n * Beispiel-Komponente für MCP-Integration\r\n * Zeigt die vollständige Integration von MCP-Schema-Server mit Cursor\r\n */\r\nexport const MCPIntegrationExample: React.FC = () => {\r\n  const [currentTable, setCurrentTable] = useState('invoices');\r\n  const [generatedPrompt, setGeneratedPrompt] = useState<string>('');\r\n  const [isGenerating, setIsGenerating] = useState(false);\r\n  const [workflowStatus, setWorkflowStatus] = useState<string>('');\r\n\r\n  // MCP Hooks\r\n  const mcpForm = useMCPForm();\r\n\r\n  const mcpTable = useMCPTable(currentTable);\r\n  const mcpData = useMCPData(currentTable);\r\n\r\n  // MCP Services\r\n  const mcpInjector = getMCPSchemaInjector();\r\n  const componentGenerator = getCursorComponentGenerator();\r\n  const genxais = getGENXAISIntegration();\r\n\r\n  /**\r\n   * Beispiel 1: Einfacher Schema-Abruf\r\n   */\r\n  const handleLoadSchema = async () => {\r\n    try {\r\n      setIsGenerating(true);\r\n      setWorkflowStatus('🔄 Schema wird geladen...');\r\n\r\n      const schema = await mcpInjector.getTableSchema(currentTable);\r\n      console.log('Schema geladen:', schema);\r\n\r\n      setWorkflowStatus('✅ Schema erfolgreich geladen');\r\n    } catch (error) {\r\n      setWorkflowStatus(`❌ Fehler: ${error instanceof Error ? error.message : 'Unbekannter Fehler'}`);\r\n    } finally {\r\n      setIsGenerating(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Beispiel 2: Cursor-Prompt generieren\r\n   */\r\n  const handleGeneratePrompt = async () => {\r\n    try {\r\n      setIsGenerating(true);\r\n      setWorkflowStatus('🔄 Cursor-Prompt wird generiert...');\r\n\r\n      const schema = await mcpInjector.getTableSchema(currentTable);\r\n      const prompt = CursorPromptGenerator.generatePrompt(schema, 'form', {\r\n        language: 'de',\r\n        includeTests: true,\r\n        includeDocumentation: true\r\n      });\r\n\r\n      setGeneratedPrompt(prompt);\r\n      setWorkflowStatus('✅ Cursor-Prompt generiert');\r\n    } catch (error) {\r\n      setWorkflowStatus(`❌ Fehler: ${error instanceof Error ? error.message : 'Unbekannter Fehler'}`);\r\n    } finally {\r\n      setIsGenerating(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Beispiel 3: Komponenten automatisch generieren\r\n   */\r\n  const handleGenerateComponents = async () => {\r\n    try {\r\n      setIsGenerating(true);\r\n      setWorkflowStatus('🔄 Komponenten werden generiert...');\r\n\r\n      const components = await componentGenerator.generateComponents({\r\n        tableName: currentTable,\r\n        componentType: 'both',\r\n        includeTests: true,\r\n        includeDocumentation: true,\r\n        language: 'de'\r\n      });\r\n\r\n      console.log('Generierte Komponenten:', components);\r\n      setWorkflowStatus('✅ Komponenten erfolgreich generiert');\r\n    } catch (error) {\r\n      setWorkflowStatus(`❌ Fehler: ${error instanceof Error ? error.message : 'Unbekannter Fehler'}`);\r\n    } finally {\r\n      setIsGenerating(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Beispiel 4: Vollständiger GENXAIS-Workflow\r\n   */\r\n  const handleFullWorkflow = async () => {\r\n    try {\r\n      setIsGenerating(true);\r\n      setWorkflowStatus('🚀 GENXAIS Workflow gestartet...');\r\n\r\n      const result = await genxais.executeFullWorkflow(currentTable, {\r\n        componentType: 'both',\r\n        includeTests: true,\r\n        includeDocumentation: true,\r\n        language: 'de'\r\n      });\r\n\r\n      console.log('GENXAIS Workflow Ergebnis:', result);\r\n      setWorkflowStatus('🎉 GENXAIS Workflow erfolgreich abgeschlossen');\r\n    } catch (error) {\r\n      setWorkflowStatus(`❌ Fehler: ${error instanceof Error ? error.message : 'Unbekannter Fehler'}`);\r\n    } finally {\r\n      setIsGenerating(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Beispiel 5: MCP-Formular verwenden\r\n   */\r\n  const handleFormSubmit = async (data: any) => {\r\n    try {\r\n      console.log('Formular-Daten:', data);\r\n      \r\n      // Hier würde die eigentliche API-Integration stattfinden\r\n      const result = await mcpData.createData(data);\r\n      \r\n      setWorkflowStatus('✅ Daten erfolgreich erstellt');\r\n    } catch (error) {\r\n      setWorkflowStatus(`❌ Fehler: ${error instanceof Error ? error.message : 'Unbekannter Fehler'}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box className=\"p-6 max-w-6xl mx-auto space-y-6\">\r\n      {/* Header */}\r\n      <Box className=\"text-center\">\r\n        <Typography variant=\"h4\" component=\"h1\" className=\"font-bold text-gray-800 mb-2\">\r\n          MCP-Schema-Integration Demo\r\n        </Typography>\r\n        <Typography variant=\"body1\" className=\"text-gray-600\">\r\n          Live-Demo der MCP-Schema-Integration mit Cursor und GENXAIS\r\n        </Typography>\r\n      </Box>\r\n\r\n      {/* Status */}\r\n      {workflowStatus && (\r\n        <Alert severity={workflowStatus.includes('❌') ? 'error' : 'info'} className=\"mb-4\">\r\n          {workflowStatus}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Konfiguration */}\r\n      <Card>\r\n        <CardHeader\r\n          title=\"Konfiguration\"\r\n          subheader=\"Wähle eine Tabelle und führe verschiedene MCP-Operationen aus\"\r\n        />\r\n        <CardContent className=\"space-y-4\">\r\n          <FormControl fullWidth>\r\n            <InputLabel>Tabelle auswählen</InputLabel>\r\n            <Select\r\n              value={currentTable}\r\n              onChange={(e) => setCurrentTable(e.target.value)}\r\n              label=\"Tabelle auswählen\"\r\n            >\r\n              <MenuItem value=\"invoices\">invoices</MenuItem>\r\n              <MenuItem value=\"customers\">customers</MenuItem>\r\n              <MenuItem value=\"products\">products</MenuItem>\r\n              <MenuItem value=\"orders\">orders</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n\r\n          <Box className=\"flex flex-wrap gap-2\">\r\n            <Button\r\n              variant=\"outlined\"\r\n              startIcon={<RefreshIcon />}\r\n              onClick={handleLoadSchema}\r\n              disabled={isGenerating}\r\n            >\r\n              Schema laden\r\n            </Button>\r\n            \r\n            <Button\r\n              variant=\"outlined\"\r\n              startIcon={<CodeIcon />}\r\n              onClick={handleGeneratePrompt}\r\n              disabled={isGenerating}\r\n            >\r\n              Cursor-Prompt generieren\r\n            </Button>\r\n            \r\n            <Button\r\n              variant=\"outlined\"\r\n              startIcon={<DownloadIcon />}\r\n              onClick={handleGenerateComponents}\r\n              disabled={isGenerating}\r\n            >\r\n              Komponenten generieren\r\n            </Button>\r\n            \r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<PlayIcon />}\r\n              onClick={handleFullWorkflow}\r\n              disabled={isGenerating}\r\n              className=\"bg-blue-600 hover:bg-blue-700\"\r\n            >\r\n              GENXAIS Workflow\r\n            </Button>\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Schema-Info */}\r\n      {mcpTable.schema && (\r\n        <Card>\r\n          <CardHeader\r\n            title=\"Schema-Informationen\"\r\n            subheader={`Tabelle: ${mcpTable.schema.table}`}\r\n          />\r\n          <CardContent>\r\n            <Grid container spacing={2}>\r\n              {/* Spalten */}\r\n              <Grid item xs={12} md={6}>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Spalten\r\n                </Typography>\r\n                <List dense>\r\n                  {mcpTable.schema.columns.map((col) => (\r\n                    <ListItem key={col.name}>\r\n                      <ListItemText\r\n                        primary={col.name}\r\n                        secondary={`${col.type}${col.not_null ? ' (required)' : ''}`}\r\n                      />\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n              </Grid>\r\n\r\n              {/* RLS */}\r\n              <Grid item xs={12} md={6}>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Row Level Security\r\n                </Typography>\r\n                <List dense>\r\n                  {Object.entries(mcpTable.schema.rls).map(([operation, allowed]) => (\r\n                    <ListItem key={operation}>\r\n                      <ListItemText\r\n                        primary={operation}\r\n                        secondary={allowed ? 'Erlaubt' : 'Nicht erlaubt'}\r\n                      />\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n              </Grid>\r\n            </Grid>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Formular */}\r\n      {mcpTable.schema && !mcpTable.isLoading && (\r\n        <Card>\r\n          <CardHeader\r\n            title=\"Dynamisches Formular\"\r\n            subheader=\"Generiert basierend auf dem Schema\"\r\n          />\r\n          <CardContent>\r\n            <form onSubmit={mcpForm.handleSubmit(handleFormSubmit)} className=\"space-y-4\">\r\n              <Grid container spacing={2}>\r\n                {mcpTable.schema.columns\r\n                  .filter(col => !col.primary)\r\n                  .map((col) => (\r\n                    <Grid item xs={12} sm={6} key={col.name}>\r\n                      <TextField\r\n                        label={col.name}\r\n                        type={getFieldType(col.type)}\r\n                        fullWidth\r\n                        required={col.not_null}\r\n                        disabled={mcpForm.formState.isSubmitting}\r\n                      />\r\n                    </Grid>\r\n                  ))}\r\n              </Grid>\r\n              \r\n              <Box className=\"flex gap-2\">\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  disabled={mcpForm.formState.isSubmitting}\r\n                >\r\n                  Speichern\r\n                </Button>\r\n                <Button\r\n                  type=\"button\"\r\n                  variant=\"outlined\"\r\n                  onClick={() => mcpForm.reset()}\r\n                  disabled={mcpForm.formState.isSubmitting}\r\n                >\r\n                  Zurücksetzen\r\n                </Button>\r\n              </Box>\r\n            </form>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Fehler */}\r\n      {mcpForm.formState.errors && Object.keys(mcpForm.formState.errors).length > 0 && (\r\n        <Alert severity=\"error\" className=\"mb-4\">\r\n          <Typography variant=\"h6\">Formular-Fehler</Typography>\r\n          <Typography variant=\"body2\">{JSON.stringify(mcpForm.formState.errors, null, 2)}</Typography>\r\n        </Alert>\r\n      )}\r\n\r\n      {/* MCP-Tabelle Demo */}\r\n      {mcpTable.schema && !mcpTable.isLoading && (\r\n        <Card>\r\n          <CardHeader\r\n            title=\"MCP-Tabelle Demo\"\r\n            subheader=\"Live-Tabelle basierend auf MCP-Schema\"\r\n          />\r\n          <CardContent>\r\n            <Box className=\"space-y-4\">\r\n              <Box className=\"flex justify-between items-center\">\r\n                <Typography variant=\"body1\">\r\n                  Sichtbare Spalten: {mcpTable.getVisibleColumns().length}\r\n                </Typography>\r\n                <Typography variant=\"body1\">\r\n                  Editierbare Spalten: {mcpTable.getEditableColumns().length}\r\n                </Typography>\r\n                <Typography variant=\"body1\">\r\n                  Löschen erlaubt: {mcpTable.canDelete() ? 'Ja' : 'Nein'}\r\n                </Typography>\r\n              </Box>\r\n              \r\n              <Divider />\r\n              \r\n              <Box>\r\n                <Typography variant=\"h6\" className=\"font-semibold mb-2\">\r\n                  Sichtbare Spalten\r\n                </Typography>\r\n                <Box className=\"flex flex-wrap gap-2\">\r\n                  {mcpTable.getVisibleColumns().map((col) => (\r\n                    <Chip\r\n                      key={col.name}\r\n                      label={col.name}\r\n                      size=\"small\"\r\n                      variant=\"outlined\"\r\n                    />\r\n                  ))}\r\n                </Box>\r\n              </Box>\r\n            </Box>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Generierter Cursor-Prompt */}\r\n      {generatedPrompt && (\r\n        <Card>\r\n          <CardHeader\r\n            title=\"Generierter Cursor-Prompt\"\r\n            subheader=\"Prompt für Cursor AI zur Komponenten-Generierung\"\r\n            action={\r\n              <Button\r\n                size=\"small\"\r\n                onClick={() => navigator.clipboard.writeText(generatedPrompt)}\r\n              >\r\n                Kopieren\r\n              </Button>\r\n            }\r\n          />\r\n          <CardContent>\r\n            <Box className=\"bg-gray-100 p-4 rounded-lg max-h-96 overflow-y-auto\">\r\n              <pre className=\"text-sm whitespace-pre-wrap\">\r\n                {generatedPrompt}\r\n              </pre>\r\n            </Box>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Loading State */}\r\n      {isGenerating && (\r\n        <Box className=\"flex justify-center items-center py-8\">\r\n          <CircularProgress />\r\n        </Box>\r\n      )}\r\n\r\n      {/* Error State */}\r\n      {mcpForm.formState.errors && Object.keys(mcpForm.formState.errors).length > 0 && (\r\n        <Alert severity=\"error\">\r\n          <Typography variant=\"h6\">Schema-Fehler</Typography>\r\n          <Typography variant=\"body2\">{JSON.stringify(mcpForm.formState.errors, null, 2)}</Typography>\r\n        </Alert>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\n/**\r\n * Helper-Funktion für Feld-Typen\r\n */\r\nfunction getFieldType(columnType: string): string {\r\n  switch (columnType) {\r\n    case 'numeric':\r\n    case 'integer':\r\n      return 'number';\r\n    case 'boolean':\r\n      return 'checkbox';\r\n    case 'timestamp':\r\n      return 'datetime-local';\r\n    default:\r\n      return 'text';\r\n  }\r\n}\r\n\r\nexport default MCPIntegrationExample; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\examples\\testMCPIntegration.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[779,782],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[779,782],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[831,834],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[831,834],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":257,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":257,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8054,8057],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8054,8057],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":275,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":275,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9206,9209],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9206,9209],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":282,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":282,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9548,9551],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9548,9551],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":283,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":283,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9607,9610],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9607,9610],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Alert,\r\n  CircularProgress,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Divider\r\n} from '@mui/material';\r\nimport { Refresh as RefreshIcon } from '@mui/icons-material';\r\n\r\n// MCP Integration Imports\r\nimport { getMCPSchemaInjector } from '../utils/mcpSchemaInjector';\r\nimport { useMCPForm, useMCPTable } from '../hooks/useMCPForm';\r\n\r\n/**\r\n * Test-Komponente für MCP-Integration\r\n * Zeigt die Verbindung zum MCP-Server und Supabase-Schema\r\n */\r\nexport const TestMCPIntegration: React.FC = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [schemaData, setSchemaData] = useState<any>(null);\r\n  const [tables, setTables] = useState<any[]>([]);\r\n\r\n  // MCP Hooks testen\r\n  const mcpForm = useMCPForm({\r\n    schema: undefined,\r\n    defaultValues: {}\r\n  });\r\n\r\n  const mcpTable = useMCPTable('invoices');\r\n\r\n  // MCP Services\r\n  const mcpInjector = getMCPSchemaInjector();\r\n\r\n  /**\r\n   * MCP-Server-Verbindung testen\r\n   */\r\n  const testMCPConnection = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n\r\n      console.log('🔄 MCP-Server-Verbindung testen...');\r\n      \r\n      // Health-Check\r\n      const healthResponse = await fetch('http://localhost:8000/api/health');\r\n      if (!healthResponse.ok) {\r\n        throw new Error(`Health-Check fehlgeschlagen: ${healthResponse.status}`);\r\n      }\r\n      \r\n      const healthData = await healthResponse.json();\r\n      console.log('✅ Health-Check erfolgreich:', healthData);\r\n\r\n      // Tabellen auflisten\r\n      const tablesResponse = await fetch('http://localhost:8000/api/tables');\r\n      if (!tablesResponse.ok) {\r\n        throw new Error(`Tabellen-Abruf fehlgeschlagen: ${tablesResponse.status}`);\r\n      }\r\n      \r\n      const tablesData = await tablesResponse.json();\r\n      setTables(tablesData.tables || []);\r\n      console.log('✅ Tabellen erfolgreich geladen:', tablesData);\r\n\r\n      // Schema für invoices abrufen\r\n      const schemaResponse = await fetch('http://localhost:8000/api/schema/invoices');\r\n      if (!schemaResponse.ok) {\r\n        throw new Error(`Schema-Abruf fehlgeschlagen: ${schemaResponse.status}`);\r\n      }\r\n      \r\n      const schemaData = await schemaResponse.json();\r\n      setSchemaData(schemaData);\r\n      console.log('✅ Schema erfolgreich geladen:', schemaData);\r\n\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Unbekannter Fehler';\r\n      setError(errorMessage);\r\n      console.error('❌ MCP-Verbindungstest fehlgeschlagen:', errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Schema für spezifische Tabelle abrufen\r\n   */\r\n  const loadTableSchema = async (tableName: string) => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n\r\n      console.log(`🔄 Schema für Tabelle ${tableName} laden...`);\r\n      \r\n      const schema = await mcpInjector.getTableSchema(tableName);\r\n      setSchemaData(schema);\r\n      \r\n      console.log(`✅ Schema für ${tableName} erfolgreich geladen:`, schema);\r\n\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Unbekannter Fehler';\r\n      setError(errorMessage);\r\n      console.error(`❌ Schema-Laden für ${tableName} fehlgeschlagen:`, errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Cache leeren\r\n   */\r\n  const clearCache = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n\r\n      console.log('🔄 Cache leeren...');\r\n      \r\n      const response = await fetch('http://localhost:8000/api/cache/clear', {\r\n        method: 'POST'\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Cache-Löschen fehlgeschlagen: ${response.status}`);\r\n      }\r\n      \r\n      const result = await response.json();\r\n      console.log('✅ Cache erfolgreich geleert:', result);\r\n\r\n      // Cache-Status anzeigen\r\n      const cacheStatus = mcpInjector.getCacheStatus();\r\n      console.log('📊 Cache-Status:', cacheStatus);\r\n\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Unbekannter Fehler';\r\n      setError(errorMessage);\r\n      console.error('❌ Cache-Löschen fehlgeschlagen:', errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Automatischer Test beim Laden\r\n  useEffect(() => {\r\n    testMCPConnection();\r\n  }, []);\r\n\r\n  return (\r\n    <Box className=\"p-6 space-y-6\">\r\n      <Typography variant=\"h4\" className=\"text-gray-800 mb-6\">\r\n        🧪 MCP-Integration Test\r\n      </Typography>\r\n\r\n      {/* Status-Anzeige */}\r\n      <Card className=\"mb-6\">\r\n        <CardContent>\r\n          <Typography variant=\"h6\" className=\"mb-4\">\r\n            📊 MCP-Server Status\r\n          </Typography>\r\n          \r\n          <div className=\"flex items-center space-x-4 mb-4\">\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<RefreshIcon />}\r\n              onClick={testMCPConnection}\r\n              disabled={isLoading}\r\n            >\r\n              {isLoading ? 'Teste...' : 'Verbindung testen'}\r\n            </Button>\r\n            \r\n            <Button\r\n              variant=\"outlined\"\r\n              onClick={clearCache}\r\n              disabled={isLoading}\r\n            >\r\n              Cache leeren\r\n            </Button>\r\n          </div>\r\n\r\n          {error && (\r\n            <Alert severity=\"error\" className=\"mb-4\">\r\n              {error}\r\n            </Alert>\r\n          )}\r\n\r\n          {isLoading && (\r\n            <Box className=\"flex items-center space-x-2\">\r\n              <CircularProgress size={20} />\r\n              <Typography>Lade...</Typography>\r\n            </Box>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Verfügbare Tabellen */}\r\n      {tables.length > 0 && (\r\n        <Card className=\"mb-6\">\r\n          <CardContent>\r\n            <Typography variant=\"h6\" className=\"mb-4\">\r\n              📋 Verfügbare Tabellen\r\n            </Typography>\r\n            \r\n            <List>\r\n              {tables.map((table, index) => (\r\n                <React.Fragment key={table.name}>\r\n                  <ListItem \r\n                    button \r\n                    onClick={() => loadTableSchema(table.name)}\r\n                    disabled={isLoading}\r\n                  >\r\n                    <ListItemText\r\n                      primary={table.name}\r\n                      secondary={`${table.description} (${table.columns} Spalten)`}\r\n                    />\r\n                  </ListItem>\r\n                  {index < tables.length - 1 && <Divider />}\r\n                </React.Fragment>\r\n              ))}\r\n            </List>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Schema-Anzeige */}\r\n      {schemaData && (\r\n        <Card className=\"mb-6\">\r\n          <CardContent>\r\n            <Typography variant=\"h6\" className=\"mb-4\">\r\n              🗄️ Schema: {schemaData.table}\r\n            </Typography>\r\n            \r\n            <div className=\"space-y-4\">\r\n              {/* RLS-Informationen */}\r\n              <div>\r\n                <Typography variant=\"subtitle1\" className=\"font-semibold mb-2\">\r\n                  🔒 RLS-Richtlinien\r\n                </Typography>\r\n                <div className=\"grid grid-cols-2 gap-2 text-sm\">\r\n                  <div>SELECT: {schemaData.rls.select ? '✅' : '❌'}</div>\r\n                  <div>INSERT: {schemaData.rls.insert ? '✅' : '❌'}</div>\r\n                  <div>UPDATE: {schemaData.rls.update ? '✅' : '❌'}</div>\r\n                  <div>DELETE: {schemaData.rls.delete ? '✅' : '❌'}</div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Spalten-Informationen */}\r\n              <div>\r\n                <Typography variant=\"subtitle1\" className=\"font-semibold mb-2\">\r\n                  📊 Spalten\r\n                </Typography>\r\n                <div className=\"space-y-2\">\r\n                  {schemaData.columns.map((column: any, index: number) => (\r\n                    <div key={index} className=\"flex justify-between items-center p-2 bg-gray-50 rounded\">\r\n                      <div>\r\n                        <span className=\"font-medium\">{column.name}</span>\r\n                        <span className=\"text-gray-500 ml-2\">({column.type})</span>\r\n                      </div>\r\n                      <div className=\"flex space-x-2\">\r\n                        {column.primary && <span className=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded\">PK</span>}\r\n                        {column.not_null && <span className=\"px-2 py-1 bg-red-100 text-red-800 text-xs rounded\">NOT NULL</span>}\r\n                        {column.foreign_key && <span className=\"px-2 py-1 bg-green-100 text-green-800 text-xs rounded\">FK</span>}\r\n                        {column.enum_values && <span className=\"px-2 py-1 bg-purple-100 text-purple-800 text-xs rounded\">ENUM</span>}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Foreign Key Beziehungen */}\r\n              {schemaData.columns.some((col: any) => col.foreign_key) && (\r\n                <div>\r\n                  <Typography variant=\"subtitle1\" className=\"font-semibold mb-2\">\r\n                    🔗 Foreign Key Beziehungen\r\n                  </Typography>\r\n                  <div className=\"space-y-1\">\r\n                    {schemaData.columns\r\n                      .filter((col: any) => col.foreign_key)\r\n                      .map((col: any, index: number) => (\r\n                        <div key={index} className=\"text-sm text-gray-600\">\r\n                          <code>{col.name}</code> → <code>{col.foreign_key}</code>\r\n                        </div>\r\n                      ))}\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* MCP Hooks Status */}\r\n      <Card className=\"mb-6\">\r\n        <CardContent>\r\n          <Typography variant=\"h6\" className=\"mb-4\">\r\n            🎣 MCP Hooks Status\r\n          </Typography>\r\n          \r\n          <div className=\"space-y-4\">\r\n            {/* useMCPForm Status */}\r\n            <div>\r\n              <Typography variant=\"subtitle1\" className=\"font-semibold\">\r\n                useMCPForm (invoices)\r\n              </Typography>\r\n              <div className=\"text-sm text-gray-600\">\r\n                <div>Schema geladen: {mcpForm.formState ? '✅' : '❌'}</div>\r\n                <div>Loading: {mcpForm.formState?.isSubmitting ? '🔄' : '✅'}</div>\r\n                <div>Error: {Object.keys(mcpForm.formState?.errors || {}).length > 0 ? 'Fehler vorhanden' : 'Keine'}</div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* useMCPTable Status */}\r\n            <div>\r\n              <Typography variant=\"subtitle1\" className=\"font-semibold\">\r\n                useMCPTable (invoices)\r\n              </Typography>\r\n              <div className=\"text-sm text-gray-600\">\r\n                <div>Schema geladen: {mcpTable.schema ? '✅' : '❌'}</div>\r\n                <div>Loading: {mcpTable.isLoading ? '🔄' : '✅'}</div>\r\n                <div>Error: {mcpTable.error ? mcpTable.error.message : 'Keine'}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Debug-Informationen */}\r\n      <Card>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" className=\"mb-4\">\r\n            🐛 Debug-Informationen\r\n          </Typography>\r\n          \r\n          <div className=\"space-y-2 text-sm\">\r\n            <div>MCP Server URL: http://localhost:8000</div>\r\n            <div>Supabase URL: https://ftybxxndembbfjdkcsuk.supabase.co</div>\r\n            <div>Cache Status: {JSON.stringify(mcpInjector.getCacheStatus())}</div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default TestMCPIntegration; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\bi\\BiDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused caught errors must match /^_/u.","line":128,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":128,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":206,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5788,5791],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5788,5791],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":258,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7885,7888],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7885,7888],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Typography, \r\n  Card, \r\n  Alert, \r\n  Chip,\r\n  CircularProgress,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper\r\n} from '@mui/material';\r\nimport { \r\n  Analytics as AnalyticsIcon,\r\n  TrendingUp as TrendingUpIcon,\r\n  Assessment as AssessmentIcon,\r\n  BarChart as BarChartIcon,\r\n  PieChart as PieChartIcon,\r\n  Timeline as TimelineIcon\r\n} from '@mui/icons-material';\r\n\r\ninterface BiMetric {\r\n  id: string;\r\n  name: string;\r\n  value: number;\r\n  change: number;\r\n  trend: 'up' | 'down' | 'stable';\r\n  unit: string;\r\n  category: string;\r\n}\r\n\r\ninterface BiReport {\r\n  id: string;\r\n  name: string;\r\n  type: 'sales' | 'inventory' | 'financial' | 'operational';\r\n  lastUpdated: Date;\r\n  status: 'ready' | 'processing' | 'error';\r\n  description: string;\r\n}\r\n\r\nconst BiDashboard: React.FC = () => {\r\n  const [metrics, setMetrics] = useState<BiMetric[]>([]);\r\n  const [reports, setReports] = useState<BiReport[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    loadBiData();\r\n  }, []);\r\n\r\n  const loadBiData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Simuliere API-Aufruf für BI-Daten\r\n      const mockMetrics: BiMetric[] = [\r\n        {\r\n          id: '1',\r\n          name: 'Umsatz (Monat)',\r\n          value: 125000,\r\n          change: 8.5,\r\n          trend: 'up',\r\n          unit: 'EUR',\r\n          category: 'sales'\r\n        },\r\n        {\r\n          id: '2',\r\n          name: 'Bestandswert',\r\n          value: 450000,\r\n          change: -2.1,\r\n          trend: 'down',\r\n          unit: 'EUR',\r\n          category: 'inventory'\r\n        },\r\n        {\r\n          id: '3',\r\n          name: 'Gewinnmarge',\r\n          value: 23.5,\r\n          change: 1.2,\r\n          trend: 'up',\r\n          unit: '%',\r\n          category: 'financial'\r\n        },\r\n        {\r\n          id: '4',\r\n          name: 'Kundenzufriedenheit',\r\n          value: 4.2,\r\n          change: 0.3,\r\n          trend: 'up',\r\n          unit: '/5',\r\n          category: 'operational'\r\n        }\r\n      ];\r\n\r\n      const mockReports: BiReport[] = [\r\n        {\r\n          id: '1',\r\n          name: 'Umsatzanalyse Q4',\r\n          type: 'sales',\r\n          lastUpdated: new Date(),\r\n          status: 'ready',\r\n          description: 'Detaillierte Umsatzanalyse für Q4 2024'\r\n        },\r\n        {\r\n          id: '2',\r\n          name: 'Bestandsoptimierung',\r\n          type: 'inventory',\r\n          lastUpdated: new Date(Date.now() - 86400000),\r\n          status: 'ready',\r\n          description: 'Bestandsanalyse und Optimierungsvorschläge'\r\n        },\r\n        {\r\n          id: '3',\r\n          name: 'Finanzbericht',\r\n          type: 'financial',\r\n          lastUpdated: new Date(),\r\n          status: 'processing',\r\n          description: 'Monatlicher Finanzbericht'\r\n        }\r\n      ];\r\n\r\n      setMetrics(mockMetrics);\r\n      setReports(mockReports);\r\n    } catch (err) {\r\n      setError('Fehler beim Laden der BI-Daten');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getTrendIcon = (trend: string) => {\r\n    switch (trend) {\r\n      case 'up': return <TrendingUpIcon className=\"text-green-600\" />;\r\n      case 'down': return <TrendingUpIcon className=\"text-red-600 transform rotate-180\" />;\r\n      default: return <TimelineIcon className=\"text-gray-600\" />;\r\n    }\r\n  };\r\n\r\n  const getTrendColor = (trend: string) => {\r\n    switch (trend) {\r\n      case 'up': return 'success';\r\n      case 'down': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getReportStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'ready': return 'success';\r\n      case 'processing': return 'warning';\r\n      case 'error': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh' }}>\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <Typography variant=\"h4\" gutterBottom className=\"flex items-center gap-2\">\r\n        <AnalyticsIcon className=\"text-blue-600\" />\r\n        Business Intelligence Dashboard\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" gutterBottom className=\"text-gray-600\">\r\n        Intelligente Analysen und Berichte für datengetriebene Entscheidungen\r\n      </Typography>\r\n\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Key Metrics */}\r\n      <Card sx={{ p: 3, mb: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom className=\"flex items-center gap-2\">\r\n          <AssessmentIcon className=\"text-green-600\" />\r\n          Key Performance Indicators\r\n        </Typography>\r\n        <Box className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n          {metrics.map((metric) => (\r\n            <Card key={metric.id} variant=\"outlined\" sx={{ p: 2 }}>\r\n              <Box className=\"flex items-center justify-between mb-2\">\r\n                <Typography variant=\"subtitle2\" className=\"text-gray-600\">\r\n                  {metric.name}\r\n                </Typography>\r\n                {getTrendIcon(metric.trend)}\r\n              </Box>\r\n              <Typography variant=\"h4\" className=\"font-bold\">\r\n                {metric.value.toLocaleString('de-DE')} {metric.unit}\r\n              </Typography>\r\n              <Box className=\"flex items-center gap-1 mt-1\">\r\n                <Chip\r\n                  label={`${metric.change > 0 ? '+' : ''}${metric.change}%`}\r\n                  size=\"small\"\r\n                  color={getTrendColor(metric.trend) as any}\r\n                />\r\n                <Typography variant=\"caption\" className=\"text-gray-500\">\r\n                  vs. Vormonat\r\n                </Typography>\r\n              </Box>\r\n            </Card>\r\n          ))}\r\n        </Box>\r\n      </Card>\r\n\r\n      {/* Reports Section */}\r\n      <Card sx={{ p: 3, mb: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom className=\"flex items-center gap-2\">\r\n          <BarChartIcon className=\"text-purple-600\" />\r\n          Verfügbare Berichte\r\n        </Typography>\r\n        <TableContainer component={Paper}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow className=\"bg-gray-50\">\r\n                <TableCell className=\"font-semibold\">Bericht</TableCell>\r\n                <TableCell className=\"font-semibold\">Typ</TableCell>\r\n                <TableCell className=\"font-semibold\">Status</TableCell>\r\n                <TableCell className=\"font-semibold\">Letzte Aktualisierung</TableCell>\r\n                <TableCell className=\"font-semibold\">Aktionen</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {reports.map((report) => (\r\n                <TableRow key={report.id} className=\"hover:bg-gray-50\">\r\n                  <TableCell>\r\n                    <div>\r\n                      <Typography variant=\"body1\" className=\"font-medium\">\r\n                        {report.name}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" className=\"text-gray-600\">\r\n                        {report.description}\r\n                      </Typography>\r\n                    </div>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Chip\r\n                      label={report.type}\r\n                      size=\"small\"\r\n                      variant=\"outlined\"\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Chip\r\n                      label={report.status}\r\n                      size=\"small\"\r\n                      color={getReportStatusColor(report.status) as any}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Typography variant=\"body2\">\r\n                      {report.lastUpdated.toLocaleString('de-DE')}\r\n                    </Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Box className=\"flex gap-1\">\r\n                      <Button\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        disabled={report.status !== 'ready'}\r\n                      >\r\n                        Anzeigen\r\n                      </Button>\r\n                      <Button\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                      >\r\n                        Exportieren\r\n                      </Button>\r\n                    </Box>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Card>\r\n\r\n      {/* Chart Placeholders */}\r\n      <Card sx={{ p: 3, mb: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom className=\"flex items-center gap-2\">\r\n          <PieChartIcon className=\"text-orange-600\" />\r\n          Visualisierungen\r\n        </Typography>\r\n        <Box className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\r\n          <Box className=\"h-64 bg-gray-100 rounded-lg flex items-center justify-center\">\r\n            <Typography variant=\"body1\" className=\"text-gray-500\">\r\n              Umsatz-Trend Chart\r\n            </Typography>\r\n          </Box>\r\n          <Box className=\"h-64 bg-gray-100 rounded-lg flex items-center justify-center\">\r\n            <Typography variant=\"body1\" className=\"text-gray-500\">\r\n              Bestands-Verteilung\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      </Card>\r\n\r\n      {/* Actions */}\r\n      <Box sx={{ display: 'flex', gap: 2 }}>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={loadBiData}\r\n          disabled={loading}\r\n        >\r\n          Daten aktualisieren\r\n        </Button>\r\n        <Button variant=\"outlined\">\r\n          Neuen Bericht erstellen\r\n        </Button>\r\n        <Button variant=\"outlined\">\r\n          Alle Berichte exportieren\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default BiDashboard; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\bi\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\crm\\CrmDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused caught errors must match /^_/u.","line":115,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":115,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":250,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":250,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8029,8032],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8029,8032],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":312,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":312,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10377,10380],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10377,10380],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Typography, \r\n  Card, \r\n  Alert, \r\n  Chip,\r\n  CircularProgress,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper\r\n} from '@mui/material';\r\nimport { \r\n  People as PeopleIcon,\r\n  Business as BusinessIcon,\r\n  Phone as PhoneIcon,\r\n  Email as EmailIcon,\r\n  Add as AddIcon,\r\n  Search as SearchIcon\r\n} from '@mui/icons-material';\r\n\r\ninterface Customer {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  phone: string;\r\n  company: string;\r\n  status: 'active' | 'inactive' | 'prospect';\r\n  lastContact: Date;\r\n  value: number;\r\n}\r\n\r\ninterface Contact {\r\n  id: string;\r\n  customerId: string;\r\n  type: 'email' | 'phone' | 'meeting';\r\n  date: Date;\r\n  description: string;\r\n  outcome: 'positive' | 'neutral' | 'negative';\r\n}\r\n\r\nconst CrmDashboard: React.FC = () => {\r\n  const [customers, setCustomers] = useState<Customer[]>([]);\r\n  const [contacts, setContacts] = useState<Contact[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    loadCrmData();\r\n  }, []);\r\n\r\n  const loadCrmData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Simuliere API-Aufruf für CRM-Daten\r\n      const mockCustomers: Customer[] = [\r\n        {\r\n          id: '1',\r\n          name: 'Max Mustermann',\r\n          email: 'max@example.com',\r\n          phone: '+49 123 456789',\r\n          company: 'Muster GmbH',\r\n          status: 'active',\r\n          lastContact: new Date(),\r\n          value: 25000\r\n        },\r\n        {\r\n          id: '2',\r\n          name: 'Anna Schmidt',\r\n          email: 'anna@schmidt.de',\r\n          phone: '+49 987 654321',\r\n          company: 'Schmidt AG',\r\n          status: 'prospect',\r\n          lastContact: new Date(Date.now() - 86400000),\r\n          value: 15000\r\n        },\r\n        {\r\n          id: '3',\r\n          name: 'Peter Weber',\r\n          email: 'peter@weber.com',\r\n          phone: '+49 555 123456',\r\n          company: 'Weber & Co',\r\n          status: 'active',\r\n          lastContact: new Date(Date.now() - 172800000),\r\n          value: 35000\r\n        }\r\n      ];\r\n\r\n      const mockContacts: Contact[] = [\r\n        {\r\n          id: '1',\r\n          customerId: '1',\r\n          type: 'email',\r\n          date: new Date(),\r\n          description: 'Angebot versendet',\r\n          outcome: 'positive'\r\n        },\r\n        {\r\n          id: '2',\r\n          customerId: '2',\r\n          type: 'phone',\r\n          date: new Date(Date.now() - 86400000),\r\n          description: 'Erstkontakt',\r\n          outcome: 'neutral'\r\n        }\r\n      ];\r\n\r\n      setCustomers(mockCustomers);\r\n      setContacts(mockContacts);\r\n    } catch (err) {\r\n      setError('Fehler beim Laden der CRM-Daten');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'active': return 'success';\r\n      case 'inactive': return 'default';\r\n      case 'prospect': return 'warning';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getOutcomeColor = (outcome: string) => {\r\n    switch (outcome) {\r\n      case 'positive': return 'success';\r\n      case 'neutral': return 'default';\r\n      case 'negative': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh' }}>\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <Typography variant=\"h4\" gutterBottom className=\"flex items-center gap-2\">\r\n        <PeopleIcon className=\"text-blue-600\" />\r\n        CRM Dashboard\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" gutterBottom className=\"text-gray-600\">\r\n        Kundenbeziehungsmanagement und Kontaktverwaltung\r\n      </Typography>\r\n\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Statistics */}\r\n      <Card sx={{ p: 3, mb: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Übersicht\r\n        </Typography>\r\n        <Box className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n          <Box className=\"text-center p-4 bg-blue-50 rounded-lg\">\r\n            <PeopleIcon className=\"text-blue-600 text-3xl mb-2\" />\r\n            <Typography variant=\"h6\" className=\"text-blue-800\">Kunden</Typography>\r\n            <Typography variant=\"h4\" className=\"text-blue-600\">\r\n              {customers.length}\r\n            </Typography>\r\n          </Box>\r\n          <Box className=\"text-center p-4 bg-green-50 rounded-lg\">\r\n            <BusinessIcon className=\"text-green-600 text-3xl mb-2\" />\r\n            <Typography variant=\"h6\" className=\"text-green-800\">Aktiv</Typography>\r\n            <Typography variant=\"h4\" className=\"text-green-600\">\r\n              {customers.filter(c => c.status === 'active').length}\r\n            </Typography>\r\n          </Box>\r\n          <Box className=\"text-center p-4 bg-orange-50 rounded-lg\">\r\n            <PhoneIcon className=\"text-orange-600 text-3xl mb-2\" />\r\n            <Typography variant=\"h6\" className=\"text-orange-800\">Kontakte</Typography>\r\n            <Typography variant=\"h4\" className=\"text-orange-600\">\r\n              {contacts.length}\r\n            </Typography>\r\n          </Box>\r\n          <Box className=\"text-center p-4 bg-purple-50 rounded-lg\">\r\n            <EmailIcon className=\"text-purple-600 text-3xl mb-2\" />\r\n            <Typography variant=\"h6\" className=\"text-purple-800\">Wert</Typography>\r\n            <Typography variant=\"h4\" className=\"text-purple-600\">\r\n              {customers.reduce((sum, c) => sum + c.value, 0).toLocaleString('de-DE')}€\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      </Card>\r\n\r\n      {/* Customers Table */}\r\n      <Card sx={{ p: 3, mb: 3 }}>\r\n        <Box className=\"flex justify-between items-center mb-4\">\r\n          <Typography variant=\"h6\">\r\n            Kunden\r\n          </Typography>\r\n          <Button\r\n            variant=\"contained\"\r\n            startIcon={<AddIcon />}\r\n          >\r\n            Neuer Kunde\r\n          </Button>\r\n        </Box>\r\n        <TableContainer component={Paper}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow className=\"bg-gray-50\">\r\n                <TableCell className=\"font-semibold\">Name</TableCell>\r\n                <TableCell className=\"font-semibold\">Firma</TableCell>\r\n                <TableCell className=\"font-semibold\">Kontakt</TableCell>\r\n                <TableCell className=\"font-semibold\">Status</TableCell>\r\n                <TableCell className=\"font-semibold\">Letzter Kontakt</TableCell>\r\n                <TableCell className=\"font-semibold\">Wert</TableCell>\r\n                <TableCell className=\"font-semibold\">Aktionen</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {customers.map((customer) => (\r\n                <TableRow key={customer.id} className=\"hover:bg-gray-50\">\r\n                  <TableCell>\r\n                    <Typography variant=\"body1\" className=\"font-medium\">\r\n                      {customer.name}\r\n                    </Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Typography variant=\"body2\">{customer.company}</Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <div>\r\n                      <Typography variant=\"body2\">{customer.email}</Typography>\r\n                      <Typography variant=\"body2\" className=\"text-gray-600\">\r\n                        {customer.phone}\r\n                      </Typography>\r\n                    </div>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Chip\r\n                      label={customer.status}\r\n                      size=\"small\"\r\n                      color={getStatusColor(customer.status) as any}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Typography variant=\"body2\">\r\n                      {customer.lastContact.toLocaleDateString('de-DE')}\r\n                    </Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Typography variant=\"body2\" className=\"font-medium\">\r\n                      {customer.value.toLocaleString('de-DE')}€\r\n                    </Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Box className=\"flex gap-1\">\r\n                      <Button\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                      >\r\n                        Bearbeiten\r\n                      </Button>\r\n                      <Button\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                      >\r\n                        Kontakt\r\n                      </Button>\r\n                    </Box>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Card>\r\n\r\n      {/* Recent Contacts */}\r\n      <Card sx={{ p: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Letzte Kontakte\r\n        </Typography>\r\n        <Box className=\"space-y-2\">\r\n          {contacts.map((contact) => (\r\n            <Box key={contact.id} className=\"border rounded p-3\">\r\n              <Box className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <Typography variant=\"body1\" className=\"font-medium\">\r\n                    {customers.find(c => c.id === contact.customerId)?.name}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" className=\"text-gray-600\">\r\n                    {contact.description}\r\n                  </Typography>\r\n                </div>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <Chip\r\n                    label={contact.type}\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                  />\r\n                  <Chip\r\n                    label={contact.outcome}\r\n                    size=\"small\"\r\n                    color={getOutcomeColor(contact.outcome) as any}\r\n                  />\r\n                  <Typography variant=\"caption\" className=\"text-gray-500\">\r\n                    {contact.date.toLocaleDateString('de-DE')}\r\n                  </Typography>\r\n                </div>\r\n              </Box>\r\n            </Box>\r\n          ))}\r\n        </Box>\r\n      </Card>\r\n\r\n      {/* Actions */}\r\n      <Box sx={{ mt: 3, display: 'flex', gap: 2 }}>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={loadCrmData}\r\n          disabled={loading}\r\n        >\r\n          Daten aktualisieren\r\n        </Button>\r\n        <Button variant=\"outlined\" startIcon={<SearchIcon />}>\r\n          Kunden suchen\r\n        </Button>\r\n        <Button variant=\"outlined\">\r\n          Bericht exportieren\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CrmDashboard; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\crm\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\fibu\\FibuDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused caught errors must match /^_/u.","line":126,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":267,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":267,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8607,8610],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8607,8610],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":342,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":342,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11844,11847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11844,11847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":354,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":354,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12338,12341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12338,12341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Typography, \r\n  Card, \r\n  Alert, \r\n  Chip,\r\n  CircularProgress,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper\r\n} from '@mui/material';\r\nimport { \r\n  AccountBalance as AccountBalanceIcon,\r\n  Receipt as ReceiptIcon,\r\n  Payment as PaymentIcon,\r\n  TrendingUp as TrendingUpIcon,\r\n  Add as AddIcon,\r\n  Download as DownloadIcon\r\n} from '@mui/icons-material';\r\n\r\ninterface FinancialAccount {\r\n  id: string;\r\n  name: string;\r\n  number: string;\r\n  type: 'asset' | 'liability' | 'equity' | 'revenue' | 'expense';\r\n  balance: number;\r\n  currency: string;\r\n  status: 'active' | 'inactive';\r\n}\r\n\r\ninterface Transaction {\r\n  id: string;\r\n  date: Date;\r\n  description: string;\r\n  amount: number;\r\n  type: 'debit' | 'credit';\r\n  accountId: string;\r\n  reference: string;\r\n  status: 'posted' | 'pending' | 'cancelled';\r\n}\r\n\r\nconst FibuDashboard: React.FC = () => {\r\n  const [accounts, setAccounts] = useState<FinancialAccount[]>([]);\r\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    loadFibuData();\r\n  }, []);\r\n\r\n  const loadFibuData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Simuliere API-Aufruf für FiBu-Daten\r\n      const mockAccounts: FinancialAccount[] = [\r\n        {\r\n          id: '1',\r\n          name: 'Bankkonto',\r\n          number: '1000',\r\n          type: 'asset',\r\n          balance: 125000,\r\n          currency: 'EUR',\r\n          status: 'active'\r\n        },\r\n        {\r\n          id: '2',\r\n          name: 'Verbindlichkeiten',\r\n          number: '2000',\r\n          type: 'liability',\r\n          balance: -45000,\r\n          currency: 'EUR',\r\n          status: 'active'\r\n        },\r\n        {\r\n          id: '3',\r\n          name: 'Umsatzerlöse',\r\n          number: '4000',\r\n          type: 'revenue',\r\n          balance: 250000,\r\n          currency: 'EUR',\r\n          status: 'active'\r\n        },\r\n        {\r\n          id: '4',\r\n          name: 'Betriebsausgaben',\r\n          number: '5000',\r\n          type: 'expense',\r\n          balance: -180000,\r\n          currency: 'EUR',\r\n          status: 'active'\r\n        }\r\n      ];\r\n\r\n      const mockTransactions: Transaction[] = [\r\n        {\r\n          id: '1',\r\n          date: new Date(),\r\n          description: 'Kundenzahlung',\r\n          amount: 5000,\r\n          type: 'credit',\r\n          accountId: '1',\r\n          reference: 'RE-2024-001',\r\n          status: 'posted'\r\n        },\r\n        {\r\n          id: '2',\r\n          date: new Date(Date.now() - 86400000),\r\n          description: 'Lieferantenrechnung',\r\n          amount: 2500,\r\n          type: 'debit',\r\n          accountId: '2',\r\n          reference: 'LI-2024-001',\r\n          status: 'posted'\r\n        }\r\n      ];\r\n\r\n      setAccounts(mockAccounts);\r\n      setTransactions(mockTransactions);\r\n    } catch (err) {\r\n      setError('Fehler beim Laden der FiBu-Daten');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getAccountTypeColor = (type: string) => {\r\n    switch (type) {\r\n      case 'asset': return 'success';\r\n      case 'liability': return 'error';\r\n      case 'equity': return 'primary';\r\n      case 'revenue': return 'success';\r\n      case 'expense': return 'warning';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getTransactionTypeColor = (type: string) => {\r\n    switch (type) {\r\n      case 'credit': return 'success';\r\n      case 'debit': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'posted': return 'success';\r\n      case 'pending': return 'warning';\r\n      case 'cancelled': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const calculateTotalBalance = () => {\r\n    return accounts.reduce((sum, account) => sum + account.balance, 0);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh' }}>\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <Typography variant=\"h4\" gutterBottom className=\"flex items-center gap-2\">\r\n        <AccountBalanceIcon className=\"text-green-600\" />\r\n        Finanzbuchhaltung Dashboard\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" gutterBottom className=\"text-gray-600\">\r\n        Finanzverwaltung und Buchhaltung\r\n      </Typography>\r\n\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Financial Overview */}\r\n      <Card sx={{ p: 3, mb: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Finanzübersicht\r\n        </Typography>\r\n        <Box className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n          <Box className=\"text-center p-4 bg-green-50 rounded-lg\">\r\n            <AccountBalanceIcon className=\"text-green-600 text-3xl mb-2\" />\r\n            <Typography variant=\"h6\" className=\"text-green-800\">Gesamtbilanz</Typography>\r\n            <Typography variant=\"h4\" className=\"text-green-600\">\r\n              {calculateTotalBalance().toLocaleString('de-DE')}€\r\n            </Typography>\r\n          </Box>\r\n          <Box className=\"text-center p-4 bg-blue-50 rounded-lg\">\r\n            <ReceiptIcon className=\"text-blue-600 text-3xl mb-2\" />\r\n            <Typography variant=\"h6\" className=\"text-blue-800\">Aktiva</Typography>\r\n            <Typography variant=\"h4\" className=\"text-blue-600\">\r\n              {accounts.filter(a => a.type === 'asset').reduce((sum, a) => sum + a.balance, 0).toLocaleString('de-DE')}€\r\n            </Typography>\r\n          </Box>\r\n          <Box className=\"text-center p-4 bg-red-50 rounded-lg\">\r\n            <PaymentIcon className=\"text-red-600 text-3xl mb-2\" />\r\n            <Typography variant=\"h6\" className=\"text-red-800\">Passiva</Typography>\r\n            <Typography variant=\"h4\" className=\"text-red-600\">\r\n              {Math.abs(accounts.filter(a => a.type === 'liability').reduce((sum, a) => sum + a.balance, 0)).toLocaleString('de-DE')}€\r\n            </Typography>\r\n          </Box>\r\n          <Box className=\"text-center p-4 bg-purple-50 rounded-lg\">\r\n            <TrendingUpIcon className=\"text-purple-600 text-3xl mb-2\" />\r\n            <Typography variant=\"h6\" className=\"text-purple-800\">Gewinn</Typography>\r\n            <Typography variant=\"h4\" className=\"text-purple-600\">\r\n              {(accounts.filter(a => a.type === 'revenue').reduce((sum, a) => sum + a.balance, 0) + \r\n                accounts.filter(a => a.type === 'expense').reduce((sum, a) => sum + a.balance, 0)).toLocaleString('de-DE')}€\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      </Card>\r\n\r\n      {/* Accounts Table */}\r\n      <Card sx={{ p: 3, mb: 3 }}>\r\n        <Box className=\"flex justify-between items-center mb-4\">\r\n          <Typography variant=\"h6\">\r\n            Konten\r\n          </Typography>\r\n          <Button\r\n            variant=\"contained\"\r\n            startIcon={<AddIcon />}\r\n          >\r\n            Neues Konto\r\n          </Button>\r\n        </Box>\r\n        <TableContainer component={Paper}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow className=\"bg-gray-50\">\r\n                <TableCell className=\"font-semibold\">Kontonummer</TableCell>\r\n                <TableCell className=\"font-semibold\">Kontoname</TableCell>\r\n                <TableCell className=\"font-semibold\">Typ</TableCell>\r\n                <TableCell className=\"font-semibold\">Saldo</TableCell>\r\n                <TableCell className=\"font-semibold\">Status</TableCell>\r\n                <TableCell className=\"font-semibold\">Aktionen</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {accounts.map((account) => (\r\n                <TableRow key={account.id} className=\"hover:bg-gray-50\">\r\n                  <TableCell>\r\n                    <Typography variant=\"body1\" className=\"font-medium\">\r\n                      {account.number}\r\n                    </Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Typography variant=\"body2\">{account.name}</Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Chip\r\n                      label={account.type}\r\n                      size=\"small\"\r\n                      color={getAccountTypeColor(account.type) as any}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Typography variant=\"body2\" className={`font-medium ${account.balance >= 0 ? 'text-green-600' : 'text-red-600'}`}>\r\n                      {account.balance.toLocaleString('de-DE')} {account.currency}\r\n                    </Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Chip\r\n                      label={account.status}\r\n                      size=\"small\"\r\n                      color={account.status === 'active' ? 'success' : 'default'}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Box className=\"flex gap-1\">\r\n                      <Button\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                      >\r\n                        Details\r\n                      </Button>\r\n                      <Button\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                      >\r\n                        Buchungen\r\n                      </Button>\r\n                    </Box>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Card>\r\n\r\n      {/* Recent Transactions */}\r\n      <Card sx={{ p: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Letzte Buchungen\r\n        </Typography>\r\n        <TableContainer component={Paper}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow className=\"bg-gray-50\">\r\n                <TableCell className=\"font-semibold\">Datum</TableCell>\r\n                <TableCell className=\"font-semibold\">Beschreibung</TableCell>\r\n                <TableCell className=\"font-semibold\">Betrag</TableCell>\r\n                <TableCell className=\"font-semibold\">Typ</TableCell>\r\n                <TableCell className=\"font-semibold\">Referenz</TableCell>\r\n                <TableCell className=\"font-semibold\">Status</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {transactions.map((transaction) => (\r\n                <TableRow key={transaction.id} className=\"hover:bg-gray-50\">\r\n                  <TableCell>\r\n                    <Typography variant=\"body2\">\r\n                      {transaction.date.toLocaleDateString('de-DE')}\r\n                    </Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Typography variant=\"body2\">{transaction.description}</Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Typography variant=\"body2\" className={`font-medium ${transaction.type === 'credit' ? 'text-green-600' : 'text-red-600'}`}>\r\n                      {transaction.type === 'credit' ? '+' : '-'}{transaction.amount.toLocaleString('de-DE')}€\r\n                    </Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Chip\r\n                      label={transaction.type}\r\n                      size=\"small\"\r\n                      color={getTransactionTypeColor(transaction.type) as any}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Typography variant=\"body2\" className=\"text-gray-600\">\r\n                      {transaction.reference}\r\n                    </Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Chip\r\n                      label={transaction.status}\r\n                      size=\"small\"\r\n                      color={getStatusColor(transaction.status) as any}\r\n                    />\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Card>\r\n\r\n      {/* Actions */}\r\n      <Box sx={{ mt: 3, display: 'flex', gap: 2 }}>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={loadFibuData}\r\n          disabled={loading}\r\n        >\r\n          Daten aktualisieren\r\n        </Button>\r\n        <Button variant=\"outlined\" startIcon={<AddIcon />}>\r\n          Neue Buchung\r\n        </Button>\r\n        <Button variant=\"outlined\" startIcon={<DownloadIcon />}>\r\n          Bilanz exportieren\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default FibuDashboard; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\fibu\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\lager\\LagerDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused caught errors must match /^_/u.","line":131,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":131,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":288,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":288,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9417,9420],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9417,9420],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":344,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11640,11643],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11640,11643],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":367,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":367,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12735,12738],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12735,12738],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Typography, \r\n  Card, \r\n  Alert, \r\n  Chip,\r\n  CircularProgress,\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper\r\n} from '@mui/material';\r\nimport { \r\n  Inventory as InventoryIcon,\r\n  LocalShipping as LocalShippingIcon,\r\n  Warehouse as WarehouseIcon,\r\n  TrendingUp as TrendingUpIcon,\r\n  Add as AddIcon,\r\n  Search as SearchIcon\r\n} from '@mui/icons-material';\r\n\r\ninterface InventoryItem {\r\n  id: string;\r\n  name: string;\r\n  sku: string;\r\n  category: string;\r\n  quantity: number;\r\n  minQuantity: number;\r\n  maxQuantity: number;\r\n  location: string;\r\n  status: 'in_stock' | 'low_stock' | 'out_of_stock';\r\n  lastUpdated: Date;\r\n}\r\n\r\ninterface WarehouseLocation {\r\n  id: string;\r\n  name: string;\r\n  type: 'storage' | 'picking' | 'shipping';\r\n  capacity: number;\r\n  used: number;\r\n  status: 'active' | 'maintenance' | 'inactive';\r\n}\r\n\r\nconst LagerDashboard: React.FC = () => {\r\n  const [inventory, setInventory] = useState<InventoryItem[]>([]);\r\n  const [locations, setLocations] = useState<WarehouseLocation[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    loadLagerData();\r\n  }, []);\r\n\r\n  const loadLagerData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Simuliere API-Aufruf für Lager-Daten\r\n      const mockInventory: InventoryItem[] = [\r\n        {\r\n          id: '1',\r\n          name: 'Laptop Dell XPS 13',\r\n          sku: 'LAP-DELL-XPS13',\r\n          category: 'Elektronik',\r\n          quantity: 25,\r\n          minQuantity: 10,\r\n          maxQuantity: 100,\r\n          location: 'A-01-01',\r\n          status: 'in_stock',\r\n          lastUpdated: new Date()\r\n        },\r\n        {\r\n          id: '2',\r\n          name: 'USB-C Kabel',\r\n          sku: 'CAB-USB-C-1M',\r\n          category: 'Zubehör',\r\n          quantity: 8,\r\n          minQuantity: 15,\r\n          maxQuantity: 200,\r\n          location: 'B-02-03',\r\n          status: 'low_stock',\r\n          lastUpdated: new Date(Date.now() - 86400000)\r\n        },\r\n        {\r\n          id: '3',\r\n          name: 'Wireless Mouse',\r\n          sku: 'MOU-WIRELESS-LOGI',\r\n          category: 'Zubehör',\r\n          quantity: 0,\r\n          minQuantity: 5,\r\n          maxQuantity: 50,\r\n          location: 'B-02-04',\r\n          status: 'out_of_stock',\r\n          lastUpdated: new Date(Date.now() - 172800000)\r\n        }\r\n      ];\r\n\r\n      const mockLocations: WarehouseLocation[] = [\r\n        {\r\n          id: '1',\r\n          name: 'Lager A - Regal 1',\r\n          type: 'storage',\r\n          capacity: 1000,\r\n          used: 750,\r\n          status: 'active'\r\n        },\r\n        {\r\n          id: '2',\r\n          name: 'Kommissionierung Zone',\r\n          type: 'picking',\r\n          capacity: 500,\r\n          used: 300,\r\n          status: 'active'\r\n        },\r\n        {\r\n          id: '3',\r\n          name: 'Versand Zone',\r\n          type: 'shipping',\r\n          capacity: 200,\r\n          used: 150,\r\n          status: 'active'\r\n        }\r\n      ];\r\n\r\n      setInventory(mockInventory);\r\n      setLocations(mockLocations);\r\n    } catch (err) {\r\n      setError('Fehler beim Laden der Lager-Daten');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'in_stock': return 'success';\r\n      case 'low_stock': return 'warning';\r\n      case 'out_of_stock': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getLocationTypeColor = (type: string) => {\r\n    switch (type) {\r\n      case 'storage': return 'primary';\r\n      case 'picking': return 'secondary';\r\n      case 'shipping': return 'success';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getLocationStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'active': return 'success';\r\n      case 'maintenance': return 'warning';\r\n      case 'inactive': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const calculateUtilization = (used: number, capacity: number) => {\r\n    return Math.round((used / capacity) * 100);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh' }}>\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <Typography variant=\"h4\" gutterBottom className=\"flex items-center gap-2\">\r\n        <WarehouseIcon className=\"text-blue-600\" />\r\n        Lager Dashboard\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" gutterBottom className=\"text-gray-600\">\r\n        Lagerverwaltung und Bestandsüberwachung\r\n      </Typography>\r\n\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Inventory Overview */}\r\n      <Card sx={{ p: 3, mb: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Bestandsübersicht\r\n        </Typography>\r\n        <Box className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n          <Box className=\"text-center p-4 bg-blue-50 rounded-lg\">\r\n            <InventoryIcon className=\"text-blue-600 text-3xl mb-2\" />\r\n            <Typography variant=\"h6\" className=\"text-blue-800\">Artikel</Typography>\r\n            <Typography variant=\"h4\" className=\"text-blue-600\">\r\n              {inventory.length}\r\n            </Typography>\r\n          </Box>\r\n          <Box className=\"text-center p-4 bg-green-50 rounded-lg\">\r\n            <TrendingUpIcon className=\"text-green-600 text-3xl mb-2\" />\r\n            <Typography variant=\"h6\" className=\"text-green-800\">Verfügbar</Typography>\r\n            <Typography variant=\"h4\" className=\"text-green-600\">\r\n              {inventory.filter(item => item.status === 'in_stock').length}\r\n            </Typography>\r\n          </Box>\r\n          <Box className=\"text-center p-4 bg-orange-50 rounded-lg\">\r\n            <LocalShippingIcon className=\"text-orange-600 text-3xl mb-2\" />\r\n            <Typography variant=\"h6\" className=\"text-orange-800\">Niedrig</Typography>\r\n            <Typography variant=\"h4\" className=\"text-orange-600\">\r\n              {inventory.filter(item => item.status === 'low_stock').length}\r\n            </Typography>\r\n          </Box>\r\n          <Box className=\"text-center p-4 bg-red-50 rounded-lg\">\r\n            <InventoryIcon className=\"text-red-600 text-3xl mb-2\" />\r\n            <Typography variant=\"h6\" className=\"text-red-800\">Ausverkauft</Typography>\r\n            <Typography variant=\"h4\" className=\"text-red-600\">\r\n              {inventory.filter(item => item.status === 'out_of_stock').length}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      </Card>\r\n\r\n      {/* Inventory Table */}\r\n      <Card sx={{ p: 3, mb: 3 }}>\r\n        <Box className=\"flex justify-between items-center mb-4\">\r\n          <Typography variant=\"h6\">\r\n            Bestand\r\n          </Typography>\r\n          <Button\r\n            variant=\"contained\"\r\n            startIcon={<AddIcon />}\r\n          >\r\n            Neuer Artikel\r\n          </Button>\r\n        </Box>\r\n        <TableContainer component={Paper}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow className=\"bg-gray-50\">\r\n                <TableCell className=\"font-semibold\">SKU</TableCell>\r\n                <TableCell className=\"font-semibold\">Name</TableCell>\r\n                <TableCell className=\"font-semibold\">Kategorie</TableCell>\r\n                <TableCell className=\"font-semibold\">Menge</TableCell>\r\n                <TableCell className=\"font-semibold\">Lagerplatz</TableCell>\r\n                <TableCell className=\"font-semibold\">Status</TableCell>\r\n                <TableCell className=\"font-semibold\">Aktionen</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {inventory.map((item) => (\r\n                <TableRow key={item.id} className=\"hover:bg-gray-50\">\r\n                  <TableCell>\r\n                    <Typography variant=\"body1\" className=\"font-medium\">\r\n                      {item.sku}\r\n                    </Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Typography variant=\"body2\">{item.name}</Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Typography variant=\"body2\">{item.category}</Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <div>\r\n                      <Typography variant=\"body2\" className=\"font-medium\">\r\n                        {item.quantity}\r\n                      </Typography>\r\n                      <Typography variant=\"caption\" className=\"text-gray-600\">\r\n                        Min: {item.minQuantity} | Max: {item.maxQuantity}\r\n                      </Typography>\r\n                    </div>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Typography variant=\"body2\">{item.location}</Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Chip\r\n                      label={item.status === 'in_stock' ? 'Verfügbar' : \r\n                             item.status === 'low_stock' ? 'Niedrig' : 'Ausverkauft'}\r\n                      size=\"small\"\r\n                      color={getStatusColor(item.status) as any}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Box className=\"flex gap-1\">\r\n                      <Button\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                      >\r\n                        Details\r\n                      </Button>\r\n                      <Button\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                      >\r\n                        Bewegung\r\n                      </Button>\r\n                    </Box>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Card>\r\n\r\n      {/* Warehouse Locations */}\r\n      <Card sx={{ p: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Lagerplätze\r\n        </Typography>\r\n        <TableContainer component={Paper}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow className=\"bg-gray-50\">\r\n                <TableCell className=\"font-semibold\">Name</TableCell>\r\n                <TableCell className=\"font-semibold\">Typ</TableCell>\r\n                <TableCell className=\"font-semibold\">Auslastung</TableCell>\r\n                <TableCell className=\"font-semibold\">Kapazität</TableCell>\r\n                <TableCell className=\"font-semibold\">Status</TableCell>\r\n                <TableCell className=\"font-semibold\">Aktionen</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {locations.map((location) => (\r\n                <TableRow key={location.id} className=\"hover:bg-gray-50\">\r\n                  <TableCell>\r\n                    <Typography variant=\"body1\" className=\"font-medium\">\r\n                      {location.name}\r\n                    </Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Chip\r\n                      label={location.type === 'storage' ? 'Lagerung' :\r\n                             location.type === 'picking' ? 'Kommissionierung' : 'Versand'}\r\n                      size=\"small\"\r\n                      color={getLocationTypeColor(location.type) as any}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <div>\r\n                      <Typography variant=\"body2\" className=\"font-medium\">\r\n                        {location.used} / {location.capacity}\r\n                      </Typography>\r\n                      <Typography variant=\"caption\" className=\"text-gray-600\">\r\n                        {calculateUtilization(location.used, location.capacity)}% ausgelastet\r\n                      </Typography>\r\n                    </div>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Typography variant=\"body2\">\r\n                      {location.capacity} Einheiten\r\n                    </Typography>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Chip\r\n                      label={location.status === 'active' ? 'Aktiv' :\r\n                             location.status === 'maintenance' ? 'Wartung' : 'Inaktiv'}\r\n                      size=\"small\"\r\n                      color={getLocationStatusColor(location.status) as any}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Box className=\"flex gap-1\">\r\n                      <Button\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                      >\r\n                        Details\r\n                      </Button>\r\n                      <Button\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                      >\r\n                        Inventur\r\n                      </Button>\r\n                    </Box>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Card>\r\n\r\n      {/* Actions */}\r\n      <Box sx={{ mt: 3, display: 'flex', gap: 2 }}>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={loadLagerData}\r\n          disabled={loading}\r\n        >\r\n          Daten aktualisieren\r\n        </Button>\r\n        <Button variant=\"outlined\" startIcon={<SearchIcon />}>\r\n          Artikel suchen\r\n        </Button>\r\n        <Button variant=\"outlined\">\r\n          Inventur starten\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default LagerDashboard; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\lager\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\WarenwirtschaftDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\components\\Angebote.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\components\\Auftraege.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\components\\Bestandsauswertungen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\components\\Betriebsauswertungen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\components\\CrmHandel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\components\\Dokumentenmanagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\components\\EdiSchnittstellen.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":161,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5674,5677],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5674,5677],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { \r\n  Card, \r\n  Typography, \r\n  Button, \r\n  Alert,\r\n  Chip,\r\n  IconButton,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow\r\n} from '@mui/material';\r\nimport { \r\n  Send as SendIcon\r\n} from '@mui/icons-material';\r\nimport { useAgentApi } from '../../../hooks/useAgentApi';\r\n\r\nconst EdiSchnittstellen: React.FC = () => {\r\n  const [ediMessages] = useState([\r\n    {\r\n      id: '1',\r\n      typ: 'ORDERS',\r\n      partner: 'Lieferant A',\r\n      datum: new Date(),\r\n      status: 'gesendet',\r\n      inhalt: 'Bestellung für Artikel 123'\r\n    },\r\n    {\r\n      id: '2',\r\n      typ: 'DESADV',\r\n      partner: 'Lieferant B',\r\n      datum: new Date(),\r\n      status: 'empfangen',\r\n      inhalt: 'Lieferschein für Artikel 456'\r\n    }\r\n  ]);\r\n\r\n  const { getAgentSuggestions } = useAgentApi();\r\n\r\n  const handleSendEdi = async (messageId: string) => {\r\n    const suggestions = await getAgentSuggestions(\r\n      'EDI-Nachricht ' + messageId + ' wurde gesendet. Partner wurde benachrichtigt.'\r\n    );\r\n    console.log('Agent-Vorschläge für EDI-Send:', suggestions);\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'gesendet': return 'success';\r\n      case 'empfangen': return 'info';\r\n      case 'fehler': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6 space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <Typography variant=\"h4\" className=\"text-gray-900 font-bold\">\r\n            EDI-Schnittstellen\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\" className=\"text-gray-600\">\r\n            Electronic Data Interchange für automatisierte Geschäftsprozesse\r\n          </Typography>\r\n        </div>\r\n        {/* TrustIndicator removed as per edit hint */}\r\n      </div>\r\n\r\n      {/* EDI-Info */}\r\n      <Alert severity=\"info\">\r\n        <Typography variant=\"body1\" className=\"font-medium\">\r\n          EDI-Integration aktiv\r\n        </Typography>\r\n        <Typography variant=\"body2\">\r\n          Automatisierter Datenaustausch mit Lieferanten und Kunden. \r\n          ORDERS, DESADV, INVOIC und weitere Nachrichtentypen verfügbar.\r\n        </Typography>\r\n      </Alert>\r\n\r\n      {/* Statistik-Karten */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\r\n        <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\r\n          <SendIcon className=\"text-blue-600 text-3xl mb-2 mx-auto\" />\r\n          <Typography variant=\"h6\" className=\"text-blue-800\">Gesendet</Typography>\r\n          <Typography variant=\"h4\" className=\"text-blue-600\">\r\n            {ediMessages.filter(m => m.status === 'gesendet').length}\r\n          </Typography>\r\n        </div>\r\n        <div className=\"text-center p-4 bg-green-50 rounded-lg\">\r\n          <SendIcon className=\"text-green-600 text-3xl mb-2 mx-auto\" />\r\n          <Typography variant=\"h6\" className=\"text-green-800\">Empfangen</Typography>\r\n          <Typography variant=\"h4\" className=\"text-green-600\">\r\n            {ediMessages.filter(m => m.status === 'empfangen').length}\r\n          </Typography>\r\n        </div>\r\n        <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\r\n          <SendIcon className=\"text-orange-600 text-3xl mb-2 mx-auto\" />\r\n          <Typography variant=\"h6\" className=\"text-orange-800\">Verarbeitet</Typography>\r\n          <Typography variant=\"h4\" className=\"text-orange-600\">\r\n            {ediMessages.filter(m => m.status === 'verarbeitet').length}\r\n          </Typography>\r\n        </div>\r\n        <div className=\"text-center p-4 bg-red-50 rounded-lg\">\r\n          <SendIcon className=\"text-red-600 text-3xl mb-2 mx-auto\" />\r\n          <Typography variant=\"h6\" className=\"text-red-800\">Fehler</Typography>\r\n          <Typography variant=\"h4\" className=\"text-red-600\">\r\n            {ediMessages.filter(m => m.status === 'fehler').length}\r\n          </Typography>\r\n        </div>\r\n      </div>\r\n\r\n      {/* EDI-Nachrichten */}\r\n      <Card>\r\n        <div className=\"p-6\">\r\n          <div className=\"flex justify-between items-center mb-4\">\r\n            <Typography variant=\"h6\" className=\"text-gray-900\">\r\n              EDI-Nachrichten\r\n            </Typography>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<SendIcon />}\r\n            >\r\n              Neue Nachricht\r\n            </Button>\r\n          </div>\r\n          \r\n          <TableContainer>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Typ</TableCell>\r\n                  <TableCell>Partner</TableCell>\r\n                  <TableCell>Datum</TableCell>\r\n                  <TableCell>Status</TableCell>\r\n                  <TableCell>Inhalt</TableCell>\r\n                  <TableCell>Aktionen</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {ediMessages.map((message) => (\r\n                  <TableRow key={message.id}>\r\n                    <TableCell>\r\n                      <Chip\r\n                        label={message.typ}\r\n                        color=\"primary\"\r\n                        size=\"small\"\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>{message.partner}</TableCell>\r\n                    <TableCell>\r\n                      {message.datum.toLocaleDateString('de-DE')}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Chip\r\n                        label={message.status}\r\n                        color={getStatusColor(message.status) as any}\r\n                        size=\"small\"\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>{message.inhalt}</TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex space-x-1\">\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          onClick={() => handleSendEdi(message.id)}\r\n                          color=\"primary\"\r\n                        >\r\n                          <SendIcon />\r\n                        </IconButton>\r\n                      </div>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EdiSchnittstellen; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\components\\Eingangsrechnungen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\components\\EmailIntegration.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\components\\Kassensystem.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":236,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8093,8096],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8093,8096],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":258,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9102,9105],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9102,9105],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { \r\n  Card, \r\n  Typography, \r\n  Button, \r\n  TextField, \r\n  Alert,\r\n  Chip,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper\r\n} from '@mui/material';\r\nimport { \r\n  PointOfSale as PointOfSaleIcon,\r\n  Add as AddIcon,\r\n  Refresh as RefreshIcon,\r\n  CheckCircle as CheckCircleIcon,\r\n  Warning as WarningIcon,\r\n  Error as ErrorIcon\r\n} from '@mui/icons-material';\r\nimport { useAgentApi } from '../../../hooks/useAgentApi';\r\nimport type { Kassensystem } from '../types/WarenwirtschaftTypes';\r\n\r\nconst Kassensystem: React.FC = () => {\r\n  const [kassen] = useState<Kassensystem[]>([\r\n    {\r\n      id: '1',\r\n      kassenId: 'KASSE-001',\r\n      name: 'Hauptkasse',\r\n      status: 'aktiv',\r\n      tseAktiv: true,\r\n      letzterTest: new Date(),\r\n      tagesumsatz: 1250.50,\r\n      transaktionen: 45,\r\n      fehler: 0,\r\n      compliance: 'konform'\r\n    },\r\n    {\r\n      id: '2',\r\n      kassenId: 'KASSE-002',\r\n      name: 'Nebenkasse',\r\n      status: 'aktiv',\r\n      tseAktiv: true,\r\n      letzterTest: new Date(),\r\n      tagesumsatz: 890.30,\r\n      transaktionen: 32,\r\n      fehler: 1,\r\n      compliance: 'warnung'\r\n    }\r\n  ]);\r\n\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    kassenId: '',\r\n    name: '',\r\n    tseAktiv: false\r\n  });\r\n\r\n  const { getAgentSuggestions } = useAgentApi();\r\n\r\n  const handleCreateKasse = () => {\r\n    setFormData({\r\n      kassenId: `KASSE-${String(kassen.length + 1).padStart(3, '0')}`,\r\n      name: '',\r\n      tseAktiv: false\r\n    });\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleTseTest = async (kasseId: string) => {\r\n    console.log('TSE-Test für Kasse:', kasseId);\r\n    \r\n    const suggestions = await getAgentSuggestions(\r\n      'Kassensystem TSE-Test: Kasse ' + kasseId + ' wird getestet. TSE-Signatur wird validiert.'\r\n    );\r\n    \r\n    console.log('Agent-Vorschläge für TSE-Test:', suggestions);\r\n  };\r\n\r\n  const handleTagesabschluss = async (kasseId: string) => {\r\n    console.log('Tagesabschluss für Kasse:', kasseId);\r\n    \r\n    const suggestions = await getAgentSuggestions(\r\n      'Kassensystem Tagesabschluss: Kasse ' + kasseId + ' wird abgeschlossen. Tagesumsatz wird berechnet.'\r\n    );\r\n    \r\n    console.log('Agent-Vorschläge für Tagesabschluss:', suggestions);\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'aktiv': return 'success';\r\n      case 'inaktiv': return 'default';\r\n      case 'wartung': return 'warning';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getComplianceColor = (compliance: string) => {\r\n    switch (compliance) {\r\n      case 'konform': return 'success';\r\n      case 'warnung': return 'warning';\r\n      case 'nicht_konform': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <Typography variant=\"h4\" className=\"text-gray-800 font-bold flex items-center gap-2\">\r\n            <PointOfSaleIcon className=\"text-green-600\" />\r\n            Kassensystem (TSE)\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\" className=\"text-gray-600\">\r\n            Technische Sicherheitseinrichtung - Konforme Kassensysteme mit TSE-Integration\r\n          </Typography>\r\n        </div>\r\n      </div>\r\n\r\n      {/* TSE-Info */}\r\n      <Alert severity=\"info\">\r\n        <Typography variant=\"body1\" className=\"font-medium\">\r\n          TSE - Technische Sicherheitseinrichtung\r\n        </Typography>\r\n        <Typography variant=\"body2\">\r\n          Alle Kassensysteme sind mit einer TSE ausgestattet, die jede Transaktion \r\n          kryptographisch signiert und unveränderlich protokolliert. \r\n          Dies entspricht den gesetzlichen Anforderungen für Kassensysteme.\r\n        </Typography>\r\n      </Alert>\r\n\r\n      {/* Statistik-Karten */}\r\n      <Card className=\"mb-6\">\r\n        <div className=\"p-4 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n          <div className=\"text-center p-4 bg-green-50 rounded-lg\">\r\n            <CheckCircleIcon className=\"text-green-600 text-3xl mb-2\" />\r\n            <Typography variant=\"h6\" className=\"text-green-800\">Aktiv</Typography>\r\n            <Typography variant=\"h4\" className=\"text-green-600\">\r\n              {kassen.filter(k => k.status === 'aktiv').length}\r\n            </Typography>\r\n          </div>\r\n          <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\r\n            <PointOfSaleIcon className=\"text-blue-600 text-3xl mb-2\" />\r\n            <Typography variant=\"h6\" className=\"text-blue-800\">TSE Aktiv</Typography>\r\n            <Typography variant=\"h4\" className=\"text-blue-600\">\r\n              {kassen.filter(k => k.tseAktiv).length}\r\n            </Typography>\r\n          </div>\r\n          <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\r\n            <WarningIcon className=\"text-orange-600 text-3xl mb-2\" />\r\n            <Typography variant=\"h6\" className=\"text-orange-800\">Warnungen</Typography>\r\n            <Typography variant=\"h4\" className=\"text-orange-600\">\r\n              {kassen.filter(k => k.compliance === 'warnung').length}\r\n            </Typography>\r\n          </div>\r\n          <div className=\"text-center p-4 bg-red-50 rounded-lg\">\r\n            <ErrorIcon className=\"text-red-600 text-3xl mb-2\" />\r\n            <Typography variant=\"h6\" className=\"text-red-800\">Fehler</Typography>\r\n            <Typography variant=\"h4\" className=\"text-red-600\">\r\n              {kassen.reduce((sum, k) => sum + k.fehler, 0)}\r\n            </Typography>\r\n          </div>\r\n        </div>\r\n      </Card>\r\n\r\n      {/* Aktionen */}\r\n      <div className=\"flex gap-4\">\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<AddIcon />}\r\n          onClick={handleCreateKasse}\r\n          className=\"bg-green-600 hover:bg-green-700\"\r\n        >\r\n          Neue Kasse hinzufügen\r\n        </Button>\r\n        <Button\r\n          variant=\"outlined\"\r\n          startIcon={<RefreshIcon />}\r\n        >\r\n          TSE-Status prüfen\r\n        </Button>\r\n        <Button\r\n          variant=\"outlined\"\r\n          startIcon={<RefreshIcon />}\r\n        >\r\n          Alle Tagesabschlüsse\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Kassen-Tabelle */}\r\n      <Card>\r\n        <div className=\"p-6\">\r\n          <Typography variant=\"h6\" className=\"text-gray-800 mb-4\">\r\n            Kassensysteme\r\n          </Typography>\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow className=\"bg-gray-50\">\r\n                  <TableCell className=\"font-semibold\">Kassen-ID</TableCell>\r\n                  <TableCell className=\"font-semibold\">Name</TableCell>\r\n                  <TableCell className=\"font-semibold\">Status</TableCell>\r\n                  <TableCell className=\"font-semibold\">TSE</TableCell>\r\n                  <TableCell className=\"font-semibold\">Tagesumsatz</TableCell>\r\n                  <TableCell className=\"font-semibold\">Transaktionen</TableCell>\r\n                  <TableCell className=\"font-semibold\">Compliance</TableCell>\r\n                  <TableCell className=\"font-semibold\">Aktionen</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {kassen.map((kasse) => (\r\n                  <TableRow key={kasse.id} className=\"hover:bg-gray-50\">\r\n                    <TableCell>\r\n                      <Typography variant=\"body1\" className=\"font-medium\">\r\n                        {kasse.kassenId}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\">{kasse.name}</Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Chip \r\n                        label={kasse.status}\r\n                        color={getStatusColor(kasse.status) as any}\r\n                        size=\"small\"\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Chip \r\n                        label={kasse.tseAktiv ? 'Aktiv' : 'Inaktiv'}\r\n                        color={kasse.tseAktiv ? 'success' : 'default'}\r\n                        size=\"small\"\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\">\r\n                        {kasse.tagesumsatz.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' })}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\">{kasse.transaktionen}</Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Chip \r\n                        label={kasse.compliance}\r\n                        color={getComplianceColor(kasse.compliance) as any}\r\n                        size=\"small\"\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex gap-1\">\r\n                        <IconButton \r\n                          size=\"small\" \r\n                          onClick={() => handleTseTest(kasse.id)}\r\n                          className=\"text-blue-600\"\r\n                        >\r\n                          <RefreshIcon />\r\n                        </IconButton>\r\n                        <IconButton \r\n                          size=\"small\" \r\n                          onClick={() => handleTagesabschluss(kasse.id)}\r\n                          className=\"text-green-600\"\r\n                        >\r\n                          <CheckCircleIcon />\r\n                        </IconButton>\r\n                      </div>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </div>\r\n      </Card>\r\n\r\n      {/* Dialog für neue Kasse */}\r\n      <Dialog open={openDialog} onClose={() => setOpenDialog(false)} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>Neue Kasse hinzufügen</DialogTitle>\r\n        <DialogContent>\r\n          <div className=\"space-y-4 pt-4\">\r\n            <TextField\r\n              fullWidth\r\n              label=\"Kassen-ID\"\r\n              value={formData.kassenId}\r\n              onChange={(e) => setFormData({...formData, kassenId: e.target.value})}\r\n            />\r\n            <TextField\r\n              fullWidth\r\n              label=\"Name\"\r\n              value={formData.name}\r\n              onChange={(e) => setFormData({...formData, name: e.target.value})}\r\n            />\r\n          </div>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenDialog(false)}>Abbrechen</Button>\r\n          <Button variant=\"contained\" color=\"primary\">\r\n            Kasse erstellen\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Kassensystem; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\components\\Kontrakte.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\components\\Kundenkarten.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\components\\L3App.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":254,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9468,9471],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9468,9471],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":361,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":361,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14090,14093],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14090,14093],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { \r\n  Card, \r\n  Typography, \r\n  Button, \r\n  TextField, \r\n  Alert,\r\n  Chip,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper\r\n} from '@mui/material';\r\nimport { \r\n  PhoneAndroid as PhoneAndroidIcon,\r\n  Add as AddIcon,\r\n  Refresh as RefreshIcon,\r\n  CheckCircle as CheckCircleIcon,\r\n  PlayArrow as PlayArrowIcon,\r\n  Stop as StopIcon\r\n} from '@mui/icons-material';\r\nimport { useAgentApi } from '../../../hooks/useAgentApi';\r\nimport type { MobileTour } from '../types/WarenwirtschaftTypes';\r\n\r\nconst L3App: React.FC = () => {\r\n  const [touren, setTouren] = useState<MobileTour[]>([]);\r\n  const [selectedTour, setSelectedTour] = useState<MobileTour | null>(null);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [dialogMode, setDialogMode] = useState<'create' | 'view'>('create');\r\n  const { getAgentSuggestions } = useAgentApi();\r\n\r\n  // Formular-State für neue Tour\r\n  const [formData, setFormData] = useState({\r\n    tournummer: '',\r\n    kommissioniererId: '',\r\n    kommissioniererName: '',\r\n    geraetId: '',\r\n    startdatum: new Date().toISOString().split('T')[0]\r\n  });\r\n\r\n  const handleCreateTour = () => {\r\n    setDialogMode('create');\r\n    setFormData({\r\n      tournummer: `TOUR-${new Date().getFullYear()}-${String(touren.length + 1).padStart(3, '0')}`,\r\n      kommissioniererId: '',\r\n      kommissioniererName: '',\r\n      geraetId: '',\r\n      startdatum: new Date().toISOString().split('T')[0]\r\n    });\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleViewTour = (tour: MobileTour) => {\r\n    setDialogMode('view');\r\n    setSelectedTour(tour);\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleStartTour = async (tourId: string) => {\r\n    setTouren(touren.map(t => \r\n      t.id === tourId \r\n        ? { ...t, status: 'aktiv', startdatum: new Date() }\r\n        : t\r\n    ));\r\n    \r\n    const suggestions = await getAgentSuggestions(\r\n      'L3-App Tour starten: Tour ' + tourId + ' wurde gestartet. Kommissionierer beginnt mit der Arbeit.'\r\n    );\r\n    \r\n    console.log('Agent-Vorschläge für Tour-Start:', suggestions);\r\n  };\r\n\r\n  const handleCompleteTour = async (tourId: string) => {\r\n    setTouren(touren.map(t => \r\n      t.id === tourId \r\n        ? { ...t, status: 'abgeschlossen', enddatum: new Date() }\r\n        : t\r\n    ));\r\n    \r\n    const suggestions = await getAgentSuggestions(\r\n      'L3-App Tour abschließen: Tour ' + tourId + ' wurde abgeschlossen. Alle Positionen wurden kommissioniert.'\r\n    );\r\n    \r\n    console.log('Agent-Vorschläge für Tour-Abschluss:', suggestions);\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'geplant': return 'default';\r\n      case 'aktiv': return 'primary';\r\n      case 'abgeschlossen': return 'success';\r\n      case 'storniert': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getProgressPercentage = (tour: MobileTour) => {\r\n    if (tour.positionen.length === 0) return 0;\r\n    const scannedCount = tour.positionen.filter(p => p.gescannt).length;\r\n    return Math.round((scannedCount / tour.positionen.length) * 100);\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'geplant': return <PlayArrowIcon />;\r\n      case 'aktiv': return <PlayArrowIcon />;\r\n      case 'abgeschlossen': return <CheckCircleIcon />;\r\n      case 'storniert': return <StopIcon />;\r\n      default: return <PlayArrowIcon />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <Typography variant=\"h4\" className=\"text-gray-800 font-bold flex items-center gap-2\">\r\n            <PhoneAndroidIcon className=\"text-blue-600\" />\r\n            L3-App: Mobile Kommissionierung\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\" className=\"text-gray-600\">\r\n            Kommissionierung einfach mobil - Scan-Daten direkt mit Warenwirtschaft vernetzt\r\n          </Typography>\r\n        </div>\r\n      </div>\r\n\r\n      {/* L3-App-spezifische Info */}\r\n      <Alert severity=\"info\">\r\n        <Typography variant=\"body1\" className=\"font-medium\">\r\n          L3-App - Smarte Kommissionierung\r\n        </Typography>\r\n        <Typography variant=\"body2\">\r\n          Ihre Kommissionierer erhalten schnell eine Übersicht über anstehende Touren. \r\n          Doppelkommissionierungen werden von vornherein ausgeschlossen. \r\n          Scan-Daten werden direkt mit dem Warenwirtschaftssystem vernetzt.\r\n        </Typography>\r\n      </Alert>\r\n\r\n      {/* Statistik-Karten */}\r\n      <Card className=\"mb-6\">\r\n        <div className=\"p-4 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n          <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\r\n            <PlayArrowIcon className=\"text-blue-600 text-3xl mb-2\" />\r\n            <Typography variant=\"h6\" className=\"text-blue-800\">Aktiv</Typography>\r\n            <Typography variant=\"h4\" className=\"text-blue-600\">\r\n              {touren.filter(t => t.status === 'aktiv').length}\r\n            </Typography>\r\n          </div>\r\n          <div className=\"text-center p-4 bg-red-50 rounded-lg\">\r\n            <StopIcon className=\"text-red-600 text-3xl mb-2\" />\r\n            <Typography variant=\"h6\" className=\"text-red-800\">Storniert</Typography>\r\n            <Typography variant=\"h4\" className=\"text-red-600\">\r\n              {touren.filter(t => t.status === 'storniert').length}\r\n            </Typography>\r\n          </div>\r\n          <div className=\"text-center p-4 bg-green-50 rounded-lg\">\r\n            <CheckCircleIcon className=\"text-green-600 text-3xl mb-2\" />\r\n            <Typography variant=\"h6\" className=\"text-green-800\">Abgeschlossen</Typography>\r\n            <Typography variant=\"h4\" className=\"text-green-600\">\r\n              {touren.filter(t => t.status === 'abgeschlossen').length}\r\n            </Typography>\r\n          </div>\r\n          <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\r\n            <PlayArrowIcon className=\"text-orange-600 text-3xl mb-2\" />\r\n            <Typography variant=\"h6\" className=\"text-orange-800\">Geplant</Typography>\r\n            <Typography variant=\"h4\" className=\"text-orange-600\">\r\n              {touren.filter(t => t.status === 'geplant').length}\r\n            </Typography>\r\n          </div>\r\n        </div>\r\n      </Card>\r\n\r\n      {/* Aktionen */}\r\n      <div className=\"flex gap-4\">\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<AddIcon />}\r\n          onClick={handleCreateTour}\r\n          className=\"bg-blue-600 hover:bg-blue-700\"\r\n        >\r\n          Neue Tour erstellen\r\n        </Button>\r\n        <Button\r\n          variant=\"outlined\"\r\n          startIcon={<RefreshIcon />}\r\n        >\r\n          App-Daten synchronisieren\r\n        </Button>\r\n        <Button\r\n          variant=\"outlined\"\r\n          startIcon={<RefreshIcon />}\r\n        >\r\n          Tour-Daten exportieren\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Touren-Tabelle */}\r\n      <Card>\r\n        <div className=\"p-6\">\r\n          <Typography variant=\"h6\" className=\"text-gray-800 mb-4\">\r\n            Kommissionierungstouren\r\n          </Typography>\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow className=\"bg-gray-50\">\r\n                  <TableCell className=\"font-semibold\">Tournummer</TableCell>\r\n                  <TableCell className=\"font-semibold\">Kommissionierer</TableCell>\r\n                  <TableCell className=\"font-semibold\">Gerät</TableCell>\r\n                  <TableCell className=\"font-semibold\">Status</TableCell>\r\n                  <TableCell className=\"font-semibold\">Fortschritt</TableCell>\r\n                  <TableCell className=\"font-semibold\">Positionen</TableCell>\r\n                  <TableCell className=\"font-semibold\">Aktionen</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {touren.map((tour) => (\r\n                  <TableRow key={tour.id} className=\"hover:bg-gray-50\">\r\n                    <TableCell>\r\n                      <Typography variant=\"body1\" className=\"font-medium\">\r\n                        {tour.tournummer}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <div>\r\n                          <Typography variant=\"body2\" className=\"font-medium\">\r\n                            {tour.kommissioniererName}\r\n                          </Typography>\r\n                          <Typography variant=\"body2\" className=\"text-gray-600 text-xs\">\r\n                            {tour.kommissioniererId}\r\n                          </Typography>\r\n                        </div>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <PhoneAndroidIcon className=\"text-blue-600\" />\r\n                        <Typography variant=\"body2\">{tour.geraetId}</Typography>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Chip \r\n                        label={tour.status}\r\n                        color={getStatusColor(tour.status) as any}\r\n                        size=\"small\"\r\n                        icon={getStatusIcon(tour.status)}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"w-full\">\r\n                        <div className=\"flex justify-between text-xs text-gray-600 mb-1\">\r\n                          <span>{getProgressPercentage(tour)}%</span>\r\n                          <span>{tour.positionen.filter(p => p.gescannt).length}/{tour.positionen.length}</span>\r\n                        </div>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\">\r\n                        {tour.positionen.length} Artikel\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex gap-1\">\r\n                        <IconButton \r\n                          size=\"small\" \r\n                          onClick={() => handleViewTour(tour)}\r\n                          className=\"text-blue-600\"\r\n                        >\r\n                          <AddIcon />\r\n                        </IconButton>\r\n                        {tour.status === 'geplant' && (\r\n                          <IconButton \r\n                            size=\"small\" \r\n                            onClick={() => handleStartTour(tour.id)}\r\n                            className=\"text-green-600\"\r\n                          >\r\n                            <PlayArrowIcon />\r\n                          </IconButton>\r\n                        )}\r\n                        {tour.status === 'aktiv' && (\r\n                          <IconButton \r\n                            size=\"small\" \r\n                            onClick={() => handleCompleteTour(tour.id)}\r\n                            className=\"text-orange-600\"\r\n                          >\r\n                            <StopIcon />\r\n                          </IconButton>\r\n                        )}\r\n                      </div>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </div>\r\n      </Card>\r\n\r\n      {/* Dialog für Tour Details */}\r\n      <Dialog open={openDialog} onClose={() => setOpenDialog(false)} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>\r\n          {dialogMode === 'create' ? 'Neue Tour erstellen' : `Tour: ${selectedTour?.tournummer}`}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {dialogMode === 'create' ? (\r\n            <div className=\"space-y-4\">\r\n              <TextField\r\n                fullWidth\r\n                label=\"Tournummer\"\r\n                value={formData.tournummer}\r\n                onChange={(e) => setFormData({...formData, tournummer: e.target.value})}\r\n              />\r\n              <TextField\r\n                fullWidth\r\n                label=\"Kommissionierer ID\"\r\n                value={formData.kommissioniererId}\r\n                onChange={(e) => setFormData({...formData, kommissioniererId: e.target.value})}\r\n              />\r\n              <TextField\r\n                fullWidth\r\n                label=\"Kommissionierer Name\"\r\n                value={formData.kommissioniererName}\r\n                onChange={(e) => setFormData({...formData, kommissioniererName: e.target.value})}\r\n              />\r\n              <TextField\r\n                fullWidth\r\n                label=\"Gerät ID\"\r\n                value={formData.geraetId}\r\n                onChange={(e) => setFormData({...formData, geraetId: e.target.value})}\r\n              />\r\n              <TextField\r\n                fullWidth\r\n                type=\"date\"\r\n                label=\"Startdatum\"\r\n                value={formData.startdatum}\r\n                onChange={(e) => setFormData({...formData, startdatum: e.target.value})}\r\n                InputLabelProps={{ shrink: true }}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <div className=\"space-y-4\">\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <div>\r\n                  <Typography variant=\"subtitle2\" className=\"text-gray-600\">Tournummer</Typography>\r\n                  <Typography variant=\"body1\">{selectedTour?.tournummer}</Typography>\r\n                </div>\r\n                <div>\r\n                  <Typography variant=\"subtitle2\" className=\"text-gray-600\">Status</Typography>\r\n                  <Chip \r\n                    label={selectedTour?.status}\r\n                    color={getStatusColor(selectedTour?.status || '') as any}\r\n                    size=\"small\"\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Typography variant=\"subtitle2\" className=\"text-gray-600\">Kommissionierer</Typography>\r\n                  <Typography variant=\"body1\">{selectedTour?.kommissioniererName}</Typography>\r\n                </div>\r\n                <div>\r\n                  <Typography variant=\"subtitle2\" className=\"text-gray-600\">Gerät</Typography>\r\n                  <Typography variant=\"body1\">{selectedTour?.geraetId}</Typography>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <div>\r\n                  <Typography variant=\"subtitle2\" className=\"text-gray-600\">Startdatum</Typography>\r\n                  <Typography variant=\"body1\">\r\n                    {selectedTour?.startdatum.toLocaleString('de-DE')}\r\n                  </Typography>\r\n                </div>\r\n                <div>\r\n                  <Typography variant=\"subtitle2\" className=\"text-gray-600\">Enddatum</Typography>\r\n                  <Typography variant=\"body1\">\r\n                    {selectedTour?.enddatum ? selectedTour.enddatum.toLocaleString('de-DE') : 'Nicht beendet'}\r\n                  </Typography>\r\n                </div>\r\n              </div>\r\n              \r\n              <Typography variant=\"h6\">Positionen</Typography>\r\n              {selectedTour?.positionen.map((position, index) => (\r\n                <div key={index} className=\"border rounded p-3 mb-2 flex justify-between items-center\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    {position.gescannt ? (\r\n                      <CheckCircleIcon className=\"text-green-600\" />\r\n                    ) : (\r\n                      <PlayArrowIcon className=\"text-gray-400\" />\r\n                    )}\r\n                  </div>\r\n                  <div className=\"flex-grow\">\r\n                    <Typography variant=\"body2\">{position.artikelName}</Typography>\r\n                    <Typography variant=\"body2\" className=\"text-gray-600 text-xs\">\r\n                      Menge: {position.menge} | Lagerplatz: {position.lagerplatz}\r\n                      {position.gescannt && position.scanDatum && (\r\n                        ` | Gescannt: ${position.scanDatum.toLocaleString('de-DE')}`\r\n                      )}\r\n                    </Typography>\r\n                  </div>\r\n                  {selectedTour.status === 'aktiv' && !position.gescannt && (\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      className=\"text-blue-600\"\r\n                    >\r\n                      <PlayArrowIcon />\r\n                    </IconButton>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenDialog(false)}>Schließen</Button>\r\n          {dialogMode === 'create' && (\r\n            <Button variant=\"contained\" color=\"primary\">\r\n              Tour erstellen\r\n            </Button>\r\n          )}\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default L3App; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\components\\L3Connect.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadConnections'. Either include it or remove the dependency array.","line":79,"column":6,"nodeType":"ArrayExpression","endLine":79,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadConnections]","fix":{"range":[1932,1934],"text":"[loadConnections]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused caught errors must match /^_/u.","line":88,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":185,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5153,5156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5153,5156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Card, \r\n  Typography, \r\n  Button, \r\n  TextField, \r\n  Alert,\r\n  Chip,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions\r\n} from '@mui/material';\r\nimport { \r\n  Wifi as WifiIcon,\r\n  Settings as SettingsIcon,\r\n  Refresh as RefreshIcon,\r\n  CheckCircle as CheckCircleIcon,\r\n  Error as ErrorIcon,\r\n  Edit as EditIcon\r\n} from '@mui/icons-material';\r\nimport { useAgentApi } from '../../../hooks/useAgentApi';\r\n\r\ninterface L3Connection {\r\n  id: string;\r\n  name: string;\r\n  status: 'connected' | 'disconnected' | 'error';\r\n  ipAddress: string;\r\n  port: number;\r\n  lastSeen: string;\r\n  deviceType: string;\r\n}\r\n\r\ninterface L3ConnectProps {\r\n  onBack: () => void;\r\n}\r\n\r\nexport const L3Connect: React.FC<L3ConnectProps> = ({ onBack }) => {\r\n  const [connections, setConnections] = useState<L3Connection[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [editDialog, setEditDialog] = useState(false);\r\n  const [selectedConnection, setSelectedConnection] = useState<L3Connection | null>(null);\r\n  const { } = useAgentApi();\r\n\r\n  const mockConnections: L3Connection[] = [\r\n    {\r\n      id: '1',\r\n      name: 'L3-Terminal 001',\r\n      status: 'connected',\r\n      ipAddress: '192.168.1.100',\r\n      port: 8080,\r\n      lastSeen: '2024-01-15 14:30:00',\r\n      deviceType: 'Mobile Scanner'\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'L3-Terminal 002',\r\n      status: 'disconnected',\r\n      ipAddress: '192.168.1.101',\r\n      port: 8080,\r\n      lastSeen: '2024-01-15 13:45:00',\r\n      deviceType: 'Tablet'\r\n    },\r\n    {\r\n      id: '3',\r\n      name: 'L3-Terminal 003',\r\n      status: 'error',\r\n      ipAddress: '192.168.1.102',\r\n      port: 8080,\r\n      lastSeen: '2024-01-15 12:15:00',\r\n      deviceType: 'Smartphone'\r\n    }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    loadConnections();\r\n  }, []);\r\n\r\n  const loadConnections = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      // Simuliere API-Aufruf\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      setConnections(mockConnections);\r\n    } catch (err) {\r\n      setError('Fehler beim Laden der Verbindungen');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRefresh = () => {\r\n    loadConnections();\r\n  };\r\n\r\n  const handleEdit = (connection: L3Connection) => {\r\n    setSelectedConnection(connection);\r\n    setEditDialog(true);\r\n  };\r\n\r\n  const handleSaveEdit = () => {\r\n    if (selectedConnection) {\r\n      setConnections(prev => \r\n        prev.map(conn => \r\n          conn.id === selectedConnection.id ? selectedConnection : conn\r\n        )\r\n      );\r\n    }\r\n    setEditDialog(false);\r\n    setSelectedConnection(null);\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'connected': return 'success';\r\n      case 'disconnected': return 'warning';\r\n      case 'error': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'connected': return <CheckCircleIcon />;\r\n      case 'disconnected': return <WifiIcon />;\r\n      case 'error': return <ErrorIcon />;\r\n      default: return <WifiIcon />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6 space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <Typography variant=\"h4\" className=\"text-gray-800 mb-2\">\r\n            L3-Verbindungen\r\n          </Typography>\r\n          <Typography variant=\"body1\" className=\"text-gray-600\">\r\n            Verwaltung der L3-Terminal Verbindungen\r\n          </Typography>\r\n        </div>\r\n        <div className=\"flex space-x-3\">\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<RefreshIcon />}\r\n            onClick={handleRefresh}\r\n            disabled={loading}\r\n          >\r\n            Aktualisieren\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            startIcon={<SettingsIcon />}\r\n            onClick={onBack}\r\n          >\r\n            Zurück\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Error Alert */}\r\n      {error && (\r\n        <Alert severity=\"error\" className=\"mb-4\">\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Connections Grid */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n        {connections.map((connection) => (\r\n          <Card key={connection.id} className=\"p-4 hover:shadow-lg transition-shadow\">\r\n            <div className=\"flex justify-between items-start mb-3\">\r\n              <div className=\"flex-1\">\r\n                <Typography variant=\"h6\" className=\"text-gray-800 mb-1\">\r\n                  {connection.name}\r\n                </Typography>\r\n                <Chip\r\n                  icon={getStatusIcon(connection.status)}\r\n                  label={connection.status === 'connected' ? 'Verbunden' : \r\n                         connection.status === 'disconnected' ? 'Getrennt' : 'Fehler'}\r\n                  color={getStatusColor(connection.status) as any}\r\n                  size=\"small\"\r\n                />\r\n              </div>\r\n              <IconButton\r\n                size=\"small\"\r\n                onClick={() => handleEdit(connection)}\r\n                className=\"text-gray-500 hover:text-gray-700\"\r\n              >\r\n                <EditIcon />\r\n              </IconButton>\r\n            </div>\r\n\r\n            <div className=\"space-y-2 text-sm\">\r\n              <div className=\"flex justify-between\">\r\n                <span className=\"text-gray-600\">IP-Adresse:</span>\r\n                <span className=\"font-mono\">{connection.ipAddress}</span>\r\n              </div>\r\n              <div className=\"flex justify-between\">\r\n                <span className=\"text-gray-600\">Port:</span>\r\n                <span>{connection.port}</span>\r\n              </div>\r\n              <div className=\"flex justify-between\">\r\n                <span className=\"text-gray-600\">Gerätetyp:</span>\r\n                <span>{connection.deviceType}</span>\r\n              </div>\r\n              <div className=\"flex justify-between\">\r\n                <span className=\"text-gray-600\">Letzte Aktivität:</span>\r\n                <span className=\"text-xs\">{connection.lastSeen}</span>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"mt-4 pt-3 border-t border-gray-200\">\r\n              <div className=\"flex space-x-2\">\r\n                <Button\r\n                  size=\"small\"\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  disabled={connection.status === 'connected'}\r\n                >\r\n                  Verbinden\r\n                </Button>\r\n                <Button\r\n                  size=\"small\"\r\n                  variant=\"outlined\"\r\n                  color=\"error\"\r\n                  fullWidth\r\n                  disabled={connection.status === 'disconnected'}\r\n                >\r\n                  Trennen\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Edit Dialog */}\r\n      <Dialog open={editDialog} onClose={() => setEditDialog(false)} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>Verbindung bearbeiten</DialogTitle>\r\n        <DialogContent>\r\n          {selectedConnection && (\r\n            <div className=\"space-y-4 pt-2\">\r\n              <TextField\r\n                label=\"Name\"\r\n                value={selectedConnection.name}\r\n                onChange={(e) => setSelectedConnection({\r\n                  ...selectedConnection,\r\n                  name: e.target.value\r\n                })}\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                label=\"IP-Adresse\"\r\n                value={selectedConnection.ipAddress}\r\n                onChange={(e) => setSelectedConnection({\r\n                  ...selectedConnection,\r\n                  ipAddress: e.target.value\r\n                })}\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                label=\"Port\"\r\n                type=\"number\"\r\n                value={selectedConnection.port}\r\n                onChange={(e) => setSelectedConnection({\r\n                  ...selectedConnection,\r\n                  port: parseInt(e.target.value)\r\n                })}\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                label=\"Gerätetyp\"\r\n                value={selectedConnection.deviceType}\r\n                onChange={(e) => setSelectedConnection({\r\n                  ...selectedConnection,\r\n                  deviceType: e.target.value\r\n                })}\r\n                fullWidth\r\n              />\r\n            </div>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setEditDialog(false)}>\r\n            Abbrechen\r\n          </Button>\r\n          <Button onClick={handleSaveEdit} variant=\"contained\">\r\n            Speichern\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\components\\Lieferantenbewertungen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\components\\Lieferantenverwaltung.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\components\\Lieferscheine.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\components\\LogistikSchnittstellen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\components\\MobileKommissionierung.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\components\\Streckenhandel.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadOrders'. Either include it or remove the dependency array.","line":120,"column":6,"nodeType":"ArrayExpression","endLine":120,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadOrders]","fix":{"range":[2886,2888],"text":"[loadOrders]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused caught errors must match /^_/u.","line":129,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":129,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":300,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":300,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8959,8962],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8959,8962],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Card, \r\n  Typography, \r\n  Button, \r\n  TextField, \r\n  Alert,\r\n  Chip,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper\r\n} from '@mui/material';\r\nimport { \r\n  Store as StoreIcon,\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Refresh as RefreshIcon\r\n} from '@mui/icons-material';\r\nimport { useAgentApi } from '../../../hooks/useAgentApi';\r\n\r\ninterface StreckenhandelOrder {\r\n  id: string;\r\n  orderNumber: string;\r\n  customer: string;\r\n  deliveryDate: string;\r\n  status: 'pending' | 'confirmed' | 'shipped' | 'delivered' | 'cancelled';\r\n  totalAmount: number;\r\n  items: StreckenhandelItem[];\r\n  route: string;\r\n  driver: string;\r\n  vehicle: string;\r\n}\r\n\r\ninterface StreckenhandelItem {\r\n  id: string;\r\n  articleNumber: string;\r\n  description: string;\r\n  quantity: number;\r\n  unitPrice: number;\r\n  totalPrice: number;\r\n}\r\n\r\ninterface StreckenhandelProps {\r\n  onBack: () => void;\r\n}\r\n\r\nexport const Streckenhandel: React.FC<StreckenhandelProps> = ({ onBack }) => {\r\n  const [orders, setOrders] = useState<StreckenhandelOrder[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [editDialog, setEditDialog] = useState(false);\r\n  const [selectedOrder, setSelectedOrder] = useState<StreckenhandelOrder | null>(null);\r\n  const { } = useAgentApi();\r\n\r\n  const mockOrders: StreckenhandelOrder[] = [\r\n    {\r\n      id: '1',\r\n      orderNumber: 'ST-2024-001',\r\n      customer: 'Metro AG - Filiale Hamburg',\r\n      deliveryDate: '2024-01-16',\r\n      status: 'confirmed',\r\n      totalAmount: 2450.75,\r\n      route: 'Route A - Hamburg Nord',\r\n      driver: 'Max Mustermann',\r\n      vehicle: 'LKW-001',\r\n      items: [\r\n        {\r\n          id: '1',\r\n          articleNumber: 'ART-001',\r\n          description: 'Bio-Äpfel 1kg',\r\n          quantity: 50,\r\n          unitPrice: 2.99,\r\n          totalPrice: 149.50\r\n        },\r\n        {\r\n          id: '2',\r\n          articleNumber: 'ART-002',\r\n          description: 'Bio-Bananen 1kg',\r\n          quantity: 30,\r\n          unitPrice: 1.99,\r\n          totalPrice: 59.70\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      id: '2',\r\n      orderNumber: 'ST-2024-002',\r\n      customer: 'Rewe - Filiale Bremen',\r\n      deliveryDate: '2024-01-17',\r\n      status: 'pending',\r\n      totalAmount: 1890.25,\r\n      route: 'Route B - Bremen Ost',\r\n      driver: 'Anna Schmidt',\r\n      vehicle: 'LKW-002',\r\n      items: [\r\n        {\r\n          id: '3',\r\n          articleNumber: 'ART-003',\r\n          description: 'Bio-Orangen 1kg',\r\n          quantity: 40,\r\n          unitPrice: 3.49,\r\n          totalPrice: 139.60\r\n        }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    loadOrders();\r\n  }, []);\r\n\r\n  const loadOrders = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      // Simuliere API-Aufruf\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      setOrders(mockOrders);\r\n    } catch (err) {\r\n      setError('Fehler beim Laden der Streckenhandel-Aufträge');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRefresh = () => {\r\n    loadOrders();\r\n  };\r\n\r\n  const handleEdit = (order: StreckenhandelOrder) => {\r\n    setSelectedOrder(order);\r\n    setEditDialog(true);\r\n  };\r\n\r\n  const handleSaveEdit = () => {\r\n    if (selectedOrder) {\r\n      setOrders(prev => \r\n        prev.map(order => \r\n          order.id === selectedOrder.id ? selectedOrder : order\r\n        )\r\n      );\r\n    }\r\n    setEditDialog(false);\r\n    setSelectedOrder(null);\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'pending': return 'warning';\r\n      case 'confirmed': return 'info';\r\n      case 'shipped': return 'primary';\r\n      case 'delivered': return 'success';\r\n      case 'cancelled': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getStatusText = (status: string) => {\r\n    switch (status) {\r\n      case 'pending': return 'Ausstehend';\r\n      case 'confirmed': return 'Bestätigt';\r\n      case 'shipped': return 'Versendet';\r\n      case 'delivered': return 'Geliefert';\r\n      case 'cancelled': return 'Storniert';\r\n      default: return status;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6 space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <Typography variant=\"h4\" className=\"text-gray-800 mb-2\">\r\n            Streckenhandel\r\n          </Typography>\r\n          <Typography variant=\"body1\" className=\"text-gray-600\">\r\n            Verwaltung von Streckenhandel-Aufträgen und Lieferungen\r\n          </Typography>\r\n        </div>\r\n        <div className=\"flex space-x-3\">\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<RefreshIcon />}\r\n            onClick={handleRefresh}\r\n            disabled={loading}\r\n          >\r\n            Aktualisieren\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            startIcon={<AddIcon />}\r\n          >\r\n            Neuer Auftrag\r\n          </Button>\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<StoreIcon />}\r\n            onClick={onBack}\r\n          >\r\n            Zurück\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Error Alert */}\r\n      {error && (\r\n        <Alert severity=\"error\" className=\"mb-4\">\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Statistics Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\r\n        <Card className=\"p-4 text-center\">\r\n          <Typography variant=\"h6\" className=\"text-gray-600 mb-2\">\r\n            Gesamt Aufträge\r\n          </Typography>\r\n          <Typography variant=\"h4\" className=\"text-blue-600\">\r\n            {orders.length}\r\n          </Typography>\r\n        </Card>\r\n        <Card className=\"p-4 text-center\">\r\n          <Typography variant=\"h6\" className=\"text-gray-600 mb-2\">\r\n            Ausstehend\r\n          </Typography>\r\n          <Typography variant=\"h4\" className=\"text-orange-600\">\r\n            {orders.filter(o => o.status === 'pending').length}\r\n          </Typography>\r\n        </Card>\r\n        <Card className=\"p-4 text-center\">\r\n          <Typography variant=\"h6\" className=\"text-gray-600 mb-2\">\r\n            Bestätigt\r\n          </Typography>\r\n          <Typography variant=\"h4\" className=\"text-blue-600\">\r\n            {orders.filter(o => o.status === 'confirmed').length}\r\n          </Typography>\r\n        </Card>\r\n        <Card className=\"p-4 text-center\">\r\n          <Typography variant=\"h6\" className=\"text-gray-600 mb-2\">\r\n            Geliefert\r\n          </Typography>\r\n          <Typography variant=\"h4\" className=\"text-green-600\">\r\n            {orders.filter(o => o.status === 'delivered').length}\r\n          </Typography>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Orders Table */}\r\n      <Card>\r\n        <div className=\"p-6\">\r\n          <Typography variant=\"h6\" className=\"text-gray-800 mb-4\">\r\n            Streckenhandel-Aufträge\r\n          </Typography>\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow className=\"bg-gray-50\">\r\n                  <TableCell className=\"font-semibold\">Auftragsnummer</TableCell>\r\n                  <TableCell className=\"font-semibold\">Kunde</TableCell>\r\n                  <TableCell className=\"font-semibold\">Lieferdatum</TableCell>\r\n                  <TableCell className=\"font-semibold\">Status</TableCell>\r\n                  <TableCell className=\"font-semibold\">Betrag</TableCell>\r\n                  <TableCell className=\"font-semibold\">Route</TableCell>\r\n                  <TableCell className=\"font-semibold\">Fahrer</TableCell>\r\n                  <TableCell className=\"font-semibold\">Aktionen</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {orders.map((order) => (\r\n                  <TableRow key={order.id} className=\"hover:bg-gray-50\">\r\n                    <TableCell>\r\n                      <Typography variant=\"body1\" className=\"font-medium\">\r\n                        {order.orderNumber}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\">\r\n                        {order.customer}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\">\r\n                        {order.deliveryDate}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Chip\r\n                        label={getStatusText(order.status)}\r\n                        color={getStatusColor(order.status) as any}\r\n                        size=\"small\"\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\" className=\"font-medium\">\r\n                        {order.totalAmount.toFixed(2)} €\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\">\r\n                        {order.route}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\">\r\n                        {order.driver}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex space-x-1\">\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          onClick={() => handleEdit(order)}\r\n                          className=\"text-blue-600\"\r\n                        >\r\n                          <EditIcon />\r\n                        </IconButton>\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          className=\"text-red-600\"\r\n                        >\r\n                          <DeleteIcon />\r\n                        </IconButton>\r\n                      </div>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </div>\r\n      </Card>\r\n\r\n      {/* Edit Dialog */}\r\n      <Dialog open={editDialog} onClose={() => setEditDialog(false)} maxWidth=\"lg\" fullWidth>\r\n        <DialogTitle>Auftrag bearbeiten</DialogTitle>\r\n        <DialogContent>\r\n          {selectedOrder && (\r\n            <div className=\"space-y-6 pt-2\">\r\n              {/* Order Details */}\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <TextField\r\n                  label=\"Auftragsnummer\"\r\n                  value={selectedOrder.orderNumber}\r\n                  onChange={(e) => setSelectedOrder({\r\n                    ...selectedOrder,\r\n                    orderNumber: e.target.value\r\n                  })}\r\n                  fullWidth\r\n                />\r\n                <TextField\r\n                  label=\"Kunde\"\r\n                  value={selectedOrder.customer}\r\n                  onChange={(e) => setSelectedOrder({\r\n                    ...selectedOrder,\r\n                    customer: e.target.value\r\n                  })}\r\n                  fullWidth\r\n                />\r\n                <TextField\r\n                  label=\"Lieferdatum\"\r\n                  type=\"date\"\r\n                  value={selectedOrder.deliveryDate}\r\n                  onChange={(e) => setSelectedOrder({\r\n                    ...selectedOrder,\r\n                    deliveryDate: e.target.value\r\n                  })}\r\n                  fullWidth\r\n                />\r\n                <TextField\r\n                  label=\"Route\"\r\n                  value={selectedOrder.route}\r\n                  onChange={(e) => setSelectedOrder({\r\n                    ...selectedOrder,\r\n                    route: e.target.value\r\n                  })}\r\n                  fullWidth\r\n                />\r\n                <TextField\r\n                  label=\"Fahrer\"\r\n                  value={selectedOrder.driver}\r\n                  onChange={(e) => setSelectedOrder({\r\n                    ...selectedOrder,\r\n                    driver: e.target.value\r\n                  })}\r\n                  fullWidth\r\n                />\r\n                <TextField\r\n                  label=\"Fahrzeug\"\r\n                  value={selectedOrder.vehicle}\r\n                  onChange={(e) => setSelectedOrder({\r\n                    ...selectedOrder,\r\n                    vehicle: e.target.value\r\n                  })}\r\n                  fullWidth\r\n                />\r\n              </div>\r\n\r\n              {/* Items Table */}\r\n              <div>\r\n                <Typography variant=\"h6\" className=\"mb-3\">\r\n                  Auftragspositionen\r\n                </Typography>\r\n                <TableContainer component={Paper}>\r\n                  <Table size=\"small\">\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>Artikelnummer</TableCell>\r\n                        <TableCell>Beschreibung</TableCell>\r\n                        <TableCell>Menge</TableCell>\r\n                        <TableCell>Einzelpreis</TableCell>\r\n                        <TableCell>Gesamtpreis</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {selectedOrder.items.map((item) => (\r\n                        <TableRow key={item.id}>\r\n                          <TableCell>{item.articleNumber}</TableCell>\r\n                          <TableCell>{item.description}</TableCell>\r\n                          <TableCell>{item.quantity}</TableCell>\r\n                          <TableCell>{item.unitPrice.toFixed(2)} €</TableCell>\r\n                          <TableCell>{item.totalPrice.toFixed(2)} €</TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setEditDialog(false)}>\r\n            Abbrechen\r\n          </Button>\r\n          <Button onClick={handleSaveEdit} variant=\"contained\">\r\n            Speichern\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\components\\Streckenverwaltung.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\components\\Tourenverwaltung.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\components\\TseIntegration.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\components\\Wareneingang.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\services\\EdiService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[49,52],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[49,52],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[63,66],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[63,66],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[265,268],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[265,268],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[279,282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[279,282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"class EdiService {\r\n  async sendOrder(orderData: any): Promise<any> {\r\n    // Implementierung für EDI-Bestellung senden\r\n    console.log('Sending EDI order:', orderData);\r\n    return { success: true, data: orderData };\r\n  }\r\n\r\n  async receiveDelivery(deliveryData: any): Promise<any> {\r\n    // Implementierung für EDI-Lieferung empfangen\r\n    console.log('Receiving EDI delivery:', deliveryData);\r\n    return { success: true, data: deliveryData };\r\n  }\r\n}\r\n\r\nexport default EdiService; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\services\\KassensystemService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[65,68],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[65,68],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[79,82],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[79,82],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"class KassensystemService {\r\n  async processPayment(paymentData: any): Promise<any> {\r\n    // Implementierung für Zahlungsverarbeitung\r\n    console.log('Processing payment:', paymentData);\r\n    return { success: true, data: paymentData };\r\n  }\r\n}\r\n\r\nexport default KassensystemService; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\services\\WarenwirtschaftService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":121,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4215,4218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4215,4218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4243,4246],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4243,4246],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4347,4350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4347,4350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4375,4378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4375,4378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4484,4487],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4484,4487],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4512,4515],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4512,4515],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { api, type ApiResponse } from '../../../services/api';\r\n\r\nexport interface Artikel {\r\n  id: string;\r\n  name: string;\r\n  bestand: number;\r\n  kategorie: string;\r\n  preis: number;\r\n  lagerplatz: string;\r\n  lieferant: string;\r\n  mindestbestand: number;\r\n  maxbestand: number;\r\n  einheit: string;\r\n  status: 'aktiv' | 'inaktiv';\r\n}\r\n\r\nexport interface Lieferant {\r\n  id: string;\r\n  name: string;\r\n  status: 'aktiv' | 'inaktiv';\r\n  email: string;\r\n  telefon: string;\r\n  adresse: string;\r\n  kategorie: string;\r\n  bewertung: number;\r\n}\r\n\r\nexport interface Wareneingang {\r\n  id: string;\r\n  lieferantId: string;\r\n  lieferantName: string;\r\n  datum: string;\r\n  status: 'eingetroffen' | 'in_bearbeitung' | 'abgeschlossen';\r\n  positionen: WareneingangPosition[];\r\n  bemerkungen?: string;\r\n}\r\n\r\nexport interface WareneingangPosition {\r\n  artikelId: string;\r\n  artikelName: string;\r\n  bestellt: number;\r\n  geliefert: number;\r\n  preis: number;\r\n  lagerplatz: string;\r\n}\r\n\r\nclass WarenwirtschaftService {\r\n  // Artikel-Verwaltung\r\n  async getArtikel(params?: { page?: number; limit?: number; search?: string }): Promise<ApiResponse<Artikel[]>> {\r\n    return api.get<Artikel[]>('/warenwirtschaft/artikel', params);\r\n  }\r\n\r\n  async getArtikelById(id: string): Promise<ApiResponse<Artikel>> {\r\n    return api.get<Artikel>(`/warenwirtschaft/artikel/${id}`);\r\n  }\r\n\r\n  async createArtikel(artikel: Omit<Artikel, 'id'>): Promise<ApiResponse<Artikel>> {\r\n    return api.post<Artikel>('/warenwirtschaft/artikel', artikel);\r\n  }\r\n\r\n  async updateArtikel(id: string, artikel: Partial<Artikel>): Promise<ApiResponse<Artikel>> {\r\n    return api.put<Artikel>(`/warenwirtschaft/artikel/${id}`, artikel);\r\n  }\r\n\r\n  async deleteArtikel(id: string): Promise<ApiResponse<void>> {\r\n    return api.delete<void>(`/warenwirtschaft/artikel/${id}`);\r\n  }\r\n\r\n  // Lieferanten-Verwaltung\r\n  async getLieferanten(params?: { page?: number; limit?: number; search?: string }): Promise<ApiResponse<Lieferant[]>> {\r\n    return api.get<Lieferant[]>('/warenwirtschaft/lieferanten', params);\r\n  }\r\n\r\n  async getLieferantById(id: string): Promise<ApiResponse<Lieferant>> {\r\n    return api.get<Lieferant>(`/warenwirtschaft/lieferanten/${id}`);\r\n  }\r\n\r\n  async createLieferant(lieferant: Omit<Lieferant, 'id'>): Promise<ApiResponse<Lieferant>> {\r\n    return api.post<Lieferant>('/warenwirtschaft/lieferanten', lieferant);\r\n  }\r\n\r\n  async updateLieferant(id: string, lieferant: Partial<Lieferant>): Promise<ApiResponse<Lieferant>> {\r\n    return api.put<Lieferant>(`/warenwirtschaft/lieferanten/${id}`, lieferant);\r\n  }\r\n\r\n  async deleteLieferant(id: string): Promise<ApiResponse<void>> {\r\n    return api.delete<void>(`/warenwirtschaft/lieferanten/${id}`);\r\n  }\r\n\r\n  // Wareneingang\r\n  async getWareneingang(params?: { page?: number; limit?: number; status?: string }): Promise<ApiResponse<Wareneingang[]>> {\r\n    return api.get<Wareneingang[]>('/warenwirtschaft/wareneingang', params);\r\n  }\r\n\r\n  async getWareneingangById(id: string): Promise<ApiResponse<Wareneingang>> {\r\n    return api.get<Wareneingang>(`/warenwirtschaft/wareneingang/${id}`);\r\n  }\r\n\r\n  async createWareneingang(wareneingang: Omit<Wareneingang, 'id'>): Promise<ApiResponse<Wareneingang>> {\r\n    return api.post<Wareneingang>('/warenwirtschaft/wareneingang', wareneingang);\r\n  }\r\n\r\n  async updateWareneingang(id: string, wareneingang: Partial<Wareneingang>): Promise<ApiResponse<Wareneingang>> {\r\n    return api.put<Wareneingang>(`/warenwirtschaft/wareneingang/${id}`, wareneingang);\r\n  }\r\n\r\n  async deleteWareneingang(id: string): Promise<ApiResponse<void>> {\r\n    return api.delete<void>(`/warenwirtschaft/wareneingang/${id}`);\r\n  }\r\n\r\n  // Bestandsverwaltung\r\n  async getBestand(artikelId: string): Promise<ApiResponse<{ bestand: number; mindestbestand: number; maxbestand: number }>> {\r\n    return api.get<{ bestand: number; mindestbestand: number; maxbestand: number }>(`/warenwirtschaft/bestand/${artikelId}`);\r\n  }\r\n\r\n  async updateBestand(artikelId: string, menge: number, typ: 'zugang' | 'abgang'): Promise<ApiResponse<void>> {\r\n    return api.post<void>(`/warenwirtschaft/bestand/${artikelId}`, { menge, typ });\r\n  }\r\n\r\n  // Berichte\r\n  async getBestandsbericht(): Promise<ApiResponse<any>> {\r\n    return api.get<any>('/warenwirtschaft/berichte/bestand');\r\n  }\r\n\r\n  async getLieferantenbericht(): Promise<ApiResponse<any>> {\r\n    return api.get<any>('/warenwirtschaft/berichte/lieferanten');\r\n  }\r\n\r\n  async getWareneingangBericht(): Promise<ApiResponse<any>> {\r\n    return api.get<any>('/warenwirtschaft/berichte/wareneingang');\r\n  }\r\n}\r\n\r\nexport default WarenwirtschaftService; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\types\\BelegTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\types\\SchnittstelleTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\types\\WarenwirtschaftTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\features\\warenwirtschaft\\types\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\hooks\\useAgentApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\hooks\\useApiData.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[279,282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[279,282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3154,3157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3154,3157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3371,3374],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3371,3374],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { notificationActions } from '../store/notificationStore';\r\n\r\n// Generic API Data Hook für VALEO NeuroERP\r\ninterface UseApiDataOptions<T> {\r\n  url: string;\r\n  method?: 'GET' | 'POST' | 'PUT' | 'DELETE';\r\n  body?: any;\r\n  headers?: Record<string, string>;\r\n  autoFetch?: boolean;\r\n  onSuccess?: (data: T) => void;\r\n  onError?: (error: string) => void;\r\n  showNotifications?: boolean;\r\n}\r\n\r\ninterface UseApiDataReturn<T> {\r\n  data: T | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n  refetch: () => Promise<void>;\r\n  mutate: (newData: T) => void;\r\n  reset: () => void;\r\n}\r\n\r\nexport const useApiData = <T>({\r\n  url,\r\n  method = 'GET',\r\n  body,\r\n  headers = {},\r\n  autoFetch = true,\r\n  onSuccess,\r\n  onError,\r\n  showNotifications = true\r\n}: UseApiDataOptions<T>): UseApiDataReturn<T> => {\r\n  const [data, setData] = useState<T | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchData = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const requestOptions: RequestInit = {\r\n        method,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...headers\r\n        }\r\n      };\r\n\r\n      if (body && method !== 'GET') {\r\n        requestOptions.body = JSON.stringify(body);\r\n      }\r\n\r\n      const response = await fetch(url, requestOptions);\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      setData(result);\r\n      \r\n      if (onSuccess) {\r\n        onSuccess(result);\r\n      }\r\n\r\n      if (showNotifications && method !== 'GET') {\r\n        notificationActions.success(\r\n          'Erfolgreich',\r\n          'Daten wurden erfolgreich verarbeitet'\r\n        );\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Unbekannter Fehler';\r\n      setError(errorMessage);\r\n      \r\n      if (onError) {\r\n        onError(errorMessage);\r\n      }\r\n\r\n      if (showNotifications) {\r\n        notificationActions.error(\r\n          'Fehler',\r\n          errorMessage\r\n        );\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [url, method, body, headers, onSuccess, onError, showNotifications]);\r\n\r\n  const mutate = useCallback((newData: T) => {\r\n    setData(newData);\r\n  }, []);\r\n\r\n  const reset = useCallback(() => {\r\n    setData(null);\r\n    setError(null);\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (autoFetch) {\r\n      fetchData();\r\n    }\r\n  }, [fetchData, autoFetch]);\r\n\r\n  return {\r\n    data,\r\n    loading,\r\n    error,\r\n    refetch: fetchData,\r\n    mutate,\r\n    reset\r\n  };\r\n};\r\n\r\n// Specialized Hooks für häufige Anwendungsfälle\r\nexport const useGetData = <T>(url: string, options?: Omit<UseApiDataOptions<T>, 'url' | 'method'>) => {\r\n  return useApiData<T>({ url, method: 'GET', ...options });\r\n};\r\n\r\nexport const usePostData = <T>(url: string, body: any, options?: Omit<UseApiDataOptions<T>, 'url' | 'method' | 'body'>) => {\r\n  return useApiData<T>({ url, method: 'POST', body, autoFetch: false, ...options });\r\n};\r\n\r\nexport const usePutData = <T>(url: string, body: any, options?: Omit<UseApiDataOptions<T>, 'url' | 'method' | 'body'>) => {\r\n  return useApiData<T>({ url, method: 'PUT', body, autoFetch: false, ...options });\r\n};\r\n\r\nexport const useDeleteData = <T>(url: string, options?: Omit<UseApiDataOptions<T>, 'url' | 'method'>) => {\r\n  return useApiData<T>({ url, method: 'DELETE', autoFetch: false, ...options });\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\hooks\\useCRM.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CustomerFormData' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":95,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":111}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// CRM Hooks für VALEO NeuroERP\r\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { crmService } from '../services/crmService';\r\nimport { Customer, ContactPerson, CustomerFilter, ContactPersonFilter, ContactPersonFormData, CustomerFormData } from '../types/crm';\r\n\r\n// Customer Hooks\r\nexport const useCustomers = (filter?: CustomerFilter) => {\r\n  return useQuery<Customer[], Error>({\r\n    queryKey: ['customers', filter],\r\n    queryFn: () => crmService.getCustomers(filter),\r\n  });\r\n};\r\n\r\nexport const useCustomer = (id: string) => {\r\n  return useQuery<Customer | null, Error>({\r\n    queryKey: ['customer', id],\r\n    queryFn: () => crmService.getCustomerById(id),\r\n    enabled: !!id,\r\n  });\r\n};\r\n\r\nexport const useUpdateCustomer = () => {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation<Customer, Error, { id: string; data: Partial<Customer> }>({\r\n    mutationFn: ({ id, data }: { id: string; data: Partial<Customer> }) =>\r\n      crmService.updateCustomer(id, data),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['customers'] });\r\n    },\r\n  });\r\n};\r\n\r\n\r\n// Contact Person Hooks\r\nexport const useContactPersons = (customerId: string, filter?: ContactPersonFilter) => {\r\n  return useQuery<ContactPerson[], Error>({\r\n    queryKey: ['contactPersons', customerId, filter],\r\n    queryFn: () => crmService.getContactPersons(customerId, filter),\r\n    enabled: !!customerId,\r\n  });\r\n};\r\n\r\nexport const useContactPerson = (id: string) => {\r\n  return useQuery<ContactPerson | null, Error>({\r\n    queryKey: ['contactPerson', id],\r\n    queryFn: () => crmService.getContactPersonById(id),\r\n    enabled: !!id,\r\n  });\r\n};\r\n\r\nexport const useCreateContactPerson = () => {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation<ContactPerson, Error, ContactPersonFormData>({\r\n    mutationFn: (formData: ContactPersonFormData) => crmService.createContactPerson(formData),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['contactPersons'] });\r\n    },\r\n  });\r\n};\r\n\r\nexport const useUpdateContactPerson = () => {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation<ContactPerson, Error, { id: string; formData: ContactPersonFormData }>({\r\n    mutationFn: ({ id, formData }: { id: string; formData: ContactPersonFormData }) =>\r\n      crmService.updateContactPerson(id, formData),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['contactPersons'] });\r\n    },\r\n  });\r\n};\r\n\r\nexport const useDeleteContactPerson = () => {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation<void, Error, string>({\r\n    mutationFn: (id: string) => crmService.deleteContactPerson(id),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['contactPersons'] });\r\n    },\r\n  });\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\hooks\\useDebounce.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[531,534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[531,534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[541,544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[541,544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\n\r\n// Debounce Hook für VALEO NeuroERP\r\nexport const useDebounce = <T>(value: T, delay: number): T => {\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n};\r\n\r\n// Debounced Callback Hook\r\nexport const useDebouncedCallback = <T extends (...args: any[]) => any>(\r\n  callback: T,\r\n  delay: number\r\n): T => {\r\n  const [debounceTimer, setDebounceTimer] = useState<NodeJS.Timeout | null>(null);\r\n\r\n  const debouncedCallback = ((...args: Parameters<T>) => {\r\n    if (debounceTimer) {\r\n      clearTimeout(debounceTimer);\r\n    }\r\n\r\n    const timer = setTimeout(() => {\r\n      callback(...args);\r\n    }, delay);\r\n\r\n    setDebounceTimer(timer);\r\n  }) as T;\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (debounceTimer) {\r\n        clearTimeout(debounceTimer);\r\n      }\r\n    };\r\n  }, [debounceTimer]);\r\n\r\n  return debouncedCallback;\r\n};\r\n\r\n// Debounced State Hook\r\nexport const useDebouncedState = <T>(initialValue: T, delay: number) => {\r\n  const [value, setValue] = useState<T>(initialValue);\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(initialValue);\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return [value, setValue, debouncedValue] as const;\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\hooks\\useDualMCP.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[632,635],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[632,635],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[996,999],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[996,999],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1964,1967],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1964,1967],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2223,2226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2223,2226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2649,2652],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2649,2652],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2699,2702],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2699,2702],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3124,3127],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3124,3127],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":133,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3774,3777],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3774,3777],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4069,4072],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4069,4072],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'uiMetadata' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":147,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":147,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":197,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5873,5876],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5873,5876],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":208,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6163,6166],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6163,6166],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":226,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6718,6721],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6718,6721],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":309,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":309,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9109,9112],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9109,9112],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Dual MCP React Hooks für VALEO NeuroERP\r\n * Kombiniert Schema- und UI-Metadata für optimale Komponenten-Entwicklung\r\n */\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { useForm, type UseFormReturn } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { z } from 'zod';\r\nimport dualMCPClient, { \r\n  type MCPSchema, \r\n  type CompleteMetadata, \r\n  type UIFieldMetadata \r\n} from '../utils/dualMCPClient';\r\n\r\n// Hook für kombinierte Metadaten\r\nexport interface UseDualMCPMetadataReturn {\r\n  schema: MCPSchema | null;\r\n  uiMetadata: CompleteMetadata | null;\r\n  combined: any;\r\n  loading: boolean;\r\n  error: string | null;\r\n  refetch: () => Promise<void>;\r\n}\r\n\r\nexport const useDualMCPMetadata = (tableName: string): UseDualMCPMetadataReturn => {\r\n  const [schema, setSchema] = useState<MCPSchema | null>(null);\r\n  const [uiMetadata, setUIMetadata] = useState<CompleteMetadata | null>(null);\r\n  const [combined, setCombined] = useState<any>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchMetadata = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const result = await dualMCPClient.getCombinedMetadata(tableName);\r\n      \r\n      setSchema(result.schema);\r\n      setUIMetadata(result.uiMetadata);\r\n      setCombined(result.combined);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Unbekannter Fehler');\r\n      console.error(`Error fetching dual MCP metadata for ${tableName}:`, err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [tableName]);\r\n\r\n  useEffect(() => {\r\n    fetchMetadata();\r\n  }, [fetchMetadata]);\r\n\r\n  return {\r\n    schema,\r\n    uiMetadata,\r\n    combined,\r\n    loading,\r\n    error,\r\n    refetch: fetchMetadata\r\n  };\r\n};\r\n\r\n// Hook für Schema-basierte Formulare mit UI-Metadata\r\nexport interface UseDualMCPFormReturn<T = any> extends UseFormReturn<T> {\r\n  schema: MCPSchema | null;\r\n  uiMetadata: CompleteMetadata | null;\r\n  enhancedFields: UIFieldMetadata[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  refetch: () => Promise<void>;\r\n}\r\n\r\nexport const useDualMCPForm = <T = any>(\r\n  tableName: string,\r\n  defaultValues?: Partial<T>\r\n): UseDualMCPFormReturn<T> => {\r\n  const { schema, uiMetadata, combined, loading, error, refetch } = useDualMCPMetadata(tableName);\r\n  \r\n  // Zod-Schema generieren\r\n  const zodSchema = combined ? dualMCPClient.generateZodSchema(combined) : z.object({});\r\n  \r\n  // React Hook Form mit Zod-Resolver\r\n  const form = useForm<T>({\r\n    resolver: zodResolver(zodSchema) as any,\r\n    defaultValues: (defaultValues || {}) as any\r\n  });\r\n\r\n  // Erweiterte Felder mit UI-Metadata\r\n  const enhancedFields = combined?.enhanced_fields || [];\r\n\r\n  return {\r\n    ...form,\r\n    schema,\r\n    uiMetadata,\r\n    enhancedFields,\r\n    loading,\r\n    error,\r\n    refetch\r\n  };\r\n};\r\n\r\n// Hook für Schema-basierte Tabellen mit UI-Metadata\r\nexport interface UseDualMCPTableReturn {\r\n  schema: MCPSchema | null;\r\n  uiMetadata: CompleteMetadata | null;\r\n  tableMetadata: any;\r\n  enhancedFields: UIFieldMetadata[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  refetch: () => Promise<void>;\r\n}\r\n\r\nexport const useDualMCPTable = (tableName: string): UseDualMCPTableReturn => {\r\n  const { schema, uiMetadata, combined, loading, error, refetch } = useDualMCPMetadata(tableName);\r\n  \r\n  const tableMetadata = uiMetadata?.table || null;\r\n  const enhancedFields = combined?.enhanced_fields || [];\r\n\r\n  return {\r\n    schema,\r\n    uiMetadata,\r\n    tableMetadata,\r\n    enhancedFields,\r\n    loading,\r\n    error,\r\n    refetch\r\n  };\r\n};\r\n\r\n// Hook für CRUD-Operationen mit RLS-Compliance\r\nexport interface UseDualMCPDataReturn<T = any> {\r\n  data: T[] | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n  refetch: () => Promise<void>;\r\n  create: (item: Omit<T, 'id'>) => Promise<T>;\r\n  update: (id: string, item: Partial<T>) => Promise<T>;\r\n  delete: (id: string) => Promise<void>;\r\n}\r\n\r\nexport const useDualMCPData = <T = any>(tableName: string): UseDualMCPDataReturn<T> => {\r\n  const [data, setData] = useState<T[] | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const { schema, uiMetadata } = useDualMCPMetadata(tableName);\r\n\r\n  const fetchData = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Mock-Daten basierend auf Schema (später durch echte API ersetzen)\r\n      const mockData = generateMockData<T>(schema, tableName);\r\n      setData(mockData);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Unbekannter Fehler');\r\n      console.error(`Error fetching data for ${tableName}:`, err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [schema, tableName]);\r\n\r\n  const create = useCallback(async (item: Omit<T, 'id'>): Promise<T> => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Mock-Create (später durch echte API ersetzen)\r\n      const newItem = {\r\n        ...item,\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      } as T;\r\n\r\n      setData(prev => prev ? [...prev, newItem] : [newItem]);\r\n      return newItem;\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Fehler beim Erstellen');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const update = useCallback(async (id: string, item: Partial<T>): Promise<T> => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Mock-Update (später durch echte API ersetzen)\r\n      setData(prev => {\r\n        if (!prev) return null;\r\n        return prev.map(existingItem => {\r\n          if ((existingItem as any).id === id) {\r\n            return {\r\n              ...existingItem,\r\n              ...item,\r\n              updated_at: new Date().toISOString()\r\n            };\r\n          }\r\n          return existingItem;\r\n        });\r\n      });\r\n\r\n      const updatedItem = data?.find(item => (item as any).id === id);\r\n      if (!updatedItem) throw new Error('Item nicht gefunden');\r\n      \r\n      return updatedItem;\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Fehler beim Aktualisieren');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [data]);\r\n\r\n  const deleteItem = useCallback(async (id: string): Promise<void> => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Mock-Delete (später durch echte API ersetzen)\r\n      setData(prev => prev ? prev.filter(item => (item as any).id !== id) : null);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Fehler beim Löschen');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [fetchData]);\r\n\r\n  return {\r\n    data,\r\n    loading,\r\n    error,\r\n    refetch: fetchData,\r\n    create,\r\n    update,\r\n    delete: deleteItem\r\n  };\r\n};\r\n\r\n// Hook für automatische Komponenten-Generierung\r\nexport interface UseDualMCPComponentReturn {\r\n  formComponent: string;\r\n  tableComponent: string;\r\n  loading: boolean;\r\n  error: string | null;\r\n  regenerate: () => Promise<void>;\r\n}\r\n\r\nexport const useDualMCPComponent = (tableName: string): UseDualMCPComponentReturn => {\r\n  const [formComponent, setFormComponent] = useState<string>('');\r\n  const [tableComponent, setTableComponent] = useState<string>('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const { combined, loading: metadataLoading, error: metadataError } = useDualMCPMetadata(tableName);\r\n\r\n  const generateComponents = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      if (combined) {\r\n        const formCode = dualMCPClient.generateReactComponent(combined, 'form');\r\n        const tableCode = dualMCPClient.generateReactComponent(combined, 'table');\r\n        \r\n        setFormComponent(formCode);\r\n        setTableComponent(tableCode);\r\n      }\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Fehler bei der Komponenten-Generierung');\r\n      console.error(`Error generating components for ${tableName}:`, err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [combined, tableName]);\r\n\r\n  useEffect(() => {\r\n    if (!metadataLoading && !metadataError) {\r\n      generateComponents();\r\n    }\r\n  }, [metadataLoading, metadataError, generateComponents]);\r\n\r\n  return {\r\n    formComponent,\r\n    tableComponent,\r\n    loading: loading || metadataLoading,\r\n    error: error || metadataError,\r\n    regenerate: generateComponents\r\n  };\r\n};\r\n\r\n// Hilfsfunktion für Mock-Daten-Generierung\r\nfunction generateMockData<T>(schema: MCPSchema | null, tableName: string): T[] {\r\n  if (!schema) return [];\r\n\r\n  const mockData: T[] = [];\r\n  const mockCount = 5; // Anzahl Mock-Einträge\r\n\r\n  for (let i = 1; i <= mockCount; i++) {\r\n    const item: any = {\r\n      id: `${tableName}_${i}`,\r\n      created_at: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    };\r\n\r\n    // Felder basierend auf Schema generieren\r\n    schema.columns.forEach(column => {\r\n      if (column.name === 'id') return; // Bereits gesetzt\r\n\r\n      switch (column.type.toLowerCase()) {\r\n        case 'uuid':\r\n          item[column.name] = `uuid-${i}-${Math.random().toString(36).substr(2, 9)}`;\r\n          break;\r\n        case 'email':\r\n          item[column.name] = `user${i}@example.com`;\r\n          break;\r\n        case 'int':\r\n        case 'integer':\r\n        case 'bigint':\r\n          item[column.name] = Math.floor(Math.random() * 1000);\r\n          break;\r\n        case 'numeric':\r\n        case 'decimal':\r\n        case 'real':\r\n          item[column.name] = parseFloat((Math.random() * 1000).toFixed(2));\r\n          break;\r\n        case 'boolean':\r\n          item[column.name] = Math.random() > 0.5;\r\n          break;\r\n        case 'date':\r\n          item[column.name] = new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\r\n          break;\r\n        case 'timestamp':\r\n        case 'timestamptz':\r\n          item[column.name] = new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000).toISOString();\r\n          break;\r\n        case 'enum':\r\n          if (column.enum_values && column.enum_values.length > 0) {\r\n            item[column.name] = column.enum_values[Math.floor(Math.random() * column.enum_values.length)];\r\n          } else {\r\n            item[column.name] = 'default';\r\n          }\r\n          break;\r\n        default:\r\n          // Text-basierte Felder\r\n          if (column.name.toLowerCase().includes('name')) {\r\n            item[column.name] = `Test ${column.name} ${i}`;\r\n          } else if (column.name.toLowerCase().includes('description')) {\r\n            item[column.name] = `Beschreibung für ${column.name} ${i}`;\r\n          } else if (column.name.toLowerCase().includes('status')) {\r\n            item[column.name] = ['aktiv', 'inaktiv', 'wartung'][Math.floor(Math.random() * 3)];\r\n          } else {\r\n            item[column.name] = `Wert ${i}`;\r\n          }\r\n      }\r\n    });\r\n\r\n    mockData.push(item as T);\r\n  }\r\n\r\n  return mockData;\r\n}\r\n\r\n ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\hooks\\useLocalStorage.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'password' is defined but never used. Allowed unused args must match /^_/u.","line":155,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":155,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\n\r\ninterface UseLocalStorageOptions {\r\n  serialize?: (value: unknown) => string;\r\n  deserialize?: (value: string) => unknown;\r\n}\r\n\r\nconst defaultOptions: UseLocalStorageOptions = {\r\n  serialize: JSON.stringify,\r\n  deserialize: JSON.parse,\r\n};\r\n\r\nexport function useLocalStorage<T>(\r\n  key: string,\r\n  initialValue: T,\r\n  options: UseLocalStorageOptions = {}\r\n): [T, (value: T | ((val: T) => T)) => void] {\r\n  const { serialize, deserialize } = { ...defaultOptions, ...options };\r\n\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState<T>(() => {\r\n    if (typeof window === 'undefined') {\r\n      return initialValue;\r\n    }\r\n\r\n    try {\r\n      const item = window.localStorage.getItem(key);\r\n      return item ? (deserialize!(item) as T) : initialValue;\r\n    } catch (error) {\r\n      console.error(`Error reading localStorage key \"${key}\":`, error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = (value: T | ((val: T) => T)) => {\r\n    try {\r\n      // Allow value to be a function so we have the same API as useState\r\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\r\n      \r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      \r\n      // Save to local storage\r\n      if (typeof window !== 'undefined') {\r\n        window.localStorage.setItem(key, serialize!(valueToStore));\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error setting localStorage key \"${key}\":`, error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n}\r\n\r\n// Hook for managing multiple localStorage items\r\nexport function useLocalStorageMulti<T extends Record<string, unknown>>(\r\n  keys: (keyof T)[],\r\n  initialValues: T\r\n): [T, (updates: Partial<T>) => void] {\r\n  const [values, setValues] = useState<T>(() => {\r\n    if (typeof window === 'undefined') {\r\n      return initialValues;\r\n    }\r\n\r\n    const result = { ...initialValues };\r\n    \r\n    keys.forEach((key) => {\r\n      try {\r\n        const item = window.localStorage.getItem(String(key));\r\n        if (item) {\r\n          result[key] = JSON.parse(item) as T[keyof T];\r\n        }\r\n      } catch (error) {\r\n        console.error(`Error reading localStorage key \"${String(key)}\":`, error);\r\n      }\r\n    });\r\n\r\n    return result;\r\n  });\r\n\r\n  const setValue = (updates: Partial<T>) => {\r\n    const newValues = { ...values, ...updates };\r\n    setValues(newValues);\r\n\r\n    if (typeof window !== 'undefined') {\r\n      Object.entries(updates).forEach(([key, value]) => {\r\n        try {\r\n          window.localStorage.setItem(key, JSON.stringify(value));\r\n        } catch (error) {\r\n          console.error(`Error setting localStorage key \"${key}\":`, error);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return [values, setValue];\r\n}\r\n\r\n// Hook for managing localStorage with expiration\r\nexport function useLocalStorageWithExpiry<T>(\r\n  key: string,\r\n  initialValue: T,\r\n  expiryInMinutes: number = 60\r\n): [T | null, (value: T) => void] {\r\n  const [storedValue, setStoredValue] = useState<T | null>(() => {\r\n    if (typeof window === 'undefined') {\r\n      return null;\r\n    }\r\n\r\n    try {\r\n      const item = window.localStorage.getItem(key);\r\n      if (!item) return null;\r\n\r\n      const parsedItem = JSON.parse(item) as { value: T; expiry: number };\r\n      \r\n      if (Date.now() > parsedItem.expiry) {\r\n        window.localStorage.removeItem(key);\r\n        return null;\r\n      }\r\n\r\n      return parsedItem.value;\r\n    } catch (error) {\r\n      console.error(`Error reading localStorage key \"${key}\":`, error);\r\n      return null;\r\n    }\r\n  });\r\n\r\n  const setValue = (value: T) => {\r\n    try {\r\n      const item = {\r\n        value,\r\n        expiry: Date.now() + (expiryInMinutes * 60 * 1000),\r\n      };\r\n\r\n      setStoredValue(value);\r\n      \r\n      if (typeof window !== 'undefined') {\r\n        window.localStorage.setItem(key, JSON.stringify(item));\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error setting localStorage key \"${key}\":`, error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n}\r\n\r\n// Hook for managing localStorage with encryption (basic)\r\nexport function useLocalStorageEncrypted<T>(\r\n  key: string,\r\n  initialValue: T,\r\n  password: string\r\n): [T, (value: T) => void] {\r\n  const [storedValue, setStoredValue] = useState<T>(() => {\r\n    if (typeof window === 'undefined') {\r\n      return initialValue;\r\n    }\r\n\r\n    try {\r\n      const item = window.localStorage.getItem(key);\r\n      if (!item) return initialValue;\r\n\r\n      // Basic encryption/decryption (for production, use a proper encryption library)\r\n      const decrypted = atob(item);\r\n      const parsed = JSON.parse(decrypted) as T;\r\n      return parsed;\r\n    } catch (error) {\r\n      console.error(`Error reading encrypted localStorage key \"${key}\":`, error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  const setValue = (value: T) => {\r\n    try {\r\n      // Basic encryption (for production, use a proper encryption library)\r\n      const encrypted = btoa(JSON.stringify(value));\r\n      \r\n      setStoredValue(value);\r\n      \r\n      if (typeof window !== 'undefined') {\r\n        window.localStorage.setItem(key, encrypted);\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error setting encrypted localStorage key \"${key}\":`, error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n}\r\n\r\n// Hook for managing localStorage with validation\r\nexport function useLocalStorageWithValidation<T>(\r\n  key: string,\r\n  initialValue: T,\r\n  validator: (value: unknown) => value is T\r\n): [T, (value: T) => void] {\r\n  const [storedValue, setStoredValue] = useState<T>(() => {\r\n    if (typeof window === 'undefined') {\r\n      return initialValue;\r\n    }\r\n\r\n    try {\r\n      const item = window.localStorage.getItem(key);\r\n      if (!item) return initialValue;\r\n\r\n      const parsed = JSON.parse(item) as unknown;\r\n      \r\n      if (validator(parsed)) {\r\n        return parsed;\r\n      } else {\r\n        console.warn(`Invalid data in localStorage key \"${key}\", using initial value`);\r\n        return initialValue;\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error reading localStorage key \"${key}\":`, error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  const setValue = (value: T) => {\r\n    try {\r\n      if (!validator(value)) {\r\n        throw new Error(`Invalid value for localStorage key \"${key}\"`);\r\n      }\r\n\r\n      setStoredValue(value);\r\n      \r\n      if (typeof window !== 'undefined') {\r\n        window.localStorage.setItem(key, JSON.stringify(value));\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error setting localStorage key \"${key}\":`, error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\hooks\\useMCPForm.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1651,1654],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1651,1654],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2851,2854],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2851,2854],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3170,3173],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3170,3173],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":128,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3816,3819],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3816,3819],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":178,"column":7,"nodeType":"CallExpression","endLine":178,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":216,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6097,6100],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6097,6100],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":216,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6123,6126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6123,6126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":294,"column":7,"nodeType":"CallExpression","endLine":294,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'T' is defined but never used. Allowed unused vars must match /^_/u.","line":365,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":365,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useRef } from 'react';\nimport { useForm, FieldValues, UseFormReturn, FieldError, FieldErrors, Path, PathValue, DefaultValues, Resolver } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { getMCPSchemaInjector } from '../utils/mcpSchemaInjector';\nimport type { MCPSchema } from '../utils/mcpSchemaInjector';\n\ninterface MCPFormConfig<T extends FieldValues> {\n  schema?: z.ZodSchema<T>;\n  defaultValues?: DefaultValues<T>;\n  mode?: 'onBlur' | 'onChange' | 'onSubmit' | 'onTouched' | 'all';\n  reValidateMode?: 'onBlur' | 'onChange' | 'onSubmit' | 'onTouched' | 'all';\n  criteriaMode?: 'firstError' | 'all';\n}\n\ninterface MCPFormState<T extends FieldValues> {\n  isDirty: boolean;\n  isSubmitting: boolean;\n  isSubmitted: boolean;\n  isValid: boolean;\n  errors: FieldErrors<T>;\n  touchedFields: Record<string, boolean>;\n}\n\ninterface MCPFormActions<T extends FieldValues> {\n  reset: (values?: DefaultValues<T>) => void;\n  setValue: (name: Path<T>, value: PathValue<T, Path<T>>) => void;\n  getValues: () => T;\n  trigger: (name?: Path<T> | Path<T>[]) => Promise<boolean>;\n  clearErrors: (name?: Path<T> | Path<T>[]) => void;\n  setError: (name: Path<T>, error: FieldError) => void;\n}\n\nexport function useMCPForm<T extends FieldValues = FieldValues>(\n  config: MCPFormConfig<T> = {}\n): UseFormReturn<T> & MCPFormState<T> & MCPFormActions<T> {\n  const {\n    schema,\n    defaultValues,\n    mode = 'onBlur',\n    reValidateMode = 'onChange',\n    criteriaMode = 'firstError'\n  } = config;\n\n  const resolver: Resolver<T> | undefined = schema ? zodResolver(schema as any) : undefined;\n\n  const form = useForm<T>({\n    defaultValues: defaultValues as DefaultValues<T>,\n    mode,\n    reValidateMode: reValidateMode as 'onBlur' | 'onChange' | 'onSubmit',\n    criteriaMode,\n    resolver\n  });\n\n  const [formState, setFormState] = useState<MCPFormState<T>>({\n    isDirty: false,\n    isSubmitting: false,\n    isSubmitted: false,\n    isValid: false,\n    errors: {} as FieldErrors<T>,\n    touchedFields: {}\n  });\n\n  const previousValues = useRef<T>(form.getValues());\n\n  // Form State synchronisieren\n  useEffect(() => {\n    const subscription = form.watch((value) => {\n      const currentValues = value as T;\n      const isDirty = JSON.stringify(currentValues) !== JSON.stringify(previousValues.current);\n      \n      setFormState(prev => ({\n        ...prev,\n        isDirty,\n        isValid: form.formState.isValid,\n        errors: form.formState.errors,\n        touchedFields: form.formState.touchedFields as Record<string, boolean>\n      }));\n      \n      previousValues.current = currentValues;\n    });\n\n    return () => subscription.unsubscribe();\n  }, [form]);\n\n  // Reset Funktion\n  const reset = useCallback((values?: DefaultValues<T>) => {\n    form.reset(values as any);\n    setFormState(prev => ({\n      ...prev,\n      isDirty: false,\n      isSubmitted: false,\n      errors: {} as FieldErrors<T>,\n      touchedFields: {}\n    }));\n  }, [form]);\n\n  // SetValue Funktion\n  const setValue = useCallback((name: Path<T>, value: PathValue<T, Path<T>>) => {\n    form.setValue(name, value as any);\n  }, [form]);\n\n  // GetValues Funktion\n  const getValues = useCallback(() => {\n    return form.getValues();\n  }, [form]);\n\n  // Trigger Funktion\n  const trigger = useCallback(async (name?: Path<T> | Path<T>[]) => {\n    return await form.trigger(name);\n  }, [form]);\n\n  // ClearErrors Funktion\n  const clearErrors = useCallback((name?: Path<T> | Path<T>[]) => {\n    form.clearErrors(name);\n  }, [form]);\n\n  // SetError Funktion\n  const setError = useCallback((name: Path<T>, error: FieldError) => {\n    form.setError(name, error);\n  }, [form]);\n\n  return {\n    ...form,\n    ...formState,\n    reset,\n    setValue,\n    getValues: getValues as any,\n    trigger,\n    clearErrors,\n    setError\n  };\n}\n\n// Specialized hooks for common form patterns\nexport function useMCPFormWithValidation<T extends FieldValues>(\n  schema: z.ZodSchema<T>,\n  defaultValues?: DefaultValues<T>\n) {\n  return useMCPForm<T>({\n    schema,\n    defaultValues\n  });\n}\n\nexport function useMCPFormWithAutoSave<T extends FieldValues>(\n  schema: z.ZodSchema<T>,\n  defaultValues?: DefaultValues<T>,\n  autoSaveDelay: number = 1000\n) {\n  const form = useMCPForm<T>({\n    schema,\n    defaultValues\n  });\n\n  const [lastSaved, setLastSaved] = useState<Date | null>(null);\n  const [isSaving, setIsSaving] = useState(false);\n\n  const autoSave = useCallback(async () => {\n    if (form.isDirty && form.isValid) {\n      setIsSaving(true);\n      try {\n        // Hier würde die tatsächliche Speicherlogik implementiert\n        await new Promise(resolve => setTimeout(resolve, 500));\n        setLastSaved(new Date());\n        form.reset(form.getValues());\n      } catch (error) {\n        console.error('Auto-Save fehlgeschlagen:', error);\n      } finally {\n        setIsSaving(false);\n      }\n    }\n  }, [form]);\n\n  useEffect(() => {\n    const timeoutId = setTimeout(autoSave, autoSaveDelay);\n    return () => clearTimeout(timeoutId);\n  }, [form.watch(), autoSave, autoSaveDelay]);\n\n  return {\n    ...form,\n    lastSaved,\n    isSaving\n  };\n}\n\nexport function useMCPFormWithSteps<T extends FieldValues>(\n  steps: Array<{\n    id: string;\n    title: string;\n    fields: (keyof T)[];\n    validation?: z.ZodSchema<Partial<T>>;\n  }>,\n  defaultValues?: DefaultValues<T>\n) {\n  const form = useMCPForm<T>({\n    defaultValues\n  });\n\n  const [currentStep, setCurrentStep] = useState(0);\n  const [completedSteps, setCompletedSteps] = useState<Set<number>>(new Set());\n\n  const currentStepConfig = steps[currentStep];\n  const isFirstStep = currentStep === 0;\n  const isLastStep = currentStep === steps.length - 1;\n\n  const validateCurrentStep = useCallback(async () => {\n    if (currentStepConfig?.validation) {\n      try {\n        const stepFields = form.getValues();\n        currentStepConfig.validation.parse(stepFields);\n        return true;\n      } catch (error) {\n        if (error instanceof z.ZodError) {\n          const zodError = error as z.ZodError;\n          (zodError as any).errors.forEach((err: any) => {\n            const fieldName = err.path.join('.') as Path<T>;\n            form.setError(fieldName, {\n              type: 'validation',\n              message: err.message\n            });\n          });\n        }\n        return false;\n      }\n    }\n    return true;\n  }, [currentStepConfig, form]);\n\n  const nextStep = useCallback(async () => {\n    const isValid = await validateCurrentStep();\n    if (isValid && !isLastStep) {\n      setCompletedSteps(prev => new Set([...prev, currentStep]));\n      setCurrentStep(prev => prev + 1);\n    }\n  }, [validateCurrentStep, isLastStep, currentStep]);\n\n  const prevStep = useCallback(() => {\n    if (!isFirstStep) {\n      setCurrentStep(prev => prev - 1);\n    }\n  }, [isFirstStep]);\n\n  const goToStep = useCallback((stepIndex: number) => {\n    if (stepIndex >= 0 && stepIndex < steps.length) {\n      setCurrentStep(stepIndex);\n    }\n  }, [steps.length]);\n\n  const isStepCompleted = useCallback((stepIndex: number) => {\n    return completedSteps.has(stepIndex);\n  }, [completedSteps]);\n\n  return {\n    ...form,\n    currentStep,\n    currentStepConfig,\n    isFirstStep,\n    isLastStep,\n    nextStep,\n    prevStep,\n    goToStep,\n    isStepCompleted,\n    completedSteps: Array.from(completedSteps)\n  };\n}\n\n// Hook for form with conditional fields\nexport function useMCPFormWithConditionalFields<T extends FieldValues>(\n  schema: z.ZodSchema<T>,\n  defaultValues?: DefaultValues<T>,\n  conditionalLogic?: Record<keyof T, (values: T) => boolean>\n) {\n  const form = useMCPForm<T>({\n    schema,\n    defaultValues\n  });\n\n  const [visibleFields, setVisibleFields] = useState<Set<keyof T>>(new Set());\n\n  useEffect(() => {\n    if (conditionalLogic) {\n      const values = form.getValues();\n      const newVisibleFields = new Set<keyof T>();\n\n      Object.entries(conditionalLogic).forEach(([field, condition]) => {\n        if (condition(values)) {\n          newVisibleFields.add(field as keyof T);\n        }\n      });\n\n      setVisibleFields(newVisibleFields);\n    }\n  }, [form.watch(), conditionalLogic, form]);\n\n  const isFieldVisible = useCallback((field: keyof T) => {\n    if (!conditionalLogic) return true;\n    return visibleFields.has(field);\n  }, [visibleFields, conditionalLogic]);\n\n  return {\n    ...form,\n    isFieldVisible,\n    visibleFields: Array.from(visibleFields)\n  };\n}\n\n// Hook for form with file uploads\nexport function useMCPFormWithFileUpload<T extends FieldValues>(\n  schema: z.ZodSchema<T>,\n  defaultValues?: DefaultValues<T>\n) {\n  const form = useMCPForm<T>({\n    schema,\n    defaultValues\n  });\n\n  const [uploadedFiles, setUploadedFiles] = useState<Record<string, File[]>>({});\n\n  const handleFileUpload = useCallback((fieldName: keyof T, files: FileList | File[]) => {\n    const fileArray = Array.from(files);\n    setUploadedFiles(prev => ({\n      ...prev,\n      [fieldName as string]: fileArray\n    }));\n\n    // Update form value\n    form.setValue(fieldName as Path<T>, fileArray as PathValue<T, Path<T>>);\n  }, [form]);\n\n  const removeFile = useCallback((fieldName: keyof T, fileIndex: number) => {\n    setUploadedFiles(prev => {\n      const fieldFiles = prev[fieldName as string] || [];\n      const newFiles = fieldFiles.filter((_, index) => index !== fileIndex);\n      \n      return {\n        ...prev,\n        [fieldName as string]: newFiles\n      };\n    });\n  }, []);\n\n  const clearFiles = useCallback((fieldName: keyof T) => {\n    setUploadedFiles(prev => {\n      const newFiles = { ...prev };\n      delete newFiles[fieldName as string];\n      return newFiles;\n    });\n    \n    form.setValue(fieldName as Path<T>, [] as PathValue<T, Path<T>>);\n  }, [form]);\n\n  return {\n    ...form,\n    uploadedFiles,\n    handleFileUpload,\n    removeFile,\n    clearFiles\n  };\n}\n\n/**\n * React Hook für MCP-Tabellen\n */\nexport function useMCPTable<T = unknown>(tableName: string) {\n  const [schema, setSchema] = useState<MCPSchema | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  const mcpInjector = getMCPSchemaInjector();\n\n  useEffect(() => {\n    const loadSchema = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n\n        const loadedSchema = await mcpInjector.getTableSchema(tableName);\n        setSchema(loadedSchema);\n\n      } catch (err) {\n        const error = err instanceof Error ? err : new Error('Unbekannter Fehler');\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadSchema();\n  }, [tableName, mcpInjector]);\n\n  const getVisibleColumns = useCallback(() => {\n    if (!schema) return [];\n    return schema.columns.filter(col => !col.primary || col.type !== 'uuid');\n  }, [schema]);\n\n  const getEditableColumns = useCallback(() => {\n    if (!schema) return [];\n    return schema.columns.filter(col => \n      !col.primary && \n      col.type !== 'uuid' && \n      !col.name.includes('created_at') && \n      !col.name.includes('updated_at')\n    );\n  }, [schema]);\n\n  const canDelete = useCallback(() => {\n    return schema?.rls?.delete || false;\n  }, [schema]);\n\n  return {\n    schema,\n    isLoading,\n    error,\n    getVisibleColumns,\n    getEditableColumns,\n    canDelete\n  };\n}\n\n/**\n * React Hook für MCP-Datenoperationen\n */\nexport function useMCPData<T = unknown>(tableName: string) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  const fetchData = useCallback(async (options?: {\n    page?: number;\n    limit?: number;\n    sortBy?: string;\n    sortOrder?: 'asc' | 'desc';\n    filters?: Record<string, unknown>;\n  }) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // Mock-Daten für Demo-Zwecke\n      const mockData = generateMockData(tableName);\n      \n      return {\n        data: mockData as T[],\n        total: mockData.length,\n        page: options?.page || 1,\n        limit: options?.limit || 10\n      };\n\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Unbekannter Fehler');\n      setError(error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [tableName]);\n\n  const fetchById = useCallback(async (id: string) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // Mock-Daten für Demo-Zwecke\n      const mockData = generateMockData(tableName);\n      const item = mockData.find((item: { id: string }) => item.id === id);\n      \n      if (!item) {\n        throw new Error('Element nicht gefunden');\n      }\n\n      return item as T;\n\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Unbekannter Fehler');\n      setError(error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [tableName]);\n\n  const createData = useCallback(async (newData: Partial<T>) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // Mock-Erstellung für Demo-Zwecke\n      const createdItem = {\n        id: `mock-${Date.now()}`,\n        ...newData,\n        created_at: new Date().toISOString()\n      };\n\n      return createdItem as T;\n\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Unbekannter Fehler');\n      setError(error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const updateData = useCallback(async (id: string, updateData: Partial<T>) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // Mock-Update für Demo-Zwecke\n      const updatedItem = {\n        id,\n        ...updateData,\n        updated_at: new Date().toISOString()\n      };\n\n      return updatedItem as T;\n\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Unbekannter Fehler');\n      setError(error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const deleteData = useCallback(async (id: string) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // Mock-Löschung für Demo-Zwecke\n      console.log(`Mock-Löschung: ${id}`);\n\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Unbekannter Fehler');\n      setError(error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  return {\n    fetchData,\n    fetchById,\n    createData,\n    updateData,\n    deleteData,\n    isLoading,\n    error\n  };\n}\n\n/**\n * Mock-Daten generieren\n */\nfunction generateMockData(tableName: string): unknown[] {\n  switch (tableName) {\n    case 'customers':\n      return [\n        { id: '1', name: 'Max Mustermann', email: 'max@example.com', type: 'individual' },\n        { id: '2', name: 'Firma GmbH', email: 'info@firma.de', type: 'company' }\n      ];\n    case 'invoices':\n      return [\n        { \n          id: '1', \n          customer_id: '1', \n          amount: 150.00, \n          status: 'open', \n          created_at: '2024-01-15T10:00:00Z' \n        },\n        { \n          id: '2', \n          customer_id: '2', \n          amount: 299.99, \n          status: 'paid', \n          created_at: '2024-01-14T15:30:00Z' \n        }\n      ];\n    default:\n      return [];\n  }\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\hooks\\useOffline.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'syncPendingRequests'. Either include it or remove the dependency array.","line":62,"column":6,"nodeType":"ArrayExpression","endLine":62,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [syncPendingRequests]","fix":{"range":[1950,1952],"text":"[syncPendingRequests]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'syncPendingRequests'. Either include it or remove the dependency array.","line":69,"column":6,"nodeType":"ArrayExpression","endLine":69,"endColumn":40,"suggestions":[{"desc":"Update the dependencies array to be: [isOnline, pendingRequests.length, syncPendingRequests]","fix":{"range":[2112,2146],"text":"[isOnline, pendingRequests.length, syncPendingRequests]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// React Hooks für Offline-Funktionalität\r\nimport { useState, useEffect, useCallback, useRef } from 'react';\r\n\r\ninterface OfflineRequest {\r\n  id: string;\r\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\r\n  url: string;\r\n  data?: unknown;\r\n  headers?: Record<string, string>;\r\n  timestamp: number;\r\n  retryCount: number;\r\n}\r\n\r\ninterface OfflineState {\r\n  isOnline: boolean;\r\n  isOffline: boolean;\r\n  pendingRequests: OfflineRequest[];\r\n  syncInProgress: boolean;\r\n  lastSyncTime: number | null;\r\n}\r\n\r\ninterface OfflineActions {\r\n  addPendingRequest: (request: Omit<OfflineRequest, 'id' | 'timestamp' | 'retryCount'>) => void;\r\n  removePendingRequest: (id: string) => void;\r\n  retryPendingRequest: (id: string) => Promise<void>;\r\n  retryAllPendingRequests: () => Promise<void>;\r\n  clearPendingRequests: () => void;\r\n  syncPendingRequests: () => Promise<void>;\r\n}\r\n\r\nconst MAX_RETRY_COUNT = 3;\r\nconst RETRY_DELAY = 5000; // 5 seconds\r\n\r\nexport function useOffline(): OfflineState & OfflineActions {\r\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\r\n  const [pendingRequests, setPendingRequests] = useState<OfflineRequest[]>([]);\r\n  const [syncInProgress, setSyncInProgress] = useState(false);\r\n  const [lastSyncTime, setLastSyncTime] = useState<number | null>(null);\r\n  \r\n  const syncTimeoutRef = useRef<NodeJS.Timeout>();\r\n\r\n  // Monitor online/offline status\r\n  useEffect(() => {\r\n    const handleOnline = () => {\r\n      setIsOnline(true);\r\n      console.log('🟢 Online - Starting sync...');\r\n      syncPendingRequests();\r\n    };\r\n\r\n    const handleOffline = () => {\r\n      setIsOnline(false);\r\n      console.log('🔴 Offline - Requests will be queued');\r\n    };\r\n\r\n    window.addEventListener('online', handleOnline);\r\n    window.addEventListener('offline', handleOffline);\r\n\r\n    return () => {\r\n      window.removeEventListener('online', handleOnline);\r\n      window.removeEventListener('offline', handleOffline);\r\n    };\r\n  }, []);\r\n\r\n  // Auto-sync when coming back online\r\n  useEffect(() => {\r\n    if (isOnline && pendingRequests.length > 0) {\r\n      syncPendingRequests();\r\n    }\r\n  }, [isOnline, pendingRequests.length]);\r\n\r\n  // Add pending request\r\n  const addPendingRequest = useCallback((request: Omit<OfflineRequest, 'id' | 'timestamp' | 'retryCount'>) => {\r\n    const newRequest: OfflineRequest = {\r\n      ...request,\r\n      id: `offline-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n      timestamp: Date.now(),\r\n      retryCount: 0\r\n    };\r\n\r\n    setPendingRequests(prev => [...prev, newRequest]);\r\n    \r\n    // Store in localStorage for persistence\r\n    const storedRequests = JSON.parse(localStorage.getItem('offline-requests') || '[]') as OfflineRequest[];\r\n    storedRequests.push(newRequest);\r\n    localStorage.setItem('offline-requests', JSON.stringify(storedRequests));\r\n    \r\n    console.log('📝 Added pending request:', newRequest.id);\r\n  }, []);\r\n\r\n  // Remove pending request\r\n  const removePendingRequest = useCallback((id: string) => {\r\n    setPendingRequests(prev => prev.filter(req => req.id !== id));\r\n    \r\n    // Remove from localStorage\r\n    const storedRequests = JSON.parse(localStorage.getItem('offline-requests') || '[]') as OfflineRequest[];\r\n    const updatedRequests = storedRequests.filter((req: OfflineRequest) => req.id !== id);\r\n    localStorage.setItem('offline-requests', JSON.stringify(updatedRequests));\r\n    \r\n    console.log('🗑️ Removed pending request:', id);\r\n  }, []);\r\n\r\n  // Retry single pending request\r\n  const retryPendingRequest = useCallback(async (id: string) => {\r\n    const request = pendingRequests.find(req => req.id === id);\r\n    if (!request) return;\r\n\r\n    if (request.retryCount >= MAX_RETRY_COUNT) {\r\n      console.log('❌ Max retry count reached for request:', id);\r\n      removePendingRequest(id);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      console.log(`🔄 Retrying request ${id} (attempt ${request.retryCount + 1}/${MAX_RETRY_COUNT})`);\r\n      \r\n      const response = await fetch(request.url, {\r\n        method: request.method,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...request.headers\r\n        },\r\n        body: request.data ? JSON.stringify(request.data) : undefined\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log('✅ Request succeeded:', id);\r\n        removePendingRequest(id);\r\n      } else {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Request failed:', id, error);\r\n      \r\n      // Increment retry count\r\n      setPendingRequests(prev => prev.map(req => \r\n        req.id === id \r\n          ? { ...req, retryCount: req.retryCount + 1 }\r\n          : req\r\n      ));\r\n      \r\n      // Update localStorage\r\n      const storedRequests = JSON.parse(localStorage.getItem('offline-requests') || '[]') as OfflineRequest[];\r\n      const updatedRequests = storedRequests.map((req: OfflineRequest) => \r\n        req.id === id \r\n          ? { ...req, retryCount: req.retryCount + 1 }\r\n          : req\r\n      );\r\n      localStorage.setItem('offline-requests', JSON.stringify(updatedRequests));\r\n    }\r\n  }, [pendingRequests, removePendingRequest]);\r\n\r\n  // Retry all pending requests\r\n  const retryAllPendingRequests = useCallback(async () => {\r\n    if (pendingRequests.length === 0) return;\r\n\r\n    console.log(`🔄 Retrying ${pendingRequests.length} pending requests...`);\r\n    \r\n    const promises = pendingRequests.map(request => retryPendingRequest(request.id));\r\n    await Promise.allSettled(promises);\r\n  }, [pendingRequests, retryPendingRequest]);\r\n\r\n  // Clear all pending requests\r\n  const clearPendingRequests = useCallback(() => {\r\n    setPendingRequests([]);\r\n    localStorage.removeItem('offline-requests');\r\n    console.log('🧹 Cleared all pending requests');\r\n  }, []);\r\n\r\n  // Sync pending requests\r\n  const syncPendingRequests = useCallback(async () => {\r\n    if (syncInProgress || !isOnline || pendingRequests.length === 0) return;\r\n\r\n    setSyncInProgress(true);\r\n    console.log(`🔄 Starting sync of ${pendingRequests.length} pending requests...`);\r\n\r\n    try {\r\n      await retryAllPendingRequests();\r\n      setLastSyncTime(Date.now());\r\n      console.log('✅ Sync completed');\r\n    } catch (error) {\r\n      console.error('❌ Sync failed:', error);\r\n    } finally {\r\n      setSyncInProgress(false);\r\n    }\r\n  }, [syncInProgress, isOnline, pendingRequests.length, retryAllPendingRequests]);\r\n\r\n  // Load pending requests from localStorage on mount\r\n  useEffect(() => {\r\n    try {\r\n      const storedRequests = JSON.parse(localStorage.getItem('offline-requests') || '[]') as OfflineRequest[];\r\n      if (storedRequests.length > 0) {\r\n        setPendingRequests(storedRequests);\r\n        console.log(`📋 Loaded ${storedRequests.length} pending requests from storage`);\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Failed to load pending requests from storage:', error);\r\n      localStorage.removeItem('offline-requests');\r\n    }\r\n  }, []);\r\n\r\n  // Auto-retry with exponential backoff\r\n  useEffect(() => {\r\n    if (pendingRequests.length > 0 && isOnline) {\r\n      const retryDelay = Math.min(RETRY_DELAY * Math.pow(2, pendingRequests[0]?.retryCount || 0), 30000);\r\n      \r\n      syncTimeoutRef.current = setTimeout(() => {\r\n        syncPendingRequests();\r\n      }, retryDelay);\r\n\r\n      return () => {\r\n        if (syncTimeoutRef.current) {\r\n          clearTimeout(syncTimeoutRef.current);\r\n        }\r\n      };\r\n    }\r\n  }, [pendingRequests, isOnline, syncPendingRequests]);\r\n\r\n  return {\r\n    isOnline,\r\n    isOffline: !isOnline,\r\n    pendingRequests,\r\n    syncInProgress,\r\n    lastSyncTime,\r\n    addPendingRequest,\r\n    removePendingRequest,\r\n    retryPendingRequest,\r\n    retryAllPendingRequests,\r\n    clearPendingRequests,\r\n    syncPendingRequests\r\n  };\r\n}\r\n\r\n// Hook for offline-capable API calls\r\nexport function useOfflineAPI() {\r\n  const { isOnline, addPendingRequest } = useOffline();\r\n\r\n  const offlineFetch = useCallback(async (\r\n    url: string,\r\n    options: RequestInit = {}\r\n  ): Promise<Response> => {\r\n    if (isOnline) {\r\n      // Try online first\r\n      try {\r\n        const response = await fetch(url, options);\r\n        if (response.ok) {\r\n          return response;\r\n        }\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      } catch (error) {\r\n        console.log('🌐 Online request failed, queuing for offline:', error);\r\n      }\r\n    }\r\n\r\n    // Queue for offline\r\n    addPendingRequest({\r\n      method: (options.method as 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH') || 'GET',\r\n      url,\r\n      data: options.body ? JSON.parse(options.body as string) : undefined,\r\n      headers: options.headers as Record<string, string>\r\n    });\r\n\r\n    // Return a mock response for offline\r\n    return new Response(JSON.stringify({ \r\n      success: false, \r\n      message: 'Request queued for offline processing',\r\n      offline: true \r\n    }), {\r\n      status: 202,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }, [isOnline, addPendingRequest]);\r\n\r\n  return { offlineFetch, isOnline };\r\n}\r\n\r\n// Hook for offline data storage\r\nexport function useOfflineStorage<T = unknown>(key: string, initialValue: T) {\r\n  const [data, setData] = useState<T>(() => {\r\n    try {\r\n      const stored = localStorage.getItem(`offline-${key}`);\r\n      return stored ? JSON.parse(stored) : initialValue;\r\n    } catch (error) {\r\n      console.error('❌ Failed to load offline data:', error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  const setOfflineData = useCallback((value: T) => {\r\n    setData(value);\r\n    try {\r\n      localStorage.setItem(`offline-${key}`, JSON.stringify(value));\r\n    } catch (error) {\r\n      console.error('❌ Failed to save offline data:', error);\r\n    }\r\n  }, [key]);\r\n\r\n  const clearOfflineData = useCallback(() => {\r\n    setData(initialValue);\r\n    localStorage.removeItem(`offline-${key}`);\r\n  }, [key, initialValue]);\r\n\r\n  return [data, setOfflineData, clearOfflineData] as const;\r\n}\r\n\r\n// Hook for offline queue management\r\nexport function useOfflineQueue() {\r\n  const { pendingRequests, removePendingRequest, retryPendingRequest, clearPendingRequests } = useOffline();\r\n\r\n  const getQueueStats = useCallback(() => {\r\n    const stats = {\r\n      total: pendingRequests.length,\r\n      byMethod: {} as Record<string, number>,\r\n      byStatus: {\r\n        pending: 0,\r\n        retrying: 0,\r\n        failed: 0\r\n      }\r\n    };\r\n\r\n    pendingRequests.forEach(request => {\r\n      // Count by method\r\n      stats.byMethod[request.method] = (stats.byMethod[request.method] || 0) + 1;\r\n      \r\n      // Count by status\r\n      if (request.retryCount === 0) {\r\n        stats.byStatus.pending++;\r\n      } else if (request.retryCount < 3) {\r\n        stats.byStatus.retrying++;\r\n      } else {\r\n        stats.byStatus.failed++;\r\n      }\r\n    });\r\n\r\n    return stats;\r\n  }, [pendingRequests]);\r\n\r\n  const getQueueByMethod = useCallback((method: string) => {\r\n    return pendingRequests.filter(request => request.method === method);\r\n  }, [pendingRequests]);\r\n\r\n  const getQueueByStatus = useCallback((status: 'pending' | 'retrying' | 'failed') => {\r\n    return pendingRequests.filter(request => {\r\n      if (status === 'pending') return request.retryCount === 0;\r\n      if (status === 'retrying') return request.retryCount > 0 && request.retryCount < 3;\r\n      if (status === 'failed') return request.retryCount >= 3;\r\n      return false;\r\n    });\r\n  }, [pendingRequests]);\r\n\r\n  return {\r\n    pendingRequests,\r\n    removePendingRequest,\r\n    retryPendingRequest,\r\n    clearPendingRequests,\r\n    getQueueStats,\r\n    getQueueByMethod,\r\n    getQueueByStatus\r\n  };\r\n}\r\n\r\n// Alias exports für Kompatibilität\r\nexport const useOfflineStatus = useOffline;\r\nexport const usePendingRequests = useOffline; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\hooks\\usePreload.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'options' is assigned a value but never used. Allowed unused args must match /^_/u.","line":227,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":227,"endColumn":10}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useRef } from 'react';\r\n\r\ninterface PreloadOptions {\r\n  priority?: 'high' | 'low' | 'auto';\r\n  timeout?: number;\r\n  retries?: number;\r\n}\r\n\r\ninterface PreloadState {\r\n  isLoading: boolean;\r\n  progress: number;\r\n  loaded: number;\r\n  total: number;\r\n  error: Error | null;\r\n}\r\n\r\ninterface PreloadItem {\r\n  id: string;\r\n  url: string;\r\n  type: 'image' | 'script' | 'style' | 'data';\r\n  priority: 'high' | 'low' | 'auto';\r\n  status: 'pending' | 'loading' | 'loaded' | 'error';\r\n  progress: number;\r\n  error?: Error;\r\n}\r\n\r\nexport function usePreload(\r\n  items: Array<{ id: string; url: string; type: 'image' | 'script' | 'style' | 'data' }>,\r\n  options: PreloadOptions = {}\r\n): PreloadState & { preload: () => Promise<void>; cancel: () => void } {\r\n  const { priority = 'auto', timeout = 30000 } = options;\r\n  \r\n  const [state, setState] = useState<PreloadState>({\r\n    isLoading: false,\r\n    progress: 0,\r\n    loaded: 0,\r\n    total: items.length,\r\n    error: null\r\n  });\r\n\r\n  const [preloadItems, setPreloadItems] = useState<PreloadItem[]>(() =>\r\n    items.map(item => ({\r\n      ...item,\r\n      priority,\r\n      status: 'pending',\r\n      progress: 0\r\n    }))\r\n  );\r\n\r\n  const abortControllerRef = useRef<AbortController | null>(null);\r\n  const timeoutRef = useRef<NodeJS.Timeout>();\r\n\r\n  const preload = useCallback(async () => {\r\n    if (state.isLoading) return;\r\n\r\n    setState(prev => ({ ...prev, isLoading: true, error: null }));\r\n    abortControllerRef.current = new AbortController();\r\n\r\n    const timeoutId = setTimeout(() => {\r\n      abortControllerRef.current?.abort();\r\n      setState(prev => ({ \r\n        ...prev, \r\n        isLoading: false, \r\n        error: new Error('Preload timeout') \r\n      }));\r\n    }, timeout);\r\n\r\n    timeoutRef.current = timeoutId;\r\n\r\n    try {\r\n      const promises = preloadItems.map(async (item) => {\r\n        if (item.status === 'loaded') return;\r\n\r\n        setPreloadItems(prev => prev.map(i => \r\n          i.id === item.id ? { ...i, status: 'loading' } : i\r\n        ));\r\n\r\n        try {\r\n          switch (item.type) {\r\n            case 'image':\r\n              await preloadImage(item.url, abortControllerRef.current!.signal);\r\n              break;\r\n            case 'script':\r\n              await preloadScript(item.url, abortControllerRef.current!.signal);\r\n              break;\r\n            case 'style':\r\n              await preloadStyle(item.url, abortControllerRef.current!.signal);\r\n              break;\r\n            case 'data':\r\n              await preloadData(item.url, abortControllerRef.current!.signal);\r\n              break;\r\n          }\r\n\r\n          setPreloadItems(prev => prev.map(i => \r\n            i.id === item.id ? { ...i, status: 'loaded', progress: 100 } : i\r\n          ));\r\n\r\n          setState(prev => ({\r\n            ...prev,\r\n            loaded: prev.loaded + 1,\r\n            progress: ((prev.loaded + 1) / prev.total) * 100\r\n          }));\r\n\r\n        } catch (error) {\r\n          const errorObj = error instanceof Error ? error : new Error('Unknown error');\r\n          setPreloadItems(prev => prev.map(i => \r\n            i.id === item.id ? { ...i, status: 'error', error: errorObj } : i\r\n          ));\r\n          throw errorObj;\r\n        }\r\n      });\r\n\r\n      await Promise.allSettled(promises);\r\n      setState(prev => ({ ...prev, isLoading: false }));\r\n\r\n    } catch (error) {\r\n      const errorObj = error instanceof Error ? error : new Error('Unknown error');\r\n      setState(prev => ({ ...prev, isLoading: false, error: errorObj }));\r\n    } finally {\r\n      clearTimeout(timeoutId);\r\n    }\r\n  }, [preloadItems, state.isLoading, timeout]);\r\n\r\n  const cancel = useCallback(() => {\r\n    abortControllerRef.current?.abort();\r\n    if (timeoutRef.current) {\r\n      clearTimeout(timeoutRef.current);\r\n    }\r\n    setState(prev => ({ ...prev, isLoading: false }));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      cancel();\r\n    };\r\n  }, [cancel]);\r\n\r\n  return {\r\n    ...state,\r\n    preload,\r\n    cancel\r\n  };\r\n}\r\n\r\n// Alias exports für Kompatibilität\r\nexport const usePreloadPerformance = usePreload;\r\n\r\n// Helper functions for preloading different types of resources\r\nasync function preloadImage(url: string, signal: AbortSignal): Promise<void> {\r\n  return new Promise((resolve, reject) => {\r\n    const img = new Image();\r\n    \r\n    img.onload = () => resolve();\r\n    img.onerror = () => reject(new Error(`Failed to load image: ${url}`));\r\n    \r\n    if (signal.aborted) {\r\n      reject(new Error('Preload cancelled'));\r\n      return;\r\n    }\r\n\r\n    signal.addEventListener('abort', () => {\r\n      img.src = '';\r\n      reject(new Error('Preload cancelled'));\r\n    });\r\n\r\n    img.src = url;\r\n  });\r\n}\r\n\r\nasync function preloadScript(url: string, signal: AbortSignal): Promise<void> {\r\n  return new Promise((resolve, reject) => {\r\n    const script = document.createElement('script');\r\n    script.src = url;\r\n    script.async = true;\r\n    \r\n    script.onload = () => resolve();\r\n    script.onerror = () => reject(new Error(`Failed to load script: ${url}`));\r\n    \r\n    if (signal.aborted) {\r\n      reject(new Error('Preload cancelled'));\r\n      return;\r\n    }\r\n\r\n    signal.addEventListener('abort', () => {\r\n      script.remove();\r\n      reject(new Error('Preload cancelled'));\r\n    });\r\n\r\n    document.head.appendChild(script);\r\n  });\r\n}\r\n\r\nasync function preloadStyle(url: string, signal: AbortSignal): Promise<void> {\r\n  return new Promise((resolve, reject) => {\r\n    const link = document.createElement('link');\r\n    link.rel = 'stylesheet';\r\n    link.href = url;\r\n    \r\n    link.onload = () => resolve();\r\n    link.onerror = () => reject(new Error(`Failed to load style: ${url}`));\r\n    \r\n    if (signal.aborted) {\r\n      reject(new Error('Preload cancelled'));\r\n      return;\r\n    }\r\n\r\n    signal.addEventListener('abort', () => {\r\n      link.remove();\r\n      reject(new Error('Preload cancelled'));\r\n    });\r\n\r\n    document.head.appendChild(link);\r\n  });\r\n}\r\n\r\nasync function preloadData(url: string, signal: AbortSignal): Promise<void> {\r\n  const response = await fetch(url, { signal });\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to load data: ${url}`);\r\n  }\r\n  await response.json();\r\n}\r\n\r\n// Hook for preloading with progress tracking\r\nexport function usePreloadWithProgress(\r\n  items: Array<{ id: string; url: string; type: 'image' | 'script' | 'style' | 'data' }>,\r\n  options: PreloadOptions = {}\r\n) {\r\n  const [progress, setProgress] = useState(0);\r\n  const [currentItem, setCurrentItem] = useState<string | null>(null);\r\n  const [errors, setErrors] = useState<Record<string, Error>>({});\r\n\r\n  const preload = useCallback(async () => {\r\n    setProgress(0);\r\n    setErrors({});\r\n    setCurrentItem(null);\r\n\r\n    for (let i = 0; i < items.length; i++) {\r\n      const item = items[i];\r\n      setCurrentItem(item.id);\r\n      \r\n      try {\r\n        switch (item.type) {\r\n          case 'image':\r\n            await preloadImage(item.url, new AbortController().signal);\r\n            break;\r\n          case 'script':\r\n            await preloadScript(item.url, new AbortController().signal);\r\n            break;\r\n          case 'style':\r\n            await preloadStyle(item.url, new AbortController().signal);\r\n            break;\r\n          case 'data':\r\n            await preloadData(item.url, new AbortController().signal);\r\n            break;\r\n        }\r\n        \r\n        setProgress(((i + 1) / items.length) * 100);\r\n      } catch (error) {\r\n        const errorObj = error instanceof Error ? error : new Error('Unknown error');\r\n        setErrors(prev => ({ ...prev, [item.id]: errorObj }));\r\n      }\r\n    }\r\n\r\n    setCurrentItem(null);\r\n  }, [items]);\r\n\r\n  return {\r\n    progress,\r\n    currentItem,\r\n    errors,\r\n    preload\r\n  };\r\n}\r\n\r\n// Hook for preloading critical resources\r\nexport function useCriticalPreload(\r\n  criticalItems: Array<{ id: string; url: string; type: 'image' | 'script' | 'style' | 'data' }>,\r\n  nonCriticalItems: Array<{ id: string; url: string; type: 'image' | 'script' | 'style' | 'data' }> = []\r\n) {\r\n  const [criticalLoaded, setCriticalLoaded] = useState(false);\r\n  const [nonCriticalLoaded, setNonCriticalLoaded] = useState(false);\r\n\r\n  // Hooks müssen top-level aufgerufen werden\r\n  const criticalPreload = usePreload(criticalItems, { priority: 'high' });\r\n  const nonCriticalPreload = usePreload(nonCriticalItems, { priority: 'low' });\r\n\r\n  const preloadCritical = useCallback(async () => {\r\n    await criticalPreload.preload();\r\n    setCriticalLoaded(true);\r\n  }, [criticalPreload]);\r\n\r\n  const preloadNonCritical = useCallback(async () => {\r\n    if (nonCriticalItems.length === 0) {\r\n      setNonCriticalLoaded(true);\r\n      return;\r\n    }\r\n\r\n    await nonCriticalPreload.preload();\r\n    setNonCriticalLoaded(true);\r\n  }, [nonCriticalItems, nonCriticalPreload]);\r\n\r\n  const preloadAll = useCallback(async () => {\r\n    await preloadCritical();\r\n    await preloadNonCritical();\r\n  }, [preloadCritical, preloadNonCritical]);\r\n\r\n  return {\r\n    criticalLoaded,\r\n    nonCriticalLoaded,\r\n    allLoaded: criticalLoaded && nonCriticalLoaded,\r\n    preloadCritical,\r\n    preloadNonCritical,\r\n    preloadAll\r\n  };\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\lib\\agent-api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\lib\\schemas.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":150,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4168,4171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4168,4171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from 'zod';\n\n// Trust Level Schema\nexport const TrustLevelSchema = z.enum(['fact', 'assumption', 'uncertain']);\nexport type TrustLevel = z.infer<typeof TrustLevelSchema>;\n\n// Module Status Schema\nexport const ModuleStatusSchema = z.enum(['active', 'maintenance', 'planned', 'deprecated']);\nexport type ModuleStatus = z.infer<typeof ModuleStatusSchema>;\n\n// Module Category Schema\nexport const ModuleCategorySchema = z.enum([\n  'business', \n  'core', \n  'analytics', \n  'management', \n  'quality', \n  'emergency',\n  'finance',\n  'logistics',\n  'documentation',\n  'support',\n  'system',\n  'security',\n  'data',\n  'integration',\n  'monitoring',\n  'training',\n  'community',\n  'updates',\n  'communication',\n  'reporting',\n  'compliance',\n  'search',\n  'workflow',\n  'storage'\n]);\nexport type ModuleCategory = z.infer<typeof ModuleCategorySchema>;\n\n// Module Feature Schema\nexport const ModuleFeatureSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  description: z.string(),\n  available: z.boolean(),\n  trustLevel: TrustLevelSchema,\n  confidence: z.number().min(0).max(100)\n});\nexport type ModuleFeature = z.infer<typeof ModuleFeatureSchema>;\n\n// Module Card Schema\nexport const ModuleCardSchema = z.object({\n  id: z.string(),\n  title: z.string(),\n  description: z.string(),\n  category: ModuleCategorySchema,\n  status: ModuleStatusSchema,\n  trustLevel: TrustLevelSchema,\n  confidence: z.number().min(0).max(100),\n  features: z.array(ModuleFeatureSchema).optional(),\n  icon: z.string(),\n  color: z.string()\n});\nexport type ModuleCard = z.infer<typeof ModuleCardSchema>;\n\n// Agent Context Schema\nexport const AgentContextSchema = z.object({\n  userId: z.string(),\n  sessionId: z.string(),\n  module: z.string(),\n  timestamp: z.date(),\n  metadata: z.record(z.string(), z.any()).optional()\n});\nexport type AgentContext = z.infer<typeof AgentContextSchema>;\n\n// Agent Suggestion Schema\nexport const AgentSuggestionSchema = z.object({\n  id: z.string(),\n  type: z.enum(['action', 'recommendation', 'warning', 'info']),\n  title: z.string(),\n  description: z.string(),\n  confidence: z.number().min(0).max(100),\n  trustLevel: TrustLevelSchema,\n  source: z.string(),\n  timestamp: z.date(),\n  parameters: z.record(z.string(), z.any()).optional()\n});\nexport type AgentSuggestion = z.infer<typeof AgentSuggestionSchema>;\n\n// Notification Schema\nexport const NotificationSchema = z.object({\n  id: z.string(),\n  type: z.enum(['info', 'success', 'warning', 'error']),\n  title: z.string(),\n  message: z.string(),\n  timestamp: z.date(),\n  read: z.boolean().default(false),\n  priority: z.enum(['low', 'medium', 'high', 'critical']).default('medium'),\n  source: z.string().optional(),\n  metadata: z.record(z.string(), z.any()).optional()\n});\nexport type Notification = z.infer<typeof NotificationSchema>;\n\n// User Schema\nexport const UserSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  email: z.string().email(),\n  role: z.enum(['admin', 'user', 'manager', 'viewer']),\n  avatar: z.string().optional(),\n  lastLogin: z.date().optional(),\n  preferences: z.record(z.string(), z.any()).optional()\n});\nexport type User = z.infer<typeof UserSchema>;\n\n// Data Card Schema\nexport const DataCardSchema = z.object({\n  title: z.string(),\n  value: z.string(),\n  trend: z.enum(['up', 'down', 'neutral']),\n  change: z.string(),\n  icon: z.string(),\n  trustLevel: TrustLevelSchema,\n  confidence: z.number().min(0).max(100)\n});\nexport type DataCard = z.infer<typeof DataCardSchema>;\n\n// Status Card Schema\nexport const StatusCardSchema = z.object({\n  title: z.string(),\n  status: z.enum(['online', 'offline', 'maintenance', 'error']),\n  trustLevel: TrustLevelSchema,\n  confidence: z.number().min(0).max(100)\n});\nexport type StatusCard = z.infer<typeof StatusCardSchema>;\n\n// Trust Indicator Schema\nexport const TrustIndicatorSchema = z.object({\n  level: TrustLevelSchema,\n  confidence: z.number().min(0).max(100),\n  source: z.string().optional()\n});\nexport type TrustIndicator = z.infer<typeof TrustIndicatorSchema>;\n\n// Create Agent Context Function\nexport const createAgentContext = (data: {\n  userId: string;\n  sessionId: string;\n  module: string;\n  metadata?: Record<string, any>;\n}): AgentContext => {\n  return {\n    userId: data.userId,\n    sessionId: data.sessionId,\n    module: data.module,\n    timestamp: new Date(),\n    metadata: data.metadata\n  };\n};\n\n// Validation Functions\nexport const validateModuleCard = (data: unknown): ModuleCard => {\n  return ModuleCardSchema.parse(data);\n};\n\nexport const validateAgentSuggestion = (data: unknown): AgentSuggestion => {\n  return AgentSuggestionSchema.parse(data);\n};\n\nexport const validateNotification = (data: unknown): Notification => {\n  return NotificationSchema.parse(data);\n};\n\nexport const validateUser = (data: unknown): User => {\n  return UserSchema.parse(data);\n};\n\n// Helper Functions\nexport const isTrustLevel = (value: unknown): value is TrustLevel => {\n  return TrustLevelSchema.safeParse(value).success;\n};\n\nexport const isModuleStatus = (value: unknown): value is ModuleStatus => {\n  return ModuleStatusSchema.safeParse(value).success;\n};\n\nexport const isModuleCategory = (value: unknown): value is ModuleCategory => {\n  return ModuleCategorySchema.safeParse(value).success;\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\lib\\ui-conventions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\lib\\utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1284,1287],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1284,1287],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1294,1297],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1294,1297],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type ClassValue, clsx } from 'clsx';\r\nimport { twMerge } from 'tailwind-merge';\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\n// Agent-spezifische Utilities\r\nexport function getAgentStatusColor(status: 'thinking' | 'processing' | 'ready' | 'error') {\r\n  switch (status) {\r\n    case 'thinking':\r\n      return 'text-agent-600 bg-agent-100'\r\n    case 'processing':\r\n      return 'text-ai-600 bg-ai-100'\r\n    case 'ready':\r\n      return 'text-success-600 bg-success-100'\r\n    case 'error':\r\n      return 'text-danger-600 bg-danger-100'\r\n    default:\r\n      return 'text-gray-600 bg-gray-100'\r\n  }\r\n}\r\n\r\nexport function getAgentIcon(status: 'thinking' | 'processing' | 'ready' | 'error') {\r\n  switch (status) {\r\n    case 'thinking':\r\n      return 'fas fa-brain'\r\n    case 'processing':\r\n      return 'fas fa-cogs'\r\n    case 'ready':\r\n      return 'fas fa-check-circle'\r\n    case 'error':\r\n      return 'fas fa-exclamation-triangle'\r\n    default:\r\n      return 'fas fa-robot'\r\n  }\r\n}\r\n\r\n// Formatierung für Agent-Ausgaben\r\nexport function formatAgentResponse(response: string) {\r\n  return response.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\r\n}\r\n\r\n// Debounce-Funktion für Agent-Requests\r\nexport function debounce<T extends (...args: any[]) => any>(\r\n  func: T,\r\n  wait: number\r\n): (...args: Parameters<T>) => void {\r\n  let timeout: NodeJS.Timeout\r\n  return (...args: Parameters<T>) => {\r\n    clearTimeout(timeout)\r\n    timeout = setTimeout(() => func(...args), wait)\r\n  }\r\n}\r\n\r\n// Agent-Context Helper\r\nexport function createAgentContext(module: string, action: string) {\r\n  return {\r\n    module,\r\n    action,\r\n    timestamp: new Date().toISOString(),\r\n    sessionId: Math.random().toString(36).substring(7)\r\n  }\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\AIAnalyticsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\AIDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\AITestPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\AnalyticsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\ApiCommunicationDemo.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'checkMiddleware' and 'loadData'. Either include them or remove the dependency array.","line":78,"column":6,"nodeType":"ArrayExpression","endLine":78,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [checkMiddleware, isAuthenticated, loadData]","fix":{"range":[1788,1805],"text":"[checkMiddleware, isAuthenticated, loadData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Typography, \r\n  Card, \r\n  Button, \r\n  Alert,\r\n  CircularProgress,\r\n  Chip,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemIcon,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem\r\n} from '@mui/material';\r\nimport {\r\n  CheckCircle as CheckCircleIcon,\r\n  Refresh as RefreshIcon,\r\n  Api as ApiIcon,\r\n  Storage as StorageIcon,\r\n  Cloud as CloudIcon,\r\n  Security as SecurityIcon,\r\n  Speed as SpeedIcon,\r\n  Add as AddIcon\r\n} from '@mui/icons-material';\r\nimport { useApi } from '../contexts/ApiContext';\r\nimport {\r\n  ObjectPageHeader,\r\n  ActionBar,\r\n  QuickViewCard,\r\n  StatusIndicator,\r\n  MessageStrip\r\n} from '../components/ui/NeuroFlowComponents';\r\n\r\nconst ApiCommunicationDemo: React.FC = () => {\r\n  const {\r\n    user,\r\n    isAuthenticated,\r\n    login,\r\n    logout,\r\n    systemStatus,\r\n    isLoading,\r\n    error,\r\n    refreshSystemStatus,\r\n    transactions,\r\n    inventory,\r\n    documents,\r\n    notifications,\r\n    getTransactions,\r\n    createTransaction,\r\n    getInventory,\r\n    createInventoryItem,\r\n    getDocuments,\r\n    getNotifications,\r\n    middlewareHealthCheck\r\n  } = useApi();\r\n\r\n  const [showLoginDialog, setShowLoginDialog] = useState(false);\r\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\r\n  const [createType, setCreateType] = useState<'transaction' | 'inventory'>('transaction');\r\n  const [loginData, setLoginData] = useState({ username: '', password: '' });\r\n  const [createData, setCreateData] = useState<any>({});\r\n  const [middlewareStatus, setMiddlewareStatus] = useState<any>(null);\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      loadData();\r\n      checkMiddleware();\r\n    }\r\n  }, [isAuthenticated]);\r\n\r\n  const loadData = async () => {\r\n    await Promise.all([\r\n      getTransactions(),\r\n      getInventory(),\r\n      getDocuments(),\r\n      getNotifications()\r\n    ]);\r\n  };\r\n\r\n  const checkMiddleware = async () => {\r\n    try {\r\n      const response = await middlewareHealthCheck();\r\n      setMiddlewareStatus(response);\r\n    } catch (err) {\r\n      console.error('Middleware check failed:', err);\r\n    }\r\n  };\r\n\r\n  const handleLogin = async () => {\r\n    const response = await login({\r\n      email: loginData.username, // Verwende username als email\r\n      password: loginData.password\r\n    });\r\n    if (response.success) {\r\n      setShowLoginDialog(false);\r\n      setLoginData({ username: '', password: '' });\r\n    }\r\n  };\r\n\r\n  const handleLogout = async () => {\r\n    await logout();\r\n  };\r\n\r\n  const handleCreate = async () => {\r\n    if (createType === 'transaction') {\r\n      await createTransaction({\r\n        type: createData.type || 'income',\r\n        amount: parseFloat(createData.amount) || 0,\r\n        date: new Date().toISOString(),\r\n        description: createData.description || '',\r\n        user_id: user?.id || '',\r\n        status: 'pending'\r\n      });\r\n    } else if (createType === 'inventory') {\r\n      await createInventoryItem({\r\n        name: createData.name || '',\r\n        sku: createData.sku || '',\r\n        quantity: parseInt(createData.quantity) || 0,\r\n        price: parseFloat(createData.unit_price) || 0, // Map unit_price to price\r\n        location: createData.location || '',\r\n        category: createData.category || 'general',\r\n        status: 'in_stock'\r\n      });\r\n    }\r\n    setShowCreateDialog(false);\r\n    setCreateData({});\r\n    loadData();\r\n  };\r\n\r\n  if (!isAuthenticated) {\r\n    return (\r\n      <Box sx={{ minHeight: '100vh', bgcolor: '#F5F6F7', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n        <Card sx={{ p: 4, maxWidth: 400, width: '100%' }}>\r\n          <Box sx={{ textAlign: 'center', mb: 3 }}>\r\n            <ApiIcon sx={{ fontSize: 64, color: '#0A6ED1', mb: 2 }} />\r\n            <Typography variant=\"h4\" gutterBottom>\r\n              VALEO NeuroERP\r\n            </Typography>\r\n            <Typography variant=\"body1\" color=\"text.secondary\">\r\n              API-Kommunikation Demo\r\n            </Typography>\r\n          </Box>\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            fullWidth\r\n            size=\"large\"\r\n            onClick={() => setShowLoginDialog(true)}\r\n            startIcon={<SecurityIcon />}\r\n          >\r\n            Anmelden\r\n          </Button>\r\n\r\n          <Alert severity=\"info\" sx={{ mt: 2 }}>\r\n            Verwenden Sie die Demo-Anmeldedaten: admin/admin\r\n          </Alert>\r\n        </Card>\r\n\r\n        {/* Login Dialog */}\r\n        <Dialog open={showLoginDialog} onClose={() => setShowLoginDialog(false)} maxWidth=\"sm\" fullWidth>\r\n          <DialogTitle>Anmeldung</DialogTitle>\r\n          <DialogContent>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Benutzername\"\r\n              value={loginData.username}\r\n              onChange={(e) => setLoginData({ ...loginData, username: e.target.value })}\r\n              margin=\"normal\"\r\n            />\r\n            <TextField\r\n              fullWidth\r\n              label=\"Passwort\"\r\n              type=\"password\"\r\n              value={loginData.password}\r\n              onChange={(e) => setLoginData({ ...loginData, password: e.target.value })}\r\n              margin=\"normal\"\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={() => setShowLoginDialog(false)}>Abbrechen</Button>\r\n            <Button onClick={handleLogin} variant=\"contained\">Anmelden</Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ minHeight: '100vh', bgcolor: '#F5F6F7' }}>\r\n      {/* Header */}\r\n      <ObjectPageHeader\r\n        title=\"API-Kommunikation Demo\"\r\n        subtitle=\"Frontend ↔ Middleware ↔ Backend\"\r\n        status=\"Aktiv\"\r\n        actions={\r\n          <Box sx={{ display: 'flex', gap: 1 }}>\r\n            <Button variant=\"outlined\" onClick={handleLogout}>\r\n              Abmelden\r\n            </Button>\r\n            <Button variant=\"contained\" onClick={() => setShowCreateDialog(true)} startIcon={<AddIcon />}>\r\n              Neu erstellen\r\n            </Button>\r\n          </Box>\r\n        }\r\n      />\r\n\r\n      {/* Error Display */}\r\n      {error && (\r\n        <Box sx={{ px: 3 }}>\r\n          <MessageStrip type=\"error\" title=\"Fehler\">\r\n            {error}\r\n          </MessageStrip>\r\n        </Box>\r\n      )}\r\n\r\n      {/* Action Bar */}\r\n      <ActionBar\r\n        title=\"System-Status & Kommunikation\"\r\n        actions={[\r\n          {\r\n            label: 'Status aktualisieren',\r\n            icon: <RefreshIcon />,\r\n            onClick: () => {\r\n              refreshSystemStatus();\r\n              checkMiddleware();\r\n              loadData();\r\n            },\r\n            variant: 'outlined'\r\n          },\r\n          {\r\n            label: 'Middleware prüfen',\r\n            icon: <ApiIcon />,\r\n            onClick: checkMiddleware,\r\n            variant: 'outlined'\r\n          }\r\n        ]}\r\n      />\r\n\r\n      <Box sx={{ p: 3 }}>\r\n        {/* System Status */}\r\n        <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: '1fr 1fr' }, gap: 3, mb: 4 }}>\r\n          <QuickViewCard\r\n            title=\"Backend Status\"\r\n            icon={<StorageIcon />}\r\n          >\r\n            <Box sx={{ textAlign: 'center', py: 2 }}>\r\n              <StatusIndicator\r\n                status={systemStatus?.backend ? 'success' : 'error'}\r\n                label={systemStatus?.backend ? 'Online' : 'Offline'}\r\n                size=\"large\"\r\n              />\r\n              <Typography variant=\"body2\" sx={{ mt: 1, color: '#515559' }}>\r\n                Port 8000\r\n              </Typography>\r\n            </Box>\r\n          </QuickViewCard>\r\n\r\n          <QuickViewCard\r\n            title=\"Middleware Status\"\r\n            icon={<CloudIcon />}\r\n          >\r\n            <Box sx={{ textAlign: 'center', py: 2 }}>\r\n              <StatusIndicator\r\n                status={middlewareStatus?.success ? 'success' : 'error'}\r\n                label={middlewareStatus?.success ? 'Online' : 'Offline'}\r\n                size=\"large\"\r\n              />\r\n              <Typography variant=\"body2\" sx={{ mt: 1, color: '#515559' }}>\r\n                Port 8001\r\n              </Typography>\r\n            </Box>\r\n          </QuickViewCard>\r\n        </Box>\r\n\r\n        {/* Data Overview */}\r\n        <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', sm: '1fr 1fr', md: 'repeat(4, 1fr)' }, gap: 3, mb: 4 }}>\r\n          <QuickViewCard title=\"Transaktionen\" icon={<SpeedIcon />}>\r\n            <Box sx={{ textAlign: 'center', py: 2 }}>\r\n              <Typography variant=\"h3\" sx={{ color: '#0A6ED1', mb: 1 }}>\r\n                {transactions.length}\r\n              </Typography>\r\n              <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                Gesamt\r\n              </Typography>\r\n            </Box>\r\n          </QuickViewCard>\r\n\r\n          <QuickViewCard title=\"Inventar\" icon={<StorageIcon />}>\r\n            <Box sx={{ textAlign: 'center', py: 2 }}>\r\n              <Typography variant=\"h3\" sx={{ color: '#107C41', mb: 1 }}>\r\n                {inventory.length}\r\n              </Typography>\r\n              <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                Artikel\r\n              </Typography>\r\n            </Box>\r\n          </QuickViewCard>\r\n\r\n          <QuickViewCard title=\"Dokumente\" icon={<ApiIcon />}>\r\n            <Box sx={{ textAlign: 'center', py: 2 }}>\r\n              <Typography variant=\"h3\" sx={{ color: '#E9730C', mb: 1 }}>\r\n                {documents.length}\r\n              </Typography>\r\n              <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                Gespeichert\r\n              </Typography>\r\n            </Box>\r\n          </QuickViewCard>\r\n\r\n          <QuickViewCard title=\"Benachrichtigungen\" icon={<SecurityIcon />}>\r\n            <Box sx={{ textAlign: 'center', py: 2 }}>\r\n              <Typography variant=\"h3\" sx={{ color: '#BB0000', mb: 1 }}>\r\n                {notifications.filter(n => !n.read).length}\r\n              </Typography>\r\n              <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                Ungelesen\r\n              </Typography>\r\n            </Box>\r\n          </QuickViewCard>\r\n        </Box>\r\n\r\n        {/* Recent Data */}\r\n        <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: '1fr 1fr' }, gap: 3 }}>\r\n          <Card>\r\n            <Box sx={{ p: 2, borderBottom: '1px solid #E5E5E5' }}>\r\n              <Typography variant=\"h6\">Letzte Transaktionen</Typography>\r\n            </Box>\r\n            <List>\r\n              {transactions.slice(0, 5).map((transaction) => (\r\n                <ListItem key={transaction.id}>\r\n                  <ListItemIcon>\r\n                    <CheckCircleIcon color=\"primary\" />\r\n                  </ListItemIcon>\r\n                  <ListItemText\r\n                    primary={`${transaction.type || 'unknown'} - ${transaction.amount}€`}\r\n                    secondary={transaction.description}\r\n                  />\r\n                  <Chip label={transaction.status || 'pending'} size=\"small\" />\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          </Card>\r\n\r\n          <Card>\r\n            <Box sx={{ p: 2, borderBottom: '1px solid #E5E5E5' }}>\r\n              <Typography variant=\"h6\">Inventar-Status</Typography>\r\n            </Box>\r\n            <List>\r\n              {inventory.slice(0, 5).map((item) => (\r\n                <ListItem key={item.id}>\r\n                  <ListItemIcon>\r\n                    <StorageIcon color=\"primary\" />\r\n                  </ListItemIcon>\r\n                  <ListItemText\r\n                    primary={item.name}\r\n                    secondary={`SKU: ${item.sku || 'N/A'} - ${item.quantity} Stück`}\r\n                  />\r\n                  <Chip \r\n                    label={item.status || 'unknown'} \r\n                    size=\"small\" \r\n                    color={item.status === 'in_stock' ? 'success' : 'warning'}\r\n                  />\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          </Card>\r\n        </Box>\r\n\r\n        {/* Loading Indicator */}\r\n        {isLoading && (\r\n          <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\r\n            <CircularProgress />\r\n          </Box>\r\n        )}\r\n      </Box>\r\n\r\n      {/* Create Dialog */}\r\n      <Dialog open={showCreateDialog} onClose={() => setShowCreateDialog(false)} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>Neuen Eintrag erstellen</DialogTitle>\r\n        <DialogContent>\r\n          <FormControl fullWidth margin=\"normal\">\r\n            <InputLabel>Typ</InputLabel>\r\n            <Select\r\n              value={createType}\r\n              onChange={(e) => setCreateType(e.target.value as 'transaction' | 'inventory')}\r\n            >\r\n              <MenuItem value=\"transaction\">Transaktion</MenuItem>\r\n              <MenuItem value=\"inventory\">Inventar-Item</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n\r\n          {createType === 'transaction' ? (\r\n            <>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Typ\"\r\n                value={createData.type || ''}\r\n                onChange={(e) => setCreateData({ ...createData, type: e.target.value })}\r\n                margin=\"normal\"\r\n              />\r\n              <TextField\r\n                fullWidth\r\n                label=\"Betrag\"\r\n                type=\"number\"\r\n                value={createData.amount || ''}\r\n                onChange={(e) => setCreateData({ ...createData, amount: e.target.value })}\r\n                margin=\"normal\"\r\n              />\r\n              <TextField\r\n                fullWidth\r\n                label=\"Beschreibung\"\r\n                value={createData.description || ''}\r\n                onChange={(e) => setCreateData({ ...createData, description: e.target.value })}\r\n                margin=\"normal\"\r\n              />\r\n            </>\r\n          ) : (\r\n            <>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Name\"\r\n                value={createData.name || ''}\r\n                onChange={(e) => setCreateData({ ...createData, name: e.target.value })}\r\n                margin=\"normal\"\r\n              />\r\n              <TextField\r\n                fullWidth\r\n                label=\"SKU\"\r\n                value={createData.sku || ''}\r\n                onChange={(e) => setCreateData({ ...createData, sku: e.target.value })}\r\n                margin=\"normal\"\r\n              />\r\n              <TextField\r\n                fullWidth\r\n                label=\"Menge\"\r\n                type=\"number\"\r\n                value={createData.quantity || ''}\r\n                onChange={(e) => setCreateData({ ...createData, quantity: e.target.value })}\r\n                margin=\"normal\"\r\n              />\r\n              <TextField\r\n                fullWidth\r\n                label=\"Einzelpreis\"\r\n                type=\"number\"\r\n                value={createData.unit_price || ''}\r\n                onChange={(e) => setCreateData({ ...createData, unit_price: e.target.value })}\r\n                margin=\"normal\"\r\n              />\r\n            </>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setShowCreateDialog(false)}>Abbrechen</Button>\r\n          <Button onClick={handleCreate} variant=\"contained\">Erstellen</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ApiCommunicationDemo; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\AssetManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\AssetManagement_MCP_NEW.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\BelegeErstellung.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\BiDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\BundleAnalysisPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\CRMPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\CentralFormTableDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\CompleteFormDemo.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDemoData'. Either include it or remove the dependency array.","line":109,"column":6,"nodeType":"ArrayExpression","endLine":109,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadDemoData]","fix":{"range":[2771,2773],"text":"[loadDemoData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Vollständige Formular-Demo für VALEO NeuroERP 2.0\r\n * \r\n * Diese Seite demonstriert alle implementierten Formulare und Eingabemasken\r\n * mit vollständiger Funktionalität und Übersicht.\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  Button,\r\n  Chip,\r\n  Tabs,\r\n  Tab,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Alert,\r\n  CircularProgress,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  IconButton,\r\n  Tooltip,\r\n  Badge\r\n} from '@mui/material';\r\nimport {\r\n  ExpandMore as ExpandMoreIcon,\r\n  Search as SearchIcon,\r\n  FilterList as FilterIcon,\r\n  Refresh as RefreshIcon,\r\n  PlayArrow as PlayIcon,\r\n  Edit as EditIcon,\r\n  Visibility as ViewIcon,\r\n  Delete as DeleteIcon,\r\n  Add as AddIcon,\r\n  Assessment as StatsIcon,\r\n  Settings as SettingsIcon\r\n} from '@mui/icons-material';\r\n\r\nimport { CentralFormTableService } from '../services/CentralFormTable';\r\nimport { ExtendedFormRegistryService } from '../services/ExtendedFormRegistry';\r\nimport { ModernERPForm } from '../components/forms/ModernERPForm';\r\nimport { FormManager } from '../components/forms/FormManager';\r\nimport { z } from 'zod';\r\n\r\n/**\r\n * Interface für Demo-Statistiken\r\n */\r\ninterface DemoStatistics {\r\n  totalForms: number;\r\n  byModule: Record<string, number>;\r\n  byComplexity: Record<string, number>;\r\n  byStatus: Record<string, number>;\r\n  averagePriority: number;\r\n  versionDistribution: Record<string, number>;\r\n}\r\n\r\n/**\r\n * Interface für Filter-Optionen\r\n */\r\ninterface FilterOptions {\r\n  module: string;\r\n  complexity: string;\r\n  status: string;\r\n  searchTerm: string;\r\n}\r\n\r\n/**\r\n * Hauptkomponente für die vollständige Formular-Demo\r\n */\r\nconst CompleteFormDemo: React.FC = () => {\r\n  // State für die Demo\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const [selectedForm, setSelectedForm] = useState<string | null>(null);\r\n  const [showFormDialog, setShowFormDialog] = useState(false);\r\n  const [formMode, setFormMode] = useState<'create' | 'edit' | 'view'>('create');\r\n  const [statistics, setStatistics] = useState<DemoStatistics | null>(null);\r\n  const [filterOptions, setFilterOptions] = useState<FilterOptions>({\r\n    module: 'all',\r\n    complexity: 'all',\r\n    status: 'all',\r\n    searchTerm: ''\r\n  });\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Services\r\n  const formTableService = CentralFormTableService.getInstance();\r\n  const formRegistryService = ExtendedFormRegistryService.getInstance();\r\n\r\n  // Lade Daten beim Mount\r\n  useEffect(() => {\r\n    loadDemoData();\r\n  }, []);\r\n\r\n  /**\r\n   * Lädt alle Demo-Daten\r\n   */\r\n  const loadDemoData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Lade Statistiken\r\n      const stats = formTableService.getTableStatistics();\r\n      setStatistics({\r\n        totalForms: stats.total,\r\n        byModule: stats.byModule,\r\n        byComplexity: stats.byComplexity,\r\n        byStatus: stats.byStatus,\r\n        averagePriority: stats.averagePriority,\r\n        versionDistribution: stats.versionDistribution\r\n      });\r\n      \r\n      setLoading(false);\r\n    } catch (err) {\r\n      setError('Fehler beim Laden der Demo-Daten');\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Filtert Formulare basierend auf den Filter-Optionen\r\n   */\r\n  const getFilteredForms = () => {\r\n    let forms = formTableService.getAllFormEntries();\r\n\r\n    // Filter nach Modul\r\n    if (filterOptions.module !== 'all') {\r\n      forms = forms.filter(form => form.module === filterOptions.module);\r\n    }\r\n\r\n    // Filter nach Komplexität\r\n    if (filterOptions.complexity !== 'all') {\r\n      forms = forms.filter(form => form.complexity === filterOptions.complexity);\r\n    }\r\n\r\n    // Filter nach Status\r\n    if (filterOptions.status !== 'all') {\r\n      forms = forms.filter(form => form.status === filterOptions.status);\r\n    }\r\n\r\n    // Filter nach Suchbegriff\r\n    if (filterOptions.searchTerm) {\r\n      forms = formTableService.searchForms(filterOptions.searchTerm);\r\n    }\r\n\r\n    return forms;\r\n  };\r\n\r\n  /**\r\n   * Öffnet ein Formular im Dialog\r\n   */\r\n  const openForm = (formId: string, mode: 'create' | 'edit' | 'view' = 'create') => {\r\n    setSelectedForm(formId);\r\n    setFormMode(mode);\r\n    setShowFormDialog(true);\r\n  };\r\n\r\n  /**\r\n   * Schließt den Formular-Dialog\r\n   */\r\n  const closeFormDialog = () => {\r\n    setShowFormDialog(false);\r\n    setSelectedForm(null);\r\n  };\r\n\r\n  /**\r\n   * Rendert die Statistik-Karten\r\n   */\r\n  const renderStatisticsCards = () => {\r\n    if (!statistics) return null;\r\n\r\n    return (\r\n      <Grid container spacing={3} sx={{ mb: 4 }}>\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                Gesamt-Formulare\r\n              </Typography>\r\n                             <Typography variant=\"h4\" component=\"div\">\r\n                 {statistics.totalForms}\r\n               </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        \r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                Durchschnittliche Priorität\r\n              </Typography>\r\n              <Typography variant=\"h4\" component=\"div\">\r\n                {statistics.averagePriority}\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        \r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                Module\r\n              </Typography>\r\n              <Typography variant=\"h4\" component=\"div\">\r\n                {Object.keys(statistics.byModule).length}\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        \r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                Versionen\r\n              </Typography>\r\n              <Typography variant=\"h4\" component=\"div\">\r\n                {Object.keys(statistics.versionDistribution).length}\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Rendert die Filter-Sektion\r\n   */\r\n  const renderFilters = () => {\r\n    return (\r\n      <Card sx={{ mb: 3 }}>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Filter & Suche\r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Modul</InputLabel>\r\n                <Select\r\n                  value={filterOptions.module}\r\n                  onChange={(e) => setFilterOptions(prev => ({ ...prev, module: e.target.value }))}\r\n                >\r\n                  <MenuItem value=\"all\">Alle Module</MenuItem>\r\n                  <MenuItem value=\"warenwirtschaft\">Warenwirtschaft</MenuItem>\r\n                  <MenuItem value=\"finanzbuchhaltung\">Finanzbuchhaltung</MenuItem>\r\n                  <MenuItem value=\"crm\">CRM</MenuItem>\r\n                  <MenuItem value=\"crosscutting\">Übergreifende Services</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Komplexität</InputLabel>\r\n                <Select\r\n                  value={filterOptions.complexity}\r\n                  onChange={(e) => setFilterOptions(prev => ({ ...prev, complexity: e.target.value }))}\r\n                >\r\n                  <MenuItem value=\"all\">Alle Komplexitäten</MenuItem>\r\n                  <MenuItem value=\"low\">Niedrig</MenuItem>\r\n                  <MenuItem value=\"medium\">Mittel</MenuItem>\r\n                  <MenuItem value=\"high\">Hoch</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Status</InputLabel>\r\n                <Select\r\n                  value={filterOptions.status}\r\n                  onChange={(e) => setFilterOptions(prev => ({ ...prev, status: e.target.value }))}\r\n                >\r\n                  <MenuItem value=\"all\">Alle Status</MenuItem>\r\n                  <MenuItem value=\"active\">Aktiv</MenuItem>\r\n                  <MenuItem value=\"draft\">Entwurf</MenuItem>\r\n                  <MenuItem value=\"deprecated\">Veraltet</MenuItem>\r\n                  <MenuItem value=\"archived\">Archiviert</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Suche\"\r\n                value={filterOptions.searchTerm}\r\n                onChange={(e) => setFilterOptions(prev => ({ ...prev, searchTerm: e.target.value }))}\r\n                InputProps={{\r\n                  startAdornment: <SearchIcon />\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Rendert die Formular-Tabelle\r\n   */\r\n  const renderFormTable = () => {\r\n    const forms = getFilteredForms();\r\n\r\n    return (\r\n      <Card>\r\n        <CardContent>\r\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n            <Typography variant=\"h6\">\r\n              Formulare ({forms.length})\r\n            </Typography>\r\n            <Button\r\n              startIcon={<RefreshIcon />}\r\n              onClick={loadDemoData}\r\n              variant=\"outlined\"\r\n            >\r\n              Aktualisieren\r\n            </Button>\r\n          </Box>\r\n          \r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Index</TableCell>\r\n                  <TableCell>ID</TableCell>\r\n                  <TableCell>Titel</TableCell>\r\n                  <TableCell>Modul</TableCell>\r\n                  <TableCell>Kategorie</TableCell>\r\n                  <TableCell>Komplexität</TableCell>\r\n                  <TableCell>Status</TableCell>\r\n                  <TableCell>Version</TableCell>\r\n                  <TableCell>Priorität</TableCell>\r\n                  <TableCell>Aktionen</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {forms.map((form) => (\r\n                  <TableRow key={form.id}>\r\n                    <TableCell>{form.index}</TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\" fontFamily=\"monospace\">\r\n                        {form.id}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\" fontWeight=\"medium\">\r\n                        {form.title}\r\n                      </Typography>\r\n                      <Typography variant=\"caption\" color=\"textSecondary\">\r\n                        {form.description}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Chip\r\n                        label={form.module}\r\n                        size=\"small\"\r\n                        color=\"primary\"\r\n                        variant=\"outlined\"\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\">\r\n                        {form.category}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Chip\r\n                        label={form.complexity}\r\n                        size=\"small\"\r\n                        color={\r\n                          form.complexity === 'high' ? 'error' :\r\n                          form.complexity === 'medium' ? 'warning' : 'success'\r\n                        }\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Chip\r\n                        label={form.status}\r\n                        size=\"small\"\r\n                        color={\r\n                          form.status === 'active' ? 'success' :\r\n                          form.status === 'draft' ? 'warning' :\r\n                          form.status === 'deprecated' ? 'error' : 'default'\r\n                        }\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\">\r\n                        {form.version}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\">\r\n                        {form.priority}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Box sx={{ display: 'flex', gap: 1 }}>\r\n                        <Tooltip title=\"Erstellen\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => openForm(form.id, 'create')}\r\n                            color=\"primary\"\r\n                          >\r\n                            <AddIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Bearbeiten\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => openForm(form.id, 'edit')}\r\n                            color=\"primary\"\r\n                          >\r\n                            <EditIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Anzeigen\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => openForm(form.id, 'view')}\r\n                            color=\"info\"\r\n                          >\r\n                            <ViewIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Testen\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => openForm(form.id, 'create')}\r\n                            color=\"success\"\r\n                          >\r\n                            <PlayIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </Box>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Rendert die Modul-Übersicht\r\n   */\r\n  const renderModuleOverview = () => {\r\n    if (!statistics) return null;\r\n\r\n    return (\r\n      <Grid container spacing={3}>\r\n        {Object.entries(statistics.byModule).map(([module, count]) => (\r\n          <Grid item xs={12} sm={6} md={3} key={module}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  {module.charAt(0).toUpperCase() + module.slice(1)}\r\n                </Typography>\r\n                <Typography variant=\"h4\" component=\"div\" color=\"primary\">\r\n                  {count}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                  Formulare\r\n                </Typography>\r\n              </CardContent>\r\n              <CardActions>\r\n                <Button\r\n                  size=\"small\"\r\n                  onClick={() => setFilterOptions(prev => ({ ...prev, module }))}\r\n                >\r\n                  Anzeigen\r\n                </Button>\r\n              </CardActions>\r\n            </Card>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Rendert die Komplexitäts-Übersicht\r\n   */\r\n  const renderComplexityOverview = () => {\r\n    if (!statistics) return null;\r\n\r\n    return (\r\n      <Grid container spacing={3}>\r\n        {Object.entries(statistics.byComplexity).map(([complexity, count]) => (\r\n          <Grid item xs={12} sm={6} md={4} key={complexity}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  {complexity === 'high' ? 'Hohe Komplexität' :\r\n                   complexity === 'medium' ? 'Mittlere Komplexität' : 'Niedrige Komplexität'}\r\n                </Typography>\r\n                <Typography variant=\"h4\" component=\"div\" color=\"primary\">\r\n                  {count}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                  Formulare\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Rendert die Formular-Details\r\n   */\r\n  const renderFormDetails = () => {\r\n    if (!selectedForm) return null;\r\n\r\n    const form = formTableService.getFormEntry(selectedForm);\r\n    if (!form) return null;\r\n\r\n    return (\r\n      <Card>\r\n        <CardContent>\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            {form.title}\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"textSecondary\" paragraph>\r\n            {form.description}\r\n          </Typography>\r\n          \r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} md={6}>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Basis-Informationen\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                <strong>ID:</strong> {form.id}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                <strong>Modul:</strong> {form.module}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                <strong>Kategorie:</strong> {form.category}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                <strong>Version:</strong> {form.version}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                <strong>Status:</strong> {form.status}\r\n              </Typography>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={6}>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Technische Details\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                <strong>Komplexität:</strong> {form.complexity}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                <strong>Priorität:</strong> {form.priority}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                <strong>Komponenten-Pfad:</strong> {form.componentPath}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                <strong>Validierung:</strong> {form.validationSchema}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                <strong>Accessibility:</strong> {form.accessibilityLevel}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n          \r\n          <Box sx={{ mt: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Tags\r\n            </Typography>\r\n            <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\r\n              {form.tags.map((tag, index) => (\r\n                <Chip key={index} label={tag} size=\"small\" />\r\n              ))}\r\n            </Box>\r\n          </Box>\r\n          \r\n          <Box sx={{ mt: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Abhängigkeiten\r\n            </Typography>\r\n            <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\r\n              {form.dependencies.map((dependency, index) => (\r\n                <Chip key={index} label={dependency} size=\"small\" variant=\"outlined\" />\r\n              ))}\r\n            </Box>\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  // Tab-Panels\r\n  const tabPanels = [\r\n    {\r\n      label: 'Übersicht',\r\n      icon: <StatsIcon />,\r\n      content: (\r\n        <Box>\r\n          {renderStatisticsCards()}\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            Modul-Übersicht\r\n          </Typography>\r\n          {renderModuleOverview()}\r\n          <Typography variant=\"h5\" gutterBottom sx={{ mt: 4 }}>\r\n            Komplexitäts-Übersicht\r\n          </Typography>\r\n          {renderComplexityOverview()}\r\n        </Box>\r\n      )\r\n    },\r\n    {\r\n      label: 'Formulare',\r\n      icon: <ViewIcon />,\r\n      content: (\r\n        <Box>\r\n          {renderFilters()}\r\n          {renderFormTable()}\r\n        </Box>\r\n      )\r\n    },\r\n    {\r\n      label: 'Form Manager',\r\n      icon: <SettingsIcon />,\r\n      content: (\r\n        <Box>\r\n          <FormManager />\r\n        </Box>\r\n      )\r\n    },\r\n    {\r\n      label: 'Details',\r\n      icon: <EditIcon />,\r\n      content: (\r\n        <Box>\r\n          {renderFormDetails()}\r\n        </Box>\r\n      )\r\n    }\r\n  ];\r\n\r\n  // Loading-Zustand\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh' }}>\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  // Error-Zustand\r\n  if (error) {\r\n    return (\r\n      <Alert severity=\"error\" sx={{ m: 2 }}>\r\n        {error}\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Vollständige Formular-Demo - VALEO NeuroERP 2.0\r\n      </Typography>\r\n      <Typography variant=\"body1\" color=\"textSecondary\" paragraph>\r\n        Diese Demo zeigt alle implementierten Formulare und Eingabemasken mit vollständiger Funktionalität.\r\n      </Typography>\r\n\r\n      {/* Tabs */}\r\n      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\r\n        <Tabs value={activeTab} onChange={(_, newValue) => setActiveTab(newValue)}>\r\n          {tabPanels.map((tab, index) => (\r\n            <Tab\r\n              key={index}\r\n              label={tab.label}\r\n              icon={tab.icon}\r\n              iconPosition=\"start\"\r\n            />\r\n          ))}\r\n        </Tabs>\r\n      </Box>\r\n\r\n      {/* Tab-Inhalte */}\r\n      {tabPanels[activeTab].content}\r\n\r\n      {/* Formular-Dialog */}\r\n      {showFormDialog && selectedForm && (\r\n        <ModernERPForm\r\n          config={{\r\n            id: selectedForm,\r\n            metadata: {\r\n              id: selectedForm,\r\n              name: `Formular ${selectedForm}`,\r\n              module: 'demo',\r\n              version: '1.0.0',\r\n              status: 'active',\r\n              createdAt: new Date(),\r\n              updatedAt: new Date(),\r\n              createdBy: 'demo',\r\n              updatedBy: 'demo',\r\n              description: `Beschreibung für ${selectedForm}`,\r\n              tags: [],\r\n              dependencies: [],\r\n              permissions: {\r\n                super_admin: ['read', 'write', 'admin', 'delete'],\r\n                admin: ['read', 'write', 'admin'],\r\n                manager: ['read', 'write'],\r\n                accountant: ['read', 'write'],\r\n                warehouse: ['read', 'write'],\r\n                sales: ['read', 'write'],\r\n                viewer: ['read']\r\n              }\r\n            },\r\n            fields: [],\r\n            validationSchema: z.object({}),\r\n            defaultValues: {},\r\n            layout: {\r\n              type: 'standard',\r\n              navigation: {\r\n                showProgress: true,\r\n                showTimeline: false,\r\n                showBreadcrumbs: true,\r\n                allowSkip: false,\r\n                allowBack: true\r\n              },\r\n              validation: {\r\n                realTime: true,\r\n                onTabChange: true,\r\n                onStepChange: true,\r\n                showErrors: true,\r\n                mode: 'onBlur'\r\n              },\r\n              autoSave: {\r\n                enabled: true,\r\n                interval: 30000,\r\n                showIndicator: true\r\n              }\r\n            },\r\n            size: 'medium',\r\n            features: {\r\n              autoSave: true,\r\n              autoSaveInterval: 30000,\r\n              keyboardShortcuts: true,\r\n              barcodeScanner: false,\r\n              progressBar: true,\r\n              conditionalFields: false,\r\n              groupedFields: false,\r\n              realTimeValidation: true,\r\n              accessibility: true,\r\n              mobileOptimized: true,\r\n              offlineSupport: false,\r\n              bulkOperations: false,\r\n              printSupport: false,\r\n              exportSupport: false\r\n            },\r\n            module: 'demo',\r\n            title: `Formular ${selectedForm}`,\r\n            description: `Beschreibung für ${selectedForm}`,\r\n            tabs: [],\r\n            permissions: {\r\n              canCreate: true,\r\n              canEdit: true,\r\n              canDelete: true,\r\n              canApprove: true,\r\n              canReject: true,\r\n              canView: true\r\n            }\r\n          }}\r\n          mode={formMode}\r\n          onCancel={closeFormDialog}\r\n          onSave={async (data) => {\r\n            console.log('Formular gespeichert:', data);\r\n            closeFormDialog();\r\n          }}\r\n        />\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CompleteFormDemo; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\CrmDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\CustomerManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\DatabaseIntegrationDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\DmsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\DocumentManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\DocumentsPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDocuments'. Either include it or remove the dependency array.","line":72,"column":6,"nodeType":"ArrayExpression","endLine":72,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadDocuments]","fix":{"range":[1565,1567],"text":"[loadDocuments]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Card, \r\n  Typography, \r\n  Button,\r\n  Chip,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemIcon,\r\n  ListItemSecondaryAction,\r\n  IconButton,\r\n  Tooltip,\r\n  CircularProgress,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Refresh as RefreshIcon,\r\n  Description as DescriptionIcon,\r\n  Download as DownloadIcon,\r\n  Visibility as VisibilityIcon,\r\n  FileCopy as FileCopyIcon,\r\n  Image as ImageIcon,\r\n  PictureAsPdf as PdfIcon,\r\n  InsertDriveFile as FileIcon,\r\n  FilterList as FilterListIcon\r\n} from '@mui/icons-material';\r\nimport { useApi } from '../contexts/ApiContext';\r\nimport {\r\n  ObjectPageHeader\r\n} from '../components/ui/NeuroFlowComponents';\r\n\r\ninterface DocumentFormData {\r\n  name: string;\r\n  type: string;\r\n  content: string;\r\n}\r\n\r\nconst DocumentsPage: React.FC = () => {\r\n  const {\r\n    documents,\r\n    getDocuments,\r\n    uploadDocument,\r\n    isLoading,\r\n    error\r\n  } = useApi();\r\n\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [editingDocument, setEditingDocument] = useState<any>(null);\r\n  const [formData, setFormData] = useState<DocumentFormData>({\r\n    name: '',\r\n    type: 'document',\r\n    content: ''\r\n  });\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filterType, setFilterType] = useState('all');\r\n\r\n  useEffect(() => {\r\n    loadDocuments();\r\n  }, []);\r\n\r\n  const loadDocuments = async () => {\r\n    await getDocuments();\r\n  };\r\n\r\n  const handleSubmit = async (formData: DocumentFormData) => {\r\n    try {\r\n      if (editingDocument) {\r\n        console.log('Update document:', editingDocument.id, formData);\r\n      } else {\r\n        const file = new File([''], formData.name, { type: 'text/plain' });\r\n        await uploadDocument(file, {\r\n          ...formData,\r\n          user_id: localStorage.getItem('userId') || 'current-user-id'\r\n        });\r\n      }\r\n      setOpenDialog(false);\r\n      resetForm();\r\n      loadDocuments();\r\n    } catch (err) {\r\n      console.error('Error saving document:', err);\r\n    }\r\n  };\r\n\r\n  const handleDeleteDocument = (id: string) => {\r\n    // Mock-Implementation für das Löschen\r\n    console.log('Deleting document:', id);\r\n    // In einer echten Implementierung würde hier die API aufgerufen werden\r\n    // und dann der lokale State aktualisiert werden\r\n  };\r\n\r\n  const handleEdit = (document: any) => {\r\n    setEditingDocument(document);\r\n    setFormData({\r\n      name: document.name,\r\n      type: document.type,\r\n      content: document.content\r\n    });\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCreate = () => {\r\n    setEditingDocument(null);\r\n    setFormData({\r\n      name: '',\r\n      type: 'document',\r\n      content: ''\r\n    });\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      name: '',\r\n      type: 'document',\r\n      content: ''\r\n    });\r\n    setEditingDocument(null);\r\n  };\r\n\r\n  const filteredDocuments = documents.filter(doc => {\r\n    const matchesSearch = doc.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         doc.type.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesType = filterType === 'all' || doc.type === filterType;\r\n    return matchesSearch && matchesType;\r\n  });\r\n\r\n  const getTypeIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'pdf': return <PdfIcon color=\"error\" />;\r\n      case 'image': return <ImageIcon color=\"primary\" />;\r\n      case 'text': return <DescriptionIcon color=\"info\" />;\r\n      default: return <FileIcon />;\r\n    }\r\n  };\r\n\r\n  const getTypeColor = (type: string) => {\r\n    switch (type) {\r\n      case 'pdf': return 'error';\r\n      case 'image': return 'primary';\r\n      case 'text': return 'info';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const totalDocuments = filteredDocuments.length;\r\n  const pdfDocuments = filteredDocuments.filter(doc => doc.type === 'pdf').length;\r\n  const imageDocuments = filteredDocuments.filter(doc => doc.type === 'image').length;\r\n  const textDocuments = filteredDocuments.filter(doc => doc.type === 'text').length;\r\n\r\n  const handleResetFilters = () => {\r\n    setSearchTerm('');\r\n    setFilterType('all');\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ minHeight: '100vh', bgcolor: '#F5F6F7' }}>\r\n      {/* Header */}\r\n      <ObjectPageHeader\r\n        title=\"Dokumentenverwaltung\"\r\n        subtitle=\"Zentrale Verwaltung aller Dokumente und Dateien\"\r\n        status=\"Live-Daten\"\r\n        actions={\r\n          <Box sx={{ display: 'flex', gap: 1 }}>\r\n            <Button\r\n              variant=\"outlined\"\r\n              startIcon={<RefreshIcon />}\r\n              onClick={loadDocuments}\r\n              disabled={isLoading}\r\n            >\r\n              Aktualisieren\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<AddIcon />}\r\n              onClick={handleCreate}\r\n            >\r\n              Neues Dokument\r\n            </Button>\r\n          </Box>\r\n        }\r\n      />\r\n\r\n      {/* Error Display */}\r\n      {error && (\r\n        <Box sx={{ px: 3 }}>\r\n          <Typography variant=\"body1\" color=\"error\">{error}</Typography>\r\n        </Box>\r\n      )}\r\n\r\n      {/* Action Bar */}\r\n      <Box sx={{ p: 3 }}>\r\n        {/* Summary Cards */}\r\n        <Box className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\r\n          <Card sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n              <DescriptionIcon sx={{ fontSize: 40, color: '#0A6ED1' }} />\r\n              <Box>\r\n                <Typography variant=\"h4\" sx={{ color: '#0A6ED1', fontWeight: 600 }}>\r\n                  {totalDocuments}\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                  Gesamte Dokumente\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n\r\n          <Card sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n              <PdfIcon sx={{ fontSize: 40, color: '#BB0000' }} />\r\n              <Box>\r\n                <Typography variant=\"h4\" sx={{ color: '#BB0000', fontWeight: 600 }}>\r\n                  {pdfDocuments}\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                  PDF-Dokumente\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n\r\n          <Card sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n              <ImageIcon sx={{ fontSize: 40, color: '#107C41' }} />\r\n              <Box>\r\n                <Typography variant=\"h4\" sx={{ color: '#107C41', fontWeight: 600 }}>\r\n                  {imageDocuments}\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                  Bilder\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n\r\n          <Card sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n              <FileIcon sx={{ fontSize: 40, color: '#E9730C' }} />\r\n              <Box>\r\n                <Typography variant=\"h4\" sx={{ color: '#E9730C', fontWeight: 600 }}>\r\n                  {textDocuments}\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                  Text-Dokumente\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n        </Box>\r\n\r\n        {/* Filters */}\r\n        <Box sx={{ p: 3, pb: 0 }}>\r\n          <Card sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 3, flexWrap: 'wrap' }}>\r\n              <Typography variant=\"h6\" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                <FilterListIcon />\r\n                Filter\r\n              </Typography>\r\n              \r\n              <TextField\r\n                label=\"Suche\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n                size=\"small\"\r\n                sx={{ minWidth: 200 }}\r\n              />\r\n              \r\n              <FormControl size=\"small\" sx={{ minWidth: 150 }}>\r\n                <InputLabel>Typ</InputLabel>\r\n                <Select\r\n                  value={filterType}\r\n                  onChange={(e) => setFilterType(e.target.value)}\r\n                  label=\"Typ\"\r\n                >\r\n                  <MenuItem value=\"all\">Alle Typen</MenuItem>\r\n                  <MenuItem value=\"document\">Dokument</MenuItem>\r\n                  <MenuItem value=\"report\">Bericht</MenuItem>\r\n                  <MenuItem value=\"contract\">Vertrag</MenuItem>\r\n                  <MenuItem value=\"invoice\">Rechnung</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n              \r\n              <Button\r\n                variant=\"outlined\"\r\n                onClick={handleResetFilters}\r\n                size=\"small\"\r\n              >\r\n                Filter zurücksetzen\r\n              </Button>\r\n            </Box>\r\n          </Card>\r\n        </Box>\r\n\r\n        {/* Documents List */}\r\n        <Card>\r\n          <List>\r\n            {filteredDocuments.map((document) => (\r\n              <ListItem key={document.id} divider>\r\n                <ListItemIcon>\r\n                  {getTypeIcon(document.type)}\r\n                </ListItemIcon>\r\n                <ListItemText\r\n                  primary={\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n                      <Typography variant=\"body1\" sx={{ fontWeight: 600 }}>\r\n                        {document.name}\r\n                      </Typography>\r\n                      <Box sx={{ display: 'flex', gap: 1, mb: 1 }}>\r\n                        <Chip\r\n                          label={document.type}\r\n                          size=\"small\"\r\n                          color={getTypeColor(document.type) as any}\r\n                        />\r\n                      </Box>\r\n                    </Box>\r\n                  }\r\n                  secondary={\r\n                    <Box>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\r\n                        {document.content.substring(0, 100)}...\r\n                      </Typography>\r\n                      <Typography variant=\"caption\" color=\"text.secondary\">\r\n                        Erstellt: {new Date(document.created_at).toLocaleDateString('de-DE')}\r\n                      </Typography>\r\n                    </Box>\r\n                  }\r\n                />\r\n                <ListItemSecondaryAction>\r\n                  <Box sx={{ display: 'flex', gap: 1 }}>\r\n                    <Tooltip title=\"Anzeigen\">\r\n                      <IconButton size=\"small\">\r\n                        <VisibilityIcon />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Herunterladen\">\r\n                      <IconButton size=\"small\">\r\n                        <DownloadIcon />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Kopieren\">\r\n                      <IconButton size=\"small\">\r\n                        <FileCopyIcon />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Bearbeiten\">\r\n                      <IconButton\r\n                        size=\"small\"\r\n                        onClick={() => handleEdit(document)}\r\n                      >\r\n                        <EditIcon />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Löschen\">\r\n                      <IconButton\r\n                        size=\"small\"\r\n                        color=\"error\"\r\n                        onClick={() => handleDeleteDocument(document.id)}\r\n                      >\r\n                        <DeleteIcon />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                  </Box>\r\n                </ListItemSecondaryAction>\r\n              </ListItem>\r\n            ))}\r\n            {filteredDocuments.length === 0 && (\r\n              <ListItem>\r\n                <ListItemText\r\n                  primary={\r\n                    <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" sx={{ py: 4 }}>\r\n                      Keine Dokumente gefunden\r\n                    </Typography>\r\n                  }\r\n                />\r\n              </ListItem>\r\n            )}\r\n          </List>\r\n        </Card>\r\n      </Box>\r\n\r\n      {/* Create/Edit Dialog */}\r\n      <Dialog open={openDialog} onClose={() => setOpenDialog(false)} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>\r\n          {editingDocument ? 'Dokument bearbeiten' : 'Neues Dokument'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ pt: 2 }}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Dokumentname\"\r\n              value={formData.name}\r\n              onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n              margin=\"normal\"\r\n              required\r\n            />\r\n\r\n            <Box className=\"grid grid-cols-1 gap-4\">\r\n              <FormControl fullWidth sx={{ mb: 2 }}>\r\n                <InputLabel>Typ</InputLabel>\r\n                <Select\r\n                  value={formData.type}\r\n                  onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n                  label=\"Typ\"\r\n                >\r\n                  <MenuItem value=\"document\">Dokument</MenuItem>\r\n                  <MenuItem value=\"report\">Bericht</MenuItem>\r\n                  <MenuItem value=\"contract\">Vertrag</MenuItem>\r\n                  <MenuItem value=\"invoice\">Rechnung</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Box>\r\n\r\n            <TextField\r\n              fullWidth\r\n              label=\"Inhalt\"\r\n              value={formData.content}\r\n              onChange={(e) => setFormData({ ...formData, content: e.target.value })}\r\n              margin=\"normal\"\r\n              multiline\r\n              rows={8}\r\n              required\r\n            />\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenDialog(false)}>Abbrechen</Button>\r\n          <Button onClick={() => handleSubmit(formData)} variant=\"contained\">\r\n            {editingDocument ? 'Aktualisieren' : 'Erstellen'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Loading Overlay */}\r\n      {isLoading && (\r\n        <Box sx={{ \r\n          position: 'fixed', \r\n          top: 0, \r\n          left: 0, \r\n          right: 0, \r\n          bottom: 0, \r\n          bgcolor: 'rgba(0,0,0,0.3)', \r\n          display: 'flex', \r\n          alignItems: 'center', \r\n          justifyContent: 'center',\r\n          zIndex: 9999\r\n        }}>\r\n          <CircularProgress />\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default DocumentsPage; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\DokumentePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\ERPDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\FibuDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\FinanceManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\FinanzFormular.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\FormDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\HelpDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\IntegrationPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\InventoryPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadInventory'. Either include it or remove the dependency array.","line":87,"column":6,"nodeType":"ArrayExpression","endLine":87,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadInventory]","fix":{"range":[1903,1905],"text":"[loadInventory]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Card, \r\n  Typography, \r\n  Button,\r\n  Chip,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n  Tooltip,\r\n  CircularProgress,\r\n  TablePagination,\r\n  InputAdornment,\r\n  LinearProgress\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Search as SearchIcon,\r\n  Refresh as RefreshIcon,\r\n  Inventory as InventoryIcon,\r\n  Warning as WarningIcon,\r\n  CheckCircle as CheckCircleIcon,\r\n  Error as ErrorIcon,\r\n  LocationOn as LocationIcon\r\n} from '@mui/icons-material';\r\nimport { useApi } from '../contexts/ApiContext';\r\nimport {\r\n  ObjectPageHeader,\r\n  ActionBar,\r\n  MessageStrip\r\n} from '../components/ui/NeuroFlowComponents';\r\n\r\ninterface InventoryFormData {\r\n  name: string;\r\n  sku: string;\r\n  quantity: number;\r\n  unit_price: number;\r\n  location: string;\r\n  category: string;\r\n}\r\n\r\nconst InventoryPage: React.FC = () => {\r\n  const {\r\n    inventory,\r\n    getInventory,\r\n    createInventoryItem,\r\n    updateInventoryItem,\r\n    isLoading,\r\n    error\r\n  } = useApi();\r\n\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [editingItem, setEditingItem] = useState<any>(null);\r\n  const [formData, setFormData] = useState<InventoryFormData>({\r\n    name: '',\r\n    sku: '',\r\n    quantity: 0,\r\n    unit_price: 0,\r\n    location: '',\r\n    category: 'general'\r\n  });\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [filterCategory, setFilterCategory] = useState('all');\r\n  const [filterStatus, setFilterStatus] = useState('all');\r\n\r\n  useEffect(() => {\r\n    loadInventory();\r\n  }, []);\r\n\r\n  const loadInventory = async () => {\r\n    await getInventory();\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      if (editingItem) {\r\n        await updateInventoryItem(editingItem.id, formData);\r\n      } else {\r\n        await createInventoryItem({\r\n          ...formData,\r\n          price: formData.unit_price, // Map unit_price to price\r\n          status: 'in_stock'\r\n        });\r\n      }\r\n      setOpenDialog(false);\r\n      resetForm();\r\n      loadInventory();\r\n    } catch (err) {\r\n      console.error('Error saving inventory item:', err);\r\n    }\r\n  };\r\n\r\n  const handleDeleteItem = (id: string) => {\r\n    // Mock-Implementation für das Löschen\r\n    console.log('Deleting inventory item:', id);\r\n    // In einer echten Implementierung würde hier die API aufgerufen werden\r\n    // und dann der lokale State aktualisiert werden\r\n  };\r\n\r\n  const handleEdit = (item: any) => {\r\n    setEditingItem(item);\r\n    setFormData({\r\n      name: item.name,\r\n      sku: item.sku,\r\n      quantity: item.quantity,\r\n      unit_price: item.unit_price,\r\n      location: item.location || '',\r\n      category: item.category\r\n    });\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      name: '',\r\n      sku: '',\r\n      quantity: 0,\r\n      unit_price: 0,\r\n      location: '',\r\n      category: 'general'\r\n    });\r\n    setEditingItem(null);\r\n  };\r\n\r\n  const filteredInventory = inventory.filter(item => {\r\n    const matchesSearch = item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         (item.sku?.toLowerCase().includes(searchTerm.toLowerCase()) || false) ||\r\n                         (item.location?.toLowerCase().includes(searchTerm.toLowerCase()) || false);\r\n    const matchesCategory = filterCategory === 'all' || item.category === filterCategory;\r\n    const matchesStatus = filterStatus === 'all' || item.status === filterStatus;\r\n    return matchesSearch && matchesCategory && matchesStatus;\r\n  });\r\n\r\n  const paginatedInventory = filteredInventory.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'in_stock': return 'success';\r\n      case 'low_stock': return 'warning';\r\n      case 'out_of_stock': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'in_stock': return <CheckCircleIcon color=\"success\" />;\r\n      case 'low_stock': return <WarningIcon color=\"warning\" />;\r\n      case 'out_of_stock': return <ErrorIcon color=\"error\" />;\r\n      default: return <InventoryIcon />;\r\n    }\r\n  };\r\n\r\n  const getStatusText = (status: string) => {\r\n    switch (status) {\r\n      case 'in_stock': return 'Verfügbar';\r\n      case 'low_stock': return 'Niedrig';\r\n      case 'out_of_stock': return 'Nicht verfügbar';\r\n      default: return status;\r\n    }\r\n  };\r\n\r\n  const totalValue = filteredInventory.reduce((sum, item) => sum + (item.quantity * (item.unit_price || item.price || 0)), 0);\r\n  const totalItems = filteredInventory.reduce((sum, item) => sum + item.quantity, 0);\r\n  const lowStockItems = filteredInventory.filter(item => item.status === 'low_stock').length;\r\n  const outOfStockItems = filteredInventory.filter(item => item.status === 'out_of_stock').length;\r\n\r\n  return (\r\n    <Box sx={{ minHeight: '100vh', bgcolor: '#F5F6F7' }}>\r\n      {/* Header */}\r\n      <ObjectPageHeader\r\n        title=\"Inventar\"\r\n        subtitle=\"Verwaltung aller Lagerbestände\"\r\n        status={`${filteredInventory.length} Artikel`}\r\n        actions={\r\n          <Box sx={{ display: 'flex', gap: 1 }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<AddIcon />}\r\n              onClick={() => setOpenDialog(true)}\r\n            >\r\n              Neuer Artikel\r\n            </Button>\r\n            <Button\r\n              variant=\"outlined\"\r\n              startIcon={<RefreshIcon />}\r\n              onClick={loadInventory}\r\n              disabled={isLoading}\r\n            >\r\n              Aktualisieren\r\n            </Button>\r\n          </Box>\r\n        }\r\n      />\r\n\r\n      {/* Error Display */}\r\n      {error && (\r\n        <Box sx={{ px: 3 }}>\r\n          <MessageStrip type=\"error\" title=\"Fehler\">\r\n            {error}\r\n          </MessageStrip>\r\n        </Box>\r\n      )}\r\n\r\n      {/* Action Bar */}\r\n      <ActionBar\r\n        title=\"Inventarverwaltung\"\r\n        actions={[\r\n          {\r\n            label: 'Filter zurücksetzen',\r\n            onClick: () => {\r\n              setSearchTerm('');\r\n              setFilterCategory('all');\r\n              setFilterStatus('all');\r\n            },\r\n            variant: 'outlined'\r\n          }\r\n        ]}\r\n      />\r\n\r\n      <Box sx={{ p: 3 }}>\r\n        {/* Summary Cards */}\r\n        <Box className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\r\n          <Card sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n              <InventoryIcon sx={{ fontSize: 40, color: '#0A6ED1' }} />\r\n              <Box>\r\n                <Typography variant=\"h4\" sx={{ color: '#0A6ED1', fontWeight: 600 }}>\r\n                  {filteredInventory.length}\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                  Artikel\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n\r\n          <Card sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n              <CheckCircleIcon sx={{ fontSize: 40, color: '#107C41' }} />\r\n              <Box>\r\n                <Typography variant=\"h4\" sx={{ color: '#107C41', fontWeight: 600 }}>\r\n                  {totalItems}\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                  Gesamtbestand\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n\r\n          <Card sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n              <WarningIcon sx={{ fontSize: 40, color: '#E9730C' }} />\r\n              <Box>\r\n                <Typography variant=\"h4\" sx={{ color: '#E9730C', fontWeight: 600 }}>\r\n                  {lowStockItems}\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                  Niedriger Bestand\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n\r\n          <Card sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n              <ErrorIcon sx={{ fontSize: 40, color: '#BB0000' }} />\r\n              <Box>\r\n                <Typography variant=\"h4\" sx={{ color: '#BB0000', fontWeight: 600 }}>\r\n                  {outOfStockItems}\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                  Nicht verfügbar\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n        </Box>\r\n\r\n        {/* Filters */}\r\n        <Card sx={{ p: 3, mb: 3 }}>\r\n          <Box className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n            <TextField\r\n              fullWidth\r\n              label=\"Suchen\"\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <SearchIcon />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n            <FormControl fullWidth>\r\n              <InputLabel>Kategorie</InputLabel>\r\n              <Select\r\n                value={filterCategory}\r\n                onChange={(e) => setFilterCategory(e.target.value)}\r\n                label=\"Kategorie\"\r\n              >\r\n                <MenuItem value=\"all\">Alle</MenuItem>\r\n                <MenuItem value=\"general\">Allgemein</MenuItem>\r\n                <MenuItem value=\"electronics\">Elektronik</MenuItem>\r\n                <MenuItem value=\"office\">Büro</MenuItem>\r\n                <MenuItem value=\"tools\">Werkzeuge</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Status</InputLabel>\r\n              <Select\r\n                value={filterStatus}\r\n                onChange={(e) => setFilterStatus(e.target.value)}\r\n                label=\"Status\"\r\n              >\r\n                <MenuItem value=\"all\">Alle</MenuItem>\r\n                <MenuItem value=\"in_stock\">Verfügbar</MenuItem>\r\n                <MenuItem value=\"low_stock\">Niedrig</MenuItem>\r\n                <MenuItem value=\"out_of_stock\">Nicht verfügbar</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n              <Typography variant=\"h6\" sx={{ color: '#0A6ED1' }}>\r\n                Gesamtwert: {totalValue.toFixed(2)}€\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n        </Card>\r\n\r\n        {/* Data Table */}\r\n        <Card>\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow sx={{ bgcolor: '#F5F6F7' }}>\r\n                  <TableCell>Artikel</TableCell>\r\n                  <TableCell>SKU</TableCell>\r\n                  <TableCell>Bestand</TableCell>\r\n                  <TableCell>Einzelpreis</TableCell>\r\n                  <TableCell>Gesamtwert</TableCell>\r\n                  <TableCell>Standort</TableCell>\r\n                  <TableCell>Status</TableCell>\r\n                  <TableCell align=\"right\">Aktionen</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {paginatedInventory.map((item) => (\r\n                  <TableRow key={item.id} hover>\r\n                    <TableCell>\r\n                      <Box>\r\n                        <Typography variant=\"body2\" sx={{ fontWeight: 600 }}>\r\n                          {item.name}\r\n                        </Typography>\r\n                        <Typography variant=\"caption\" color=\"text.secondary\">\r\n                          {item.category}\r\n                        </Typography>\r\n                      </Box>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\" sx={{ fontFamily: 'monospace' }}>\r\n                        {item.sku || 'N/A'}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                        <Typography variant=\"body2\" sx={{ fontWeight: 600 }}>\r\n                          {item.quantity}\r\n                        </Typography>\r\n                        {item.status === 'low_stock' && (\r\n                          <LinearProgress \r\n                            variant=\"determinate\" \r\n                            value={Math.min((item.quantity / 10) * 100, 100)} \r\n                            sx={{ width: 50, height: 4 }}\r\n                          />\r\n                        )}\r\n                      </Box>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\">\r\n                        {(item.unit_price || item.price || 0).toFixed(2)}€\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\" sx={{ fontWeight: 600, color: '#0A6ED1' }}>\r\n                        {(item.quantity * (item.unit_price || item.price || 0)).toFixed(2)}€\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                        <LocationIcon fontSize=\"small\" color=\"action\" />\r\n                        <Typography variant=\"body2\">\r\n                          {item.location || '-'}\r\n                        </Typography>\r\n                      </Box>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                        {getStatusIcon(item.status || 'unknown')}\r\n                        <Chip\r\n                          label={getStatusText(item.status || 'unknown')}\r\n                          size=\"small\"\r\n                          color={getStatusColor(item.status || 'unknown') as any}\r\n                        />\r\n                      </Box>\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                      <Box sx={{ display: 'flex', gap: 1 }}>\r\n                        <Tooltip title=\"Bearbeiten\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => handleEdit(item)}\r\n                          >\r\n                            <EditIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Löschen\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            color=\"error\"\r\n                            onClick={() => handleDeleteItem(item.id)}\r\n                          >\r\n                            <DeleteIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </Box>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n                {paginatedInventory.length === 0 && (\r\n                  <TableRow>\r\n                    <TableCell colSpan={8} align=\"center\" sx={{ py: 4 }}>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Keine Artikel gefunden\r\n                      </Typography>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          \r\n          <TablePagination\r\n            component=\"div\"\r\n            count={filteredInventory.length}\r\n            page={page}\r\n            onPageChange={(_, newPage) => setPage(newPage)}\r\n            rowsPerPage={rowsPerPage}\r\n            onRowsPerPageChange={(e) => {\r\n              setRowsPerPage(parseInt(e.target.value, 10));\r\n              setPage(0);\r\n            }}\r\n            labelRowsPerPage=\"Zeilen pro Seite:\"\r\n            labelDisplayedRows={({ from, to, count }) => `${from}-${to} von ${count}`}\r\n          />\r\n        </Card>\r\n      </Box>\r\n\r\n      {/* Create/Edit Dialog */}\r\n      <Dialog open={openDialog} onClose={() => setOpenDialog(false)} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>\r\n          {editingItem ? 'Artikel bearbeiten' : 'Neuer Artikel'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ pt: 2 }}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Artikelname\"\r\n              value={formData.name}\r\n              onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n              margin=\"normal\"\r\n              required\r\n            />\r\n\r\n            <TextField\r\n              fullWidth\r\n              label=\"SKU\"\r\n              value={formData.sku}\r\n              onChange={(e) => setFormData({ ...formData, sku: e.target.value })}\r\n              margin=\"normal\"\r\n              required\r\n            />\r\n\r\n            <Box className=\"grid grid-cols-2 gap-4\">\r\n              <TextField\r\n                fullWidth\r\n                label=\"Menge\"\r\n                type=\"number\"\r\n                value={formData.quantity}\r\n                onChange={(e) => setFormData({ ...formData, quantity: parseInt(e.target.value) || 0 })}\r\n                margin=\"normal\"\r\n                required\r\n              />\r\n\r\n              <TextField\r\n                fullWidth\r\n                label=\"Einzelpreis\"\r\n                type=\"number\"\r\n                value={formData.unit_price}\r\n                onChange={(e) => setFormData({ ...formData, unit_price: parseFloat(e.target.value) || 0 })}\r\n                margin=\"normal\"\r\n                required\r\n                InputProps={{\r\n                  endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n                }}\r\n              />\r\n            </Box>\r\n\r\n            <TextField\r\n              fullWidth\r\n              label=\"Standort\"\r\n              value={formData.location}\r\n              onChange={(e) => setFormData({ ...formData, location: e.target.value })}\r\n              margin=\"normal\"\r\n            />\r\n\r\n            <FormControl fullWidth margin=\"normal\">\r\n              <InputLabel>Kategorie</InputLabel>\r\n              <Select\r\n                value={formData.category}\r\n                onChange={(e) => setFormData({ ...formData, category: e.target.value })}\r\n                label=\"Kategorie\"\r\n              >\r\n                <MenuItem value=\"general\">Allgemein</MenuItem>\r\n                <MenuItem value=\"electronics\">Elektronik</MenuItem>\r\n                <MenuItem value=\"office\">Büro</MenuItem>\r\n                <MenuItem value=\"tools\">Werkzeuge</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenDialog(false)}>Abbrechen</Button>\r\n          <Button onClick={handleSubmit} variant=\"contained\">\r\n            {editingItem ? 'Aktualisieren' : 'Erstellen'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Loading Overlay */}\r\n      {isLoading && (\r\n        <Box sx={{ \r\n          position: 'fixed', \r\n          top: 0, \r\n          left: 0, \r\n          right: 0, \r\n          bottom: 0, \r\n          bgcolor: 'rgba(0,0,0,0.3)', \r\n          display: 'flex', \r\n          alignItems: 'center', \r\n          justifyContent: 'center',\r\n          zIndex: 9999\r\n        }}>\r\n          <CircularProgress />\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default InventoryPage; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\InvoicesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\InvoicesPage_MCP_NEW.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\KundenFormular.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\LagerDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\LandingPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'mockBIParameters'. Either include it or remove the dependency array.","line":321,"column":6,"nodeType":"ArrayExpression","endLine":321,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [mockBIParameters]","fix":{"range":[9652,9654],"text":"[mockBIParameters]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Card, \r\n  Typography, \r\n  Button,\r\n  Grid,\r\n  Container,\r\n  Tabs,\r\n  Tab,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  Chip,\r\n  Avatar,\r\n  Divider,\r\n  Paper,\r\n  IconButton,\r\n  Tooltip,\r\n  LinearProgress,\r\n  Badge,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Rating,\r\n  Alert,\r\n  Breadcrumbs,\r\n  Link,\r\n  AppBar,\r\n  Toolbar,\r\n  Menu,\r\n  MenuItem as MenuItemType,\r\n  Switch,\r\n  FormControlLabel,\r\n  Drawer,\r\n  ListItemButton,\r\n  InputAdornment,\r\n  Autocomplete\r\n} from '@mui/material';\r\nimport {\r\n  Dashboard as DashboardIcon,\r\n  Book as BookIcon,\r\n  School as SchoolIcon,\r\n  Help as HelpIcon,\r\n  Search as SearchIcon,\r\n  PlayArrow as PlayIcon,\r\n  CheckCircle as CheckCircleIcon,\r\n  ExpandMore as ExpandMoreIcon,\r\n  Person as PersonIcon,\r\n  Business as BusinessIcon,\r\n  Analytics as AnalyticsIcon,\r\n  Inventory as InventoryIcon,\r\n  Assignment as AssignmentIcon,\r\n  VideoLibrary as VideoIcon,\r\n  Article as ArticleIcon,\r\n  Quiz as QuizIcon,\r\n  Star as StarIcon,\r\n  TrendingUp as TrendingUpIcon,\r\n  Security as SecurityIcon,\r\n  Support as SupportIcon,\r\n  Notifications as NotificationsIcon,\r\n  Settings as SettingsIcon,\r\n  KeyboardArrowRight as ArrowRightIcon,\r\n  KeyboardArrowLeft as ArrowLeftIcon,\r\n  Bookmark as BookmarkIcon,\r\n  Share as ShareIcon,\r\n  Download as DownloadIcon,\r\n  Print as PrintIcon,\r\n  Email as EmailIcon,\r\n  Phone as PhoneIcon,\r\n  LocationOn as LocationIcon,\r\n  AccessTime as TimeIcon,\r\n  Group as GroupIcon,\r\n  Work as WorkIcon,\r\n  Code as CodeIcon,\r\n  Build as BuildIcon,\r\n  Storage as StorageIcon,\r\n  Cloud as CloudIcon,\r\n  Speed as SpeedIcon,\r\n  Verified as VerifiedIcon,\r\n  Psychology as PsychologyIcon,\r\n  AutoAwesome as AutoAwesomeIcon,\r\n  AccountCircle as AccountCircleIcon,\r\n  Brightness4 as DarkModeIcon,\r\n  Brightness7 as LightModeIcon,\r\n  Favorite as FavoriteIcon,\r\n  FavoriteBorder as FavoriteBorderIcon,\r\n  Logout as LogoutIcon,\r\n  Login as LoginIcon,\r\n  Menu as MenuIcon,\r\n  BugReport as BugReportIcon,\r\n  Close as CloseIcon,\r\n  BarChart as BarChartIcon,\r\n  Timeline as TimelineIcon,\r\n  ShowChart as ShowChartIcon\r\n} from '@mui/icons-material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { Last9Test } from '../components/DataDogTest';\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface LearningModule {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  duration: string;\r\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\r\n  category: string;\r\n  completed: boolean;\r\n  progress: number;\r\n  rating: number;\r\n  instructor: string;\r\n  videoUrl?: string;\r\n  materials: string[];\r\n}\r\n\r\ninterface DocumentationItem {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  category: string;\r\n  tags: string[];\r\n  lastUpdated: string;\r\n  author: string;\r\n  views: number;\r\n  rating: number;\r\n  content: string;\r\n}\r\n\r\ninterface FavoriteItem {\r\n  id: string;\r\n  title: string;\r\n  type: 'menu' | 'bi' | 'parameter';\r\n  path: string;\r\n  icon: React.ReactNode;\r\n  category: string;\r\n}\r\n\r\ninterface BIParameter {\r\n  id: string;\r\n  name: string;\r\n  value: number;\r\n  unit: string;\r\n  trend: 'up' | 'down' | 'stable';\r\n  target: number;\r\n  category: string;\r\n}\r\n\r\nconst LandingPage: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const { user, isAuthenticated, logout } = useAuth();\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedCategory, setSelectedCategory] = useState('all');\r\n  const [openVideoDialog, setOpenVideoDialog] = useState(false);\r\n  const [selectedVideo, setSelectedVideo] = useState<string>('');\r\n  const [darkMode, setDarkMode] = useState(false);\r\n  const [settingsOpen, setSettingsOpen] = useState(false);\r\n  const [favorites, setFavorites] = useState<FavoriteItem[]>([]);\r\n  const [biParameters, setBiParameters] = useState<BIParameter[]>([]);\r\n  const [searchAnchorEl, setSearchAnchorEl] = useState<null | HTMLElement>(null);\r\n  const [userMenuAnchorEl, setUserMenuAnchorEl] = useState<null | HTMLElement>(null);\r\n  const [globalSearchTerm, setGlobalSearchTerm] = useState('');\r\n\r\n  // Mock-Daten für Lernmodule\r\n  const learningModules: LearningModule[] = [\r\n    {\r\n      id: '1',\r\n      title: 'VALEO NeuroERP Grundlagen',\r\n      description: 'Lernen Sie die Grundfunktionen des ERP-Systems kennen',\r\n      duration: '45 Min',\r\n      difficulty: 'beginner',\r\n      category: 'Grundlagen',\r\n      completed: false,\r\n      progress: 0,\r\n      rating: 4.8,\r\n      instructor: 'Dr. Anna Schmidt',\r\n      videoUrl: 'https://example.com/video1',\r\n      materials: ['PDF-Anleitung', 'Übungsdateien', 'Quiz']\r\n    },\r\n    {\r\n      id: '2',\r\n      title: 'Datenverwaltung & Analytics',\r\n      description: 'Erweiterte Datenanalyse und Reporting-Funktionen',\r\n      duration: '60 Min',\r\n      difficulty: 'intermediate',\r\n      category: 'Analytics',\r\n      completed: false,\r\n      progress: 25,\r\n      rating: 4.6,\r\n      instructor: 'Prof. Michael Weber',\r\n      videoUrl: 'https://example.com/video2',\r\n      materials: ['Datenbeispiele', 'Analytics-Tools', 'Fallstudien']\r\n    },\r\n    {\r\n      id: '3',\r\n      title: 'KI-gestützte Entscheidungsfindung',\r\n      description: 'Nutzen Sie KI-Algorithmen für bessere Geschäftsentscheidungen',\r\n      duration: '90 Min',\r\n      difficulty: 'advanced',\r\n      category: 'KI & ML',\r\n      completed: false,\r\n      progress: 0,\r\n      rating: 4.9,\r\n      instructor: 'Dr. Sarah Müller',\r\n      videoUrl: 'https://example.com/video3',\r\n      materials: ['KI-Modelle', 'Datenbanken', 'API-Dokumentation']\r\n    },\r\n    {\r\n      id: '4',\r\n      title: 'Prozessoptimierung',\r\n      description: 'Optimieren Sie Ihre Geschäftsprozesse mit NeuroERP',\r\n      duration: '75 Min',\r\n      difficulty: 'intermediate',\r\n      category: 'Prozesse',\r\n      completed: true,\r\n      progress: 100,\r\n      rating: 4.7,\r\n      instructor: 'Ing. Thomas Fischer',\r\n      videoUrl: 'https://example.com/video4',\r\n      materials: ['Prozessdiagramme', 'Optimierungstools', 'Best Practices']\r\n    }\r\n  ];\r\n\r\n  // Mock-Daten für Dokumentation\r\n  const documentationItems: DocumentationItem[] = [\r\n    {\r\n      id: '1',\r\n      title: 'Installation & Setup Guide',\r\n      description: 'Schritt-für-Schritt Anleitung zur Installation von VALEO NeuroERP',\r\n      category: 'Installation',\r\n      tags: ['Setup', 'Installation', 'Konfiguration'],\r\n      lastUpdated: '2024-01-15',\r\n      author: 'System Administration',\r\n      views: 1247,\r\n      rating: 4.8,\r\n      content: 'Detaillierte Installationsanleitung...'\r\n    },\r\n    {\r\n      id: '2',\r\n      title: 'API-Dokumentation',\r\n      description: 'Vollständige API-Referenz für Entwickler',\r\n      category: 'Entwicklung',\r\n      tags: ['API', 'REST', 'Integration'],\r\n      lastUpdated: '2024-01-10',\r\n      author: 'Development Team',\r\n      views: 892,\r\n      rating: 4.6,\r\n      content: 'API-Endpunkte und Authentifizierung...'\r\n    },\r\n    {\r\n      id: '3',\r\n      title: 'Sicherheitsrichtlinien',\r\n      description: 'Best Practices für Datensicherheit und Compliance',\r\n      category: 'Sicherheit',\r\n      tags: ['Sicherheit', 'Compliance', 'GDPR'],\r\n      lastUpdated: '2024-01-12',\r\n      author: 'Security Team',\r\n      views: 567,\r\n      rating: 4.9,\r\n      content: 'Sicherheitsrichtlinien und Compliance...'\r\n    }\r\n  ];\r\n\r\n  // Mock-Daten für Favoriten\r\n  const availableFavorites: FavoriteItem[] = [\r\n    { id: '1', title: 'Dashboard', type: 'menu', path: '/dashboard', icon: <DashboardIcon />, category: 'Navigation' },\r\n    { id: '2', title: 'Umsatz-Analyse', type: 'bi', path: '/analytics/sales', icon: <BarChartIcon />, category: 'Business Intelligence' },\r\n    { id: '3', title: 'Kundenzufriedenheit', type: 'parameter', path: '/kpi/satisfaction', icon: <TrendingUpIcon />, category: 'KPIs' },\r\n    { id: '4', title: 'Lagerbestand', type: 'bi', path: '/analytics/inventory', icon: <InventoryIcon />, category: 'Business Intelligence' },\r\n    { id: '5', title: 'Personal-Management', type: 'menu', path: '/personal', icon: <PersonIcon />, category: 'Navigation' },\r\n    { id: '6', title: 'Produktivität', type: 'parameter', path: '/kpi/productivity', icon: <ShowChartIcon />, category: 'KPIs' }\r\n  ];\r\n\r\n  // Mock-Daten für BI-Parameter\r\n  const mockBIParameters: BIParameter[] = [\r\n    { id: '1', name: 'Umsatz', value: 1250000, unit: '€', trend: 'up', target: 1200000, category: 'Finanzen' },\r\n    { id: '2', name: 'Kundenzufriedenheit', value: 4.8, unit: '/5', trend: 'up', target: 4.5, category: 'Service' },\r\n    { id: '3', name: 'Produktivität', value: 87, unit: '%', trend: 'stable', target: 85, category: 'Operationen' },\r\n    { id: '4', name: 'Lagerumschlag', value: 12.5, unit: 'x/Jahr', trend: 'up', target: 10, category: 'Logistik' },\r\n    { id: '5', name: 'Mitarbeiterfluktuation', value: 8.2, unit: '%', trend: 'down', target: 10, category: 'Personal' }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    setBiParameters(mockBIParameters);\r\n  }, []);\r\n\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  const handleVideoPlay = (videoUrl: string) => {\r\n    setSelectedVideo(videoUrl);\r\n    setOpenVideoDialog(true);\r\n  };\r\n\r\n  const getDifficultyColor = (difficulty: string) => {\r\n    switch (difficulty) {\r\n      case 'beginner': return 'success';\r\n      case 'intermediate': return 'warning';\r\n      case 'advanced': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getDifficultyText = (difficulty: string) => {\r\n    switch (difficulty) {\r\n      case 'beginner': return 'Anfänger';\r\n      case 'intermediate': return 'Fortgeschritten';\r\n      case 'advanced': return 'Experte';\r\n      default: return difficulty;\r\n    }\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    navigate('/login');\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    logout();\r\n    setUserMenuAnchorEl(null);\r\n  };\r\n\r\n  const handleThemeToggle = () => {\r\n    setDarkMode(!darkMode);\r\n  };\r\n\r\n  const handleAddFavorite = (item: FavoriteItem) => {\r\n    if (!favorites.find(fav => fav.id === item.id)) {\r\n      setFavorites([...favorites, item]);\r\n    }\r\n  };\r\n\r\n  const handleRemoveFavorite = (itemId: string) => {\r\n    setFavorites(favorites.filter(fav => fav.id !== itemId));\r\n  };\r\n\r\n  const handleGlobalSearch = (term: string) => {\r\n    setGlobalSearchTerm(term);\r\n    // Hier würde die globale Suche implementiert werden\r\n    console.log('Globale Suche nach:', term);\r\n  };\r\n\r\n  const filteredModules = learningModules.filter(module => {\r\n    const matchesSearch = module.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         module.description.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesCategory = selectedCategory === 'all' || module.category === selectedCategory;\r\n    return matchesSearch && matchesCategory;\r\n  });\r\n\r\n  return (\r\n    <Box sx={{ minHeight: '100vh', bgcolor: darkMode ? '#121212' : '#F5F6F7' }}>\r\n      {/* Header mit Anmeldung, Suchleiste und Einstellungen */}\r\n      <AppBar position=\"static\" sx={{ bgcolor: darkMode ? '#1e1e1e' : '#0A6ED1' }}>\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" sx={{ flexGrow: 0, mr: 3, fontWeight: 700 }}>\r\n            VALEO NeuroERP\r\n          </Typography>\r\n\r\n          {/* Globale Suchleiste */}\r\n          <Box sx={{ flexGrow: 1, maxWidth: 600, mx: 2 }}>\r\n            <Autocomplete\r\n              freeSolo\r\n              options={[\r\n                'Dashboard',\r\n                'Personal-Management',\r\n                'Finanzen',\r\n                'Lager',\r\n                'Produktion',\r\n                'Analytics',\r\n                'Dokumentation',\r\n                'Support'\r\n              ]}\r\n              value={globalSearchTerm}\r\n              onChange={(event, newValue) => {\r\n                if (typeof newValue === 'string') {\r\n                  handleGlobalSearch(newValue);\r\n                }\r\n              }}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  placeholder=\"Globale Suche...\"\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  sx={{\r\n                    '& .MuiOutlinedInput-root': {\r\n                      bgcolor: darkMode ? '#2d2d2d' : 'white',\r\n                      '& fieldset': {\r\n                        borderColor: darkMode ? '#555' : '#ccc',\r\n                      },\r\n                      '&:hover fieldset': {\r\n                        borderColor: darkMode ? '#777' : '#999',\r\n                      },\r\n                    },\r\n                  }}\r\n                  InputProps={{\r\n                    ...params.InputProps,\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <SearchIcon />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                />\r\n              )}\r\n            />\r\n          </Box>\r\n\r\n          {/* Theme Toggle */}\r\n          <IconButton\r\n            color=\"inherit\"\r\n            onClick={handleThemeToggle}\r\n            sx={{ mr: 1 }}\r\n          >\r\n            {darkMode ? <LightModeIcon /> : <DarkModeIcon />}\r\n          </IconButton>\r\n\r\n          {/* Benachrichtigungen */}\r\n          <IconButton color=\"inherit\" sx={{ mr: 1 }}>\r\n            <Badge badgeContent={3} color=\"error\">\r\n              <NotificationsIcon />\r\n            </Badge>\r\n          </IconButton>\r\n\r\n          {/* Einstellungen */}\r\n          <IconButton\r\n            color=\"inherit\"\r\n            onClick={() => setSettingsOpen(true)}\r\n            sx={{ mr: 1 }}\r\n          >\r\n            <SettingsIcon />\r\n          </IconButton>\r\n\r\n          {/* Login Button */}\r\n          {!isAuthenticated && (\r\n            <Tooltip title=\"Anmelden\">\r\n              <IconButton\r\n                color=\"inherit\"\r\n                onClick={handleLogin}\r\n                sx={{ mr: 1 }}\r\n              >\r\n                <LoginIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          )}\r\n\r\n          {/* Last9 Test Button */}\r\n          <Tooltip title=\"Last9 Observability Test\">\r\n            <IconButton\r\n              color=\"inherit\"\r\n              onClick={() => {\r\n                // Scroll to Last9 Test component\r\n                const last9Test = document.getElementById('last9-test');\r\n                if (last9Test) {\r\n                  last9Test.scrollIntoView({ behavior: 'smooth' });\r\n                }\r\n              }}\r\n              sx={{ mr: 1 }}\r\n            >\r\n              <BugReportIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n\r\n          {/* Benutzer-Menü */}\r\n          <IconButton\r\n            color=\"inherit\"\r\n            onClick={(e) => setUserMenuAnchorEl(e.currentTarget)}\r\n          >\r\n            {isAuthenticated ? (\r\n              <Avatar sx={{ width: 32, height: 32, bgcolor: 'secondary.main' }}>\r\n                {user?.full_name?.charAt(0) || user?.username?.charAt(0) || 'U'}\r\n              </Avatar>\r\n            ) : (\r\n              <AccountCircleIcon />\r\n            )}\r\n          </IconButton>\r\n\r\n          {/* Benutzer-Menü Dropdown */}\r\n          <Menu\r\n            anchorEl={userMenuAnchorEl}\r\n            open={Boolean(userMenuAnchorEl)}\r\n            onClose={() => setUserMenuAnchorEl(null)}\r\n          >\r\n            {isAuthenticated ? (\r\n              <>\r\n                <MenuItem onClick={() => setUserMenuAnchorEl(null)}>\r\n                  <ListItemIcon>\r\n                    <AccountCircleIcon fontSize=\"small\" />\r\n                  </ListItemIcon>\r\n                  {user?.full_name || user?.username || 'Unbekannter Benutzer'}\r\n                </MenuItem>\r\n                <MenuItem onClick={() => setUserMenuAnchorEl(null)}>\r\n                  <ListItemIcon>\r\n                    <EmailIcon fontSize=\"small\" />\r\n                  </ListItemIcon>\r\n                  {user?.email}\r\n                </MenuItem>\r\n                <Divider />\r\n                <MenuItem onClick={handleLogout}>\r\n                  <ListItemIcon>\r\n                    <LogoutIcon fontSize=\"small\" />\r\n                  </ListItemIcon>\r\n                  Abmelden\r\n                </MenuItem>\r\n              </>\r\n            ) : (\r\n              <MenuItem onClick={handleLogin}>\r\n                <ListItemIcon>\r\n                  <LoginIcon fontSize=\"small\" />\r\n                </ListItemIcon>\r\n                Anmelden\r\n              </MenuItem>\r\n            )}\r\n          </Menu>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      {/* Einstellungen-Drawer */}\r\n      <Drawer\r\n        anchor=\"right\"\r\n        open={settingsOpen}\r\n        onClose={() => setSettingsOpen(false)}\r\n        sx={{\r\n          '& .MuiDrawer-paper': {\r\n            width: 400,\r\n            bgcolor: darkMode ? '#1e1e1e' : 'white',\r\n            color: darkMode ? 'white' : 'inherit'\r\n          }\r\n        }}\r\n      >\r\n        <Box sx={{ p: 3 }}>\r\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n            <Typography variant=\"h6\">Einstellungen</Typography>\r\n            <IconButton onClick={() => setSettingsOpen(false)}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </Box>\r\n\r\n          {/* Theme-Einstellungen */}\r\n          <Card sx={{ p: 3, mb: 3 }}>\r\n            <Typography variant=\"h6\" sx={{ mb: 2 }}>\r\n              Erscheinungsbild\r\n            </Typography>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={darkMode}\r\n                  onChange={handleThemeToggle}\r\n                  color=\"primary\"\r\n                />\r\n              }\r\n              label=\"Dark Mode\"\r\n            />\r\n          </Card>\r\n\r\n          {/* Favoriten */}\r\n          <Card sx={{ p: 3, mb: 3 }}>\r\n            <Typography variant=\"h6\" sx={{ mb: 2 }}>\r\n              Meine Favoriten\r\n            </Typography>\r\n            \r\n            {/* Aktuelle Favoriten */}\r\n            {favorites.length > 0 && (\r\n              <Box sx={{ mb: 3 }}>\r\n                <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>\r\n                  Aktuelle Favoriten:\r\n                </Typography>\r\n                <List dense>\r\n                  {favorites.map((fav) => (\r\n                    <ListItem key={fav.id} sx={{ px: 0 }}>\r\n                      <ListItemIcon sx={{ minWidth: 40 }}>\r\n                        {fav.icon}\r\n                      </ListItemIcon>\r\n                      <ListItemText \r\n                        primary={fav.title}\r\n                        secondary={fav.category}\r\n                      />\r\n                      <IconButton\r\n                        size=\"small\"\r\n                        onClick={() => handleRemoveFavorite(fav.id)}\r\n                        color=\"error\"\r\n                      >\r\n                        <FavoriteIcon />\r\n                      </IconButton>\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n              </Box>\r\n            )}\r\n\r\n            {/* Verfügbare Favoriten hinzufügen */}\r\n            <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>\r\n              Favoriten hinzufügen:\r\n            </Typography>\r\n            <List dense>\r\n              {availableFavorites\r\n                .filter(item => !favorites.find(fav => fav.id === item.id))\r\n                .map((item) => (\r\n                  <ListItem key={item.id} sx={{ px: 0 }}>\r\n                    <ListItemIcon sx={{ minWidth: 40 }}>\r\n                      {item.icon}\r\n                    </ListItemIcon>\r\n                    <ListItemText \r\n                      primary={item.title}\r\n                      secondary={item.category}\r\n                    />\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={() => handleAddFavorite(item)}\r\n                      color=\"primary\"\r\n                    >\r\n                      <FavoriteBorderIcon />\r\n                    </IconButton>\r\n                  </ListItem>\r\n                ))}\r\n            </List>\r\n          </Card>\r\n\r\n          {/* BI-Parameter */}\r\n          <Card sx={{ p: 3 }}>\r\n            <Typography variant=\"h6\" sx={{ mb: 2 }}>\r\n              Business Intelligence Parameter\r\n            </Typography>\r\n            <List dense>\r\n              {biParameters.map((param) => (\r\n                <ListItem key={param.id} sx={{ px: 0 }}>\r\n                  <ListItemIcon sx={{ minWidth: 40 }}>\r\n                    {param.trend === 'up' ? (\r\n                      <TrendingUpIcon color=\"success\" />\r\n                    ) : param.trend === 'down' ? (\r\n                      <TrendingUpIcon color=\"error\" sx={{ transform: 'rotate(180deg)' }} />\r\n                    ) : (\r\n                      <TimelineIcon color=\"action\" />\r\n                    )}\r\n                  </ListItemIcon>\r\n                  <ListItemText \r\n                    primary={param.name}\r\n                    secondary={`${param.value} ${param.unit} (Ziel: ${param.target} ${param.unit})`}\r\n                  />\r\n                  <Chip \r\n                    label={param.category} \r\n                    size=\"small\" \r\n                    variant=\"outlined\"\r\n                  />\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          </Card>\r\n        </Box>\r\n      </Drawer>\r\n\r\n      {/* Hero Section */}\r\n      <Box sx={{ \r\n        background: 'linear-gradient(135deg, #0A6ED1 0%, #1976d2 50%, #42a5f5 100%)',\r\n        color: 'white',\r\n        py: 8\r\n      }}>\r\n        <Container maxWidth=\"lg\">\r\n          <Grid container spacing={4} alignItems=\"center\">\r\n            <Grid item xs={12} md={6}>\r\n              <Typography variant=\"h2\" sx={{ fontWeight: 700, mb: 2 }}>\r\n                VALEO NeuroERP 2.0\r\n              </Typography>\r\n              <Typography variant=\"h5\" sx={{ mb: 3, opacity: 0.9 }}>\r\n                Intelligentes ERP-System mit KI-Integration\r\n              </Typography>\r\n              <Typography variant=\"body1\" sx={{ mb: 4, opacity: 0.8 }}>\r\n                Entdecken Sie die Zukunft der Unternehmensführung mit unserem fortschrittlichen \r\n                ERP-System. Kombinieren Sie traditionelle ERP-Funktionen mit modernster \r\n                künstlicher Intelligenz für optimale Geschäftsergebnisse.\r\n              </Typography>\r\n              <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>\r\n                <Button \r\n                  variant=\"contained\" \r\n                  size=\"large\"\r\n                  onClick={() => navigate('/dashboard')}\r\n                  sx={{ \r\n                    bgcolor: 'white', \r\n                    color: '#0A6ED1',\r\n                    '&:hover': { bgcolor: '#f5f5f5' }\r\n                  }}\r\n                >\r\n                  Dashboard öffnen\r\n                </Button>\r\n                <Button \r\n                  variant=\"outlined\" \r\n                  size=\"large\"\r\n                  sx={{ borderColor: 'white', color: 'white' }}\r\n                >\r\n                  Demo anfordern\r\n                </Button>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <Box sx={{ textAlign: 'center' }}>\r\n                <AutoAwesomeIcon sx={{ fontSize: 120, opacity: 0.8 }} />\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </Box>\r\n\r\n      {/* Main Content */}\r\n      <Container maxWidth=\"lg\" sx={{ py: 4 }}>\r\n        {/* Breadcrumbs */}\r\n        <Breadcrumbs sx={{ mb: 3 }}>\r\n          <Link color=\"inherit\" href=\"#\">\r\n            Startseite\r\n          </Link>\r\n          <Typography color=\"text.primary\">VALEO NeuroERP</Typography>\r\n        </Breadcrumbs>\r\n\r\n        {/* Tabs */}\r\n        <Card sx={{ mb: 4 }}>\r\n          <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n            <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"ERP sections\">\r\n              <Tab \r\n                icon={<DashboardIcon />} \r\n                label=\"Übersicht\" \r\n                iconPosition=\"start\"\r\n              />\r\n              <Tab \r\n                icon={<SchoolIcon />} \r\n                label=\"Lernbereich\" \r\n                iconPosition=\"start\"\r\n              />\r\n              <Tab \r\n                icon={<BookIcon />} \r\n                label=\"Dokumentation\" \r\n                iconPosition=\"start\"\r\n              />\r\n              <Tab \r\n                icon={<HelpIcon />} \r\n                label=\"Wiki & Support\" \r\n                iconPosition=\"start\"\r\n              />\r\n            </Tabs>\r\n          </Box>\r\n\r\n          {/* Tab Content */}\r\n          <TabPanel value={tabValue} index={0}>\r\n            {/* Übersicht */}\r\n            <Grid container spacing={4}>\r\n              {/* System-Status */}\r\n              <Grid item xs={12} md={8}>\r\n                <Card sx={{ p: 3, mb: 3 }}>\r\n                  <Typography variant=\"h5\" sx={{ mb: 3, display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                    <TrendingUpIcon color=\"primary\" />\r\n                    System-Status\r\n                  </Typography>\r\n                  <Grid container spacing={3}>\r\n                    <Grid item xs={6} md={3}>\r\n                      <Box sx={{ textAlign: 'center' }}>\r\n                        <VerifiedIcon sx={{ fontSize: 40, color: 'success.main', mb: 1 }} />\r\n                        <Typography variant=\"h6\" color=\"success.main\">Online</Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">System-Status</Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                    <Grid item xs={6} md={3}>\r\n                      <Box sx={{ textAlign: 'center' }}>\r\n                        <SpeedIcon sx={{ fontSize: 40, color: 'primary.main', mb: 1 }} />\r\n                        <Typography variant=\"h6\">99.9%</Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">Uptime</Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                    <Grid item xs={6} md={3}>\r\n                      <Box sx={{ textAlign: 'center' }}>\r\n                        <GroupIcon sx={{ fontSize: 40, color: 'info.main', mb: 1 }} />\r\n                        <Typography variant=\"h6\">1,247</Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">Aktive Benutzer</Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                    <Grid item xs={6} md={3}>\r\n                      <Box sx={{ textAlign: 'center' }}>\r\n                        <SecurityIcon sx={{ fontSize: 40, color: 'warning.main', mb: 1 }} />\r\n                        <Typography variant=\"h6\">256-bit</Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">Verschlüsselung</Typography>\r\n                      </Box>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Card>\r\n\r\n                {/* Schnellzugriff */}\r\n                <Card sx={{ p: 3 }}>\r\n                  <Typography variant=\"h5\" sx={{ mb: 3, display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                    <WorkIcon color=\"primary\" />\r\n                    Schnellzugriff\r\n                  </Typography>\r\n                  <Grid container spacing={2}>\r\n                    {[\r\n                      { title: 'Dashboard', icon: <DashboardIcon />, path: '/dashboard', color: '#0A6ED1' },\r\n                      { title: 'Personal', icon: <PersonIcon />, path: '/personal', color: '#107C41' },\r\n                      { title: 'Finanzen', icon: <BusinessIcon />, path: '/finance', color: '#E9730C' },\r\n                      { title: 'Lager', icon: <InventoryIcon />, path: '/warehouse', color: '#BB0000' },\r\n                      { title: 'Produktion', icon: <BuildIcon />, path: '/production', color: '#6F3CC4' },\r\n                      { title: 'Analytics', icon: <AnalyticsIcon />, path: '/reporting', color: '#0F828F' }\r\n                    ].map((item) => (\r\n                      <Grid item xs={6} sm={4} md={2} key={item.title}>\r\n                        <Card \r\n                          sx={{ \r\n                            p: 2, \r\n                            textAlign: 'center', \r\n                            cursor: 'pointer',\r\n                            transition: 'all 0.3s ease',\r\n                            '&:hover': { \r\n                              transform: 'translateY(-4px)',\r\n                              boxShadow: '0 8px 25px rgba(0,0,0,0.15)'\r\n                            }\r\n                          }}\r\n                          onClick={() => navigate(item.path)}\r\n                        >\r\n                          <Box sx={{ color: item.color, mb: 1 }}>\r\n                            {item.icon}\r\n                          </Box>\r\n                          <Typography variant=\"body2\" sx={{ fontWeight: 500 }}>\r\n                            {item.title}\r\n                          </Typography>\r\n                        </Card>\r\n                      </Grid>\r\n                    ))}\r\n                  </Grid>\r\n                </Card>\r\n              </Grid>\r\n\r\n              {/* Sidebar */}\r\n              <Grid item xs={12} md={4}>\r\n                {/* Aktuelle Aktivitäten */}\r\n                <Card sx={{ p: 3, mb: 3 }}>\r\n                  <Typography variant=\"h6\" sx={{ mb: 2 }}>\r\n                    Aktuelle Aktivitäten\r\n                  </Typography>\r\n                  <List>\r\n                    {[\r\n                      { text: 'Neue Benutzer registriert', time: 'vor 5 Min', icon: <PersonIcon /> },\r\n                      { text: 'System-Update abgeschlossen', time: 'vor 15 Min', icon: <CheckCircleIcon /> },\r\n                      { text: 'Backup erfolgreich', time: 'vor 1 Std', icon: <StorageIcon /> },\r\n                      { text: 'KI-Modell trainiert', time: 'vor 2 Std', icon: <PsychologyIcon /> }\r\n                    ].map((activity, index) => (\r\n                      <ListItem key={index} sx={{ px: 0 }}>\r\n                        <ListItemIcon sx={{ minWidth: 40 }}>\r\n                          {activity.icon}\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                          primary={activity.text}\r\n                          secondary={activity.time}\r\n                        />\r\n                      </ListItem>\r\n                    ))}\r\n                  </List>\r\n                </Card>\r\n\r\n                {/* Support */}\r\n                <Card sx={{ p: 3 }}>\r\n                  <Typography variant=\"h6\" sx={{ mb: 2 }}>\r\n                    Support & Kontakt\r\n                  </Typography>\r\n                  <List>\r\n                    <ListItem sx={{ px: 0 }}>\r\n                      <ListItemIcon>\r\n                        <EmailIcon />\r\n                      </ListItemIcon>\r\n                      <ListItemText primary=\"support@valeo-neuroerp.de\" />\r\n                    </ListItem>\r\n                    <ListItem sx={{ px: 0 }}>\r\n                      <ListItemIcon>\r\n                        <PhoneIcon />\r\n                      </ListItemIcon>\r\n                      <ListItemText primary=\"+49 89 1234 5678\" />\r\n                    </ListItem>\r\n                    <ListItem sx={{ px: 0 }}>\r\n                      <ListItemIcon>\r\n                        <LocationIcon />\r\n                      </ListItemIcon>\r\n                      <ListItemText primary=\"München, Deutschland\" />\r\n                    </ListItem>\r\n                  </List>\r\n                  <Button \r\n                    variant=\"contained\" \r\n                    fullWidth \r\n                    startIcon={<SupportIcon />}\r\n                    sx={{ mt: 2 }}\r\n                  >\r\n                    Support anfordern\r\n                  </Button>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n          </TabPanel>\r\n\r\n          <TabPanel value={tabValue} index={1}>\r\n            {/* Lernbereich */}\r\n            <Box sx={{ mb: 4 }}>\r\n              <Typography variant=\"h4\" sx={{ mb: 2 }}>\r\n                Lernbereich & Schulungen\r\n              </Typography>\r\n              <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n                Erweitern Sie Ihre Kenntnisse mit unseren umfassenden Schulungsmodulen und \r\n                interaktiven Lerninhalten.\r\n              </Typography>\r\n\r\n              {/* Filter */}\r\n              <Card sx={{ p: 3, mb: 3 }}>\r\n                <Grid container spacing={2} alignItems=\"center\">\r\n                  <Grid item xs={12} md={6}>\r\n                    <TextField\r\n                      fullWidth\r\n                      placeholder=\"Module durchsuchen...\"\r\n                      value={searchTerm}\r\n                      onChange={(e) => setSearchTerm(e.target.value)}\r\n                      InputProps={{\r\n                        startAdornment: <SearchIcon sx={{ mr: 1, color: 'text.secondary' }} />\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} md={3}>\r\n                    <FormControl fullWidth>\r\n                      <InputLabel>Kategorie</InputLabel>\r\n                      <Select\r\n                        value={selectedCategory}\r\n                        onChange={(e) => setSelectedCategory(e.target.value)}\r\n                        label=\"Kategorie\"\r\n                      >\r\n                        <MenuItem value=\"all\">Alle Kategorien</MenuItem>\r\n                        <MenuItem value=\"Grundlagen\">Grundlagen</MenuItem>\r\n                        <MenuItem value=\"Analytics\">Analytics</MenuItem>\r\n                        <MenuItem value=\"KI & ML\">KI & ML</MenuItem>\r\n                        <MenuItem value=\"Prozesse\">Prozesse</MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={12} md={3}>\r\n                    <Button \r\n                      variant=\"outlined\" \r\n                      fullWidth\r\n                      onClick={() => {\r\n                        setSearchTerm('');\r\n                        setSelectedCategory('all');\r\n                      }}\r\n                    >\r\n                      Filter zurücksetzen\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </Card>\r\n\r\n              {/* Lernmodule */}\r\n              <Grid container spacing={3}>\r\n                {filteredModules.map((module) => (\r\n                  <Grid item xs={12} md={6} key={module.id}>\r\n                    <Card sx={{ p: 3, height: '100%' }}>\r\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n                        <Chip \r\n                          label={module.category} \r\n                          size=\"small\" \r\n                          color=\"primary\" \r\n                          variant=\"outlined\"\r\n                        />\r\n                        <Chip \r\n                          label={getDifficultyText(module.difficulty)}\r\n                          size=\"small\"\r\n                          color={getDifficultyColor(module.difficulty) as any}\r\n                        />\r\n                      </Box>\r\n\r\n                      <Typography variant=\"h6\" sx={{ mb: 1 }}>\r\n                        {module.title}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n                        {module.description}\r\n                      </Typography>\r\n\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n                        <Rating value={module.rating} readOnly size=\"small\" />\r\n                        <Typography variant=\"body2\" sx={{ ml: 1 }}>\r\n                          ({module.rating})\r\n                        </Typography>\r\n                      </Box>\r\n\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n                        <TimeIcon fontSize=\"small\" sx={{ mr: 1, color: 'text.secondary' }} />\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          {module.duration}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ ml: 2 }}>\r\n                          • {module.instructor}\r\n                        </Typography>\r\n                      </Box>\r\n\r\n                      {module.progress > 0 && (\r\n                        <Box sx={{ mb: 2 }}>\r\n                          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\r\n                            <Typography variant=\"body2\">Fortschritt</Typography>\r\n                            <Typography variant=\"body2\">{module.progress}%</Typography>\r\n                          </Box>\r\n                          <LinearProgress \r\n                            variant=\"determinate\" \r\n                            value={module.progress} \r\n                            sx={{ height: 6, borderRadius: 3 }}\r\n                          />\r\n                        </Box>\r\n                      )}\r\n\r\n                      <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap', mb: 2 }}>\r\n                        {module.materials.map((material, index) => (\r\n                          <Chip \r\n                            key={index} \r\n                            label={material} \r\n                            size=\"small\" \r\n                            variant=\"outlined\"\r\n                          />\r\n                        ))}\r\n                      </Box>\r\n\r\n                      <Box sx={{ display: 'flex', gap: 1 }}>\r\n                        <Button \r\n                          variant=\"contained\" \r\n                          startIcon={<PlayIcon />}\r\n                          onClick={() => handleVideoPlay(module.videoUrl || '')}\r\n                          fullWidth\r\n                        >\r\n                          {module.completed ? 'Wiederholen' : 'Starten'}\r\n                        </Button>\r\n                        {module.completed && (\r\n                          <CheckCircleIcon color=\"success\" sx={{ alignSelf: 'center' }} />\r\n                        )}\r\n                      </Box>\r\n                    </Card>\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n            </Box>\r\n          </TabPanel>\r\n\r\n          <TabPanel value={tabValue} index={2}>\r\n            {/* Dokumentation */}\r\n            <Box sx={{ mb: 4 }}>\r\n              <Typography variant=\"h4\" sx={{ mb: 2 }}>\r\n                Dokumentation & Handbücher\r\n              </Typography>\r\n              <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n                Umfassende Dokumentation, API-Referenzen und technische Handbücher für \r\n                Entwickler und Administratoren.\r\n              </Typography>\r\n\r\n              {/* Dokumentationskategorien */}\r\n              <Grid container spacing={3}>\r\n                {[\r\n                  { title: 'Benutzerhandbuch', icon: <BookIcon />, count: 15, color: '#0A6ED1' },\r\n                  { title: 'API-Dokumentation', icon: <CodeIcon />, count: 8, color: '#107C41' },\r\n                  { title: 'Administration', icon: <SettingsIcon />, count: 12, color: '#E9730C' },\r\n                  { title: 'Entwicklung', icon: <BuildIcon />, count: 6, color: '#BB0000' },\r\n                  { title: 'Sicherheit', icon: <SecurityIcon />, count: 4, color: '#6F3CC4' },\r\n                  { title: 'Integration', icon: <CloudIcon />, count: 9, color: '#0F828F' }\r\n                ].map((category) => (\r\n                  <Grid item xs={12} sm={6} md={4} key={category.title}>\r\n                    <Card sx={{ p: 3, cursor: 'pointer', transition: 'all 0.3s ease', '&:hover': { transform: 'translateY(-4px)' } }}>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n                        <Box sx={{ color: category.color, mr: 2 }}>\r\n                          {category.icon}\r\n                        </Box>\r\n                        <Box>\r\n                          <Typography variant=\"h6\">{category.title}</Typography>\r\n                          <Typography variant=\"body2\" color=\"text.secondary\">\r\n                            {category.count} Dokumente\r\n                          </Typography>\r\n                        </Box>\r\n                      </Box>\r\n                      <Button variant=\"outlined\" fullWidth>\r\n                        Durchsuchen\r\n                      </Button>\r\n                    </Card>\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n\r\n              {/* Neueste Dokumentation */}\r\n              <Typography variant=\"h5\" sx={{ mt: 4, mb: 3 }}>\r\n                Neueste Dokumentation\r\n              </Typography>\r\n              <Grid container spacing={3}>\r\n                {documentationItems.map((item) => (\r\n                  <Grid item xs={12} md={6} key={item.id}>\r\n                    <Card sx={{ p: 3 }}>\r\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\r\n                        <Chip label={item.category} size=\"small\" color=\"primary\" />\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          {item.lastUpdated}\r\n                        </Typography>\r\n                      </Box>\r\n                      <Typography variant=\"h6\" sx={{ mb: 1 }}>\r\n                        {item.title}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n                        {item.description}\r\n                      </Typography>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n                        <Rating value={item.rating} readOnly size=\"small\" />\r\n                        <Typography variant=\"body2\" sx={{ ml: 1 }}>\r\n                          ({item.rating})\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ ml: 2 }}>\r\n                          {item.views} Aufrufe\r\n                        </Typography>\r\n                      </Box>\r\n                      <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap', mb: 2 }}>\r\n                        {item.tags.map((tag) => (\r\n                          <Chip key={tag} label={tag} size=\"small\" variant=\"outlined\" />\r\n                        ))}\r\n                      </Box>\r\n                      <Box sx={{ display: 'flex', gap: 1 }}>\r\n                        <Button variant=\"contained\" size=\"small\">\r\n                          Lesen\r\n                        </Button>\r\n                        <Button variant=\"outlined\" size=\"small\" startIcon={<DownloadIcon />}>\r\n                          PDF\r\n                        </Button>\r\n                        <Button variant=\"outlined\" size=\"small\" startIcon={<PrintIcon />}>\r\n                          Drucken\r\n                        </Button>\r\n                      </Box>\r\n                    </Card>\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n            </Box>\r\n          </TabPanel>\r\n\r\n          <TabPanel value={tabValue} index={3}>\r\n            {/* Wiki & Support */}\r\n            <Box sx={{ mb: 4 }}>\r\n              <Typography variant=\"h4\" sx={{ mb: 2 }}>\r\n                Wiki & Support\r\n              </Typography>\r\n              <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n                Finden Sie Antworten auf häufig gestellte Fragen, Lösungen für Probleme \r\n                und umfassende Support-Ressourcen.\r\n              </Typography>\r\n\r\n              <Grid container spacing={4}>\r\n                {/* FAQ */}\r\n                <Grid item xs={12} md={8}>\r\n                  <Card sx={{ p: 3 }}>\r\n                    <Typography variant=\"h5\" sx={{ mb: 3 }}>\r\n                      Häufig gestellte Fragen (FAQ)\r\n                    </Typography>\r\n                    <Accordion>\r\n                      <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                        <Typography variant=\"h6\">Wie installiere ich VALEO NeuroERP?</Typography>\r\n                      </AccordionSummary>\r\n                      <AccordionDetails>\r\n                        <Typography>\r\n                          Die Installation erfolgt über unseren Installer. Laden Sie die \r\n                          neueste Version herunter und folgen Sie der Schritt-für-Schritt-Anleitung.\r\n                        </Typography>\r\n                      </AccordionDetails>\r\n                    </Accordion>\r\n                    <Accordion>\r\n                      <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                        <Typography variant=\"h6\">Wie konfiguriere ich die KI-Funktionen?</Typography>\r\n                      </AccordionSummary>\r\n                      <AccordionDetails>\r\n                        <Typography>\r\n                          Die KI-Funktionen können über das Admin-Panel konfiguriert werden. \r\n                          Sie benötigen entsprechende Berechtigungen und API-Schlüssel.\r\n                        </Typography>\r\n                      </AccordionDetails>\r\n                    </Accordion>\r\n                    <Accordion>\r\n                      <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                        <Typography variant=\"h6\">Wie sichere ich meine Daten?</Typography>\r\n                      </AccordionSummary>\r\n                      <AccordionDetails>\r\n                        <Typography>\r\n                          Wir empfehlen regelmäßige Backups und die Verwendung unserer \r\n                          integrierten Sicherheitsfunktionen. Kontaktieren Sie unser Support-Team.\r\n                        </Typography>\r\n                      </AccordionDetails>\r\n                    </Accordion>\r\n                  </Card>\r\n                </Grid>\r\n\r\n                {/* Support-Kanäle */}\r\n                <Grid item xs={12} md={4}>\r\n                  <Card sx={{ p: 3, mb: 3 }}>\r\n                    <Typography variant=\"h6\" sx={{ mb: 2 }}>\r\n                      Support-Kanäle\r\n                    </Typography>\r\n                    <List>\r\n                      <ListItem sx={{ px: 0 }}>\r\n                        <ListItemIcon>\r\n                          <EmailIcon color=\"primary\" />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                          primary=\"E-Mail Support\"\r\n                          secondary=\"support@valeo-neuroerp.de\"\r\n                        />\r\n                      </ListItem>\r\n                      <ListItem sx={{ px: 0 }}>\r\n                        <ListItemIcon>\r\n                          <PhoneIcon color=\"primary\" />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                          primary=\"Telefon Support\"\r\n                          secondary=\"+49 89 1234 5678\"\r\n                        />\r\n                      </ListItem>\r\n                      <ListItem sx={{ px: 0 }}>\r\n                        <ListItemIcon>\r\n                          <HelpIcon color=\"primary\" />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                          primary=\"Live Chat\"\r\n                          secondary=\"24/7 verfügbar\"\r\n                        />\r\n                      </ListItem>\r\n                    </List>\r\n                  </Card>\r\n\r\n                  <Card sx={{ p: 3 }}>\r\n                    <Typography variant=\"h6\" sx={{ mb: 2 }}>\r\n                      Community\r\n                    </Typography>\r\n                    <List>\r\n                      <ListItem sx={{ px: 0 }}>\r\n                        <ListItemIcon>\r\n                          <GroupIcon color=\"primary\" />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                          primary=\"Forum\"\r\n                          secondary=\"Diskussionen & Lösungen\"\r\n                        />\r\n                      </ListItem>\r\n                      <ListItem sx={{ px: 0 }}>\r\n                        <ListItemIcon>\r\n                          <VideoIcon color=\"primary\" />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                          primary=\"Video-Tutorials\"\r\n                          secondary=\"Schritt-für-Schritt Anleitungen\"\r\n                        />\r\n                      </ListItem>\r\n                      <ListItem sx={{ px: 0 }}>\r\n                        <ListItemIcon>\r\n                          <ArticleIcon color=\"primary\" />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                          primary=\"Blog\"\r\n                          secondary=\"News & Updates\"\r\n                        />\r\n                      </ListItem>\r\n                    </List>\r\n                  </Card>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          </TabPanel>\r\n        </Card>\r\n      </Container>\r\n\r\n      {/* Video Dialog */}\r\n      <Dialog \r\n        open={openVideoDialog} \r\n        onClose={() => setOpenVideoDialog(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Schulungsvideo</DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ width: '100%', height: 400, bgcolor: 'black', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n            <Typography color=\"white\">\r\n              Video-Player würde hier angezeigt werden\r\n            </Typography>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenVideoDialog(false)}>Schließen</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Last9 Test */}\r\n      <Box id=\"last9-test\" sx={{ mt: 4 }}>\r\n        <Last9Test />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default LandingPage; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\LieferantenFormular.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\LoginPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\MitarbeiterFormular.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\NeuroFlowDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\POS\\DailyReportPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\POS\\LakasirFeatures.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\POS\\POSPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\PersonalManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\PersonalizedDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadUserDashboard'. Either include it or remove the dependency array.","line":270,"column":6,"nodeType":"ArrayExpression","endLine":270,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadUserDashboard, user]","fix":{"range":[7758,7764],"text":"[loadUserDashboard, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Box,\r\n  Button,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Chip,\r\n  Avatar,\r\n  LinearProgress,\r\n  Tooltip,\r\n  Switch,\r\n  FormControlLabel,\r\n  Divider,\r\n  Alert\r\n} from '@mui/material';\r\nimport {\r\n  Dashboard as DashboardIcon,\r\n  Settings as SettingsIcon,\r\n  Add as AddIcon,\r\n  Remove as RemoveIcon,\r\n  DragIndicator as DragIcon,\r\n  Business as BusinessIcon,\r\n  Inventory as InventoryIcon,\r\n  Receipt as ReceiptIcon,\r\n  Description as DocumentIcon,\r\n  Analytics as AnalyticsIcon,\r\n  People as PeopleIcon,\r\n  ShoppingCart as SalesIcon,\r\n  LocalShipping as WarehouseIcon,\r\n  Build as ProductionIcon,\r\n  AccountBalance as FinanceIcon,\r\n  Assessment as QualityIcon,\r\n  Assignment as ProjectIcon,\r\n  Notifications as NotificationsIcon,\r\n  TrendingUp as TrendingUpIcon,\r\n  TrendingDown as TrendingDownIcon,\r\n  Warning as WarningIcon,\r\n  CheckCircle as SuccessIcon,\r\n  Error as ErrorIcon,\r\n  Schedule as ScheduleIcon,\r\n  Star as StarIcon,\r\n  Favorite as FavoriteIcon,\r\n  Visibility as VisibilityIcon,\r\n  VisibilityOff as VisibilityOffIcon,\r\n  LocalShipping as LocalShippingIcon,\r\n  Build as BuildIcon,\r\n  Assessment as AssessmentIcon\r\n} from '@mui/icons-material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useApi } from '../contexts/ApiContext';\r\nimport { DataCard, ProgressCard, AlertMessage, SectionHeader } from '../components/ui/ModernComponents';\r\n\r\n// Komponenten-Typen\r\ninterface DashboardComponent {\r\n  id: string;\r\n  type: 'metric' | 'progress' | 'chart' | 'list' | 'quick-action' | 'notification' | 'favorite';\r\n  title: string;\r\n  description: string;\r\n  icon: React.ReactElement;\r\n  color: string;\r\n  data?: any;\r\n  size: 'small' | 'medium' | 'large';\r\n  position: number;\r\n  visible: boolean;\r\n  favorite: boolean;\r\n  roleBased: boolean;\r\n  allowedRoles: string[];\r\n}\r\n\r\n// Benutzer-Rollen\r\ntype UserRole = 'admin' | 'manager' | 'employee' | 'finance' | 'sales' | 'warehouse' | 'production' | 'quality' | 'hr';\r\n\r\n// Verfügbare Komponenten\r\nconst availableComponents: DashboardComponent[] = [\r\n  // Metriken\r\n  {\r\n    id: 'revenue',\r\n    type: 'metric',\r\n    title: 'Umsatz (Monat)',\r\n    description: 'Aktueller Monatsumsatz',\r\n    icon: <FinanceIcon />,\r\n    color: '#1976d2',\r\n    data: { value: 2847500, unit: '€', change: 12.5, trend: 'up' },\r\n    size: 'medium',\r\n    position: 1,\r\n    visible: true,\r\n    favorite: true,\r\n    roleBased: true,\r\n    allowedRoles: ['admin', 'manager', 'finance']\r\n  },\r\n  {\r\n    id: 'orders',\r\n    type: 'metric',\r\n    title: 'Bestellungen',\r\n    description: 'Anzahl offener Bestellungen',\r\n    icon: <ReceiptIcon />,\r\n    color: '#2e7d32',\r\n    data: { value: 1247, unit: '', change: -2.3, trend: 'down' },\r\n    size: 'small',\r\n    position: 2,\r\n    visible: true,\r\n    favorite: false,\r\n    roleBased: true,\r\n    allowedRoles: ['admin', 'manager', 'sales']\r\n  },\r\n  {\r\n    id: 'inventory',\r\n    type: 'metric',\r\n    title: 'Lagerbestand',\r\n    description: 'Aktueller Lagerbestand',\r\n    icon: <InventoryIcon />,\r\n    color: '#ed6c02',\r\n    data: { value: 8942, unit: 'Stück', change: 5.7, trend: 'up' },\r\n    size: 'small',\r\n    position: 3,\r\n    visible: true,\r\n    favorite: false,\r\n    roleBased: true,\r\n    allowedRoles: ['admin', 'manager', 'warehouse']\r\n  },\r\n  {\r\n    id: 'customers',\r\n    type: 'metric',\r\n    title: 'Aktive Kunden',\r\n    description: 'Anzahl aktiver Kunden',\r\n    icon: <PeopleIcon />,\r\n    color: '#9c27b0',\r\n    data: { value: 342, unit: '', change: 8.1, trend: 'up' },\r\n    size: 'small',\r\n    position: 4,\r\n    visible: true,\r\n    favorite: false,\r\n    roleBased: true,\r\n    allowedRoles: ['admin', 'manager', 'sales']\r\n  },\r\n\r\n  // Fortschritts-Komponenten\r\n  {\r\n    id: 'production-progress',\r\n    type: 'progress',\r\n    title: 'Produktionsfortschritt',\r\n    description: 'Aktuelle Produktionsaufträge',\r\n    icon: <ProductionIcon />,\r\n    color: '#7b1fa2',\r\n    data: { progress: 75, current: 15, total: 20 },\r\n    size: 'medium',\r\n    position: 5,\r\n    visible: true,\r\n    favorite: true,\r\n    roleBased: true,\r\n    allowedRoles: ['admin', 'manager', 'production']\r\n  },\r\n  {\r\n    id: 'quality-checks',\r\n    type: 'progress',\r\n    title: 'Qualitätsprüfungen',\r\n    description: 'Offene Qualitätsprüfungen',\r\n    icon: <QualityIcon />,\r\n    color: '#388e3c',\r\n    data: { progress: 60, current: 12, total: 20 },\r\n    size: 'medium',\r\n    position: 6,\r\n    visible: true,\r\n    favorite: false,\r\n    roleBased: true,\r\n    allowedRoles: ['admin', 'manager', 'quality']\r\n  },\r\n\r\n  // Schnellaktionen\r\n  {\r\n    id: 'quick-actions',\r\n    type: 'quick-action',\r\n    title: 'Schnellaktionen',\r\n    description: 'Häufig verwendete Aktionen',\r\n    icon: <AddIcon />,\r\n    color: '#f57c00',\r\n    data: {\r\n      actions: [\r\n        { label: 'Neue Bestellung', route: '/sales/orders/new', icon: <ReceiptIcon /> },\r\n        { label: 'Lagerbewegung', route: '/warehouse/movements/new', icon: <LocalShippingIcon /> },\r\n        { label: 'Produktionsauftrag', route: '/production/orders/new', icon: <BuildIcon /> },\r\n        { label: 'Qualitätsprüfung', route: '/quality/inspections/new', icon: <AssessmentIcon /> }\r\n      ]\r\n    },\r\n    size: 'large',\r\n    position: 7,\r\n    visible: true,\r\n    favorite: true,\r\n    roleBased: false,\r\n    allowedRoles: []\r\n  },\r\n\r\n  // Benachrichtigungen\r\n  {\r\n    id: 'notifications',\r\n    type: 'notification',\r\n    title: 'Wichtige Benachrichtigungen',\r\n    description: 'Systembenachrichtigungen',\r\n    icon: <NotificationsIcon />,\r\n    color: '#d32f2f',\r\n    data: {\r\n      notifications: [\r\n        { id: 1, type: 'warning', message: 'Lagerbestand Artikel A-123 niedrig', time: '2 Min' },\r\n        { id: 2, type: 'info', message: 'Neue Bestellung #12345 eingegangen', time: '5 Min' },\r\n        { id: 3, type: 'success', message: 'Produktionsauftrag #789 abgeschlossen', time: '12 Min' }\r\n      ]\r\n    },\r\n    size: 'medium',\r\n    position: 8,\r\n    visible: true,\r\n    favorite: false,\r\n    roleBased: false,\r\n    allowedRoles: []\r\n  },\r\n\r\n  // Favoriten\r\n  {\r\n    id: 'favorites',\r\n    type: 'favorite',\r\n    title: 'Meine Favoriten',\r\n    description: 'Häufig verwendete Funktionen',\r\n    icon: <StarIcon />,\r\n    color: '#ff9800',\r\n    data: {\r\n      favorites: [\r\n        { label: 'Kundenverwaltung', route: '/crm/customers', icon: <PeopleIcon /> },\r\n        { label: 'Finanzberichte', route: '/finance/reports', icon: <AnalyticsIcon /> },\r\n        { label: 'Lagerbestand', route: '/warehouse/inventory', icon: <InventoryIcon /> },\r\n        { label: 'Dokumente', route: '/documents', icon: <DocumentIcon /> }\r\n      ]\r\n    },\r\n    size: 'large',\r\n    position: 9,\r\n    visible: true,\r\n    favorite: true,\r\n    roleBased: false,\r\n    allowedRoles: []\r\n  }\r\n];\r\n\r\nconst PersonalizedDashboard: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const { user, isAuthenticated } = useApi();\r\n  const [components, setComponents] = useState<DashboardComponent[]>([]);\r\n  const [settingsOpen, setSettingsOpen] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Benutzerrolle bestimmen (vereinfacht)\r\n  const getUserRole = (): UserRole => {\r\n    if (!user) return 'employee';\r\n    if (user.role === 'admin') return 'admin';\r\n    if (user.role === 'manager') return 'manager';\r\n    if (user.role === 'finance') return 'finance';\r\n    if (user.role === 'sales') return 'sales';\r\n    if (user.role === 'warehouse') return 'warehouse';\r\n    if (user.role === 'production') return 'production';\r\n    if (user.role === 'quality') return 'quality';\r\n    if (user.role === 'hr') return 'hr';\r\n    return 'employee';\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadUserDashboard();\r\n  }, [user]);\r\n\r\n  const loadUserDashboard = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Lade gespeicherte Dashboard-Konfiguration\r\n      const savedConfig = localStorage.getItem(`dashboard-config-${user?.id}`);\r\n      let userComponents: DashboardComponent[];\r\n\r\n      if (savedConfig) {\r\n        userComponents = JSON.parse(savedConfig);\r\n      } else {\r\n        // Erstelle Standard-Konfiguration basierend auf Rolle\r\n        const userRole = getUserRole();\r\n        userComponents = availableComponents.filter(comp => \r\n          !comp.roleBased || comp.allowedRoles.includes(userRole)\r\n        ).map((comp, index) => ({\r\n          ...comp,\r\n          position: index + 1,\r\n          visible: true\r\n        }));\r\n      }\r\n\r\n      setComponents(userComponents);\r\n    } catch (error) {\r\n      console.error('Fehler beim Laden der Dashboard-Konfiguration:', error);\r\n      setComponents(availableComponents.slice(0, 6)); // Fallback\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const saveDashboardConfig = (newComponents: DashboardComponent[]) => {\r\n    try {\r\n      localStorage.setItem(`dashboard-config-${user?.id}`, JSON.stringify(newComponents));\r\n      setComponents(newComponents);\r\n    } catch (error) {\r\n      console.error('Fehler beim Speichern der Dashboard-Konfiguration:', error);\r\n    }\r\n  };\r\n\r\n  const toggleComponentVisibility = (componentId: string) => {\r\n    const updatedComponents = components.map(comp =>\r\n      comp.id === componentId ? { ...comp, visible: !comp.visible } : comp\r\n    );\r\n    saveDashboardConfig(updatedComponents);\r\n  };\r\n\r\n  const toggleFavorite = (componentId: string) => {\r\n    const updatedComponents = components.map(comp =>\r\n      comp.id === componentId ? { ...comp, favorite: !comp.favorite } : comp\r\n    );\r\n    saveDashboardConfig(updatedComponents);\r\n  };\r\n\r\n  const addComponent = (component: DashboardComponent) => {\r\n    const newComponent = {\r\n      ...component,\r\n      position: components.length + 1,\r\n      visible: true,\r\n      favorite: false\r\n    };\r\n    const updatedComponents = [...components, newComponent];\r\n    saveDashboardConfig(updatedComponents);\r\n  };\r\n\r\n  const removeComponent = (componentId: string) => {\r\n    const updatedComponents = components.filter(comp => comp.id !== componentId);\r\n    saveDashboardConfig(updatedComponents);\r\n  };\r\n\r\n  const renderComponent = (component: DashboardComponent) => {\r\n    if (!component.visible) return null;\r\n\r\n    switch (component.type) {\r\n      case 'metric':\r\n        return (\r\n          <DataCard\r\n            key={component.id}\r\n            title={component.title}\r\n            value={component.data.value}\r\n            subtitle={component.description}\r\n            icon={component.icon}\r\n            color={component.color}\r\n            trend={component.data.trend ? {\r\n              value: component.data.change,\r\n              direction: component.data.trend\r\n            } : undefined}\r\n            onClick={() => navigate(`/${component.id.split('-')[0]}`)}\r\n          />\r\n        );\r\n\r\n      case 'progress':\r\n        return (\r\n          <ProgressCard\r\n            key={component.id}\r\n            title={component.title}\r\n            progress={component.data.progress}\r\n            current={component.data.current}\r\n            total={component.data.total}\r\n            color={component.color}\r\n            subtitle={component.description}\r\n          />\r\n        );\r\n\r\n      case 'quick-action':\r\n        return (\r\n          <Card key={component.id} className=\"h-full\">\r\n            <CardContent>\r\n              <Box className=\"flex items-center justify-between mb-4\">\r\n                <Box className=\"flex items-center\">\r\n                  <Avatar sx={{ bgcolor: component.color, mr: 2 }}>\r\n                    {component.icon}\r\n                  </Avatar>\r\n                  <Box>\r\n                    <Typography variant=\"h6\" className=\"font-semibold\">\r\n                      {component.title}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" className=\"text-gray-600\">\r\n                      {component.description}\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n                <Box className=\"flex items-center space-x-1\">\r\n                  <Tooltip title=\"Favorit\">\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={() => toggleFavorite(component.id)}\r\n                      color={component.favorite ? 'primary' : 'default'}\r\n                    >\r\n                      <FavoriteIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                  <Tooltip title=\"Ausblenden\">\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={() => toggleComponentVisibility(component.id)}\r\n                    >\r\n                      <VisibilityOffIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Box>\r\n              </Box>\r\n              <Box className=\"grid grid-cols-2 gap-2\">\r\n                {component.data.actions.map((action: any, index: number) => (\r\n                  <Button\r\n                    key={index}\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    startIcon={action.icon}\r\n                    onClick={() => navigate(action.route)}\r\n                    className=\"h-12\"\r\n                  >\r\n                    {action.label}\r\n                  </Button>\r\n                ))}\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        );\r\n\r\n      case 'notification':\r\n        return (\r\n          <Card key={component.id} className=\"h-full\">\r\n            <CardContent>\r\n              <Box className=\"flex items-center justify-between mb-4\">\r\n                <Box className=\"flex items-center\">\r\n                  <Avatar sx={{ bgcolor: component.color, mr: 2 }}>\r\n                    {component.icon}\r\n                  </Avatar>\r\n                  <Box>\r\n                    <Typography variant=\"h6\" className=\"font-semibold\">\r\n                      {component.title}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" className=\"text-gray-600\">\r\n                      {component.description}\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n                <Box className=\"flex items-center space-x-1\">\r\n                  <Tooltip title=\"Favorit\">\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={() => toggleFavorite(component.id)}\r\n                      color={component.favorite ? 'primary' : 'default'}\r\n                    >\r\n                      <FavoriteIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                  <Tooltip title=\"Ausblenden\">\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={() => toggleComponentVisibility(component.id)}\r\n                    >\r\n                      <VisibilityOffIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Box>\r\n              </Box>\r\n              <Box className=\"space-y-2\">\r\n                {component.data.notifications.map((notification: any) => (\r\n                  <Alert\r\n                    key={notification.id}\r\n                    severity={notification.type}\r\n                    className=\"text-sm\"\r\n                    action={\r\n                      <Typography variant=\"caption\" className=\"text-gray-500\">\r\n                        {notification.time}\r\n                      </Typography>\r\n                    }\r\n                  >\r\n                    {notification.message}\r\n                  </Alert>\r\n                ))}\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        );\r\n\r\n      case 'favorite':\r\n        return (\r\n          <Card key={component.id} className=\"h-full\">\r\n            <CardContent>\r\n              <Box className=\"flex items-center justify-between mb-4\">\r\n                <Box className=\"flex items-center\">\r\n                  <Avatar sx={{ bgcolor: component.color, mr: 2 }}>\r\n                    {component.icon}\r\n                  </Avatar>\r\n                  <Box>\r\n                    <Typography variant=\"h6\" className=\"font-semibold\">\r\n                      {component.title}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" className=\"text-gray-600\">\r\n                      {component.description}\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n                <Box className=\"flex items-center space-x-1\">\r\n                  <Tooltip title=\"Favorit\">\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={() => toggleFavorite(component.id)}\r\n                      color={component.favorite ? 'primary' : 'default'}\r\n                    >\r\n                      <FavoriteIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                  <Tooltip title=\"Ausblenden\">\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={() => toggleComponentVisibility(component.id)}\r\n                    >\r\n                      <VisibilityOffIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Box>\r\n              </Box>\r\n              <Box className=\"grid grid-cols-2 gap-2\">\r\n                {component.data.favorites.map((favorite: any, index: number) => (\r\n                  <Button\r\n                    key={index}\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    startIcon={favorite.icon}\r\n                    onClick={() => navigate(favorite.route)}\r\n                    className=\"h-12\"\r\n                  >\r\n                    {favorite.label}\r\n                  </Button>\r\n                ))}\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        );\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const getGridSize = (size: string) => {\r\n    switch (size) {\r\n      case 'small': return 'md:w-1/4';\r\n      case 'medium': return 'md:w-1/2';\r\n      case 'large': return 'md:w-full';\r\n      default: return 'md:w-1/2';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box className=\"flex items-center justify-center h-64\">\r\n        <LinearProgress className=\"w-32\" />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box className=\"p-6 bg-gray-50 min-h-screen\">\r\n      {/* Header */}\r\n      <SectionHeader\r\n        title={`Willkommen zurück, ${user?.name || 'Benutzer'}!`}\r\n        subtitle=\"Ihr personalisiertes VALEO NeuroERP Dashboard\"\r\n        actions={\r\n          <Box className=\"flex items-center space-x-2\">\r\n            <Chip\r\n              icon={<BusinessIcon />}\r\n              label={getUserRole().toUpperCase()}\r\n              color=\"primary\"\r\n              variant=\"outlined\"\r\n            />\r\n            <Button\r\n              variant=\"outlined\"\r\n              startIcon={<SettingsIcon />}\r\n              onClick={() => setSettingsOpen(true)}\r\n            >\r\n              Dashboard anpassen\r\n            </Button>\r\n          </Box>\r\n        }\r\n      />\r\n\r\n      {/* Dashboard Grid */}\r\n      <Box className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n        {components\r\n          .filter(comp => comp.visible)\r\n          .sort((a, b) => a.position - b.position)\r\n          .map(component => (\r\n            <Box key={component.id} className={`w-full ${getGridSize(component.size)}`}>\r\n              {renderComponent(component)}\r\n            </Box>\r\n          ))}\r\n      </Box>\r\n\r\n      {/* Einstellungen Dialog */}\r\n      <Dialog\r\n        open={settingsOpen}\r\n        onClose={() => setSettingsOpen(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>\r\n          Dashboard anpassen\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box className=\"space-y-4\">\r\n            <Typography variant=\"h6\" className=\"font-semibold\">\r\n              Verfügbare Komponenten\r\n            </Typography>\r\n            \r\n            <Box className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              {availableComponents.map(component => {\r\n                const isVisible = components.some(c => c.id === component.id && c.visible);\r\n                const isAdded = components.some(c => c.id === component.id);\r\n                \r\n                return (\r\n                  <Card key={component.id} variant=\"outlined\">\r\n                    <CardContent>\r\n                      <Box className=\"flex items-center justify-between\">\r\n                        <Box className=\"flex items-center\">\r\n                          <Avatar sx={{ bgcolor: component.color, mr: 2, width: 32, height: 32 }}>\r\n                            {component.icon}\r\n                          </Avatar>\r\n                          <Box>\r\n                            <Typography variant=\"subtitle2\" className=\"font-semibold\">\r\n                              {component.title}\r\n                            </Typography>\r\n                            <Typography variant=\"caption\" className=\"text-gray-600\">\r\n                              {component.description}\r\n                            </Typography>\r\n                          </Box>\r\n                        </Box>\r\n                        <Box className=\"flex items-center space-x-1\">\r\n                          {component.roleBased && (\r\n                            <Chip\r\n                              label=\"Rollenbasiert\"\r\n                              size=\"small\"\r\n                              variant=\"outlined\"\r\n                              color=\"primary\"\r\n                            />\r\n                          )}\r\n                          {isAdded ? (\r\n                            <Button\r\n                              size=\"small\"\r\n                              variant=\"outlined\"\r\n                              color=\"error\"\r\n                              startIcon={<RemoveIcon />}\r\n                              onClick={() => removeComponent(component.id)}\r\n                            >\r\n                              Entfernen\r\n                            </Button>\r\n                          ) : (\r\n                            <Button\r\n                              size=\"small\"\r\n                              variant=\"contained\"\r\n                              startIcon={<AddIcon />}\r\n                              onClick={() => addComponent(component)}\r\n                            >\r\n                              Hinzufügen\r\n                            </Button>\r\n                          )}\r\n                        </Box>\r\n                      </Box>\r\n                    </CardContent>\r\n                  </Card>\r\n                );\r\n              })}\r\n            </Box>\r\n\r\n            <Divider />\r\n\r\n            <Typography variant=\"h6\" className=\"font-semibold\">\r\n              Aktuelle Komponenten\r\n            </Typography>\r\n            \r\n            <Box className=\"space-y-2\">\r\n              {components.map(component => (\r\n                <Box key={component.id} className=\"flex items-center justify-between p-3 border rounded\">\r\n                  <Box className=\"flex items-center\">\r\n                    <DragIcon className=\"mr-2 text-gray-400\" />\r\n                    <Avatar sx={{ bgcolor: component.color, mr: 2, width: 24, height: 24 }}>\r\n                      {component.icon}\r\n                    </Avatar>\r\n                    <Box>\r\n                      <Typography variant=\"body2\" className=\"font-medium\">\r\n                        {component.title}\r\n                      </Typography>\r\n                      <Typography variant=\"caption\" className=\"text-gray-600\">\r\n                        {component.description}\r\n                      </Typography>\r\n                    </Box>\r\n                  </Box>\r\n                  <Box className=\"flex items-center space-x-2\">\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Switch\r\n                          checked={component.visible}\r\n                          onChange={() => toggleComponentVisibility(component.id)}\r\n                          size=\"small\"\r\n                        />\r\n                      }\r\n                      label=\"Sichtbar\"\r\n                    />\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Switch\r\n                          checked={component.favorite}\r\n                          onChange={() => toggleFavorite(component.id)}\r\n                          size=\"small\"\r\n                        />\r\n                      }\r\n                      label=\"Favorit\"\r\n                    />\r\n                  </Box>\r\n                </Box>\r\n              ))}\r\n            </Box>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setSettingsOpen(false)}>\r\n            Schließen\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={() => {\r\n              // Reset auf Standard-Konfiguration\r\n              const userRole = getUserRole();\r\n              const defaultComponents = availableComponents\r\n                .filter(comp => !comp.roleBased || comp.allowedRoles.includes(userRole))\r\n                .map((comp, index) => ({\r\n                  ...comp,\r\n                  position: index + 1,\r\n                  visible: true,\r\n                  favorite: false\r\n                }));\r\n              saveDashboardConfig(defaultComponents);\r\n              setSettingsOpen(false);\r\n            }}\r\n          >\r\n            Zurücksetzen\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PersonalizedDashboard; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\ProductionManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\ProduktFormular.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\ProjectManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\ProjektFormular.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\PurchasingManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\QualityManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\ReportingAnalytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\SalesManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\SapFioriDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\SettingsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\StreckengeschaeftPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\TestPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\TransactionsPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTransactions'. Either include it or remove the dependency array.","line":79,"column":6,"nodeType":"ArrayExpression","endLine":79,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadTransactions]","fix":{"range":[1748,1750],"text":"[loadTransactions]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Card, \r\n  Typography, \r\n  Button,\r\n  Chip,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n  Tooltip,\r\n  Alert,\r\n  CircularProgress,\r\n  TablePagination,\r\n  InputAdornment\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Search as SearchIcon,\r\n  Refresh as RefreshIcon,\r\n  TrendingUp as TrendingUpIcon,\r\n  TrendingDown as TrendingDownIcon,\r\n  AccountBalance as AccountBalanceIcon\r\n} from '@mui/icons-material';\r\nimport { useApi } from '../contexts/ApiContext';\r\nimport {\r\n  ObjectPageHeader,\r\n  ActionBar,\r\n  MessageStrip\r\n} from '../components/ui/NeuroFlowComponents';\r\n\r\ninterface TransactionFormData {\r\n  type: string;\r\n  amount: number;\r\n  description: string;\r\n  date: string;\r\n}\r\n\r\nconst TransactionsPage: React.FC = () => {\r\n  const {\r\n    transactions,\r\n    getTransactions,\r\n    createTransaction,\r\n    isLoading,\r\n    error\r\n  } = useApi();\r\n\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [editingTransaction, setEditingTransaction] = useState<any>(null);\r\n  const [formData, setFormData] = useState<TransactionFormData>({\r\n    type: 'income',\r\n    amount: 0,\r\n    description: '',\r\n    date: new Date().toISOString().split('T')[0]\r\n  });\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [filterType, setFilterType] = useState('all');\r\n\r\n  useEffect(() => {\r\n    loadTransactions();\r\n  }, []);\r\n\r\n  const loadTransactions = async () => {\r\n    await getTransactions();\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      if (editingTransaction) {\r\n        // Mock-Implementation für das Update\r\n        console.log('Updating transaction:', editingTransaction.id);\r\n        // In einer echten Implementierung würde hier die API aufgerufen werden\r\n        // und dann der lokale State aktualisiert werden\r\n      } else {\r\n        await createTransaction({\r\n          type: formData.type as 'income' | 'expense',\r\n          amount: formData.amount,\r\n          description: formData.description,\r\n          date: formData.date,\r\n          user_id: localStorage.getItem('userId') || 'current-user-id',\r\n          status: 'pending'\r\n        } as Omit<{ id: string; amount: number; description: string; date: string; type?: 'income' | 'expense'; user_id?: string; status?: 'pending' | 'completed' | 'cancelled' }, 'id'>);\r\n      }\r\n      setOpenDialog(false);\r\n      resetForm();\r\n      loadTransactions();\r\n    } catch (err) {\r\n      console.error('Error saving transaction:', err);\r\n    }\r\n  };\r\n\r\n  const handleDeleteTransaction = (id: string) => {\r\n    // Mock-Implementation für das Löschen\r\n    console.log('Deleting transaction:', id);\r\n    // In einer echten Implementierung würde hier die API aufgerufen werden\r\n    // und dann der lokale State aktualisiert werden\r\n  };\r\n\r\n  const handleEdit = (transaction: any) => {\r\n    setEditingTransaction(transaction);\r\n    setFormData({\r\n      type: transaction.type,\r\n      amount: transaction.amount,\r\n      description: transaction.description || '',\r\n      date: new Date(transaction.date).toISOString().split('T')[0]\r\n    });\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      type: 'income',\r\n      amount: 0,\r\n      description: '',\r\n      date: new Date().toISOString().split('T')[0]\r\n    });\r\n    setEditingTransaction(null);\r\n  };\r\n\r\n  const filteredTransactions = transactions.filter(transaction => {\r\n    const matchesSearch = transaction.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n          transaction.amount.toString().includes(searchTerm);\r\n    const matchesType = filterType === 'all' || (transaction.type && transaction.type.includes(filterType));\r\n    return matchesSearch && matchesType;\r\n  });\r\n\r\n  const paginatedTransactions = filteredTransactions.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'completed': return 'success';\r\n      case 'pending': return 'warning';\r\n      case 'failed': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  const getTypeIcon = (type: string) => {\r\n    return type === 'income' ? <TrendingUpIcon color=\"success\" /> : <TrendingDownIcon color=\"error\" />;\r\n  };\r\n\r\n  const totalAmount = filteredTransactions.reduce((sum, t) => sum + t.amount, 0);\r\n\r\n  return (\r\n    <Box sx={{ minHeight: '100vh', bgcolor: '#F5F6F7' }}>\r\n      {/* Header */}\r\n      <ObjectPageHeader\r\n        title=\"Transaktionen\"\r\n        subtitle=\"Verwaltung aller Finanztransaktionen\"\r\n        status={`${filteredTransactions.length} Transaktionen`}\r\n        actions={\r\n          <Box sx={{ display: 'flex', gap: 1 }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<AddIcon />}\r\n              onClick={() => setOpenDialog(true)}\r\n            >\r\n              Neue Transaktion\r\n            </Button>\r\n            <Button\r\n              variant=\"outlined\"\r\n              startIcon={<RefreshIcon />}\r\n              onClick={loadTransactions}\r\n              disabled={isLoading}\r\n            >\r\n              Aktualisieren\r\n            </Button>\r\n          </Box>\r\n        }\r\n      />\r\n\r\n      {/* Error Display */}\r\n      {error && (\r\n        <Box sx={{ px: 3 }}>\r\n          <MessageStrip type=\"error\" title=\"Fehler\">\r\n            {error}\r\n          </MessageStrip>\r\n        </Box>\r\n      )}\r\n\r\n      {/* Action Bar */}\r\n      <ActionBar\r\n        title=\"Transaktionsverwaltung\"\r\n        actions={[\r\n          {\r\n            label: 'Filter zurücksetzen',\r\n            onClick: () => {\r\n              setSearchTerm('');\r\n              setFilterType('all');\r\n            },\r\n            variant: 'outlined'\r\n          }\r\n        ]}\r\n      />\r\n\r\n      <Box sx={{ p: 3 }}>\r\n        {/* Summary Cards */}\r\n        <Box className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\r\n          <Card sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n              <AccountBalanceIcon sx={{ fontSize: 40, color: '#0A6ED1' }} />\r\n              <Box>\r\n                <Typography variant=\"h4\" sx={{ color: '#0A6ED1', fontWeight: 600 }}>\r\n                  {filteredTransactions.length}\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                  Gesamte Transaktionen\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n\r\n          <Card sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n              <TrendingUpIcon sx={{ fontSize: 40, color: '#107C41' }} />\r\n              <Box>\r\n                <Typography variant=\"h4\" sx={{ color: '#107C41', fontWeight: 600 }}>\r\n                  {filteredTransactions.filter(t => t.type === 'income').length}\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                  Einnahmen\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n\r\n          <Card sx={{ p: 3 }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n              <TrendingDownIcon sx={{ fontSize: 40, color: '#BB0000' }} />\r\n              <Box>\r\n                <Typography variant=\"h4\" sx={{ color: '#BB0000', fontWeight: 600 }}>\r\n                  {filteredTransactions.filter(t => t.type === 'expense').length}\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{ color: '#515559' }}>\r\n                  Ausgaben\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n        </Box>\r\n\r\n        {/* Filters */}\r\n        <Card sx={{ p: 3, mb: 3 }}>\r\n          <Box className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n            <TextField\r\n              fullWidth\r\n              label=\"Suchen\"\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <SearchIcon />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n            <FormControl fullWidth>\r\n              <InputLabel>Typ</InputLabel>\r\n              <Select\r\n                value={filterType}\r\n                onChange={(e) => setFilterType(e.target.value)}\r\n                label=\"Typ\"\r\n              >\r\n                <MenuItem value=\"all\">Alle</MenuItem>\r\n                <MenuItem value=\"income\">Einnahmen</MenuItem>\r\n                <MenuItem value=\"expense\">Ausgaben</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n              <Typography variant=\"h6\" sx={{ color: '#0A6ED1' }}>\r\n                Gesamtbetrag: {totalAmount.toFixed(2)}€\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n        </Card>\r\n\r\n        {/* Data Table */}\r\n        <Card>\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow sx={{ bgcolor: '#F5F6F7' }}>\r\n                  <TableCell>Typ</TableCell>\r\n                  <TableCell>Betrag</TableCell>\r\n                  <TableCell>Beschreibung</TableCell>\r\n                  <TableCell>Datum</TableCell>\r\n                  <TableCell>Status</TableCell>\r\n                  <TableCell align=\"right\">Aktionen</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {paginatedTransactions.map((transaction) => (\r\n                  <TableRow key={transaction.id} hover>\r\n                    <TableCell>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                        {getTypeIcon(transaction.type || 'unknown')}\r\n                        <Typography variant=\"body2\" sx={{ textTransform: 'capitalize' }}>\r\n                          {transaction.type || 'unknown'}\r\n                        </Typography>\r\n                      </Box>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography\r\n                        variant=\"body2\"\r\n                        sx={{\r\n                          color: (transaction.type || 'unknown') === 'income' ? '#107C41' : '#BB0000',\r\n                          fontWeight: 600\r\n                        }}\r\n                      >\r\n                        {transaction.amount.toFixed(2)}€\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\" sx={{ maxWidth: 200 }}>\r\n                        {transaction.description || '-'}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Typography variant=\"body2\">\r\n                        {new Date(transaction.date).toLocaleDateString('de-DE')}\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Chip\r\n                        label={transaction.status || 'pending'}\r\n                        size=\"small\"\r\n                        color={getStatusColor(transaction.status || 'pending') as any}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                      <Box sx={{ display: 'flex', gap: 1 }}>\r\n                        <Tooltip title=\"Bearbeiten\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            onClick={() => handleEdit(transaction)}\r\n                          >\r\n                            <EditIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Löschen\">\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            color=\"error\"\r\n                            onClick={() => handleDeleteTransaction(transaction.id)}\r\n                          >\r\n                            <DeleteIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </Box>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n                {paginatedTransactions.length === 0 && (\r\n                  <TableRow>\r\n                    <TableCell colSpan={6} align=\"center\" sx={{ py: 4 }}>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Keine Transaktionen gefunden\r\n                      </Typography>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          \r\n          <TablePagination\r\n            component=\"div\"\r\n            count={filteredTransactions.length}\r\n            page={page}\r\n            onPageChange={(_, newPage) => setPage(newPage)}\r\n            rowsPerPage={rowsPerPage}\r\n            onRowsPerPageChange={(e) => {\r\n              setRowsPerPage(parseInt(e.target.value, 10));\r\n              setPage(0);\r\n            }}\r\n            labelRowsPerPage=\"Zeilen pro Seite:\"\r\n            labelDisplayedRows={({ from, to, count }) => `${from}-${to} von ${count}`}\r\n          />\r\n        </Card>\r\n      </Box>\r\n\r\n      {/* Create/Edit Dialog */}\r\n      <Dialog open={openDialog} onClose={() => setOpenDialog(false)} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>\r\n          {editingTransaction ? 'Transaktion bearbeiten' : 'Neue Transaktion'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Box sx={{ pt: 2 }}>\r\n            <FormControl fullWidth margin=\"normal\">\r\n              <InputLabel>Typ</InputLabel>\r\n              <Select\r\n                value={formData.type}\r\n                onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n                label=\"Typ\"\r\n              >\r\n                <MenuItem value=\"income\">Einnahme</MenuItem>\r\n                <MenuItem value=\"expense\">Ausgabe</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <TextField\r\n              fullWidth\r\n              label=\"Betrag\"\r\n              type=\"number\"\r\n              value={formData.amount}\r\n              onChange={(e) => setFormData({ ...formData, amount: parseFloat(e.target.value) || 0 })}\r\n              margin=\"normal\"\r\n              InputProps={{\r\n                endAdornment: <InputAdornment position=\"end\">€</InputAdornment>,\r\n              }}\r\n            />\r\n\r\n            <TextField\r\n              fullWidth\r\n              label=\"Beschreibung\"\r\n              value={formData.description}\r\n              onChange={(e) => setFormData({ ...formData, description: e.target.value })}\r\n              margin=\"normal\"\r\n              multiline\r\n              rows={3}\r\n            />\r\n\r\n            <TextField\r\n              fullWidth\r\n              label=\"Datum\"\r\n              type=\"date\"\r\n              value={formData.date}\r\n              onChange={(e) => setFormData({ ...formData, date: e.target.value })}\r\n              margin=\"normal\"\r\n              InputLabelProps={{ shrink: true }}\r\n            />\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpenDialog(false)}>Abbrechen</Button>\r\n          <Button onClick={handleSubmit} variant=\"contained\">\r\n            {editingTransaction ? 'Aktualisieren' : 'Erstellen'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Loading Overlay */}\r\n      {isLoading && (\r\n        <Box sx={{ \r\n          position: 'fixed', \r\n          top: 0, \r\n          left: 0, \r\n          right: 0, \r\n          bottom: 0, \r\n          bgcolor: 'rgba(0,0,0,0.3)', \r\n          display: 'flex', \r\n          alignItems: 'center', \r\n          justifyContent: 'center',\r\n          zIndex: 9999\r\n        }}>\r\n          <CircularProgress />\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default TransactionsPage; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\TrustAwareDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\UserManagement.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadUsers'. Either include it or remove the dependency array.","line":143,"column":6,"nodeType":"ArrayExpression","endLine":143,"endColumn":56,"suggestions":[{"desc":"Update the dependencies array to be: [page, roleFilter, statusFilter, departmentFilter, loadUsers]","fix":{"range":[3621,3671],"text":"[page, roleFilter, statusFilter, departmentFilter, loadUsers]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Grid,\r\n  Chip,\r\n  IconButton,\r\n  Fab,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  TextField,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Tabs,\r\n  Tab,\r\n  LinearProgress,\r\n  Avatar,\r\n  Alert,\r\n  Badge,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Switch,\r\n  FormControlLabel,\r\n  Rating,\r\n  Divider,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemAvatar,\r\n  ListItemSecondaryAction,\r\n  Tooltip,\r\n  Menu,\r\n  MenuItem as MenuItemComponent\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Visibility as ViewIcon,\r\n  People as PeopleIcon,\r\n  Business as BusinessIcon,\r\n  Phone as PhoneIcon,\r\n  Email as EmailIcon,\r\n  LocationOn as LocationIcon,\r\n  Star as StarIcon,\r\n  TrendingUp as TrendingUpIcon,\r\n  Assignment as AssignmentIcon,\r\n  ContactPhone as ContactPhoneIcon,\r\n  PersonAdd as PersonAddIcon,\r\n  Assessment as AssessmentIcon,\r\n  Timeline as TimelineIcon,\r\n  Chat as ChatIcon,\r\n  Feedback as FeedbackIcon,\r\n  Group as GroupIcon,\r\n  AttachMoney as MoneyIcon,\r\n  Schedule as ScheduleIcon,\r\n  CheckCircle as CheckCircleIcon,\r\n  Warning as WarningIcon,\r\n  Error as ErrorIcon,\r\n  Description as DescriptionIcon,\r\n  MoreVert as MoreVertIcon,\r\n  AdminPanelSettings as AdminIcon,\r\n  SupervisorAccount as ManagerIcon,\r\n  Person as UserIcon,\r\n  Visibility as ViewerIcon,\r\n  Security as SecurityIcon,\r\n  Settings as SettingsIcon\r\n} from '@mui/icons-material';\r\nimport { userManagementService, type User, type UserCreateRequest, type UserUpdateRequest, type UserStatistics } from '../services/userManagementService';\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`user-tabpanel-${index}`}\r\n      aria-labelledby={`user-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst UserManagement: React.FC = () => {\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [dialogType, setDialogType] = useState<'create' | 'edit' | 'view'>('create');\r\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\r\n  const [users, setUsers] = useState<User[]>([]);\r\n  const [statistics, setStatistics] = useState<UserStatistics | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [page, setPage] = useState(1);\r\n  const [limit] = useState(20);\r\n  const [total, setTotal] = useState(0);\r\n\r\n  // Form states\r\n  const [formData, setFormData] = useState<UserCreateRequest>({\r\n    username: '',\r\n    email: '',\r\n    full_name: '',\r\n    password: '',\r\n    role: 'user',\r\n    department: '',\r\n    position: '',\r\n    phone: '',\r\n    notes: ''\r\n  });\r\n\r\n  // Filter states\r\n  const [roleFilter, setRoleFilter] = useState<string>('');\r\n  const [statusFilter, setStatusFilter] = useState<string>('');\r\n  const [departmentFilter, setDepartmentFilter] = useState<string>('');\r\n\r\n  // Menu states\r\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n  const [selectedUserId, setSelectedUserId] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    loadUsers();\r\n    loadStatistics();\r\n  }, [page, roleFilter, statusFilter, departmentFilter]);\r\n\r\n  const loadUsers = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await userManagementService.getUsers({\r\n        page,\r\n        limit,\r\n        role_filter: roleFilter || undefined,\r\n        status_filter: statusFilter || undefined,\r\n        department_filter: departmentFilter || undefined\r\n      });\r\n      \r\n      if (response.success && response.data) {\r\n        setUsers(response.data.users);\r\n        setTotal(response.data.total);\r\n      } else {\r\n        setError('Fehler beim Laden der Benutzer');\r\n      }\r\n    } catch (err) {\r\n      setError('Fehler beim Laden der Benutzer');\r\n      console.error('Error loading users:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadStatistics = async () => {\r\n    try {\r\n      const response = await userManagementService.getUserStatistics();\r\n      if (response.success && response.data) {\r\n        setStatistics(response.data);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error loading statistics:', err);\r\n    }\r\n  };\r\n\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  const handleOpenDialog = (type: 'create' | 'edit' | 'view', user?: User) => {\r\n    setDialogType(type);\r\n    setSelectedUser(user || null);\r\n    \r\n    if (type === 'create') {\r\n      setFormData({\r\n        username: '',\r\n        email: '',\r\n        full_name: '',\r\n        password: '',\r\n        role: 'user',\r\n        department: '',\r\n        position: '',\r\n        phone: '',\r\n        notes: ''\r\n      });\r\n    } else if (user) {\r\n      setFormData({\r\n        username: user.username,\r\n        email: user.email,\r\n        full_name: user.full_name,\r\n        password: '',\r\n        role: user.role,\r\n        department: user.department || '',\r\n        position: user.position || '',\r\n        phone: user.phone || '',\r\n        notes: ''\r\n      });\r\n    }\r\n    \r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n    setSelectedUser(null);\r\n    setFormData({\r\n      username: '',\r\n      email: '',\r\n      full_name: '',\r\n      password: '',\r\n      role: 'user',\r\n      department: '',\r\n      position: '',\r\n      phone: '',\r\n      notes: ''\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      if (dialogType === 'create') {\r\n        const response = await userManagementService.createUser(formData);\r\n        if (response.success) {\r\n          handleCloseDialog();\r\n          loadUsers();\r\n        } else {\r\n          setError('Fehler beim Erstellen des Benutzers');\r\n        }\r\n      } else if (dialogType === 'edit' && selectedUser) {\r\n        const updateData: UserUpdateRequest = {\r\n          full_name: formData.full_name,\r\n          email: formData.email,\r\n          role: formData.role,\r\n          department: formData.department,\r\n          position: formData.position,\r\n          phone: formData.phone,\r\n          notes: formData.notes\r\n        };\r\n        \r\n        const response = await userManagementService.updateUser(selectedUser.id, updateData);\r\n        if (response.success) {\r\n          handleCloseDialog();\r\n          loadUsers();\r\n        } else {\r\n          setError('Fehler beim Aktualisieren des Benutzers');\r\n        }\r\n      }\r\n    } catch (err) {\r\n      setError('Fehler beim Speichern des Benutzers');\r\n      console.error('Error saving user:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDeleteUser = async (userId: string) => {\r\n    if (!window.confirm('Sind Sie sicher, dass Sie diesen Benutzer löschen möchten?')) {\r\n      return;\r\n    }\r\n    \r\n    setLoading(true);\r\n    try {\r\n      const response = await userManagementService.deleteUser(userId);\r\n      if (response.success) {\r\n        loadUsers();\r\n      } else {\r\n        setError('Fehler beim Löschen des Benutzers');\r\n      }\r\n    } catch (err) {\r\n      setError('Fehler beim Löschen des Benutzers');\r\n      console.error('Error deleting user:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>, userId: string) => {\r\n    setAnchorEl(event.currentTarget);\r\n    setSelectedUserId(userId);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n    setSelectedUserId(null);\r\n  };\r\n\r\n  const getRoleIcon = (role: string) => {\r\n    switch (role) {\r\n      case 'admin': return <AdminIcon />;\r\n      case 'manager': return <ManagerIcon />;\r\n      case 'user': return <UserIcon />;\r\n      case 'viewer': return <ViewerIcon />;\r\n      default: return <UserIcon />;\r\n    }\r\n  };\r\n\r\n  const getRoleColor = (role: string) => {\r\n    return userManagementService.getRoleColor(role);\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    return userManagementService.getStatusColor(status);\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    return new Date(dateString).toLocaleDateString('de-DE');\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1, p: 3 }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Benutzer-Management\r\n      </Typography>\r\n\r\n      {/* KPI Cards */}\r\n      <Grid container spacing={3} sx={{ mb: 3 }}>\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                <PeopleIcon sx={{ fontSize: 40, color: 'primary.main', mr: 2 }} />\r\n                <Box>\r\n                  <Typography variant=\"h4\">{statistics?.total_users || 0}</Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    Gesamt Benutzer\r\n                  </Typography>\r\n                </Box>\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        \r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                <CheckCircleIcon sx={{ fontSize: 40, color: 'success.main', mr: 2 }} />\r\n                <Box>\r\n                  <Typography variant=\"h4\">{statistics?.active_users || 0}</Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    Aktive Benutzer\r\n                  </Typography>\r\n                </Box>\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        \r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                <AdminIcon sx={{ fontSize: 40, color: 'error.main', mr: 2 }} />\r\n                <Box>\r\n                  <Typography variant=\"h4\">{statistics?.role_distribution?.admin || 0}</Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    Administratoren\r\n                  </Typography>\r\n                </Box>\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        \r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card>\r\n            <CardContent>\r\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                <ManagerIcon sx={{ fontSize: 40, color: 'info.main', mr: 2 }} />\r\n                <Box>\r\n                  <Typography variant=\"h4\">{statistics?.role_distribution?.manager || 0}</Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    Manager\r\n                  </Typography>\r\n                </Box>\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Main Content */}\r\n      <Card>\r\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n          <Tabs value={tabValue} onChange={handleTabChange}>\r\n            <Tab label=\"Benutzer-Liste\" />\r\n            <Tab label=\"Statistiken\" />\r\n            <Tab label=\"Berechtigungen\" />\r\n          </Tabs>\r\n        </Box>\r\n\r\n        <TabPanel value={tabValue} index={0}>\r\n          {/* Filters */}\r\n          <Grid container spacing={2} sx={{ mb: 3 }}>\r\n            <Grid item xs={12} sm={4}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Rolle</InputLabel>\r\n                <Select\r\n                  value={roleFilter}\r\n                  onChange={(e) => setRoleFilter(e.target.value)}\r\n                  label=\"Rolle\"\r\n                >\r\n                  <MenuItem value=\"\">Alle Rollen</MenuItem>\r\n                  <MenuItem value=\"admin\">Administrator</MenuItem>\r\n                  <MenuItem value=\"manager\">Manager</MenuItem>\r\n                  <MenuItem value=\"user\">Benutzer</MenuItem>\r\n                  <MenuItem value=\"viewer\">Betrachter</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={4}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Status</InputLabel>\r\n                <Select\r\n                  value={statusFilter}\r\n                  onChange={(e) => setStatusFilter(e.target.value)}\r\n                  label=\"Status\"\r\n                >\r\n                  <MenuItem value=\"\">Alle Status</MenuItem>\r\n                  <MenuItem value=\"active\">Aktiv</MenuItem>\r\n                  <MenuItem value=\"inactive\">Inaktiv</MenuItem>\r\n                  <MenuItem value=\"suspended\">Gesperrt</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={4}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Abteilung\"\r\n                value={departmentFilter}\r\n                onChange={(e) => setDepartmentFilter(e.target.value)}\r\n                placeholder=\"Abteilung filtern...\"\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n\r\n          {/* Users Table */}\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Benutzer</TableCell>\r\n                  <TableCell>Rolle</TableCell>\r\n                  <TableCell>Status</TableCell>\r\n                  <TableCell>Abteilung</TableCell>\r\n                  <TableCell>Letzter Login</TableCell>\r\n                  <TableCell>Erstellt</TableCell>\r\n                  <TableCell align=\"right\">Aktionen</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {loading ? (\r\n                  <TableRow>\r\n                    <TableCell colSpan={7}>\r\n                      <LinearProgress />\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ) : users.length === 0 ? (\r\n                  <TableRow>\r\n                    <TableCell colSpan={7} align=\"center\">\r\n                      Keine Benutzer gefunden\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ) : (\r\n                  users.map((user) => (\r\n                    <TableRow key={user.id}>\r\n                      <TableCell>\r\n                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                          <Avatar sx={{ mr: 2 }}>\r\n                            {user.full_name.charAt(0).toUpperCase()}\r\n                          </Avatar>\r\n                          <Box>\r\n                            <Typography variant=\"subtitle2\">{user.full_name}</Typography>\r\n                            <Typography variant=\"body2\" color=\"text.secondary\">\r\n                              {user.email}\r\n                            </Typography>\r\n                          </Box>\r\n                        </Box>\r\n                      </TableCell>\r\n                      \r\n                      <TableCell>\r\n                        <Chip\r\n                          icon={getRoleIcon(user.role)}\r\n                          label={userManagementService.getRoleDisplayName(user.role)}\r\n                          sx={{\r\n                            backgroundColor: getRoleColor(user.role),\r\n                            color: 'white'\r\n                          }}\r\n                          size=\"small\"\r\n                        />\r\n                      </TableCell>\r\n                      \r\n                      <TableCell>\r\n                        <Chip\r\n                          label={userManagementService.getStatusDisplayName(user.status)}\r\n                          sx={{\r\n                            backgroundColor: getStatusColor(user.status),\r\n                            color: 'white'\r\n                          }}\r\n                          size=\"small\"\r\n                        />\r\n                      </TableCell>\r\n                      \r\n                      <TableCell>{user.department || '-'}</TableCell>\r\n                      <TableCell>{user.last_login ? formatDate(user.last_login) : '-'}</TableCell>\r\n                      <TableCell>{formatDate(user.created_at)}</TableCell>\r\n                      \r\n                      <TableCell align=\"right\">\r\n                        <IconButton onClick={() => handleOpenDialog('view', user)}>\r\n                          <ViewIcon />\r\n                        </IconButton>\r\n                        <IconButton onClick={() => handleOpenDialog('edit', user)}>\r\n                          <EditIcon />\r\n                        </IconButton>\r\n                        <IconButton onClick={(e) => handleMenuOpen(e, user.id)}>\r\n                          <MoreVertIcon />\r\n                        </IconButton>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </TabPanel>\r\n\r\n        <TabPanel value={tabValue} index={1}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Benutzer-Statistiken\r\n          </Typography>\r\n          \r\n          {statistics && (\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} md={6}>\r\n                <Card>\r\n                  <CardContent>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Rollen-Verteilung\r\n                    </Typography>\r\n                    <List>\r\n                      {Object.entries(statistics.role_distribution).map(([role, count]) => (\r\n                        <ListItem key={role}>\r\n                          <ListItemAvatar>\r\n                            <Avatar sx={{ backgroundColor: getRoleColor(role) }}>\r\n                              {getRoleIcon(role)}\r\n                            </Avatar>\r\n                          </ListItemAvatar>\r\n                          <ListItemText\r\n                            primary={userManagementService.getRoleDisplayName(role)}\r\n                            secondary={`${count} Benutzer`}\r\n                          />\r\n                        </ListItem>\r\n                      ))}\r\n                    </List>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              \r\n              <Grid item xs={12} md={6}>\r\n                <Card>\r\n                  <CardContent>\r\n                    <Typography variant=\"h6\" gutterBottom>\r\n                      Abteilungs-Verteilung\r\n                    </Typography>\r\n                    <List>\r\n                      {Object.entries(statistics.department_distribution).map(([dept, count]) => (\r\n                        <ListItem key={dept}>\r\n                          <ListItemAvatar>\r\n                            <Avatar>\r\n                              <BusinessIcon />\r\n                            </Avatar>\r\n                          </ListItemAvatar>\r\n                          <ListItemText\r\n                            primary={dept}\r\n                            secondary={`${count} Benutzer`}\r\n                          />\r\n                        </ListItem>\r\n                      ))}\r\n                    </List>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n        </TabPanel>\r\n\r\n        <TabPanel value={tabValue} index={2}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Berechtigungssystem\r\n          </Typography>\r\n          \r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} md={6}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Administrator\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    Vollzugriff auf alle Module und Funktionen\r\n                  </Typography>\r\n                  <List dense>\r\n                    <ListItem>\r\n                      <ListItemText primary=\"Benutzer-Management\" />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemText primary=\"CRM-Management\" />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemText primary=\"System-Einstellungen\" />\r\n                    </ListItem>\r\n                  </List>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} md={6}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Manager\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    Erweiterte Berechtigungen für Geschäftsprozesse\r\n                  </Typography>\r\n                  <List dense>\r\n                    <ListItem>\r\n                      <ListItemText primary=\"CRM-Management\" />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemText primary=\"Berichte und Analytics\" />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemText primary=\"Benutzer-Einblick\" />\r\n                    </ListItem>\r\n                  </List>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        </TabPanel>\r\n      </Card>\r\n\r\n      {/* FAB */}\r\n      <Fab\r\n        color=\"primary\"\r\n        aria-label=\"add\"\r\n        sx={{ position: 'fixed', bottom: 16, right: 16 }}\r\n        onClick={() => handleOpenDialog('create')}\r\n      >\r\n        <AddIcon />\r\n      </Fab>\r\n\r\n      {/* User Dialog */}\r\n      <Dialog open={openDialog} onClose={handleCloseDialog} maxWidth=\"md\" fullWidth>\r\n        <DialogTitle>\r\n          {dialogType === 'create' ? 'Neuen Benutzer erstellen' : \r\n           dialogType === 'edit' ? 'Benutzer bearbeiten' : 'Benutzer-Details'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Grid container spacing={2} sx={{ mt: 1 }}>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Benutzername\"\r\n                value={formData.username}\r\n                onChange={(e) => setFormData({ ...formData, username: e.target.value })}\r\n                disabled={dialogType === 'edit'}\r\n                required\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"E-Mail\"\r\n                type=\"email\"\r\n                value={formData.email}\r\n                onChange={(e) => setFormData({ ...formData, email: e.target.value })}\r\n                required\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Vollständiger Name\"\r\n                value={formData.full_name}\r\n                onChange={(e) => setFormData({ ...formData, full_name: e.target.value })}\r\n                required\r\n              />\r\n            </Grid>\r\n            \r\n            {dialogType === 'create' && (\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Passwort\"\r\n                  type=\"password\"\r\n                  value={formData.password}\r\n                  onChange={(e) => setFormData({ ...formData, password: e.target.value })}\r\n                  required\r\n                />\r\n              </Grid>\r\n            )}\r\n            \r\n            <Grid item xs={12} sm={6}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Rolle</InputLabel>\r\n                <Select\r\n                  value={formData.role}\r\n                  onChange={(e) => setFormData({ ...formData, role: e.target.value })}\r\n                  label=\"Rolle\"\r\n                >\r\n                  <MenuItem value=\"user\">Benutzer</MenuItem>\r\n                  <MenuItem value=\"manager\">Manager</MenuItem>\r\n                  <MenuItem value=\"admin\">Administrator</MenuItem>\r\n                  <MenuItem value=\"viewer\">Betrachter</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Telefon\"\r\n                value={formData.phone}\r\n                onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Abteilung\"\r\n                value={formData.department}\r\n                onChange={(e) => setFormData({ ...formData, department: e.target.value })}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Position\"\r\n                value={formData.position}\r\n                onChange={(e) => setFormData({ ...formData, position: e.target.value })}\r\n              />\r\n            </Grid>\r\n            \r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Notizen\"\r\n                multiline\r\n                rows={3}\r\n                value={formData.notes}\r\n                onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDialog}>Abbrechen</Button>\r\n          {dialogType !== 'view' && (\r\n            <Button onClick={handleSubmit} variant=\"contained\" disabled={loading}>\r\n              {loading ? 'Speichern...' : 'Speichern'}\r\n            </Button>\r\n          )}\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Action Menu */}\r\n      <Menu\r\n        anchorEl={anchorEl}\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleMenuClose}\r\n      >\r\n        <MenuItemComponent onClick={() => {\r\n          if (selectedUserId) {\r\n            handleDeleteUser(selectedUserId);\r\n          }\r\n          handleMenuClose();\r\n        }}>\r\n          <DeleteIcon sx={{ mr: 1 }} />\r\n          Löschen\r\n        </MenuItemComponent>\r\n      </Menu>\r\n\r\n      {/* Error Alert */}\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mt: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserManagement; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\WarehouseManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\WarenwirtschaftFormular.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\__tests__\\SapFioriDashboard.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\erp\\DeliveryNotePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\neuroflow\\NeuroFlowArticlesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\pages\\neuroflow\\NeuroFlowInvoicesPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'mockInvoices'. Either include it or remove the dependency array.","line":128,"column":6,"nodeType":"ArrayExpression","endLine":128,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [mockInvoices]","fix":{"range":[3440,3442],"text":"[mockInvoices]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * 🧠 NeuroFlow Invoices Page\r\n * KI-first, responsive-first Rechnungsseite mit MCP-Integration\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  Alert,\r\n  Snackbar,\r\n  Fab,\r\n  Tooltip,\r\n  Typography,\r\n  IconButton,\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Close as CloseIcon,\r\n} from '@mui/icons-material';\r\n\r\n// NeuroFlow Components\r\nimport { NeuroFlowLayout } from '../../design-system/NeuroFlowLayout';\r\nimport { \r\n  DataCard, \r\n  ActionCard, \r\n  EmptyState, \r\n  LoadingState, \r\n  ErrorState,\r\n  ResponsiveGrid,\r\n  SectionHeader \r\n} from '../../design-system/NeuroFlowComponents';\r\nimport NeuroFlowInvoiceForm from '../../components/neuroflow/NeuroFlowInvoiceForm';\r\nimport NeuroFlowInvoiceTable from '../../components/neuroflow/NeuroFlowInvoiceTable';\r\n\r\n// Types\r\ninterface Invoice {\r\n  id: string;\r\n  invoice_number: string;\r\n  customer_name: string;\r\n  customer_email: string;\r\n  invoice_date: string;\r\n  due_date: string;\r\n  amount: number;\r\n  tax_rate: number;\r\n  total_amount: number;\r\n  status: 'draft' | 'sent' | 'paid' | 'overdue' | 'cancelled';\r\n  description: string;\r\n  created_at: string;\r\n}\r\n\r\n// NeuroFlow Invoices Page Component\r\nexport const NeuroFlowInvoicesPage: React.FC = () => {\r\n  const [invoices, setInvoices] = useState<Invoice[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\r\n  const [showEditDialog, setShowEditDialog] = useState(false);\r\n  const [selectedInvoice, setSelectedInvoice] = useState<Invoice | null>(null);\r\n  const [snackbar, setSnackbar] = useState<{\r\n    open: boolean;\r\n    message: string;\r\n    severity: 'success' | 'error' | 'info' | 'warning';\r\n  }>({\r\n    open: false,\r\n    message: '',\r\n    severity: 'info',\r\n  });\r\n\r\n  // Mock data for demonstration\r\n  const mockInvoices: Invoice[] = [\r\n    {\r\n      id: '1',\r\n      invoice_number: 'INV-2024-001',\r\n      customer_name: 'Max Mustermann GmbH',\r\n      customer_email: 'max@mustermann.de',\r\n      invoice_date: '2024-01-15',\r\n      due_date: '2024-02-14',\r\n      amount: 1500.00,\r\n      tax_rate: 19,\r\n      total_amount: 1785.00,\r\n      status: 'paid',\r\n      description: 'Webentwicklung Services',\r\n      created_at: '2024-01-15T10:00:00Z',\r\n    },\r\n    {\r\n      id: '2',\r\n      invoice_number: 'INV-2024-002',\r\n      customer_name: 'Firma Schmidt AG',\r\n      customer_email: 'info@schmidt.de',\r\n      invoice_date: '2024-01-20',\r\n      due_date: '2024-02-19',\r\n      amount: 2500.00,\r\n      tax_rate: 19,\r\n      total_amount: 2975.00,\r\n      status: 'sent',\r\n      description: 'Beratung und Implementierung',\r\n      created_at: '2024-01-20T14:30:00Z',\r\n    },\r\n    {\r\n      id: '3',\r\n      invoice_number: 'INV-2024-003',\r\n      customer_name: 'Test Unternehmen',\r\n      customer_email: 'test@unternehmen.de',\r\n      invoice_date: '2024-01-25',\r\n      due_date: '2024-02-24',\r\n      amount: 800.00,\r\n      tax_rate: 19,\r\n      total_amount: 952.00,\r\n      status: 'overdue',\r\n      description: 'Support und Wartung',\r\n      created_at: '2024-01-25T09:15:00Z',\r\n    },\r\n  ];\r\n\r\n  // Load invoices\r\n  React.useEffect(() => {\r\n    setLoading(true);\r\n    // Simulate API call\r\n    setTimeout(() => {\r\n      setInvoices(mockInvoices);\r\n      setLoading(false);\r\n    }, 1000);\r\n  }, []);\r\n\r\n  // Calculate statistics\r\n  const statistics = React.useMemo(() => {\r\n    const totalInvoices = invoices.length;\r\n    const paidInvoices = invoices.filter(inv => inv.status === 'paid').length;\r\n    const overdueInvoices = invoices.filter(inv => inv.status === 'overdue').length;\r\n    const totalAmount = invoices.reduce((sum, inv) => sum + inv.total_amount, 0);\r\n    const paidAmount = invoices\r\n      .filter(inv => inv.status === 'paid')\r\n      .reduce((sum, inv) => sum + inv.total_amount, 0);\r\n\r\n    return {\r\n      totalInvoices,\r\n      paidInvoices,\r\n      overdueInvoices,\r\n      totalAmount,\r\n      paidAmount,\r\n      pendingAmount: totalAmount - paidAmount,\r\n    };\r\n  }, [invoices]);\r\n\r\n  // Handle create invoice\r\n  const handleCreateInvoice = async (data: any) => {\r\n    try {\r\n      setLoading(true);\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      const newInvoice: Invoice = {\r\n        id: Date.now().toString(),\r\n        ...data,\r\n        total_amount: data.amount + (data.amount * data.tax_rate / 100),\r\n        created_at: new Date().toISOString(),\r\n      };\r\n      \r\n      setInvoices(prev => [newInvoice, ...prev]);\r\n      setShowCreateDialog(false);\r\n      setSnackbar({\r\n        open: true,\r\n        message: 'Rechnung erfolgreich erstellt',\r\n        severity: 'success',\r\n      });\r\n    } catch (error) {\r\n      setError('Fehler beim Erstellen der Rechnung');\r\n      setSnackbar({\r\n        open: true,\r\n        message: 'Fehler beim Erstellen der Rechnung',\r\n        severity: 'error',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle edit invoice\r\n  const handleEditInvoice = async (data: any) => {\r\n    try {\r\n      setLoading(true);\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      const updatedInvoice: Invoice = {\r\n        ...selectedInvoice!,\r\n        ...data,\r\n        total_amount: data.amount + (data.amount * data.tax_rate / 100),\r\n      };\r\n      \r\n      setInvoices(prev => \r\n        prev.map(inv => inv.id === selectedInvoice!.id ? updatedInvoice : inv)\r\n      );\r\n      setShowEditDialog(false);\r\n      setSelectedInvoice(null);\r\n      setSnackbar({\r\n        open: true,\r\n        message: 'Rechnung erfolgreich aktualisiert',\r\n        severity: 'success',\r\n      });\r\n    } catch (error) {\r\n      setError('Fehler beim Aktualisieren der Rechnung');\r\n      setSnackbar({\r\n        open: true,\r\n        message: 'Fehler beim Aktualisieren der Rechnung',\r\n        severity: 'error',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle delete invoice\r\n  const handleDeleteInvoice = async (invoice: Invoice) => {\r\n    try {\r\n      setLoading(true);\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      setInvoices(prev => prev.filter(inv => inv.id !== invoice.id));\r\n      setSnackbar({\r\n        open: true,\r\n        message: 'Rechnung erfolgreich gelöscht',\r\n        severity: 'success',\r\n      });\r\n    } catch (error) {\r\n      setError('Fehler beim Löschen der Rechnung');\r\n      setSnackbar({\r\n        open: true,\r\n        message: 'Fehler beim Löschen der Rechnung',\r\n        severity: 'error',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle view invoice\r\n  const handleViewInvoice = async (invoice: Invoice) => {\r\n    try {\r\n      // Generate PDF preview\r\n      const response = await fetch(`/api/invoices/${invoice.id}/preview`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        const blob = await response.blob();\r\n        const url = window.URL.createObjectURL(blob);\r\n        \r\n        // Open in new window/tab\r\n        const newWindow = window.open(url, '_blank');\r\n        if (!newWindow) {\r\n          // Fallback: download the file\r\n          const a = document.createElement('a');\r\n          a.href = url;\r\n          a.download = `invoice-${invoice.invoice_number}.pdf`;\r\n          document.body.appendChild(a);\r\n          a.click();\r\n          document.body.removeChild(a);\r\n        }\r\n        \r\n        window.URL.revokeObjectURL(url);\r\n        console.log('Invoice preview generated:', invoice.id);\r\n      } else {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error generating invoice preview:', err);\r\n      alert('Fehler beim Generieren der Rechnungsvorschau');\r\n    }\r\n  };\r\n\r\n  // Format currency\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('de-DE', {\r\n      style: 'currency',\r\n      currency: 'EUR',\r\n    }).format(amount);\r\n  };\r\n\r\n  if (error) {\r\n    return (\r\n      <NeuroFlowLayout\r\n        title=\"Rechnungen\"\r\n        subtitle=\"Verwaltung von Kundenrechnungen\"\r\n        breadcrumbs={[{ label: 'Rechnungen' }]}\r\n      >\r\n        <ErrorState\r\n          title=\"Fehler beim Laden der Rechnungen\"\r\n          message={error}\r\n          retry={() => window.location.reload()}\r\n        />\r\n      </NeuroFlowLayout>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <NeuroFlowLayout\r\n      title=\"Rechnungen\"\r\n      subtitle=\"Verwaltung von Kundenrechnungen und Zahlungseingängen\"\r\n      breadcrumbs={[{ label: 'Rechnungen' }]}\r\n      actions={\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<AddIcon />}\r\n          onClick={() => setShowCreateDialog(true)}\r\n        >\r\n          Neue Rechnung\r\n        </Button>\r\n      }\r\n    >\r\n      {/* Statistics Cards */}\r\n      <SectionHeader\r\n        title=\"Übersicht\"\r\n        subtitle=\"Aktuelle Statistiken und Kennzahlen\"\r\n      />\r\n      \r\n      <ResponsiveGrid columns={{ xs: 1, sm: 2, md: 3, lg: 4 }}>\r\n        <DataCard\r\n          title=\"Gesamte Rechnungen\"\r\n          value={statistics.totalInvoices}\r\n          subtitle=\"Alle Rechnungen\"\r\n          icon={<AddIcon />}\r\n          color=\"primary\"\r\n        />\r\n        \r\n        <DataCard\r\n          title=\"Bezahlte Rechnungen\"\r\n          value={statistics.paidInvoices}\r\n          subtitle={`${((statistics.paidInvoices / statistics.totalInvoices) * 100).toFixed(1)}% Rate`}\r\n          icon={<AddIcon />}\r\n          color=\"success\"\r\n        />\r\n        \r\n        <DataCard\r\n          title=\"Überfällige Rechnungen\"\r\n          value={statistics.overdueInvoices}\r\n          subtitle=\"Benötigen Aufmerksamkeit\"\r\n          icon={<AddIcon />}\r\n          color=\"error\"\r\n        />\r\n        \r\n        <DataCard\r\n          title=\"Gesamtbetrag\"\r\n          value={formatCurrency(statistics.totalAmount)}\r\n          subtitle={`${formatCurrency(statistics.paidAmount)} bezahlt`}\r\n          icon={<AddIcon />}\r\n          color=\"info\"\r\n        />\r\n      </ResponsiveGrid>\r\n\r\n      {/* Invoices Table */}\r\n      <Box mt={4}>\r\n        <NeuroFlowInvoiceTable\r\n          onEdit={(invoice) => {\r\n            setSelectedInvoice(invoice);\r\n            setShowEditDialog(true);\r\n          }}\r\n          onDelete={handleDeleteInvoice}\r\n          onView={handleViewInvoice}\r\n          onCreate={() => setShowCreateDialog(true)}\r\n          loading={loading}\r\n        />\r\n      </Box>\r\n\r\n      {/* Create Invoice Dialog */}\r\n      <Dialog\r\n        open={showCreateDialog}\r\n        onClose={() => setShowCreateDialog(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n        PaperProps={{\r\n          sx: {\r\n            borderRadius: 3,\r\n          },\r\n        }}\r\n      >\r\n        <DialogTitle>\r\n          <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n            <Typography variant=\"h6\" fontWeight={600}>\r\n              Neue Rechnung erstellen\r\n            </Typography>\r\n            <IconButton onClick={() => setShowCreateDialog(false)}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </Box>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <NeuroFlowInvoiceForm\r\n            mode=\"create\"\r\n            onSubmit={handleCreateInvoice}\r\n            onCancel={() => setShowCreateDialog(false)}\r\n            loading={loading}\r\n          />\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Edit Invoice Dialog */}\r\n      <Dialog\r\n        open={showEditDialog}\r\n        onClose={() => setShowEditDialog(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n        PaperProps={{\r\n          sx: {\r\n            borderRadius: 3,\r\n          },\r\n        }}\r\n      >\r\n        <DialogTitle>\r\n          <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n            <Typography variant=\"h6\" fontWeight={600}>\r\n              Rechnung bearbeiten\r\n            </Typography>\r\n            <IconButton onClick={() => setShowEditDialog(false)}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </Box>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {selectedInvoice && (\r\n            <NeuroFlowInvoiceForm\r\n              mode=\"edit\"\r\n              initialData={selectedInvoice}\r\n              onSubmit={handleEditInvoice}\r\n              onCancel={() => setShowEditDialog(false)}\r\n              loading={loading}\r\n            />\r\n          )}\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Floating Action Button */}\r\n      <Fab\r\n        color=\"primary\"\r\n        aria-label=\"Neue Rechnung\"\r\n        sx={{\r\n          position: 'fixed',\r\n          bottom: 16,\r\n          right: 16,\r\n        }}\r\n        onClick={() => setShowCreateDialog(true)}\r\n      >\r\n        <AddIcon />\r\n      </Fab>\r\n\r\n      {/* Snackbar */}\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}\r\n      >\r\n        <Alert\r\n          onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}\r\n          severity={snackbar.severity}\r\n          sx={{ width: '100%' }}\r\n        >\r\n          {snackbar.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </NeuroFlowLayout>\r\n  );\r\n};\r\n\r\nexport default NeuroFlowInvoicesPage; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\security\\FormSecurityManager.ts","messages":[{"ruleId":"no-useless-escape","severity":1,"message":"Unnecessary escape character: \\/.","line":627,"column":68,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":627,"endColumn":69,"suggestions":[{"messageId":"removeEscape","fix":{"range":[18372,18373],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[18372,18372],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Form Security Manager für VALEO NeuroERP 2.0\r\n * Absicherung aller Formulare gegen Schadcode und Intrusion-Methoden\r\n * \r\n * Implementiert basierend auf MCP-Sicherheitsstandards und OWASP-Richtlinien\r\n */\r\n\r\nimport { mcpSecurityManager } from './MCPSecurityManager';\r\n\r\n// Form Security Interfaces\r\ninterface FormSecurityConfig {\r\n  inputValidation: {\r\n    enabled: boolean;\r\n    maxFieldLength: number;\r\n    allowedCharacters: RegExp;\r\n    blockedPatterns: RegExp[];\r\n    sanitization: boolean;\r\n    encoding: 'html' | 'url' | 'base64';\r\n  };\r\n  fileUpload: {\r\n    enabled: boolean;\r\n    maxFileSize: number; // in bytes\r\n    allowedTypes: string[];\r\n    blockedExtensions: string[];\r\n    virusScan: boolean;\r\n    contentValidation: boolean;\r\n  };\r\n  csrfProtection: {\r\n    enabled: boolean;\r\n    tokenExpiry: number; // in seconds\r\n    tokenRotation: boolean;\r\n  };\r\n  xssProtection: {\r\n    enabled: boolean;\r\n    contentSecurityPolicy: boolean;\r\n    inputSanitization: boolean;\r\n    outputEncoding: boolean;\r\n  };\r\n  sqlInjectionProtection: {\r\n    enabled: boolean;\r\n    parameterizedQueries: boolean;\r\n    inputValidation: boolean;\r\n    patternDetection: boolean;\r\n  };\r\n  sessionSecurity: {\r\n    enabled: boolean;\r\n    sessionTimeout: number; // in seconds\r\n    secureCookies: boolean;\r\n    httpOnly: boolean;\r\n    sameSite: 'strict' | 'lax' | 'none';\r\n  };\r\n  rateLimiting: {\r\n    enabled: boolean;\r\n    maxSubmissionsPerMinute: number;\r\n    maxSubmissionsPerHour: number;\r\n    burstSize: number;\r\n  };\r\n  auditLogging: {\r\n    enabled: boolean;\r\n    logAllActions: boolean;\r\n    sensitiveFields: string[];\r\n    retentionPeriod: number; // in days\r\n  };\r\n}\r\n\r\ninterface FormSecurityContext {\r\n  formId: string;\r\n  userId?: string;\r\n  sessionId?: string;\r\n  ipAddress: string;\r\n  userAgent: string;\r\n  timestamp: Date;\r\n  formData: Record<string, unknown>;\r\n}\r\n\r\ninterface FormSecurityEvent {\r\n  type: 'validation' | 'submission' | 'file_upload' | 'security_violation' | 'audit';\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  formId: string;\r\n  userId?: string;\r\n  sessionId?: string;\r\n  ipAddress: string;\r\n  userAgent: string;\r\n  timestamp: Date;\r\n  details: Record<string, unknown>;\r\n  action: 'allowed' | 'denied' | 'blocked' | 'sanitized';\r\n}\r\n\r\ninterface ValidationResult {\r\n  valid: boolean;\r\n  sanitized?: Record<string, unknown>;\r\n  errors?: Record<string, string[]>;\r\n  warnings?: Record<string, string[]>;\r\n  securityIssues?: string[];\r\n}\r\n\r\ninterface FileUploadResult {\r\n  valid: boolean;\r\n  sanitized?: File;\r\n  errors?: string[];\r\n  securityIssues?: string[];\r\n  virusScanResult?: {\r\n    clean: boolean;\r\n    threats?: string[];\r\n  };\r\n}\r\n\r\nexport class FormSecurityManager {\r\n  private config: FormSecurityConfig;\r\n  private securityEvents: FormSecurityEvent[] = [];\r\n  private blockedIPs: Set<string> = new Set();\r\n  private rateLimitBuckets: Map<string, { count: number; lastReset: Date }> = new Map();\r\n\r\n  constructor(config: FormSecurityConfig) {\r\n    this.config = config;\r\n  }\r\n\r\n  /**\r\n   * Validiert und sanitisiert Formulardaten\r\n   */\r\n  validateFormData(\r\n    formId: string,\r\n    formData: Record<string, unknown>,\r\n    context: Partial<FormSecurityContext>\r\n  ): ValidationResult {\r\n    const result: ValidationResult = {\r\n      valid: true,\r\n      errors: {},\r\n      warnings: {},\r\n      securityIssues: []\r\n    };\r\n\r\n    const sanitizedData: Record<string, unknown> = {};\r\n\r\n    // Rate Limiting für Formular-Submission\r\n    if (!this.checkRateLimit(context.ipAddress || 'unknown', formId)) {\r\n      result.valid = false;\r\n      result.securityIssues?.push('Rate limit exceeded for form submission');\r\n      this.logSecurityEvent({\r\n        type: 'security_violation',\r\n        severity: 'medium',\r\n        formId,\r\n        userId: context.userId,\r\n        sessionId: context.sessionId,\r\n        ipAddress: context.ipAddress || 'unknown',\r\n        userAgent: context.userAgent || 'unknown',\r\n        timestamp: new Date(),\r\n        details: { reason: 'Rate limit exceeded' },\r\n        action: 'denied'\r\n      });\r\n      return result;\r\n    }\r\n\r\n    // Input Validation für jedes Feld\r\n    for (const [fieldName, fieldValue] of Object.entries(formData)) {\r\n      const fieldValidation = this.validateField(fieldName, fieldValue);\r\n      \r\n      if (!fieldValidation.valid) {\r\n        result.valid = false;\r\n        result.errors![fieldName] = fieldValidation.errors || [];\r\n      }\r\n\r\n      if (fieldValidation.warnings && fieldValidation.warnings.length > 0) {\r\n        result.warnings![fieldName] = fieldValidation.warnings;\r\n      }\r\n\r\n      if (fieldValidation.securityIssues && fieldValidation.securityIssues.length > 0) {\r\n        result.securityIssues!.push(...fieldValidation.securityIssues);\r\n      }\r\n\r\n      // Sanitization\r\n      if (this.config.inputValidation.sanitization) {\r\n        sanitizedData[fieldName] = this.sanitizeFieldValue(fieldValue);\r\n      } else {\r\n        sanitizedData[fieldName] = fieldValue;\r\n      }\r\n    }\r\n\r\n    // XSS Protection\r\n    if (this.config.xssProtection.enabled) {\r\n      const xssIssues = this.detectXSS(formData);\r\n      if (xssIssues.length > 0) {\r\n        result.valid = false;\r\n        result.securityIssues!.push(...xssIssues);\r\n      }\r\n    }\r\n\r\n    // SQL Injection Protection\r\n    if (this.config.sqlInjectionProtection.enabled) {\r\n      const sqlIssues = this.detectSQLInjection(formData);\r\n      if (sqlIssues.length > 0) {\r\n        result.valid = false;\r\n        result.securityIssues!.push(...sqlIssues);\r\n      }\r\n    }\r\n\r\n    // CSRF Protection\r\n    if (this.config.csrfProtection.enabled) {\r\n      const csrfValid = this.validateCSRFToken(formData, context);\r\n      if (!csrfValid) {\r\n        result.valid = false;\r\n        result.securityIssues!.push('CSRF token validation failed');\r\n      }\r\n    }\r\n\r\n    if (result.valid && this.config.inputValidation.sanitization) {\r\n      result.sanitized = sanitizedData;\r\n    }\r\n\r\n    // Audit Logging\r\n    if (this.config.auditLogging.enabled) {\r\n      this.logSecurityEvent({\r\n        type: 'validation',\r\n        severity: result.valid ? 'low' : 'high',\r\n        formId,\r\n        userId: context.userId,\r\n        sessionId: context.sessionId,\r\n        ipAddress: context.ipAddress || 'unknown',\r\n        userAgent: context.userAgent || 'unknown',\r\n        timestamp: new Date(),\r\n        details: {\r\n          valid: result.valid,\r\n          errors: result.errors,\r\n          warnings: result.warnings,\r\n          securityIssues: result.securityIssues\r\n        },\r\n        action: result.valid ? 'allowed' : 'denied'\r\n      });\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Validiert und sanitisiert Datei-Uploads\r\n   */\r\n  validateFileUpload(\r\n    formId: string,\r\n    file: File,\r\n    context: Partial<FormSecurityContext>\r\n  ): FileUploadResult {\r\n    const result: FileUploadResult = {\r\n      valid: true,\r\n      errors: [],\r\n      securityIssues: []\r\n    };\r\n\r\n    // Dateigröße überprüfen\r\n    if (file.size > this.config.fileUpload.maxFileSize) {\r\n      result.valid = false;\r\n      result.errors!.push(`File size exceeds maximum allowed size of ${this.config.fileUpload.maxFileSize} bytes`);\r\n    }\r\n\r\n    // Dateityp überprüfen\r\n    const fileExtension = this.getFileExtension(file.name);\r\n    if (this.config.fileUpload.blockedExtensions.includes(fileExtension.toLowerCase())) {\r\n      result.valid = false;\r\n      result.errors!.push(`File type ${fileExtension} is not allowed`);\r\n    }\r\n\r\n    // Erlaubte Typen überprüfen\r\n    if (this.config.fileUpload.allowedTypes.length > 0) {\r\n      const mimeType = file.type;\r\n      if (!this.config.fileUpload.allowedTypes.includes(mimeType)) {\r\n        result.valid = false;\r\n        result.errors!.push(`MIME type ${mimeType} is not allowed`);\r\n      }\r\n    }\r\n\r\n    // Content Validation\r\n    if (this.config.fileUpload.contentValidation) {\r\n      const contentIssues = this.validateFileContent(file);\r\n      if (contentIssues.length > 0) {\r\n        result.valid = false;\r\n        result.securityIssues!.push(...contentIssues);\r\n      }\r\n    }\r\n\r\n    // Virus Scan (Simulation)\r\n    if (this.config.fileUpload.virusScan) {\r\n      const virusScanResult = this.scanForViruses(file);\r\n      if (!virusScanResult.clean) {\r\n        result.valid = false;\r\n        result.virusScanResult = virusScanResult;\r\n        result.securityIssues!.push('Virus detected in uploaded file');\r\n      }\r\n    }\r\n\r\n    // Audit Logging\r\n    if (this.config.auditLogging.enabled) {\r\n      this.logSecurityEvent({\r\n        type: 'file_upload',\r\n        severity: result.valid ? 'low' : 'high',\r\n        formId,\r\n        userId: context.userId,\r\n        sessionId: context.sessionId,\r\n        ipAddress: context.ipAddress || 'unknown',\r\n        userAgent: context.userAgent || 'unknown',\r\n        timestamp: new Date(),\r\n        details: {\r\n          fileName: file.name,\r\n          fileSize: file.size,\r\n          fileType: file.type,\r\n          valid: result.valid,\r\n          errors: result.errors,\r\n          securityIssues: result.securityIssues\r\n        },\r\n        action: result.valid ? 'allowed' : 'denied'\r\n      });\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Validiert ein einzelnes Feld\r\n   */\r\n  private validateField(fieldName: string, fieldValue: unknown): {\r\n    valid: boolean;\r\n    errors?: string[];\r\n    warnings?: string[];\r\n    securityIssues?: string[];\r\n  } {\r\n    const errors: string[] = [];\r\n    const warnings: string[] = [];\r\n    const securityIssues: string[] = [];\r\n\r\n    if (typeof fieldValue === 'string') {\r\n      // Längenprüfung\r\n      if (fieldValue.length > this.config.inputValidation.maxFieldLength) {\r\n        errors.push(`Field length exceeds maximum allowed length of ${this.config.inputValidation.maxFieldLength} characters`);\r\n      }\r\n\r\n      // Erlaubte Zeichen überprüfen\r\n      if (!this.config.inputValidation.allowedCharacters.test(fieldValue)) {\r\n        errors.push('Field contains disallowed characters');\r\n      }\r\n\r\n      // Blockierte Patterns überprüfen\r\n      for (const pattern of this.config.inputValidation.blockedPatterns) {\r\n        if (pattern.test(fieldValue)) {\r\n          securityIssues.push(`Field contains blocked pattern: ${pattern.source}`);\r\n        }\r\n      }\r\n\r\n      // XSS Detection\r\n      if (this.config.xssProtection.enabled) {\r\n        const xssPatterns = [\r\n          /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\r\n          /javascript:/gi,\r\n          /on\\w+\\s*=/gi,\r\n          /<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi\r\n        ];\r\n\r\n        for (const pattern of xssPatterns) {\r\n          if (pattern.test(fieldValue)) {\r\n            securityIssues.push('XSS attempt detected');\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // SQL Injection Detection\r\n      if (this.config.sqlInjectionProtection.enabled) {\r\n        const sqlPatterns = [\r\n          /(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION|SCRIPT)\\b)/gi,\r\n          /(\\b(OR|AND)\\b\\s+\\d+\\s*=\\s*\\d+)/gi,\r\n          /(\\b(OR|AND)\\b\\s+['\"]\\w+['\"]\\s*=\\s*['\"]\\w+['\"])/gi,\r\n          /(\\b(OR|AND)\\b\\s+\\d+\\s*=\\s*\\d+\\s*--)/gi,\r\n          /(\\b(OR|AND)\\b\\s+\\d+\\s*=\\s*\\d+\\s*#)/gi\r\n        ];\r\n\r\n        for (const pattern of sqlPatterns) {\r\n          if (pattern.test(fieldValue)) {\r\n            securityIssues.push('SQL injection attempt detected');\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: errors.length === 0 && securityIssues.length === 0,\r\n      errors: errors.length > 0 ? errors : undefined,\r\n      warnings: warnings.length > 0 ? warnings : undefined,\r\n      securityIssues: securityIssues.length > 0 ? securityIssues : undefined\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Sanitisiert einen Feldwert\r\n   */\r\n  private sanitizeFieldValue(fieldValue: unknown): unknown {\r\n    if (typeof fieldValue === 'string') {\r\n      let sanitized = fieldValue;\r\n\r\n      // HTML Encoding\r\n      if (this.config.inputValidation.encoding === 'html') {\r\n        sanitized = sanitized\r\n          .replace(/</g, '&lt;')\r\n          .replace(/>/g, '&gt;')\r\n          .replace(/\"/g, '&quot;')\r\n          .replace(/'/g, '&#x27;')\r\n          .replace(/\\//g, '&#x2F;');\r\n      }\r\n\r\n      // URL Encoding\r\n      if (this.config.inputValidation.encoding === 'url') {\r\n        sanitized = encodeURIComponent(sanitized);\r\n      }\r\n\r\n      // Base64 Encoding\r\n      if (this.config.inputValidation.encoding === 'base64') {\r\n        sanitized = btoa(sanitized);\r\n      }\r\n\r\n      return sanitized;\r\n    }\r\n\r\n    return fieldValue;\r\n  }\r\n\r\n  /**\r\n   * Erkennt XSS-Angriffe\r\n   */\r\n  private detectXSS(formData: Record<string, unknown>): string[] {\r\n    const issues: string[] = [];\r\n    const xssPatterns = [\r\n      /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\r\n      /javascript:/gi,\r\n      /on\\w+\\s*=/gi,\r\n      /<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi,\r\n      /<object\\b[^<]*(?:(?!<\\/object>)<[^<]*)*<\\/object>/gi,\r\n      /<embed\\b[^<]*(?:(?!<\\/embed>)<[^<]*)*<\\/embed>/gi\r\n    ];\r\n\r\n    for (const [fieldName, fieldValue] of Object.entries(formData)) {\r\n      if (typeof fieldValue === 'string') {\r\n        for (const pattern of xssPatterns) {\r\n          if (pattern.test(fieldValue)) {\r\n            issues.push(`XSS attempt detected in field: ${fieldName}`);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return issues;\r\n  }\r\n\r\n  /**\r\n   * Erkennt SQL-Injection-Angriffe\r\n   */\r\n  private detectSQLInjection(formData: Record<string, unknown>): string[] {\r\n    const issues: string[] = [];\r\n    const sqlPatterns = [\r\n      /(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION|SCRIPT)\\b)/gi,\r\n      /(\\b(OR|AND)\\b\\s+\\d+\\s*=\\s*\\d+)/gi,\r\n      /(\\b(OR|AND)\\b\\s+['\"]\\w+['\"]\\s*=\\s*['\"]\\w+['\"])/gi,\r\n      /(\\b(OR|AND)\\b\\s+\\d+\\s*=\\s*\\d+\\s*--)/gi,\r\n      /(\\b(OR|AND)\\b\\s+\\d+\\s*=\\s*\\d+\\s*#)/gi,\r\n      /(\\b(OR|AND)\\b\\s+\\d+\\s*=\\s*\\d+\\s*\\/\\*)/gi\r\n    ];\r\n\r\n    for (const [fieldName, fieldValue] of Object.entries(formData)) {\r\n      if (typeof fieldValue === 'string') {\r\n        for (const pattern of sqlPatterns) {\r\n          if (pattern.test(fieldValue)) {\r\n            issues.push(`SQL injection attempt detected in field: ${fieldName}`);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return issues;\r\n  }\r\n\r\n  /**\r\n   * Validiert CSRF-Token\r\n   */\r\n  private validateCSRFToken(formData: Record<string, unknown>, context: Partial<FormSecurityContext>): boolean {\r\n    // Implementierung der CSRF-Token-Validierung\r\n    // Hier würde eine echte CSRF-Token-Validierung implementiert werden\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Überprüft Rate Limiting\r\n   */\r\n  private checkRateLimit(identifier: string, formId: string): boolean {\r\n    if (!this.config.rateLimiting.enabled) {\r\n      return true;\r\n    }\r\n\r\n    const key = `${identifier}:${formId}`;\r\n    const now = new Date();\r\n    const bucket = this.rateLimitBuckets.get(key);\r\n\r\n    if (!bucket) {\r\n      this.rateLimitBuckets.set(key, {\r\n        count: 1,\r\n        lastReset: now\r\n      });\r\n      return true;\r\n    }\r\n\r\n    // Reset counter if hour has passed\r\n    const timePassed = (now.getTime() - bucket.lastReset.getTime()) / 1000;\r\n    if (timePassed > 3600) { // 1 hour\r\n      bucket.count = 1;\r\n      bucket.lastReset = now;\r\n      return true;\r\n    }\r\n\r\n    if (bucket.count >= this.config.rateLimiting.maxSubmissionsPerHour) {\r\n      return false;\r\n    }\r\n\r\n    bucket.count++;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Validiert Dateiinhalt\r\n   */\r\n  private validateFileContent(file: File): string[] {\r\n    const issues: string[] = [];\r\n\r\n    // Überprüfung auf verdächtige Dateiheader\r\n    const suspiciousHeaders = [\r\n      '4D5A90', // MZ header (executable)\r\n      '7F454C46', // ELF header\r\n      '504B0304', // ZIP header\r\n      '25504446' // PDF header\r\n    ];\r\n\r\n    // Hier würde eine echte Dateiheader-Validierung implementiert werden\r\n    // Für Demo-Zwecke wird eine einfache Überprüfung durchgeführt\r\n\r\n    return issues;\r\n  }\r\n\r\n  /**\r\n   * Scannt Datei auf Viren (Simulation)\r\n   */\r\n  private scanForViruses(file: File): { clean: boolean; threats?: string[] } {\r\n    // Hier würde eine echte Virenscanner-Integration implementiert werden\r\n    // Für Demo-Zwecke wird immer \"clean\" zurückgegeben\r\n    return { clean: true };\r\n  }\r\n\r\n  /**\r\n   * Extrahiert Dateiendung\r\n   */\r\n  private getFileExtension(filename: string): string {\r\n    return filename.split('.').pop() || '';\r\n  }\r\n\r\n  /**\r\n   * Loggt Sicherheitsereignisse\r\n   */\r\n  private logSecurityEvent(event: FormSecurityEvent): void {\r\n    if (this.config.auditLogging.enabled) {\r\n      this.securityEvents.push(event);\r\n      \r\n      // Real-time Alerts für kritische Ereignisse\r\n      if (event.severity === 'critical') {\r\n        this.sendAlert(event);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sendet Alerts bei kritischen Ereignissen\r\n   */\r\n  private sendAlert(event: FormSecurityEvent): void {\r\n    // Implementierung der Alert-Funktionalität\r\n    console.error('FORM SECURITY ALERT:', event);\r\n  }\r\n\r\n  /**\r\n   * Gibt Sicherheitsstatistiken zurück\r\n   */\r\n  getSecurityStats(): {\r\n    totalEvents: number;\r\n    securityViolations: number;\r\n    blockedSubmissions: number;\r\n    xssAttempts: number;\r\n    sqlInjectionAttempts: number;\r\n  } {\r\n    const stats = {\r\n      totalEvents: this.securityEvents.length,\r\n      securityViolations: 0,\r\n      blockedSubmissions: 0,\r\n      xssAttempts: 0,\r\n      sqlInjectionAttempts: 0\r\n    };\r\n\r\n    for (const event of this.securityEvents) {\r\n      if (event.type === 'security_violation') {\r\n        stats.securityViolations++;\r\n      }\r\n      if (event.action === 'denied' || event.action === 'blocked') {\r\n        stats.blockedSubmissions++;\r\n      }\r\n      if (event.details.securityIssues && Array.isArray(event.details.securityIssues)) {\r\n        const securityIssues = event.details.securityIssues as string[];\r\n        if (securityIssues.some(issue => issue.includes('XSS'))) {\r\n          stats.xssAttempts++;\r\n        }\r\n        if (securityIssues.some(issue => issue.includes('SQL injection'))) {\r\n          stats.sqlInjectionAttempts++;\r\n        }\r\n      }\r\n    }\r\n\r\n    return stats;\r\n  }\r\n}\r\n\r\n// Singleton-Instanz\r\nexport const formSecurityManager = new FormSecurityManager({\r\n  inputValidation: {\r\n    enabled: true,\r\n    maxFieldLength: 10000,\r\n    allowedCharacters: /^[a-zA-Z0-9äöüßÄÖÜ\\s\\-_.,!?@#$%&*()+=:;\"'<>\\/\\\\[\\]{}|~`^]+$/,\r\n    blockedPatterns: [\r\n      /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\r\n      /javascript:/gi,\r\n      /on\\w+\\s*=/gi,\r\n      /<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi\r\n    ],\r\n    sanitization: true,\r\n    encoding: 'html'\r\n  },\r\n  fileUpload: {\r\n    enabled: true,\r\n    maxFileSize: 10485760, // 10MB\r\n    allowedTypes: [\r\n      'image/jpeg',\r\n      'image/png',\r\n      'image/gif',\r\n      'application/pdf',\r\n      'text/plain',\r\n      'application/msword',\r\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n    ],\r\n    blockedExtensions: ['exe', 'bat', 'cmd', 'com', 'pif', 'scr', 'vbs', 'js'],\r\n    virusScan: true,\r\n    contentValidation: true\r\n  },\r\n  csrfProtection: {\r\n    enabled: true,\r\n    tokenExpiry: 3600,\r\n    tokenRotation: true\r\n  },\r\n  xssProtection: {\r\n    enabled: true,\r\n    contentSecurityPolicy: true,\r\n    inputSanitization: true,\r\n    outputEncoding: true\r\n  },\r\n  sqlInjectionProtection: {\r\n    enabled: true,\r\n    parameterizedQueries: true,\r\n    inputValidation: true,\r\n    patternDetection: true\r\n  },\r\n  sessionSecurity: {\r\n    enabled: true,\r\n    sessionTimeout: 3600,\r\n    secureCookies: true,\r\n    httpOnly: true,\r\n    sameSite: 'strict'\r\n  },\r\n  rateLimiting: {\r\n    enabled: true,\r\n    maxSubmissionsPerMinute: 10,\r\n    maxSubmissionsPerHour: 100,\r\n    burstSize: 5\r\n  },\r\n  auditLogging: {\r\n    enabled: true,\r\n    logAllActions: true,\r\n    sensitiveFields: ['password', 'creditCard', 'ssn', 'email'],\r\n    retentionPeriod: 90\r\n  }\r\n}); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\security\\MCPSecurityManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\security\\SecurityReport.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\services\\AIService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\services\\ApiService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\services\\CentralFormTable.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\services\\DokumenteService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\services\\ExtendedFormRegistry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\services\\FormDataService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\services\\FormRegistryService.ts","messages":[{"ruleId":"no-useless-escape","severity":1,"message":"Unnecessary escape character: \\+.","line":1322,"column":35,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":1322,"endColumn":36,"suggestions":[{"messageId":"removeEscape","fix":{"range":[44158,44159],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[44158,44158],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":1,"message":"Unnecessary escape character: \\(.","line":1322,"column":47,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":1322,"endColumn":48,"suggestions":[{"messageId":"removeEscape","fix":{"range":[44170,44171],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[44170,44170],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":1,"message":"Unnecessary escape character: \\).","line":1322,"column":49,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":1322,"endColumn":50,"suggestions":[{"messageId":"removeEscape","fix":{"range":[44172,44173],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[44172,44172],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":1,"message":"Unnecessary escape character: \\+.","line":1554,"column":35,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":1554,"endColumn":36,"suggestions":[{"messageId":"removeEscape","fix":{"range":[50447,50448],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[50447,50447],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":1,"message":"Unnecessary escape character: \\(.","line":1554,"column":47,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":1554,"endColumn":48,"suggestions":[{"messageId":"removeEscape","fix":{"range":[50459,50460],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[50459,50459],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":1,"message":"Unnecessary escape character: \\).","line":1554,"column":49,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":1554,"endColumn":50,"suggestions":[{"messageId":"removeEscape","fix":{"range":[50461,50462],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[50461,50461],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":1,"message":"Unnecessary escape character: \\+.","line":1762,"column":35,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":1762,"endColumn":36,"suggestions":[{"messageId":"removeEscape","fix":{"range":[56090,56091],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[56090,56090],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":1,"message":"Unnecessary escape character: \\(.","line":1762,"column":47,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":1762,"endColumn":48,"suggestions":[{"messageId":"removeEscape","fix":{"range":[56102,56103],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[56102,56102],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":1,"message":"Unnecessary escape character: \\).","line":1762,"column":49,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":1762,"endColumn":50,"suggestions":[{"messageId":"removeEscape","fix":{"range":[56104,56105],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[56104,56104],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * VALEO NeuroERP 2.0 - Formular-Registrierungs-Service\r\n * Horizon Beta optimiert mit Versionsnummerierung und Rollenverwaltung\r\n * Serena Quality: Complete form registry with role-based permissions\r\n */\r\n\r\nimport {\r\n  FormID,\r\n  FormVersion,\r\n  FormStatus,\r\n  FormPermission,\r\n  FormMetadata,\r\n  RolePermissions,\r\n  FormField,\r\n  FormConfig,\r\n  FormRegistry,\r\n  FormVersionHistory,\r\n  FormChangeRequest,\r\n  FormChange,\r\n  FORM_MODULES,\r\n  FORM_STATUSES,\r\n  FORM_PERMISSIONS,\r\n  FORM_FEATURES,\r\n  PersonalFormSchema,\r\n  WarehouseFormSchema,\r\n  CustomerFormSchema,\r\n  InvoiceFormSchema,\r\n  SupplierFormSchema,\r\n  OrderFormSchema,\r\n  BedarfsermittlungSchema,\r\n  AnfrageSchema,\r\n  BestellungSchema,\r\n  AuftragsbestaetigungSchema,\r\n  AuftragsbearbeitungSchema,\r\n  PacklisteSchema,\r\n  VersandetikettierungSchema,\r\n  LogistikUebergabeSchema,\r\n  MaterialbedarfsermittlungSchema,\r\n  RueckverfolgungSchema,\r\n  ProduktionsauftragSchema,\r\n  RueckmeldungSchema,\r\n  LieferantenbewertungSchema,\r\n  KundenruecklaeuferSchema,\r\n  GutschriftSchema,\r\n  UrsachenanalyseSchema,\r\n  VerpackungsvorschriftenSchema,\r\n  EtikettenSchema,\r\n  UNNummernSchema,\r\n  ADRKonformitaetSchema,\r\n  InventurerfassungSchema,\r\n  DifferenzkontrolleSchema,\r\n  UmlagerungSchema,\r\n  PreislistenSchema,\r\n  AktionenSchema,\r\n  StaffelpreiseSchema,\r\n  RabattsystemeSchema,\r\n  ArtikelstammdatenSchema,\r\n  ArtikelklassifizierungSchema,\r\n  ArtikelvarianteSchema,\r\n  StuecklisteSchema,\r\n  EinlagerungSchema,\r\n  AuslagerungSchema,\r\n  LagerplatzOptimierungSchema,\r\n  InventurSchema,\r\n  ChargeSchema,\r\n  LieferantenavisierungSchema,\r\n  WareneingangspruefungSchema,\r\n  WareneingangsbuchungSchema,\r\n  ReklamationSchema,\r\n} from '../types/forms';\r\n\r\n// ============================================================================\r\n// FORMULAR-REGISTRIERUNG MIT VERSIONIERUNG\r\n// ============================================================================\r\n\r\nexport class FormRegistryService {\r\n  private static instance: FormRegistryService;\r\n  private registry: FormRegistry;\r\n  private versionHistory: Map<FormID, FormVersionHistory[]>;\r\n  private changeRequests: Map<string, FormChangeRequest>;\r\n\r\n  private constructor() {\r\n    this.registry = {\r\n      forms: {},\r\n      versions: {},\r\n      permissions: {},\r\n      metadata: {},\r\n    };\r\n    this.versionHistory = new Map();\r\n    this.changeRequests = new Map();\r\n    this.initializeDefaultForms();\r\n  }\r\n\r\n  public static getInstance(): FormRegistryService {\r\n    if (!FormRegistryService.instance) {\r\n      FormRegistryService.instance = new FormRegistryService();\r\n    }\r\n    return FormRegistryService.instance;\r\n  }\r\n\r\n  // ============================================================================\r\n  // STANDARD-FORMULARE INITIALISIEREN\r\n  // ============================================================================\r\n\r\n  private initializeDefaultForms(): void {\r\n    // Personal Formular\r\n    this.registerForm({\r\n      id: 'personal-employee-form',\r\n      metadata: {\r\n        id: 'personal-employee-form',\r\n        name: 'Mitarbeiter-Formular',\r\n        module: FORM_MODULES.PERSONAL,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für die Verwaltung von Mitarbeiterdaten',\r\n        tags: ['personal', 'employee', 'hr'],\r\n        dependencies: [],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getPersonalFormFields(),\r\n      validationSchema: PersonalFormSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'medium',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    // Warehouse Formular\r\n    this.registerForm({\r\n      id: 'warehouse-article-form',\r\n      metadata: {\r\n        id: 'warehouse-article-form',\r\n        name: 'Artikel-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für die Verwaltung von Artikeldaten',\r\n        tags: ['warehouse', 'article', 'inventory'],\r\n        dependencies: [],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getWarehouseFormFields(),\r\n      validationSchema: WarehouseFormSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'medium',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    // Customer Formular\r\n    this.registerForm({\r\n      id: 'customer-form',\r\n      metadata: {\r\n        id: 'customer-form',\r\n        name: 'Kunden-Formular',\r\n        module: FORM_MODULES.CRM,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für die Verwaltung von Kundendaten',\r\n        tags: ['crm', 'customer', 'sales'],\r\n        dependencies: [],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getCustomerFormFields(),\r\n      validationSchema: CustomerFormSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'medium',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    // Invoice Formular\r\n    this.registerForm({\r\n      id: 'invoice-form',\r\n      metadata: {\r\n        id: 'invoice-form',\r\n        name: 'Rechnungs-Formular',\r\n        module: FORM_MODULES.FINANCE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für die Erstellung von Rechnungen',\r\n        tags: ['finance', 'invoice', 'billing'],\r\n        dependencies: [],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getInvoiceFormFields(),\r\n      validationSchema: InvoiceFormSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'medium',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    // Supplier Formular\r\n    this.registerForm({\r\n      id: 'supplier-form',\r\n      metadata: {\r\n        id: 'supplier-form',\r\n        name: 'Lieferanten-Formular',\r\n        module: FORM_MODULES.PURCHASING,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für die Verwaltung von Lieferantendaten',\r\n        tags: ['purchasing', 'supplier', 'vendor'],\r\n        dependencies: [],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getSupplierFormFields(),\r\n      validationSchema: SupplierFormSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'medium',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    // Order Formular\r\n    this.registerForm({\r\n      id: 'order-form',\r\n      metadata: {\r\n        id: 'order-form',\r\n        name: 'Auftrags-Formular',\r\n        module: FORM_MODULES.SALES,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für die Erstellung von Aufträgen',\r\n        tags: ['sales', 'order', 'customer'],\r\n        dependencies: [],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getOrderFormFields(),\r\n      validationSchema: OrderFormSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'medium',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    // ============================================================================\r\n    // WARENWIRTSCHAFT (WAWI) - FORMULARE\r\n    // ============================================================================\r\n\r\n    // Artikelstammdaten verwalten\r\n    this.registerForm({\r\n      id: 'wawi-artikelstammdaten-form',\r\n      metadata: {\r\n        id: 'wawi-artikelstammdaten-form',\r\n        name: 'Artikelstammdaten-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für die Verwaltung von Artikelstammdaten',\r\n        tags: ['wawi', 'artikel', 'stammdaten', 'warehouse'],\r\n        dependencies: [],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getArtikelstammdatenFormFields(),\r\n      validationSchema: ArtikelstammdatenSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-artikelklassifizierung-form',\r\n      metadata: {\r\n        id: 'wawi-artikelklassifizierung-form',\r\n        name: 'Artikelklassifizierung-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für die Klassifizierung von Artikeln',\r\n        tags: ['wawi', 'artikel', 'klassifizierung', 'warehouse'],\r\n        dependencies: ['wawi-artikelstammdaten-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getArtikelklassifizierungFormFields(),\r\n      validationSchema: ArtikelklassifizierungSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'medium',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-artikelvariante-form',\r\n      metadata: {\r\n        id: 'wawi-artikelvariante-form',\r\n        name: 'Artikelvariante-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für die Verwaltung von Artikelvarianten',\r\n        tags: ['wawi', 'artikel', 'variante', 'warehouse'],\r\n        dependencies: ['wawi-artikelstammdaten-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getArtikelvarianteFormFields(),\r\n      validationSchema: ArtikelvarianteSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'medium',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-stueckliste-form',\r\n      metadata: {\r\n        id: 'wawi-stueckliste-form',\r\n        name: 'Stückliste-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für die Verwaltung von Stücklisten',\r\n        tags: ['wawi', 'stueckliste', 'produktion', 'warehouse'],\r\n        dependencies: ['wawi-artikelstammdaten-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getStuecklisteFormFields(),\r\n      validationSchema: StuecklisteSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    // Lagerverwaltung\r\n    this.registerForm({\r\n      id: 'wawi-einlagerung-form',\r\n      metadata: {\r\n        id: 'wawi-einlagerung-form',\r\n        name: 'Einlagerung-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für die Einlagerung von Artikeln',\r\n        tags: ['wawi', 'einlagerung', 'lager', 'warehouse'],\r\n        dependencies: ['wawi-artikelstammdaten-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getEinlagerungFormFields(),\r\n      validationSchema: EinlagerungSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'medium',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-auslagerung-form',\r\n      metadata: {\r\n        id: 'wawi-auslagerung-form',\r\n        name: 'Auslagerung-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für die Auslagerung von Artikeln',\r\n        tags: ['wawi', 'auslagerung', 'lager', 'warehouse'],\r\n        dependencies: ['wawi-artikelstammdaten-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getAuslagerungFormFields(),\r\n      validationSchema: AuslagerungSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'medium',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-lagerplatz-optimierung-form',\r\n      metadata: {\r\n        id: 'wawi-lagerplatz-optimierung-form',\r\n        name: 'Lagerplatz-Optimierung-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für die Optimierung von Lagerplätzen',\r\n        tags: ['wawi', 'lagerplatz', 'optimierung', 'warehouse'],\r\n        dependencies: ['wawi-artikelstammdaten-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getLagerplatzOptimierungFormFields(),\r\n      validationSchema: LagerplatzOptimierungSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'medium',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-inventur-form',\r\n      metadata: {\r\n        id: 'wawi-inventur-form',\r\n        name: 'Inventur-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für die Durchführung von Inventuren',\r\n        tags: ['wawi', 'inventur', 'lager', 'warehouse'],\r\n        dependencies: ['wawi-artikelstammdaten-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getInventurFormFields(),\r\n      validationSchema: InventurSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-charge-form',\r\n      metadata: {\r\n        id: 'wawi-charge-form',\r\n        name: 'Charge-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für die Verwaltung von Chargen',\r\n        tags: ['wawi', 'charge', 'lager', 'warehouse'],\r\n        dependencies: ['wawi-artikelstammdaten-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getChargeFormFields(),\r\n      validationSchema: ChargeSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'medium',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    // Wareneingang\r\n    this.registerForm({\r\n      id: 'wawi-lieferantenavisierung-form',\r\n      metadata: {\r\n        id: 'wawi-lieferantenavisierung-form',\r\n        name: 'Lieferantenavisierung-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Lieferantenavisierungen',\r\n        tags: ['wawi', 'avisierung', 'wareneingang', 'warehouse'],\r\n        dependencies: ['supplier-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getLieferantenavisierungFormFields(),\r\n      validationSchema: LieferantenavisierungSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-wareneingangspruefung-form',\r\n      metadata: {\r\n        id: 'wawi-wareneingangspruefung-form',\r\n        name: 'Wareneingangsprüfung-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Wareneingangsprüfungen',\r\n        tags: ['wawi', 'pruefung', 'wareneingang', 'warehouse'],\r\n        dependencies: ['wawi-lieferantenavisierung-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getWareneingangspruefungFormFields(),\r\n      validationSchema: WareneingangspruefungSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-wareneingangsbuchung-form',\r\n      metadata: {\r\n        id: 'wawi-wareneingangsbuchung-form',\r\n        name: 'Wareneingangsbuchung-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Wareneingangsbuchungen',\r\n        tags: ['wawi', 'buchung', 'wareneingang', 'warehouse'],\r\n        dependencies: ['wawi-wareneingangspruefung-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getWareneingangsbuchungFormFields(),\r\n      validationSchema: WareneingangsbuchungSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-reklamation-form',\r\n      metadata: {\r\n        id: 'wawi-reklamation-form',\r\n        name: 'Reklamation-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Lieferantenreklamationen',\r\n        tags: ['wawi', 'reklamation', 'wareneingang', 'warehouse'],\r\n        dependencies: ['wawi-wareneingangspruefung-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getReklamationFormFields(),\r\n      validationSchema: ReklamationSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    // Bestellwesen\r\n    this.registerForm({\r\n      id: 'wawi-bedarfsermittlung-form',\r\n      metadata: {\r\n        id: 'wawi-bedarfsermittlung-form',\r\n        name: 'Bedarfsermittlung-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für die Bedarfsermittlung',\r\n        tags: ['wawi', 'bedarf', 'bestellung', 'warehouse'],\r\n        dependencies: ['wawi-artikelstammdaten-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getBedarfsermittlungFormFields(),\r\n      validationSchema: BedarfsermittlungSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'medium',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-anfrage-form',\r\n      metadata: {\r\n        id: 'wawi-anfrage-form',\r\n        name: 'Anfrage-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Lieferantenanfragen',\r\n        tags: ['wawi', 'anfrage', 'bestellung', 'warehouse'],\r\n        dependencies: ['supplier-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getAnfrageFormFields(),\r\n      validationSchema: AnfrageSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-bestellung-form',\r\n      metadata: {\r\n        id: 'wawi-bestellung-form',\r\n        name: 'Bestellung-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Lieferantenbestellungen',\r\n        tags: ['wawi', 'bestellung', 'warehouse'],\r\n        dependencies: ['supplier-form', 'wawi-anfrage-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getBestellungFormFields(),\r\n      validationSchema: BestellungSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-auftragsbestaetigung-form',\r\n      metadata: {\r\n        id: 'wawi-auftragsbestaetigung-form',\r\n        name: 'Auftragsbestätigung-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Auftragsbestätigungen',\r\n        tags: ['wawi', 'bestaetigung', 'bestellung', 'warehouse'],\r\n        dependencies: ['wawi-bestellung-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getAuftragsbestaetigungFormFields(),\r\n      validationSchema: AuftragsbestaetigungSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    // Warenausgang/Kommissionierung\r\n    this.registerForm({\r\n      id: 'wawi-auftragsbearbeitung-form',\r\n      metadata: {\r\n        id: 'wawi-auftragsbearbeitung-form',\r\n        name: 'Auftragsbearbeitung-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für die Auftragsbearbeitung',\r\n        tags: ['wawi', 'auftrag', 'kommissionierung', 'warehouse'],\r\n        dependencies: ['order-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getAuftragsbearbeitungFormFields(),\r\n      validationSchema: AuftragsbearbeitungSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-packliste-form',\r\n      metadata: {\r\n        id: 'wawi-packliste-form',\r\n        name: 'Packliste-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Packlisten',\r\n        tags: ['wawi', 'packliste', 'versand', 'warehouse'],\r\n        dependencies: ['wawi-auftragsbearbeitung-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getPacklisteFormFields(),\r\n      validationSchema: PacklisteSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-versandetikettierung-form',\r\n      metadata: {\r\n        id: 'wawi-versandetikettierung-form',\r\n        name: 'Versandetikettierung-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Versandetikettierung',\r\n        tags: ['wawi', 'etikett', 'versand', 'warehouse'],\r\n        dependencies: ['wawi-packliste-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getVersandetikettierungFormFields(),\r\n      validationSchema: VersandetikettierungSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'medium',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-logistik-uebergabe-form',\r\n      metadata: {\r\n        id: 'wawi-logistik-uebergabe-form',\r\n        name: 'Logistik-Übergabe-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Logistik-Übergaben',\r\n        tags: ['wawi', 'logistik', 'uebergabe', 'warehouse'],\r\n        dependencies: ['wawi-packliste-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getLogistikUebergabeFormFields(),\r\n      validationSchema: LogistikUebergabeSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'medium',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    // Produktion/Rezepturverwaltung\r\n    this.registerForm({\r\n      id: 'wawi-materialbedarfsermittlung-form',\r\n      metadata: {\r\n        id: 'wawi-materialbedarfsermittlung-form',\r\n        name: 'Materialbedarfsermittlung-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Materialbedarfsermittlung',\r\n        tags: ['wawi', 'material', 'produktion', 'warehouse'],\r\n        dependencies: ['wawi-stueckliste-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getMaterialbedarfsermittlungFormFields(),\r\n      validationSchema: MaterialbedarfsermittlungSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-rueckverfolgung-form',\r\n      metadata: {\r\n        id: 'wawi-rueckverfolgung-form',\r\n        name: 'Rückverfolgung-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Artikelrückverfolgung',\r\n        tags: ['wawi', 'rueckverfolgung', 'warehouse'],\r\n        dependencies: ['wawi-artikelstammdaten-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getRueckverfolgungFormFields(),\r\n      validationSchema: RueckverfolgungSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-produktionsauftrag-form',\r\n      metadata: {\r\n        id: 'wawi-produktionsauftrag-form',\r\n        name: 'Produktionsauftrag-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Produktionsaufträge',\r\n        tags: ['wawi', 'produktion', 'auftrag', 'warehouse'],\r\n        dependencies: ['wawi-stueckliste-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getProduktionsauftragFormFields(),\r\n      validationSchema: ProduktionsauftragSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-rueckmeldung-form',\r\n      metadata: {\r\n        id: 'wawi-rueckmeldung-form',\r\n        name: 'Rückmeldung-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Produktionsrückmeldungen',\r\n        tags: ['wawi', 'rueckmeldung', 'produktion', 'warehouse'],\r\n        dependencies: ['wawi-produktionsauftrag-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getRueckmeldungFormFields(),\r\n      validationSchema: RueckmeldungSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    // Lieferantenbewertung\r\n    this.registerForm({\r\n      id: 'wawi-lieferantenbewertung-form',\r\n      metadata: {\r\n        id: 'wawi-lieferantenbewertung-form',\r\n        name: 'Lieferantenbewertung-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Lieferantenbewertungen',\r\n        tags: ['wawi', 'bewertung', 'lieferant', 'warehouse'],\r\n        dependencies: ['supplier-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getLieferantenbewertungFormFields(),\r\n      validationSchema: LieferantenbewertungSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    // Retouren/Reklamationen\r\n    this.registerForm({\r\n      id: 'wawi-kundenruecklaeufer-form',\r\n      metadata: {\r\n        id: 'wawi-kundenruecklaeufer-form',\r\n        name: 'Kundenrückläufer-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Kundenrückläufer',\r\n        tags: ['wawi', 'ruecklaeufer', 'kunde', 'warehouse'],\r\n        dependencies: ['customer-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getKundenruecklaeuferFormFields(),\r\n      validationSchema: KundenruecklaeuferSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-gutschrift-form',\r\n      metadata: {\r\n        id: 'wawi-gutschrift-form',\r\n        name: 'Gutschrift-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Gutschriften',\r\n        tags: ['wawi', 'gutschrift', 'warehouse'],\r\n        dependencies: ['wawi-kundenruecklaeufer-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getGutschriftFormFields(),\r\n      validationSchema: GutschriftSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-ursachenanalyse-form',\r\n      metadata: {\r\n        id: 'wawi-ursachenanalyse-form',\r\n        name: 'Ursachenanalyse-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Ursachenanalysen',\r\n        tags: ['wawi', 'ursachenanalyse', 'warehouse'],\r\n        dependencies: ['wawi-kundenruecklaeufer-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getUrsachenanalyseFormFields(),\r\n      validationSchema: UrsachenanalyseSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'medium',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    // Verpackung/Gefahrgut\r\n    this.registerForm({\r\n      id: 'wawi-verpackungsvorschriften-form',\r\n      metadata: {\r\n        id: 'wawi-verpackungsvorschriften-form',\r\n        name: 'Verpackungsvorschriften-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Verpackungsvorschriften',\r\n        tags: ['wawi', 'verpackung', 'gefahrgut', 'warehouse'],\r\n        dependencies: ['wawi-artikelstammdaten-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getVerpackungsvorschriftenFormFields(),\r\n      validationSchema: VerpackungsvorschriftenSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-etiketten-form',\r\n      metadata: {\r\n        id: 'wawi-etiketten-form',\r\n        name: 'Etiketten-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Etiketten',\r\n        tags: ['wawi', 'etiketten', 'warehouse'],\r\n        dependencies: ['wawi-artikelstammdaten-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getEtikettenFormFields(),\r\n      validationSchema: EtikettenSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'medium',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-un-nummern-form',\r\n      metadata: {\r\n        id: 'wawi-un-nummern-form',\r\n        name: 'UN-Nummern-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für UN-Nummern',\r\n        tags: ['wawi', 'un-nummern', 'gefahrgut', 'warehouse'],\r\n        dependencies: [],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getUNNummernFormFields(),\r\n      validationSchema: UNNummernSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'medium',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-adr-konformitaet-form',\r\n      metadata: {\r\n        id: 'wawi-adr-konformitaet-form',\r\n        name: 'ADR-Konformität-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für ADR-Konformität',\r\n        tags: ['wawi', 'adr', 'konformitaet', 'gefahrgut', 'warehouse'],\r\n        dependencies: ['wawi-artikelstammdaten-form', 'wawi-un-nummern-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getADRKonformitaetFormFields(),\r\n      validationSchema: ADRKonformitaetSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'medium',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    // Inventur & Umlagerung\r\n    this.registerForm({\r\n      id: 'wawi-inventurerfassung-form',\r\n      metadata: {\r\n        id: 'wawi-inventurerfassung-form',\r\n        name: 'Inventurerfassung-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Inventurerfassung',\r\n        tags: ['wawi', 'inventur', 'erfassung', 'warehouse'],\r\n        dependencies: ['wawi-inventur-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getInventurerfassungFormFields(),\r\n      validationSchema: InventurerfassungSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-differenzkontrolle-form',\r\n      metadata: {\r\n        id: 'wawi-differenzkontrolle-form',\r\n        name: 'Differenzkontrolle-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Differenzkontrolle',\r\n        tags: ['wawi', 'differenz', 'kontrolle', 'warehouse'],\r\n        dependencies: ['wawi-inventur-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getDifferenzkontrolleFormFields(),\r\n      validationSchema: DifferenzkontrolleSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-umlagerung-form',\r\n      metadata: {\r\n        id: 'wawi-umlagerung-form',\r\n        name: 'Umlagerung-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Umlagerungen',\r\n        tags: ['wawi', 'umlagerung', 'warehouse'],\r\n        dependencies: ['wawi-artikelstammdaten-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getUmlagerungFormFields(),\r\n      validationSchema: UmlagerungSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'medium',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    // Preis- & Rabattverwaltung\r\n    this.registerForm({\r\n      id: 'wawi-preislisten-form',\r\n      metadata: {\r\n        id: 'wawi-preislisten-form',\r\n        name: 'Preislisten-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Preislisten',\r\n        tags: ['wawi', 'preislisten', 'warehouse'],\r\n        dependencies: ['wawi-artikelstammdaten-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getPreislistenFormFields(),\r\n      validationSchema: PreislistenSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-aktionen-form',\r\n      metadata: {\r\n        id: 'wawi-aktionen-form',\r\n        name: 'Aktionen-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Aktionen',\r\n        tags: ['wawi', 'aktionen', 'warehouse'],\r\n        dependencies: ['wawi-artikelstammdaten-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getAktionenFormFields(),\r\n      validationSchema: AktionenSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-staffelpreise-form',\r\n      metadata: {\r\n        id: 'wawi-staffelpreise-form',\r\n        name: 'Staffelpreise-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Staffelpreise',\r\n        tags: ['wawi', 'staffelpreise', 'warehouse'],\r\n        dependencies: ['wawi-artikelstammdaten-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getStaffelpreiseFormFields(),\r\n      validationSchema: StaffelpreiseSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n\r\n    this.registerForm({\r\n      id: 'wawi-rabattsysteme-form',\r\n      metadata: {\r\n        id: 'wawi-rabattsysteme-form',\r\n        name: 'Rabattsysteme-Formular',\r\n        module: FORM_MODULES.WAREHOUSE,\r\n        version: '1.0.0',\r\n        status: FORM_STATUSES.ACTIVE,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        createdBy: 'system',\r\n        updatedBy: 'system',\r\n        description: 'Formular für Rabattsysteme',\r\n        tags: ['wawi', 'rabattsysteme', 'warehouse'],\r\n        dependencies: ['wawi-artikelstammdaten-form'],\r\n        permissions: this.getDefaultPermissions(),\r\n      },\r\n      fields: this.getRabattsystemeFormFields(),\r\n      validationSchema: RabattsystemeSchema,\r\n      defaultValues: {},\r\n      layout: 'grid',\r\n      size: 'large',\r\n      features: this.getDefaultFeatures(),\r\n    });\r\n  }\r\n\r\n  // ============================================================================\r\n  // FORMULAR-FELDER DEFINITIONEN\r\n  // ============================================================================\r\n\r\n  private getPersonalFormFields(): FormField[] {\r\n    return [\r\n      {\r\n        name: 'employeeNumber',\r\n        label: 'Mitarbeiternummer',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'grunddaten',\r\n        helpText: 'Eindeutige Mitarbeiternummer',\r\n        validation: { required: true, pattern: /^[A-Z]{2}\\d{4}$/ },\r\n      },\r\n      {\r\n        name: 'firstName',\r\n        label: 'Vorname',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'grunddaten',\r\n        validation: { required: true, min: 2 },\r\n      },\r\n      {\r\n        name: 'lastName',\r\n        label: 'Nachname',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'grunddaten',\r\n        validation: { required: true, min: 2 },\r\n      },\r\n      {\r\n        name: 'email',\r\n        label: 'E-Mail',\r\n        type: 'email' as const,\r\n        required: true,\r\n        group: 'kontakt',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'phone',\r\n        label: 'Telefon',\r\n        type: 'text' as const,\r\n        group: 'kontakt',\r\n        validation: { pattern: /^[\\+]?[0-9\\s\\-\\(\\)]+$/ },\r\n      },\r\n      {\r\n        name: 'department',\r\n        label: 'Abteilung',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'position',\r\n        options: [\r\n          { value: 'hr', label: 'Personal' },\r\n          { value: 'finance', label: 'Finanzen' },\r\n          { value: 'warehouse', label: 'Lager' },\r\n          { value: 'sales', label: 'Vertrieb' },\r\n          { value: 'it', label: 'IT' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'position',\r\n        label: 'Position',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'position',\r\n        validation: { required: true, min: 2 },\r\n      },\r\n      {\r\n        name: 'hireDate',\r\n        label: 'Einstellungsdatum',\r\n        type: 'date' as const,\r\n        required: true,\r\n        group: 'position',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'salary',\r\n        label: 'Gehalt',\r\n        type: 'number' as const,\r\n        group: 'finanzen',\r\n        validation: { min: 0 },\r\n      },\r\n      {\r\n        name: 'status',\r\n        label: 'Status',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'status',\r\n        options: [\r\n          { value: 'active', label: 'Aktiv' },\r\n          { value: 'inactive', label: 'Inaktiv' },\r\n          { value: 'terminated', label: 'Gekündigt' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'notes',\r\n        label: 'Notizen',\r\n        type: 'textarea' as const,\r\n        group: 'zusätzlich',\r\n      },\r\n    ];\r\n  }\r\n\r\n  private getWarehouseFormFields(): FormField[] {\r\n    return [\r\n      {\r\n        name: 'articleNumber',\r\n        label: 'Artikelnummer',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'grunddaten',\r\n        barcodeScanner: true,\r\n        validation: { required: true, min: 3 },\r\n      },\r\n      {\r\n        name: 'name',\r\n        label: 'Artikelname',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'grunddaten',\r\n        validation: { required: true, min: 2 },\r\n      },\r\n      {\r\n        name: 'description',\r\n        label: 'Beschreibung',\r\n        type: 'textarea' as const,\r\n        group: 'grunddaten',\r\n      },\r\n      {\r\n        name: 'category',\r\n        label: 'Kategorie',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'klassifizierung',\r\n        options: [\r\n          { value: 'electronics', label: 'Elektronik' },\r\n          { value: 'clothing', label: 'Kleidung' },\r\n          { value: 'books', label: 'Bücher' },\r\n          { value: 'tools', label: 'Werkzeuge' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'unit',\r\n        label: 'Einheit',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'grunddaten',\r\n        options: [\r\n          { value: 'piece', label: 'Stück' },\r\n          { value: 'kg', label: 'Kilogramm' },\r\n          { value: 'liter', label: 'Liter' },\r\n          { value: 'meter', label: 'Meter' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'purchasePrice',\r\n        label: 'Einkaufspreis',\r\n        type: 'currency' as const,\r\n        required: true,\r\n        group: 'preise',\r\n        validation: { required: true, min: 0 },\r\n      },\r\n      {\r\n        name: 'sellingPrice',\r\n        label: 'Verkaufspreis',\r\n        type: 'currency' as const,\r\n        required: true,\r\n        group: 'preise',\r\n        validation: { required: true, min: 0 },\r\n      },\r\n      {\r\n        name: 'stockQuantity',\r\n        label: 'Lagerbestand',\r\n        type: 'number' as const,\r\n        required: true,\r\n        group: 'lager',\r\n        validation: { required: true, min: 0 },\r\n      },\r\n      {\r\n        name: 'minStockLevel',\r\n        label: 'Mindestbestand',\r\n        type: 'number' as const,\r\n        required: true,\r\n        group: 'lager',\r\n        validation: { required: true, min: 0 },\r\n      },\r\n      {\r\n        name: 'maxStockLevel',\r\n        label: 'Maximalbestand',\r\n        type: 'number' as const,\r\n        required: true,\r\n        group: 'lager',\r\n        validation: { required: true, min: 0 },\r\n      },\r\n      {\r\n        name: 'location',\r\n        label: 'Lagerplatz',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'lager',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'supplierId',\r\n        label: 'Lieferant',\r\n        type: 'select' as const,\r\n        group: 'lieferant',\r\n        options: [\r\n          { value: 'supplier1', label: 'Lieferant 1' },\r\n          { value: 'supplier2', label: 'Lieferant 2' },\r\n        ],\r\n      },\r\n      {\r\n        name: 'barcode',\r\n        label: 'Barcode',\r\n        type: 'barcode' as const,\r\n        group: 'identifikation',\r\n      },\r\n      {\r\n        name: 'expiryDate',\r\n        label: 'Verfallsdatum',\r\n        type: 'date' as const,\r\n        group: 'qualität',\r\n      },\r\n      {\r\n        name: 'status',\r\n        label: 'Status',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'status',\r\n        options: [\r\n          { value: 'active', label: 'Aktiv' },\r\n          { value: 'inactive', label: 'Inaktiv' },\r\n          { value: 'discontinued', label: 'Eingestellt' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n    ];\r\n  }\r\n\r\n  private getCustomerFormFields(): FormField[] {\r\n    return [\r\n      {\r\n        name: 'customerNumber',\r\n        label: 'Kundennummer',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'grunddaten',\r\n        validation: { required: true, pattern: /^[A-Z]{2}\\d{4}$/ },\r\n      },\r\n      {\r\n        name: 'name',\r\n        label: 'Name',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'grunddaten',\r\n        validation: { required: true, min: 2 },\r\n      },\r\n      {\r\n        name: 'email',\r\n        label: 'E-Mail',\r\n        type: 'email' as const,\r\n        required: true,\r\n        group: 'kontakt',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'phone',\r\n        label: 'Telefon',\r\n        type: 'text' as const,\r\n        group: 'kontakt',\r\n        validation: { pattern: /^[\\+]?[0-9\\s\\-\\(\\)]+$/ },\r\n      },\r\n      {\r\n        name: 'address',\r\n        label: 'Adresse',\r\n        type: 'textarea' as const,\r\n        required: true,\r\n        group: 'adresse',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'postalCode',\r\n        label: 'PLZ',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'adresse',\r\n        validation: { required: true, pattern: /^\\d{5}$/ },\r\n      },\r\n      {\r\n        name: 'city',\r\n        label: 'Stadt',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'adresse',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'country',\r\n        label: 'Land',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'adresse',\r\n        options: [\r\n          { value: 'DE', label: 'Deutschland' },\r\n          { value: 'AT', label: 'Österreich' },\r\n          { value: 'CH', label: 'Schweiz' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'customerType',\r\n        label: 'Kundentyp',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'klassifizierung',\r\n        options: [\r\n          { value: 'private', label: 'Privat' },\r\n          { value: 'business', label: 'Geschäft' },\r\n          { value: 'wholesale', label: 'Großhandel' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'creditLimit',\r\n        label: 'Kreditlimit',\r\n        type: 'currency' as const,\r\n        group: 'finanzen',\r\n        validation: { min: 0 },\r\n      },\r\n      {\r\n        name: 'paymentTerms',\r\n        label: 'Zahlungsbedingungen',\r\n        type: 'text' as const,\r\n        group: 'finanzen',\r\n      },\r\n      {\r\n        name: 'salesRepId',\r\n        label: 'Vertriebsmitarbeiter',\r\n        type: 'select' as const,\r\n        group: 'vertrieb',\r\n        options: [\r\n          { value: 'rep1', label: 'Vertriebler 1' },\r\n          { value: 'rep2', label: 'Vertriebler 2' },\r\n        ],\r\n      },\r\n      {\r\n        name: 'status',\r\n        label: 'Status',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'status',\r\n        options: [\r\n          { value: 'active', label: 'Aktiv' },\r\n          { value: 'inactive', label: 'Inaktiv' },\r\n          { value: 'blocked', label: 'Gesperrt' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'notes',\r\n        label: 'Notizen',\r\n        type: 'textarea' as const,\r\n        group: 'zusätzlich',\r\n      },\r\n    ];\r\n  }\r\n\r\n  private getInvoiceFormFields(): FormField[] {\r\n    return [\r\n      {\r\n        name: 'invoiceNumber',\r\n        label: 'Rechnungsnummer',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'grunddaten',\r\n        validation: { required: true, pattern: /^INV-\\d{6}$/ },\r\n      },\r\n      {\r\n        name: 'customerId',\r\n        label: 'Kunde',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'kunde',\r\n        options: [\r\n          { value: 'customer1', label: 'Kunde 1' },\r\n          { value: 'customer2', label: 'Kunde 2' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'invoiceDate',\r\n        label: 'Rechnungsdatum',\r\n        type: 'date' as const,\r\n        required: true,\r\n        group: 'datum',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'dueDate',\r\n        label: 'Fälligkeitsdatum',\r\n        type: 'date' as const,\r\n        required: true,\r\n        group: 'datum',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'paymentStatus',\r\n        label: 'Zahlungsstatus',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'zahlung',\r\n        options: [\r\n          { value: 'pending', label: 'Ausstehend' },\r\n          { value: 'paid', label: 'Bezahlt' },\r\n          { value: 'overdue', label: 'Überfällig' },\r\n          { value: 'cancelled', label: 'Storniert' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'paymentMethod',\r\n        label: 'Zahlungsmethode',\r\n        type: 'select' as const,\r\n        group: 'zahlung',\r\n        options: [\r\n          { value: 'bank_transfer', label: 'Banküberweisung' },\r\n          { value: 'credit_card', label: 'Kreditkarte' },\r\n          { value: 'cash', label: 'Bargeld' },\r\n        ],\r\n      },\r\n      {\r\n        name: 'notes',\r\n        label: 'Notizen',\r\n        type: 'textarea' as const,\r\n        group: 'zusätzlich',\r\n      },\r\n    ];\r\n  }\r\n\r\n  private getSupplierFormFields(): FormField[] {\r\n    return [\r\n      {\r\n        name: 'supplierNumber',\r\n        label: 'Lieferantennummer',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'grunddaten',\r\n        validation: { required: true, pattern: /^[A-Z]{2}\\d{4}$/ },\r\n      },\r\n      {\r\n        name: 'name',\r\n        label: 'Name',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'grunddaten',\r\n        validation: { required: true, min: 2 },\r\n      },\r\n      {\r\n        name: 'contactPerson',\r\n        label: 'Ansprechpartner',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'kontakt',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'email',\r\n        label: 'E-Mail',\r\n        type: 'email' as const,\r\n        required: true,\r\n        group: 'kontakt',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'phone',\r\n        label: 'Telefon',\r\n        type: 'text' as const,\r\n        group: 'kontakt',\r\n        validation: { pattern: /^[\\+]?[0-9\\s\\-\\(\\)]+$/ },\r\n      },\r\n      {\r\n        name: 'address',\r\n        label: 'Adresse',\r\n        type: 'textarea' as const,\r\n        required: true,\r\n        group: 'adresse',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'postalCode',\r\n        label: 'PLZ',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'adresse',\r\n        validation: { required: true, pattern: /^\\d{5}$/ },\r\n      },\r\n      {\r\n        name: 'city',\r\n        label: 'Stadt',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'adresse',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'country',\r\n        label: 'Land',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'adresse',\r\n        options: [\r\n          { value: 'DE', label: 'Deutschland' },\r\n          { value: 'AT', label: 'Österreich' },\r\n          { value: 'CH', label: 'Schweiz' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'paymentTerms',\r\n        label: 'Zahlungsbedingungen',\r\n        type: 'text' as const,\r\n        group: 'finanzen',\r\n      },\r\n      {\r\n        name: 'creditLimit',\r\n        label: 'Kreditlimit',\r\n        type: 'currency' as const,\r\n        group: 'finanzen',\r\n        validation: { min: 0 },\r\n      },\r\n      {\r\n        name: 'rating',\r\n        label: 'Bewertung',\r\n        type: 'number' as const,\r\n        group: 'bewertung',\r\n        validation: { min: 1, max: 5 },\r\n      },\r\n      {\r\n        name: 'status',\r\n        label: 'Status',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'status',\r\n        options: [\r\n          { value: 'active', label: 'Aktiv' },\r\n          { value: 'inactive', label: 'Inaktiv' },\r\n          { value: 'blocked', label: 'Gesperrt' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'notes',\r\n        label: 'Notizen',\r\n        type: 'textarea' as const,\r\n        group: 'zusätzlich',\r\n      },\r\n    ];\r\n  }\r\n\r\n  private getOrderFormFields(): FormField[] {\r\n    return [\r\n      {\r\n        name: 'orderNumber',\r\n        label: 'Auftragsnummer',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'grunddaten',\r\n        validation: { required: true, pattern: /^ORD-\\d{6}$/ },\r\n      },\r\n      {\r\n        name: 'customerId',\r\n        label: 'Kunde',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'kunde',\r\n        options: [\r\n          { value: 'customer1', label: 'Kunde 1' },\r\n          { value: 'customer2', label: 'Kunde 2' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'orderDate',\r\n        label: 'Auftragsdatum',\r\n        type: 'date' as const,\r\n        required: true,\r\n        group: 'datum',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'deliveryDate',\r\n        label: 'Lieferdatum',\r\n        type: 'date' as const,\r\n        group: 'datum',\r\n      },\r\n      {\r\n        name: 'status',\r\n        label: 'Status',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'status',\r\n        options: [\r\n          { value: 'draft', label: 'Entwurf' },\r\n          { value: 'confirmed', label: 'Bestätigt' },\r\n          { value: 'shipped', label: 'Versendet' },\r\n          { value: 'delivered', label: 'Geliefert' },\r\n          { value: 'cancelled', label: 'Storniert' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'paymentStatus',\r\n        label: 'Zahlungsstatus',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'zahlung',\r\n        options: [\r\n          { value: 'pending', label: 'Ausstehend' },\r\n          { value: 'paid', label: 'Bezahlt' },\r\n          { value: 'partial', label: 'Teilweise' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'notes',\r\n        label: 'Notizen',\r\n        type: 'textarea' as const,\r\n        group: 'zusätzlich',\r\n      },\r\n    ];\r\n  }\r\n\r\n  // ============================================================================\r\n  // STANDARD-KONFIGURATIONEN\r\n  // ============================================================================\r\n\r\n  private getDefaultPermissions(): RolePermissions {\r\n    return {\r\n      super_admin: [FORM_PERMISSIONS.READ, FORM_PERMISSIONS.WRITE, FORM_PERMISSIONS.ADMIN, FORM_PERMISSIONS.DELETE],\r\n      admin: [FORM_PERMISSIONS.READ, FORM_PERMISSIONS.WRITE, FORM_PERMISSIONS.ADMIN],\r\n      manager: [FORM_PERMISSIONS.READ, FORM_PERMISSIONS.WRITE],\r\n      accountant: [FORM_PERMISSIONS.READ, FORM_PERMISSIONS.WRITE],\r\n      warehouse: [FORM_PERMISSIONS.READ, FORM_PERMISSIONS.WRITE],\r\n      sales: [FORM_PERMISSIONS.READ, FORM_PERMISSIONS.WRITE],\r\n      viewer: [FORM_PERMISSIONS.READ],\r\n    };\r\n  }\r\n\r\n  private getDefaultFeatures() {\r\n    return {\r\n      autoSave: true,\r\n      autoSaveInterval: 30000,\r\n      keyboardShortcuts: true,\r\n      barcodeScanner: true,\r\n      progressBar: true,\r\n      conditionalFields: true,\r\n      groupedFields: true,\r\n      realTimeValidation: true,\r\n      accessibility: true,\r\n      mobileOptimized: true,\r\n      offlineSupport: false,\r\n      bulkOperations: false,\r\n      printSupport: true,\r\n      exportSupport: true,\r\n    };\r\n  }\r\n\r\n  // ============================================================================\r\n  // FORMULAR-REGISTRIERUNG\r\n  // ============================================================================\r\n\r\n  public registerForm(config: FormConfig): void {\r\n    this.registry.forms[config.id] = config;\r\n    this.registry.metadata[config.id] = config.metadata;\r\n    this.registry.permissions[config.id] = config.metadata.permissions;\r\n    this.registry.versions[config.id] = [config.metadata.version];\r\n    \r\n    // Version-Historie initialisieren\r\n    this.versionHistory.set(config.id, [{\r\n      formId: config.id,\r\n      version: config.metadata.version,\r\n      changes: ['Initiale Version'],\r\n      author: config.metadata.createdBy,\r\n      timestamp: config.metadata.createdAt,\r\n      status: 'approved',\r\n    }]);\r\n  }\r\n\r\n  public getForm(formId: FormID): FormConfig | null {\r\n    return this.registry.forms[formId] || null;\r\n  }\r\n\r\n  public getAllForms(): FormConfig[] {\r\n    return Object.values(this.registry.forms);\r\n  }\r\n\r\n  public getFormsByModule(module: string): FormConfig[] {\r\n    return Object.values(this.registry.forms).filter(\r\n      form => form.metadata.module === module\r\n    );\r\n  }\r\n\r\n  // ============================================================================\r\n  // VERSIONIERUNG\r\n  // ============================================================================\r\n\r\n  public createNewVersion(formId: FormID, version: FormVersion, changes: string[], author: string): void {\r\n    const form = this.getForm(formId);\r\n    if (!form) {\r\n      throw new Error(`Formular ${formId} nicht gefunden`);\r\n    }\r\n\r\n    // Neue Version zur Historie hinzufügen\r\n    const history = this.versionHistory.get(formId) || [];\r\n    history.push({\r\n      formId,\r\n      version,\r\n      changes,\r\n      author,\r\n      timestamp: new Date(),\r\n      status: 'draft',\r\n    });\r\n    this.versionHistory.set(formId, history);\r\n\r\n    // Version zur Registry hinzufügen\r\n    this.registry.versions[formId].push(version);\r\n  }\r\n\r\n  public getVersionHistory(formId: FormID): FormVersionHistory[] {\r\n    return this.versionHistory.get(formId) || [];\r\n  }\r\n\r\n  public approveVersion(formId: FormID, version: FormVersion, approvedBy: string): void {\r\n    const history = this.versionHistory.get(formId);\r\n    if (history) {\r\n      const versionEntry = history.find(h => h.version === version);\r\n      if (versionEntry) {\r\n        versionEntry.status = 'approved';\r\n        versionEntry.approvedBy = approvedBy;\r\n      }\r\n    }\r\n  }\r\n\r\n  // ============================================================================\r\n  // ÄNDERUNGSANFRAGEN\r\n  // ============================================================================\r\n\r\n  public createChangeRequest(\r\n    formId: FormID,\r\n    requestedBy: string,\r\n    changes: FormChange[],\r\n    comments?: string\r\n  ): string {\r\n    const requestId = `cr_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    const changeRequest: FormChangeRequest = {\r\n      id: requestId,\r\n      formId,\r\n      requestedBy,\r\n      requestedAt: new Date(),\r\n      changes,\r\n      status: 'pending',\r\n      comments,\r\n    };\r\n\r\n    this.changeRequests.set(requestId, changeRequest);\r\n    return requestId;\r\n  }\r\n\r\n  public getChangeRequest(requestId: string): FormChangeRequest | null {\r\n    return this.changeRequests.get(requestId) || null;\r\n  }\r\n\r\n  public getAllChangeRequests(): FormChangeRequest[] {\r\n    return Array.from(this.changeRequests.values());\r\n  }\r\n\r\n  public approveChangeRequest(requestId: string, reviewedBy: string, comments?: string): void {\r\n    const request = this.changeRequests.get(requestId);\r\n    if (request) {\r\n      request.status = 'approved';\r\n      request.reviewedBy = reviewedBy;\r\n      request.reviewedAt = new Date();\r\n      request.comments = comments;\r\n    }\r\n  }\r\n\r\n  public rejectChangeRequest(requestId: string, reviewedBy: string, comments?: string): void {\r\n    const request = this.changeRequests.get(requestId);\r\n    if (request) {\r\n      request.status = 'rejected';\r\n      request.reviewedBy = reviewedBy;\r\n      request.reviewedAt = new Date();\r\n      request.comments = comments;\r\n    }\r\n  }\r\n\r\n  // ============================================================================\r\n  // BERECHTIGUNGEN\r\n  // ============================================================================\r\n\r\n  public hasPermission(formId: FormID, role: string, permission: FormPermission): boolean {\r\n    const formPermissions = this.registry.permissions[formId];\r\n    if (!formPermissions) return false;\r\n\r\n    const rolePermissions = formPermissions[role as keyof RolePermissions];\r\n    if (!rolePermissions) return false;\r\n\r\n    return rolePermissions.includes(permission);\r\n  }\r\n\r\n  public updatePermissions(formId: FormID, permissions: RolePermissions, updatedBy: string): void {\r\n    this.registry.permissions[formId] = permissions;\r\n    \r\n    // Metadata aktualisieren\r\n    const metadata = this.registry.metadata[formId];\r\n    if (metadata) {\r\n      metadata.permissions = permissions;\r\n      metadata.updatedAt = new Date();\r\n      metadata.updatedBy = updatedBy;\r\n    }\r\n  }\r\n\r\n  public getFormPermissions(formId: FormID): RolePermissions | null {\r\n    return this.registry.permissions[formId] || null;\r\n  }\r\n\r\n  // ============================================================================\r\n  // EXPORT UND IMPORT\r\n  // ============================================================================\r\n\r\n  public exportRegistry(): FormRegistry {\r\n    return JSON.parse(JSON.stringify(this.registry));\r\n  }\r\n\r\n  public importRegistry(registry: FormRegistry): void {\r\n    this.registry = registry;\r\n  }\r\n\r\n  public exportVersionHistory(): Map<FormID, FormVersionHistory[]> {\r\n    return new Map(this.versionHistory);\r\n  }\r\n\r\n  public importVersionHistory(history: Map<FormID, FormVersionHistory[]>): void {\r\n    this.versionHistory = history;\r\n  }\r\n\r\n  // ============================================================================\r\n  // STATISTIKEN UND METRIKEN\r\n  // ============================================================================\r\n\r\n  public getFormStatistics() {\r\n    const forms = this.getAllForms();\r\n    const modules = new Map<string, number>();\r\n    const statuses = new Map<string, number>();\r\n    const versions = new Map<string, number>();\r\n\r\n    forms.forEach(form => {\r\n      // Module zählen\r\n      const moduleCount = modules.get(form.metadata.module) || 0;\r\n      modules.set(form.metadata.module, moduleCount + 1);\r\n\r\n      // Status zählen\r\n      const statusCount = statuses.get(form.metadata.status) || 0;\r\n      statuses.set(form.metadata.status, statusCount + 1);\r\n\r\n      // Versionen zählen\r\n      const versionCount = versions.get(form.metadata.version) || 0;\r\n      versions.set(form.metadata.version, versionCount + 1);\r\n    });\r\n\r\n    return {\r\n      totalForms: forms.length,\r\n      byModule: Object.fromEntries(modules),\r\n      byStatus: Object.fromEntries(statuses),\r\n      byVersion: Object.fromEntries(versions),\r\n      changeRequests: this.getAllChangeRequests().length,\r\n      pendingRequests: this.getAllChangeRequests().filter(cr => cr.status === 'pending').length,\r\n    };\r\n  }\r\n\r\n  public getFormTable(): Array<{\r\n    id: FormID;\r\n    name: string;\r\n    module: string;\r\n    version: FormVersion;\r\n    status: FormStatus;\r\n    permissions: RolePermissions;\r\n    lastUpdated: Date;\r\n  }> {\r\n    return Object.values(this.registry.forms).map(form => ({\r\n      id: form.id,\r\n      name: form.metadata.name,\r\n      module: form.metadata.module,\r\n      version: form.metadata.version,\r\n      status: form.metadata.status,\r\n      permissions: form.metadata.permissions,\r\n      lastUpdated: form.metadata.updatedAt,\r\n    }));\r\n  }\r\n\r\n  private getBedarfsermittlungFormFields(): FormField[] {\r\n    return [\r\n      {\r\n        name: 'ermittlungsnummer',\r\n        label: 'Ermittlungsnummer',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'grunddaten',\r\n        validation: { required: true, pattern: /^BED-\\d{6}$/ },\r\n      },\r\n      {\r\n        name: 'artikelId',\r\n        label: 'Artikel',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'artikel',\r\n        options: [\r\n          { value: 'artikel1', label: 'Artikel 1' },\r\n          { value: 'artikel2', label: 'Artikel 2' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'varianteId',\r\n        label: 'Variante',\r\n        type: 'select' as const,\r\n        group: 'artikel',\r\n        options: [\r\n          { value: 'variante1', label: 'Variante 1' },\r\n          { value: 'variante2', label: 'Variante 2' },\r\n        ],\r\n      },\r\n      {\r\n        name: 'periode',\r\n        label: 'Periode',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'zeitraum',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'verbrauchsmenge',\r\n        label: 'Verbrauchsmenge',\r\n        type: 'number' as const,\r\n        required: true,\r\n        group: 'verbrauch',\r\n        validation: { required: true, min: 0 },\r\n      },\r\n      {\r\n        name: 'einheit',\r\n        label: 'Einheit',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'verbrauch',\r\n        options: [\r\n          { value: 'kg', label: 'Kilogramm' },\r\n          { value: 'l', label: 'Liter' },\r\n          { value: 'stk', label: 'Stück' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'verbrauchsart',\r\n        label: 'Verbrauchsart',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'verbrauch',\r\n        options: [\r\n          { value: 'verbrauch', label: 'Verbrauch' },\r\n          { value: 'verkauf', label: 'Verkauf' },\r\n          { value: 'produktion', label: 'Produktion' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'bedarfsmenge',\r\n        label: 'Bedarfsmenge',\r\n        type: 'number' as const,\r\n        required: true,\r\n        group: 'bedarf',\r\n        validation: { required: true, min: 0 },\r\n      },\r\n      {\r\n        name: 'sicherheitsbestand',\r\n        label: 'Sicherheitsbestand',\r\n        type: 'number' as const,\r\n        required: true,\r\n        group: 'bedarf',\r\n        validation: { required: true, min: 0 },\r\n      },\r\n      {\r\n        name: 'bestellpunkt',\r\n        label: 'Bestellpunkt',\r\n        type: 'number' as const,\r\n        required: true,\r\n        group: 'bedarf',\r\n        validation: { required: true, min: 0 },\r\n      },\r\n      {\r\n        name: 'empfohleneBestellmenge',\r\n        label: 'Empfohlene Bestellmenge',\r\n        type: 'number' as const,\r\n        required: true,\r\n        group: 'bedarf',\r\n        validation: { required: true, min: 0 },\r\n      },\r\n      {\r\n        name: 'lieferantId',\r\n        label: 'Lieferant',\r\n        type: 'select' as const,\r\n        group: 'lieferant',\r\n        options: [\r\n          { value: 'lieferant1', label: 'Lieferant 1' },\r\n          { value: 'lieferant2', label: 'Lieferant 2' },\r\n        ],\r\n      },\r\n      {\r\n        name: 'lieferzeit',\r\n        label: 'Lieferzeit (Tage)',\r\n        type: 'number' as const,\r\n        group: 'lieferant',\r\n        validation: { min: 0 },\r\n      },\r\n      {\r\n        name: 'notizen',\r\n        label: 'Notizen',\r\n        type: 'textarea' as const,\r\n        group: 'zusätzlich',\r\n      },\r\n    ];\r\n  }\r\n\r\n  private getAnfrageFormFields(): FormField[] {\r\n    return [\r\n      {\r\n        name: 'anfragenummer',\r\n        label: 'Anfragenummer',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'grunddaten',\r\n        validation: { required: true, pattern: /^ANF-\\d{6}$/ },\r\n      },\r\n      {\r\n        name: 'lieferantId',\r\n        label: 'Lieferant',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'lieferant',\r\n        options: [\r\n          { value: 'lieferant1', label: 'Lieferant 1' },\r\n          { value: 'lieferant2', label: 'Lieferant 2' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'anfragedatum',\r\n        label: 'Anfragedatum',\r\n        type: 'date' as const,\r\n        required: true,\r\n        group: 'datum',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'gueltigBis',\r\n        label: 'Gültig bis',\r\n        type: 'date' as const,\r\n        required: true,\r\n        group: 'datum',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'status',\r\n        label: 'Status',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'status',\r\n        options: [\r\n          { value: 'entwurf', label: 'Entwurf' },\r\n          { value: 'versendet', label: 'Versendet' },\r\n          { value: 'beantwortet', label: 'Beantwortet' },\r\n          { value: 'abgeschlossen', label: 'Abgeschlossen' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'notizen',\r\n        label: 'Notizen',\r\n        type: 'textarea' as const,\r\n        group: 'zusätzlich',\r\n      },\r\n    ];\r\n  }\r\n\r\n  private getBestellungFormFields(): FormField[] {\r\n    return [\r\n      {\r\n        name: 'bestellnummer',\r\n        label: 'Bestellnummer',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'grunddaten',\r\n        validation: { required: true, pattern: /^BES-\\d{6}$/ },\r\n      },\r\n      {\r\n        name: 'lieferantId',\r\n        label: 'Lieferant',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'lieferant',\r\n        options: [\r\n          { value: 'lieferant1', label: 'Lieferant 1' },\r\n          { value: 'lieferant2', label: 'Lieferant 2' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'bestelldatum',\r\n        label: 'Bestelldatum',\r\n        type: 'date' as const,\r\n        required: true,\r\n        group: 'datum',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'erwartetesLieferdatum',\r\n        label: 'Erwartetes Lieferdatum',\r\n        type: 'date' as const,\r\n        required: true,\r\n        group: 'datum',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'gesamtbetrag',\r\n        label: 'Gesamtbetrag',\r\n        type: 'currency' as const,\r\n        required: true,\r\n        group: 'finanzen',\r\n        validation: { required: true, min: 0 },\r\n      },\r\n      {\r\n        name: 'waehrung',\r\n        label: 'Währung',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'finanzen',\r\n        options: [\r\n          { value: 'EUR', label: 'Euro' },\r\n          { value: 'USD', label: 'US Dollar' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'zahlungsbedingungen',\r\n        label: 'Zahlungsbedingungen',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'finanzen',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'lieferbedingungen',\r\n        label: 'Lieferbedingungen',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'lieferung',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'status',\r\n        label: 'Status',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'status',\r\n        options: [\r\n          { value: 'entwurf', label: 'Entwurf' },\r\n          { value: 'versendet', label: 'Versendet' },\r\n          { value: 'bestaetigt', label: 'Bestätigt' },\r\n          { value: 'teilweise_geliefert', label: 'Teilweise geliefert' },\r\n          { value: 'vollstaendig_geliefert', label: 'Vollständig geliefert' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'notizen',\r\n        label: 'Notizen',\r\n        type: 'textarea' as const,\r\n        group: 'zusätzlich',\r\n      },\r\n    ];\r\n  }\r\n\r\n  private getAuftragsbestaetigungFormFields(): FormField[] {\r\n    return [\r\n      {\r\n        name: 'bestaetigungsnummer',\r\n        label: 'Bestätigungsnummer',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'grunddaten',\r\n        validation: { required: true, pattern: /^ABC-\\d{6}$/ },\r\n      },\r\n      {\r\n        name: 'bestellungId',\r\n        label: 'Bestellung',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'bestellung',\r\n        options: [\r\n          { value: 'bestellung1', label: 'Bestellung 1' },\r\n          { value: 'bestellung2', label: 'Bestellung 2' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'lieferantId',\r\n        label: 'Lieferant',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'lieferant',\r\n        options: [\r\n          { value: 'lieferant1', label: 'Lieferant 1' },\r\n          { value: 'lieferant2', label: 'Lieferant 2' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'bestaetigungsdatum',\r\n        label: 'Bestätigungsdatum',\r\n        type: 'date' as const,\r\n        required: true,\r\n        group: 'datum',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'bestaetigterLiefertermin',\r\n        label: 'Bestätigter Liefertermin',\r\n        type: 'date' as const,\r\n        required: true,\r\n        group: 'datum',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'status',\r\n        label: 'Status',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'status',\r\n        options: [\r\n          { value: 'bestaetigt', label: 'Bestätigt' },\r\n          { value: 'teilweise_bestaetigt', label: 'Teilweise bestätigt' },\r\n          { value: 'abgelehnt', label: 'Abgelehnt' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'notizen',\r\n        label: 'Notizen',\r\n        type: 'textarea' as const,\r\n        group: 'zusätzlich',\r\n      },\r\n    ];\r\n  }\r\n\r\n  private getAuftragsbearbeitungFormFields(): FormField[] {\r\n    return [\r\n      {\r\n        name: 'auftragsnummer',\r\n        label: 'Auftragsnummer',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'grunddaten',\r\n        validation: { required: true, pattern: /^AUB-\\d{6}$/ },\r\n      },\r\n      {\r\n        name: 'kundeId',\r\n        label: 'Kunde',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'kunde',\r\n        options: [\r\n          { value: 'kunde1', label: 'Kunde 1' },\r\n          { value: 'kunde2', label: 'Kunde 2' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'auftragsdatum',\r\n        label: 'Auftragsdatum',\r\n        type: 'date' as const,\r\n        required: true,\r\n        group: 'datum',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'gewuenschterLiefertermin',\r\n        label: 'Gewünschter Liefertermin',\r\n        type: 'date' as const,\r\n        required: true,\r\n        group: 'datum',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'bestaetigterLiefertermin',\r\n        label: 'Bestätigter Liefertermin',\r\n        type: 'date' as const,\r\n        group: 'datum',\r\n      },\r\n      {\r\n        name: 'gesamtbetrag',\r\n        label: 'Gesamtbetrag',\r\n        type: 'currency' as const,\r\n        required: true,\r\n        group: 'finanzen',\r\n        validation: { required: true, min: 0 },\r\n      },\r\n      {\r\n        name: 'waehrung',\r\n        label: 'Währung',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'finanzen',\r\n        options: [\r\n          { value: 'EUR', label: 'Euro' },\r\n          { value: 'USD', label: 'US Dollar' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'status',\r\n        label: 'Status',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'status',\r\n        options: [\r\n          { value: 'eingegangen', label: 'Eingegangen' },\r\n          { value: 'bestaetigt', label: 'Bestätigt' },\r\n          { value: 'in_bearbeitung', label: 'In Bearbeitung' },\r\n          { value: 'kommissioniert', label: 'Kommissioniert' },\r\n          { value: 'versandbereit', label: 'Versandbereit' },\r\n          { value: 'versendet', label: 'Versendet' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'prioritaet',\r\n        label: 'Priorität',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'priorität',\r\n        options: [\r\n          { value: 'niedrig', label: 'Niedrig' },\r\n          { value: 'normal', label: 'Normal' },\r\n          { value: 'hoch', label: 'Hoch' },\r\n          { value: 'dringend', label: 'Dringend' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'notizen',\r\n        label: 'Notizen',\r\n        type: 'textarea' as const,\r\n        group: 'zusätzlich',\r\n      },\r\n    ];\r\n  }\r\n\r\n  private getPacklisteFormFields(): FormField[] {\r\n    return [\r\n      {\r\n        name: 'packlistennummer',\r\n        label: 'Packlistennummer',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'grunddaten',\r\n        validation: { required: true, pattern: /^PAC-\\d{6}$/ },\r\n      },\r\n      {\r\n        name: 'auftragId',\r\n        label: 'Auftrag',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'auftrag',\r\n        options: [\r\n          { value: 'auftrag1', label: 'Auftrag 1' },\r\n          { value: 'auftrag2', label: 'Auftrag 2' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'kundeId',\r\n        label: 'Kunde',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'kunde',\r\n        options: [\r\n          { value: 'kunde1', label: 'Kunde 1' },\r\n          { value: 'kunde2', label: 'Kunde 2' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'packdatum',\r\n        label: 'Packdatum',\r\n        type: 'date' as const,\r\n        required: true,\r\n        group: 'datum',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'packerId',\r\n        label: 'Packer',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'personal',\r\n        options: [\r\n          { value: 'packer1', label: 'Packer 1' },\r\n          { value: 'packer2', label: 'Packer 2' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'gesamtgewicht',\r\n        label: 'Gesamtgewicht (kg)',\r\n        type: 'number' as const,\r\n        group: 'versand',\r\n        validation: { min: 0 },\r\n      },\r\n      {\r\n        name: 'gesamtvolumen',\r\n        label: 'Gesamtvolumen (m³)',\r\n        type: 'number' as const,\r\n        group: 'versand',\r\n        validation: { min: 0 },\r\n      },\r\n      {\r\n        name: 'anzahlPackstuecke',\r\n        label: 'Anzahl Packstücke',\r\n        type: 'number' as const,\r\n        required: true,\r\n        group: 'versand',\r\n        validation: { required: true, min: 1 },\r\n      },\r\n      {\r\n        name: 'status',\r\n        label: 'Status',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'status',\r\n        options: [\r\n          { value: 'in_bearbeitung', label: 'In Bearbeitung' },\r\n          { value: 'abgeschlossen', label: 'Abgeschlossen' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'notizen',\r\n        label: 'Notizen',\r\n        type: 'textarea' as const,\r\n        group: 'zusätzlich',\r\n      },\r\n    ];\r\n  }\r\n\r\n  private getVersandetikettierungFormFields(): FormField[] {\r\n    return [\r\n      {\r\n        name: 'etikettennummer',\r\n        label: 'Etikettennummer',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'grunddaten',\r\n        validation: { required: true, pattern: /^ETI-\\d{6}$/ },\r\n      },\r\n      {\r\n        name: 'packlisteId',\r\n        label: 'Packliste',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'packliste',\r\n        options: [\r\n          { value: 'packliste1', label: 'Packliste 1' },\r\n          { value: 'packliste2', label: 'Packliste 2' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'auftragId',\r\n        label: 'Auftrag',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'auftrag',\r\n        options: [\r\n          { value: 'auftrag1', label: 'Auftrag 1' },\r\n          { value: 'auftrag2', label: 'Auftrag 2' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'kundeId',\r\n        label: 'Kunde',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'kunde',\r\n        options: [\r\n          { value: 'kunde1', label: 'Kunde 1' },\r\n          { value: 'kunde2', label: 'Kunde 2' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'versandart',\r\n        label: 'Versandart',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'versand',\r\n        options: [\r\n          { value: 'standard', label: 'Standard' },\r\n          { value: 'express', label: 'Express' },\r\n          { value: 'spedition', label: 'Spedition' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'versanddienstleister',\r\n        label: 'Versanddienstleister',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'versand',\r\n        options: [\r\n          { value: 'dhl', label: 'DHL' },\r\n          { value: 'dpd', label: 'DPD' },\r\n          { value: 'hermes', label: 'Hermes' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'trackingnummer',\r\n        label: 'Trackingnummer',\r\n        type: 'text' as const,\r\n        group: 'versand',\r\n      },\r\n      {\r\n        name: 'status',\r\n        label: 'Status',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'status',\r\n        options: [\r\n          { value: 'erstellt', label: 'Erstellt' },\r\n          { value: 'gedruckt', label: 'Gedruckt' },\r\n          { value: 'versendet', label: 'Versendet' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'notizen',\r\n        label: 'Notizen',\r\n        type: 'textarea' as const,\r\n        group: 'zusätzlich',\r\n      },\r\n    ];\r\n  }\r\n\r\n  private getLogistikUebergabeFormFields(): FormField[] {\r\n    return [\r\n      {\r\n        name: 'uebergabenummer',\r\n        label: 'Übergabenummer',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'grunddaten',\r\n        validation: { required: true, pattern: /^UEG-\\d{6}$/ },\r\n      },\r\n      {\r\n        name: 'packlisteId',\r\n        label: 'Packliste',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'packliste',\r\n        options: [\r\n          { value: 'packliste1', label: 'Packliste 1' },\r\n          { value: 'packliste2', label: 'Packliste 2' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'auftragId',\r\n        label: 'Auftrag',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'auftrag',\r\n        options: [\r\n          { value: 'auftrag1', label: 'Auftrag 1' },\r\n          { value: 'auftrag2', label: 'Auftrag 2' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'uebergabedatum',\r\n        label: 'Übergabedatum',\r\n        type: 'date' as const,\r\n        required: true,\r\n        group: 'datum',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'uebergeberId',\r\n        label: 'Übergeber',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'personal',\r\n        options: [\r\n          { value: 'mitarbeiter1', label: 'Mitarbeiter 1' },\r\n          { value: 'mitarbeiter2', label: 'Mitarbeiter 2' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'empfaengerId',\r\n        label: 'Empfänger',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'personal',\r\n        options: [\r\n          { value: 'spediteur1', label: 'Spediteur 1' },\r\n          { value: 'spediteur2', label: 'Spediteur 2' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'versanddienstleister',\r\n        label: 'Versanddienstleister',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'versand',\r\n        options: [\r\n          { value: 'dhl', label: 'DHL' },\r\n          { value: 'dpd', label: 'DPD' },\r\n          { value: 'hermes', label: 'Hermes' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'trackingnummer',\r\n        label: 'Trackingnummer',\r\n        type: 'text' as const,\r\n        group: 'versand',\r\n      },\r\n      {\r\n        name: 'status',\r\n        label: 'Status',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'status',\r\n        options: [\r\n          { value: 'uebergeben', label: 'Übergeben' },\r\n          { value: 'in_transport', label: 'In Transport' },\r\n          { value: 'zugestellt', label: 'Zugestellt' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'notizen',\r\n        label: 'Notizen',\r\n        type: 'textarea' as const,\r\n        group: 'zusätzlich',\r\n      },\r\n    ];\r\n  }\r\n\r\n  private getMaterialbedarfsermittlungFormFields(): FormField[] {\r\n    return [\r\n      {\r\n        name: 'ermittlungsnummer',\r\n        label: 'Ermittlungsnummer',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'grunddaten',\r\n        validation: { required: true, pattern: /^MAT-\\d{6}$/ },\r\n      },\r\n      {\r\n        name: 'produktionsauftragId',\r\n        label: 'Produktionsauftrag',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'produktion',\r\n        options: [\r\n          { value: 'auftrag1', label: 'Auftrag 1' },\r\n          { value: 'auftrag2', label: 'Auftrag 2' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'stuecklisteId',\r\n        label: 'Stückliste',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'produktion',\r\n        options: [\r\n          { value: 'stueckliste1', label: 'Stückliste 1' },\r\n          { value: 'stueckliste2', label: 'Stückliste 2' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'ermittlungsdatum',\r\n        label: 'Ermittlungsdatum',\r\n        type: 'date' as const,\r\n        required: true,\r\n        group: 'datum',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'status',\r\n        label: 'Status',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'status',\r\n        options: [\r\n          { value: 'berechnet', label: 'Berechnet' },\r\n          { value: 'verfuegbarkeit_geprueft', label: 'Verfügbarkeit geprüft' },\r\n          { value: 'bestellung_erstellt', label: 'Bestellung erstellt' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'notizen',\r\n        label: 'Notizen',\r\n        type: 'textarea' as const,\r\n        group: 'zusätzlich',\r\n      },\r\n    ];\r\n  }\r\n\r\n  private getRueckverfolgungFormFields(): FormField[] {\r\n    return [\r\n      {\r\n        name: 'rueckverfolgungsnummer',\r\n        label: 'Rückverfolgungsnummer',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'grunddaten',\r\n        validation: { required: true, pattern: /^RUE-\\d{6}$/ },\r\n      },\r\n      {\r\n        name: 'artikelId',\r\n        label: 'Artikel',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'artikel',\r\n        options: [\r\n          { value: 'artikel1', label: 'Artikel 1' },\r\n          { value: 'artikel2', label: 'Artikel 2' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'varianteId',\r\n        label: 'Variante',\r\n        type: 'select' as const,\r\n        group: 'artikel',\r\n        options: [\r\n          { value: 'variante1', label: 'Variante 1' },\r\n          { value: 'variante2', label: 'Variante 2' },\r\n        ],\r\n      },\r\n      {\r\n        name: 'chargeId',\r\n        label: 'Charge',\r\n        type: 'select' as const,\r\n        group: 'artikel',\r\n        options: [\r\n          { value: 'charge1', label: 'Charge 1' },\r\n          { value: 'charge2', label: 'Charge 2' },\r\n        ],\r\n      },\r\n      {\r\n        name: 'seriennummer',\r\n        label: 'Seriennummer',\r\n        type: 'text' as const,\r\n        group: 'artikel',\r\n      },\r\n      {\r\n        name: 'herstellungsdatum',\r\n        label: 'Herstellungsdatum',\r\n        type: 'date' as const,\r\n        required: true,\r\n        group: 'datum',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'hersteller',\r\n        label: 'Hersteller',\r\n        type: 'text' as const,\r\n        group: 'hersteller',\r\n      },\r\n      {\r\n        name: 'lieferantId',\r\n        label: 'Lieferant',\r\n        type: 'select' as const,\r\n        group: 'lieferant',\r\n        options: [\r\n          { value: 'lieferant1', label: 'Lieferant 1' },\r\n          { value: 'lieferant2', label: 'Lieferant 2' },\r\n        ],\r\n      },\r\n      {\r\n        name: 'kundeId',\r\n        label: 'Kunde',\r\n        type: 'select' as const,\r\n        group: 'kunde',\r\n        options: [\r\n          { value: 'kunde1', label: 'Kunde 1' },\r\n          { value: 'kunde2', label: 'Kunde 2' },\r\n        ],\r\n      },\r\n      {\r\n        name: 'auftragId',\r\n        label: 'Auftrag',\r\n        type: 'select' as const,\r\n        group: 'auftrag',\r\n        options: [\r\n          { value: 'auftrag1', label: 'Auftrag 1' },\r\n          { value: 'auftrag2', label: 'Auftrag 2' },\r\n        ],\r\n      },\r\n      {\r\n        name: 'status',\r\n        label: 'Status',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'status',\r\n        options: [\r\n          { value: 'vollstaendig', label: 'Vollständig' },\r\n          { value: 'teilweise', label: 'Teilweise' },\r\n          { value: 'unvollstaendig', label: 'Unvollständig' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'notizen',\r\n        label: 'Notizen',\r\n        type: 'textarea' as const,\r\n        group: 'zusätzlich',\r\n      },\r\n    ];\r\n  }\r\n\r\n  private getProduktionsauftragFormFields(): FormField[] {\r\n    return [\r\n      {\r\n        name: 'auftragsnummer',\r\n        label: 'Auftragsnummer',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'grunddaten',\r\n        validation: { required: true, pattern: /^PRO-\\d{6}$/ },\r\n      },\r\n      {\r\n        name: 'produktId',\r\n        label: 'Produkt',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'produkt',\r\n        options: [\r\n          { value: 'produkt1', label: 'Produkt 1' },\r\n          { value: 'produkt2', label: 'Produkt 2' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'stuecklisteId',\r\n        label: 'Stückliste',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'produktion',\r\n        options: [\r\n          { value: 'stueckliste1', label: 'Stückliste 1' },\r\n          { value: 'stueckliste2', label: 'Stückliste 2' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'menge',\r\n        label: 'Menge',\r\n        type: 'number' as const,\r\n        required: true,\r\n        group: 'menge',\r\n        validation: { required: true, min: 0.001 },\r\n      },\r\n      {\r\n        name: 'einheit',\r\n        label: 'Einheit',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'menge',\r\n        options: [\r\n          { value: 'stk', label: 'Stück' },\r\n          { value: 'kg', label: 'Kilogramm' },\r\n          { value: 'l', label: 'Liter' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'startdatum',\r\n        label: 'Startdatum',\r\n        type: 'date' as const,\r\n        required: true,\r\n        group: 'datum',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'enddatum',\r\n        label: 'Enddatum',\r\n        type: 'date' as const,\r\n        required: true,\r\n        group: 'datum',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'status',\r\n        label: 'Status',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'status',\r\n        options: [\r\n          { value: 'geplant', label: 'Geplant' },\r\n          { value: 'laufend', label: 'Laufend' },\r\n          { value: 'abgeschlossen', label: 'Abgeschlossen' },\r\n          { value: 'storniert', label: 'Storniert' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'prioritaet',\r\n        label: 'Priorität',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'priorität',\r\n        options: [\r\n          { value: 'niedrig', label: 'Niedrig' },\r\n          { value: 'normal', label: 'Normal' },\r\n          { value: 'hoch', label: 'Hoch' },\r\n          { value: 'dringend', label: 'Dringend' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'werkstattId',\r\n        label: 'Werkstatt',\r\n        type: 'select' as const,\r\n        group: 'werkstatt',\r\n        options: [\r\n          { value: 'werkstatt1', label: 'Werkstatt 1' },\r\n          { value: 'werkstatt2', label: 'Werkstatt 2' },\r\n        ],\r\n      },\r\n      {\r\n        name: 'maschinenId',\r\n        label: 'Maschinen',\r\n        type: 'select' as const,\r\n        group: 'maschinen',\r\n        options: [\r\n          { value: 'maschine1', label: 'Maschine 1' },\r\n          { value: 'maschine2', label: 'Maschine 2' },\r\n        ],\r\n      },\r\n      {\r\n        name: 'mitarbeiterId',\r\n        label: 'Mitarbeiter',\r\n        type: 'select' as const,\r\n        group: 'personal',\r\n        options: [\r\n          { value: 'mitarbeiter1', label: 'Mitarbeiter 1' },\r\n          { value: 'mitarbeiter2', label: 'Mitarbeiter 2' },\r\n        ],\r\n      },\r\n      {\r\n        name: 'notizen',\r\n        label: 'Notizen',\r\n        type: 'textarea' as const,\r\n        group: 'zusätzlich',\r\n      },\r\n    ];\r\n  }\r\n\r\n  private getRueckmeldungFormFields(): FormField[] {\r\n    return [\r\n      {\r\n        name: 'rueckmeldungsnummer',\r\n        label: 'Rückmeldungsnummer',\r\n        type: 'text' as const,\r\n        required: true,\r\n        group: 'grunddaten',\r\n        validation: { required: true, pattern: /^RUE-\\d{6}$/ },\r\n      },\r\n      {\r\n        name: 'produktionsauftragId',\r\n        label: 'Produktionsauftrag',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'produktion',\r\n        options: [\r\n          { value: 'auftrag1', label: 'Auftrag 1' },\r\n          { value: 'auftrag2', label: 'Auftrag 2' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'rueckmeldungsdatum',\r\n        label: 'Rückmeldungsdatum',\r\n        type: 'date' as const,\r\n        required: true,\r\n        group: 'datum',\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'mitarbeiterId',\r\n        label: 'Mitarbeiter',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'personal',\r\n        options: [\r\n          { value: 'mitarbeiter1', label: 'Mitarbeiter 1' },\r\n          { value: 'mitarbeiter2', label: 'Mitarbeiter 2' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'status',\r\n        label: 'Status',\r\n        type: 'select' as const,\r\n        required: true,\r\n        group: 'status',\r\n        options: [\r\n          { value: 'teilrueckmeldung', label: 'Teilrückmeldung' },\r\n          { value: 'vollstaendig', label: 'Vollständig' },\r\n        ],\r\n        validation: { required: true },\r\n      },\r\n      {\r\n        name: 'notizen',\r\n        label: 'Notizen',\r\n        type: 'textarea' as const,\r\n        group: 'zusätzlich',\r\n      },\r\n    ];\r\n  }\r\n\r\n  private getLieferantenbewertungFormFields(): FormField[] {\r\n    return [\r\n      { name: 'bewertungsnummer', label: 'Bewertungsnummer', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true, pattern: /^BEW-\\d{6}$/ } },\r\n      { name: 'lieferantId', label: 'Lieferant', type: 'select' as const, required: true, group: 'lieferant', options: [{ value: 'lieferant1', label: 'Lieferant 1' }, { value: 'lieferant2', label: 'Lieferant 2' }], validation: { required: true } },\r\n      { name: 'bewertungszeitraum', label: 'Bewertungszeitraum', type: 'text' as const, required: true, group: 'zeitraum', validation: { required: true } },\r\n      { name: 'bewertungsdatum', label: 'Bewertungsdatum', type: 'date' as const, required: true, group: 'datum', validation: { required: true } },\r\n      { name: 'gesamtbewertung', label: 'Gesamtbewertung', type: 'number' as const, required: true, group: 'bewertung', validation: { required: true, min: 1, max: 5 } },\r\n      { name: 'status', label: 'Status', type: 'select' as const, required: true, group: 'status', options: [{ value: 'erstellt', label: 'Erstellt' }, { value: 'freigegeben', label: 'Freigegeben' }, { value: 'archiviert', label: 'Archiviert' }], validation: { required: true } },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n\r\n  private getKundenruecklaeuferFormFields(): FormField[] {\r\n    return [\r\n      { name: 'ruecklaeufernummer', label: 'Rückläufernummer', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true, pattern: /^RUE-\\d{6}$/ } },\r\n      { name: 'kundeId', label: 'Kunde', type: 'select' as const, required: true, group: 'kunde', options: [{ value: 'kunde1', label: 'Kunde 1' }, { value: 'kunde2', label: 'Kunde 2' }], validation: { required: true } },\r\n      { name: 'auftragId', label: 'Auftrag', type: 'select' as const, group: 'auftrag', options: [{ value: 'auftrag1', label: 'Auftrag 1' }, { value: 'auftrag2', label: 'Auftrag 2' }] },\r\n      { name: 'rechnungId', label: 'Rechnung', type: 'select' as const, group: 'rechnung', options: [{ value: 'rechnung1', label: 'Rechnung 1' }, { value: 'rechnung2', label: 'Rechnung 2' }] },\r\n      { name: 'ruecklaeuferdatum', label: 'Rückläuferdatum', type: 'date' as const, required: true, group: 'datum', validation: { required: true } },\r\n      { name: 'grund', label: 'Grund', type: 'text' as const, required: true, group: 'grund', validation: { required: true } },\r\n      { name: 'ruecklaeuferart', label: 'Rückläuferart', type: 'select' as const, required: true, group: 'art', options: [{ value: 'reklamation', label: 'Reklamation' }, { value: 'garantie', label: 'Garantie' }, { value: 'kundenservice', label: 'Kundenservice' }, { value: 'sonstiges', label: 'Sonstiges' }], validation: { required: true } },\r\n      { name: 'prioritaet', label: 'Priorität', type: 'select' as const, required: true, group: 'priorität', options: [{ value: 'niedrig', label: 'Niedrig' }, { value: 'mittel', label: 'Mittel' }, { value: 'hoch', label: 'Hoch' }, { value: 'kritisch', label: 'Kritisch' }], validation: { required: true } },\r\n      { name: 'status', label: 'Status', type: 'select' as const, required: true, group: 'status', options: [{ value: 'eingegangen', label: 'Eingegangen' }, { value: 'in_bearbeitung', label: 'In Bearbeitung' }, { value: 'geloest', label: 'Gelöst' }, { value: 'abgelehnt', label: 'Abgelehnt' }], validation: { required: true } },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n\r\n  private getGutschriftFormFields(): FormField[] {\r\n    return [\r\n      { name: 'gutschriftsnummer', label: 'Gutschriftsnummer', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true, pattern: /^GUT-\\d{6}$/ } },\r\n      { name: 'ruecklaeuferId', label: 'Rückläufer', type: 'select' as const, group: 'rueckläufer', options: [{ value: 'ruecklaeufer1', label: 'Rückläufer 1' }, { value: 'ruecklaeufer2', label: 'Rückläufer 2' }] },\r\n      { name: 'rechnungId', label: 'Rechnung', type: 'select' as const, group: 'rechnung', options: [{ value: 'rechnung1', label: 'Rechnung 1' }, { value: 'rechnung2', label: 'Rechnung 2' }] },\r\n      { name: 'kundeId', label: 'Kunde', type: 'select' as const, required: true, group: 'kunde', options: [{ value: 'kunde1', label: 'Kunde 1' }, { value: 'kunde2', label: 'Kunde 2' }], validation: { required: true } },\r\n      { name: 'gutschriftsdatum', label: 'Gutschriftsdatum', type: 'date' as const, required: true, group: 'datum', validation: { required: true } },\r\n      { name: 'gesamtbetrag', label: 'Gesamtbetrag', type: 'currency' as const, required: true, group: 'finanzen', validation: { required: true, min: 0 } },\r\n      { name: 'waehrung', label: 'Währung', type: 'select' as const, required: true, group: 'finanzen', options: [{ value: 'EUR', label: 'Euro' }, { value: 'USD', label: 'US Dollar' }], validation: { required: true } },\r\n      { name: 'status', label: 'Status', type: 'select' as const, required: true, group: 'status', options: [{ value: 'entwurf', label: 'Entwurf' }, { value: 'freigegeben', label: 'Freigegeben' }, { value: 'versendet', label: 'Versendet' }, { value: 'verbucht', label: 'Verbucht' }], validation: { required: true } },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n\r\n  private getUrsachenanalyseFormFields(): FormField[] {\r\n    return [\r\n      { name: 'analysenummer', label: 'Analysenummer', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true, pattern: /^ANA-\\d{6}$/ } },\r\n      { name: 'ruecklaeuferId', label: 'Rückläufer', type: 'select' as const, required: true, group: 'rueckläufer', options: [{ value: 'ruecklaeufer1', label: 'Rückläufer 1' }, { value: 'ruecklaeufer2', label: 'Rückläufer 2' }], validation: { required: true } },\r\n      { name: 'analysendatum', label: 'Analysendatum', type: 'date' as const, required: true, group: 'datum', validation: { required: true } },\r\n      { name: 'analysentyp', label: 'Analysentyp', type: 'select' as const, required: true, group: 'analyse', options: [{ value: 'qualitaet', label: 'Qualität' }, { value: 'lieferung', label: 'Lieferung' }, { value: 'kommunikation', label: 'Kommunikation' }, { value: 'system', label: 'System' }], validation: { required: true } },\r\n      { name: 'ursache', label: 'Ursache', type: 'text' as const, required: true, group: 'ursache', validation: { required: true } },\r\n      { name: 'verantwortlicherId', label: 'Verantwortlicher', type: 'select' as const, required: true, group: 'personal', options: [{ value: 'mitarbeiter1', label: 'Mitarbeiter 1' }, { value: 'mitarbeiter2', label: 'Mitarbeiter 2' }], validation: { required: true } },\r\n      { name: 'deadline', label: 'Deadline', type: 'date' as const, required: true, group: 'datum', validation: { required: true } },\r\n      { name: 'status', label: 'Status', type: 'select' as const, required: true, group: 'status', options: [{ value: 'in_bearbeitung', label: 'In Bearbeitung' }, { value: 'abgeschlossen', label: 'Abgeschlossen' }, { value: 'ueberfaellig', label: 'Überfällig' }], validation: { required: true } },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n\r\n  private getVerpackungsvorschriftenFormFields(): FormField[] {\r\n    return [\r\n      { name: 'vorschriftennummer', label: 'Vorschriftennummer', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true, pattern: /^VER-\\d{6}$/ } },\r\n      { name: 'artikelId', label: 'Artikel', type: 'select' as const, required: true, group: 'artikel', options: [{ value: 'artikel1', label: 'Artikel 1' }, { value: 'artikel2', label: 'Artikel 2' }], validation: { required: true } },\r\n      { name: 'varianteId', label: 'Variante', type: 'select' as const, group: 'artikel', options: [{ value: 'variante1', label: 'Variante 1' }, { value: 'variante2', label: 'Variante 2' }] },\r\n      { name: 'verpackungsart', label: 'Verpackungsart', type: 'text' as const, required: true, group: 'verpackung', validation: { required: true } },\r\n      { name: 'verpackungsgroesse', label: 'Verpackungsgröße', type: 'text' as const, required: true, group: 'verpackung', validation: { required: true } },\r\n      { name: 'gewicht', label: 'Gewicht (kg)', type: 'number' as const, required: true, group: 'verpackung', validation: { required: true, min: 0 } },\r\n      { name: 'volumen', label: 'Volumen (m³)', type: 'number' as const, required: true, group: 'verpackung', validation: { required: true, min: 0 } },\r\n      { name: 'gefahrgutklasse', label: 'Gefahrgutklasse', type: 'text' as const, group: 'gefahrgut' },\r\n      { name: 'unNummer', label: 'UN-Nummer', type: 'text' as const, group: 'gefahrgut' },\r\n      { name: 'adrKonform', label: 'ADR-konform', type: 'checkbox' as const, group: 'gefahrgut' },\r\n      { name: 'status', label: 'Status', type: 'select' as const, required: true, group: 'status', options: [{ value: 'entwurf', label: 'Entwurf' }, { value: 'freigegeben', label: 'Freigegeben' }, { value: 'archiviert', label: 'Archiviert' }], validation: { required: true } },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n\r\n  private getEtikettenFormFields(): FormField[] {\r\n    return [\r\n      { name: 'etikettennummer', label: 'Etikettennummer', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true, pattern: /^ETI-\\d{6}$/ } },\r\n      { name: 'artikelId', label: 'Artikel', type: 'select' as const, required: true, group: 'artikel', options: [{ value: 'artikel1', label: 'Artikel 1' }, { value: 'artikel2', label: 'Artikel 2' }], validation: { required: true } },\r\n      { name: 'varianteId', label: 'Variante', type: 'select' as const, group: 'artikel', options: [{ value: 'variante1', label: 'Variante 1' }, { value: 'variante2', label: 'Variante 2' }] },\r\n      { name: 'etikettentyp', label: 'Etikettentyp', type: 'text' as const, required: true, group: 'etikett', validation: { required: true } },\r\n      { name: 'druckformat', label: 'Druckformat', type: 'text' as const, required: true, group: 'druck', validation: { required: true } },\r\n      { name: 'druckerId', label: 'Drucker', type: 'select' as const, group: 'druck', options: [{ value: 'drucker1', label: 'Drucker 1' }, { value: 'drucker2', label: 'Drucker 2' }] },\r\n      { name: 'status', label: 'Status', type: 'select' as const, required: true, group: 'status', options: [{ value: 'entwurf', label: 'Entwurf' }, { value: 'gedruckt', label: 'Gedruckt' }, { value: 'archiviert', label: 'Archiviert' }], validation: { required: true } },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n\r\n  private getUNNummernFormFields(): FormField[] {\r\n    return [\r\n      { name: 'unNummer', label: 'UN-Nummer', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true, pattern: /^\\d{4}$/ } },\r\n      { name: 'bezeichnung', label: 'Bezeichnung', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true } },\r\n      { name: 'gefahrgutklasse', label: 'Gefahrgutklasse', type: 'text' as const, required: true, group: 'gefahrgut', validation: { required: true } },\r\n      { name: 'verpackungsgruppe', label: 'Verpackungsgruppe', type: 'text' as const, required: true, group: 'gefahrgut', validation: { required: true } },\r\n      { name: 'status', label: 'Status', type: 'select' as const, required: true, group: 'status', options: [{ value: 'aktiv', label: 'Aktiv' }, { value: 'inaktiv', label: 'Inaktiv' }], validation: { required: true } },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n\r\n  private getADRKonformitaetFormFields(): FormField[] {\r\n    return [\r\n      { name: 'konformitaetsnummer', label: 'Konformitätsnummer', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true, pattern: /^ADR-\\d{6}$/ } },\r\n      { name: 'artikelId', label: 'Artikel', type: 'select' as const, required: true, group: 'artikel', options: [{ value: 'artikel1', label: 'Artikel 1' }, { value: 'artikel2', label: 'Artikel 2' }], validation: { required: true } },\r\n      { name: 'varianteId', label: 'Variante', type: 'select' as const, group: 'artikel', options: [{ value: 'variante1', label: 'Variante 1' }, { value: 'variante2', label: 'Variante 2' }] },\r\n      { name: 'adrKlasse', label: 'ADR-Klasse', type: 'text' as const, required: true, group: 'adr', validation: { required: true } },\r\n      { name: 'verpackungsgruppe', label: 'Verpackungsgruppe', type: 'text' as const, required: true, group: 'adr', validation: { required: true } },\r\n      { name: 'unNummer', label: 'UN-Nummer', type: 'text' as const, required: true, group: 'adr', validation: { required: true } },\r\n      { name: 'konformitaetspruefung', label: 'Konformitätsprüfung', type: 'checkbox' as const, required: true, group: 'adr', validation: { required: true } },\r\n      { name: 'zertifikat', label: 'Zertifikat', type: 'text' as const, group: 'adr' },\r\n      { name: 'gueltigBis', label: 'Gültig bis', type: 'date' as const, group: 'adr' },\r\n      { name: 'status', label: 'Status', type: 'select' as const, required: true, group: 'status', options: [{ value: 'konform', label: 'Konform' }, { value: 'nicht_konform', label: 'Nicht konform' }, { value: 'in_pruefung', label: 'In Prüfung' }], validation: { required: true } },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n\r\n  private getInventurerfassungFormFields(): FormField[] {\r\n    return [\r\n      { name: 'erfassungsnummer', label: 'Erfassungsnummer', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true, pattern: /^ERF-\\d{6}$/ } },\r\n      { name: 'inventurId', label: 'Inventur', type: 'select' as const, required: true, group: 'inventur', options: [{ value: 'inventur1', label: 'Inventur 1' }, { value: 'inventur2', label: 'Inventur 2' }], validation: { required: true } },\r\n      { name: 'lagerortId', label: 'Lagerort', type: 'select' as const, required: true, group: 'lager', options: [{ value: 'lagerort1', label: 'Lagerort 1' }, { value: 'lagerort2', label: 'Lagerort 2' }], validation: { required: true } },\r\n      { name: 'erfasserId', label: 'Erfasser', type: 'select' as const, required: true, group: 'personal', options: [{ value: 'mitarbeiter1', label: 'Mitarbeiter 1' }, { value: 'mitarbeiter2', label: 'Mitarbeiter 2' }], validation: { required: true } },\r\n      { name: 'erfassungsdatum', label: 'Erfassungsdatum', type: 'date' as const, required: true, group: 'datum', validation: { required: true } },\r\n      { name: 'erfassungsart', label: 'Erfassungsart', type: 'select' as const, required: true, group: 'erfassung', options: [{ value: 'manuell', label: 'Manuell' }, { value: 'barcode', label: 'Barcode' }, { value: 'rfid', label: 'RFID' }], validation: { required: true } },\r\n      { name: 'status', label: 'Status', type: 'select' as const, required: true, group: 'status', options: [{ value: 'laufend', label: 'Laufend' }, { value: 'abgeschlossen', label: 'Abgeschlossen' }], validation: { required: true } },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n\r\n  private getDifferenzkontrolleFormFields(): FormField[] {\r\n    return [\r\n      { name: 'kontrollnummer', label: 'Kontrollnummer', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true, pattern: /^KON-\\d{6}$/ } },\r\n      { name: 'inventurId', label: 'Inventur', type: 'select' as const, required: true, group: 'inventur', options: [{ value: 'inventur1', label: 'Inventur 1' }, { value: 'inventur2', label: 'Inventur 2' }], validation: { required: true } },\r\n      { name: 'kontrolleurId', label: 'Kontrolleur', type: 'select' as const, required: true, group: 'personal', options: [{ value: 'mitarbeiter1', label: 'Mitarbeiter 1' }, { value: 'mitarbeiter2', label: 'Mitarbeiter 2' }], validation: { required: true } },\r\n      { name: 'kontrolldatum', label: 'Kontrolldatum', type: 'date' as const, required: true, group: 'datum', validation: { required: true } },\r\n      { name: 'gesamtDifferenz', label: 'Gesamtdifferenz', type: 'number' as const, required: true, group: 'differenz', validation: { required: true } },\r\n      { name: 'status', label: 'Status', type: 'select' as const, required: true, group: 'status', options: [{ value: 'in_bearbeitung', label: 'In Bearbeitung' }, { value: 'abgeschlossen', label: 'Abgeschlossen' }], validation: { required: true } },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n\r\n  private getUmlagerungFormFields(): FormField[] {\r\n    return [\r\n      { name: 'umlagerungsnummer', label: 'Umlagerungsnummer', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true, pattern: /^UML-\\d{6}$/ } },\r\n      { name: 'artikelId', label: 'Artikel', type: 'select' as const, required: true, group: 'artikel', options: [{ value: 'artikel1', label: 'Artikel 1' }, { value: 'artikel2', label: 'Artikel 2' }], validation: { required: true } },\r\n      { name: 'varianteId', label: 'Variante', type: 'select' as const, group: 'artikel', options: [{ value: 'variante1', label: 'Variante 1' }, { value: 'variante2', label: 'Variante 2' }] },\r\n      { name: 'chargeId', label: 'Charge', type: 'select' as const, group: 'artikel', options: [{ value: 'charge1', label: 'Charge 1' }, { value: 'charge2', label: 'Charge 2' }] },\r\n      { name: 'seriennummer', label: 'Seriennummer', type: 'text' as const, group: 'artikel' },\r\n      { name: 'menge', label: 'Menge', type: 'number' as const, required: true, group: 'menge', validation: { required: true, min: 0.001 } },\r\n      { name: 'einheit', label: 'Einheit', type: 'select' as const, required: true, group: 'menge', options: [{ value: 'stk', label: 'Stück' }, { value: 'kg', label: 'Kilogramm' }, { value: 'l', label: 'Liter' }], validation: { required: true } },\r\n      { name: 'vonLagerortId', label: 'Von Lagerort', type: 'select' as const, required: true, group: 'lager', options: [{ value: 'lagerort1', label: 'Lagerort 1' }, { value: 'lagerort2', label: 'Lagerort 2' }], validation: { required: true } },\r\n      { name: 'vonLagerplatzId', label: 'Von Lagerplatz', type: 'select' as const, group: 'lager', options: [{ value: 'lagerplatz1', label: 'Lagerplatz 1' }, { value: 'lagerplatz2', label: 'Lagerplatz 2' }] },\r\n      { name: 'nachLagerortId', label: 'Nach Lagerort', type: 'select' as const, required: true, group: 'lager', options: [{ value: 'lagerort1', label: 'Lagerort 1' }, { value: 'lagerort2', label: 'Lagerort 2' }], validation: { required: true } },\r\n      { name: 'nachLagerplatzId', label: 'Nach Lagerplatz', type: 'select' as const, group: 'lager', options: [{ value: 'lagerplatz1', label: 'Lagerplatz 1' }, { value: 'lagerplatz2', label: 'Lagerplatz 2' }] },\r\n      { name: 'umlagerungsdatum', label: 'Umlagerungsdatum', type: 'date' as const, required: true, group: 'datum', validation: { required: true } },\r\n      { name: 'umlagererId', label: 'Umlagerer', type: 'select' as const, required: true, group: 'personal', options: [{ value: 'mitarbeiter1', label: 'Mitarbeiter 1' }, { value: 'mitarbeiter2', label: 'Mitarbeiter 2' }], validation: { required: true } },\r\n      { name: 'grund', label: 'Grund', type: 'text' as const, required: true, group: 'grund', validation: { required: true } },\r\n      { name: 'status', label: 'Status', type: 'select' as const, required: true, group: 'status', options: [{ value: 'geplant', label: 'Geplant' }, { value: 'in_bearbeitung', label: 'In Bearbeitung' }, { value: 'abgeschlossen', label: 'Abgeschlossen' }, { value: 'storniert', label: 'Storniert' }], validation: { required: true } },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n\r\n  private getPreislistenFormFields(): FormField[] {\r\n    return [\r\n      { name: 'preislistennummer', label: 'Preislistennummer', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true, pattern: /^PRE-\\d{6}$/ } },\r\n      { name: 'bezeichnung', label: 'Bezeichnung', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true } },\r\n      { name: 'gueltigAb', label: 'Gültig ab', type: 'date' as const, required: true, group: 'datum', validation: { required: true } },\r\n      { name: 'gueltigBis', label: 'Gültig bis', type: 'date' as const, group: 'datum' },\r\n      { name: 'waehrung', label: 'Währung', type: 'select' as const, required: true, group: 'finanzen', options: [{ value: 'EUR', label: 'Euro' }, { value: 'USD', label: 'US Dollar' }], validation: { required: true } },\r\n      { name: 'kundengruppe', label: 'Kundengruppe', type: 'select' as const, group: 'kunde', options: [{ value: 'gruppe1', label: 'Gruppe 1' }, { value: 'gruppe2', label: 'Gruppe 2' }] },\r\n      { name: 'status', label: 'Status', type: 'select' as const, required: true, group: 'status', options: [{ value: 'entwurf', label: 'Entwurf' }, { value: 'freigegeben', label: 'Freigegeben' }, { value: 'archiviert', label: 'Archiviert' }], validation: { required: true } },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n\r\n  private getAktionenFormFields(): FormField[] {\r\n    return [\r\n      { name: 'aktionsnummer', label: 'Aktionsnummer', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true, pattern: /^AKT-\\d{6}$/ } },\r\n      { name: 'bezeichnung', label: 'Bezeichnung', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true } },\r\n      { name: 'aktionstyp', label: 'Aktionstyp', type: 'select' as const, required: true, group: 'aktion', options: [{ value: 'rabatt', label: 'Rabatt' }, { value: 'mengenrabatt', label: 'Mengenrabatt' }, { value: 'gratisartikel', label: 'Gratisartikel' }, { value: 'preisreduktion', label: 'Preisreduktion' }], validation: { required: true } },\r\n      { name: 'gueltigAb', label: 'Gültig ab', type: 'date' as const, required: true, group: 'datum', validation: { required: true } },\r\n      { name: 'gueltigBis', label: 'Gültig bis', type: 'date' as const, required: true, group: 'datum', validation: { required: true } },\r\n      { name: 'kundengruppe', label: 'Kundengruppe', type: 'select' as const, group: 'kunde', options: [{ value: 'gruppe1', label: 'Gruppe 1' }, { value: 'gruppe2', label: 'Gruppe 2' }] },\r\n      { name: 'artikelgruppe', label: 'Artikelgruppe', type: 'select' as const, group: 'artikel', options: [{ value: 'gruppe1', label: 'Gruppe 1' }, { value: 'gruppe2', label: 'Gruppe 2' }] },\r\n      { name: 'status', label: 'Status', type: 'select' as const, required: true, group: 'status', options: [{ value: 'geplant', label: 'Geplant' }, { value: 'aktiv', label: 'Aktiv' }, { value: 'beendet', label: 'Beendet' }, { value: 'storniert', label: 'Storniert' }], validation: { required: true } },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n\r\n  private getStaffelpreiseFormFields(): FormField[] {\r\n    return [\r\n      { name: 'staffelpreisnummer', label: 'Staffelpreisnummer', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true, pattern: /^STA-\\d{6}$/ } },\r\n      { name: 'artikelId', label: 'Artikel', type: 'select' as const, required: true, group: 'artikel', options: [{ value: 'artikel1', label: 'Artikel 1' }, { value: 'artikel2', label: 'Artikel 2' }], validation: { required: true } },\r\n      { name: 'varianteId', label: 'Variante', type: 'select' as const, group: 'artikel', options: [{ value: 'variante1', label: 'Variante 1' }, { value: 'variante2', label: 'Variante 2' }] },\r\n      { name: 'gueltigAb', label: 'Gültig ab', type: 'date' as const, required: true, group: 'datum', validation: { required: true } },\r\n      { name: 'gueltigBis', label: 'Gültig bis', type: 'date' as const, group: 'datum' },\r\n      { name: 'status', label: 'Status', type: 'select' as const, required: true, group: 'status', options: [{ value: 'aktiv', label: 'Aktiv' }, { value: 'inaktiv', label: 'Inaktiv' }], validation: { required: true } },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n\r\n  private getRabattsystemeFormFields(): FormField[] {\r\n    return [\r\n      { name: 'rabattsystemnummer', label: 'Rabattsystemnummer', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true, pattern: /^RAB-\\d{6}$/ } },\r\n      { name: 'bezeichnung', label: 'Bezeichnung', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true } },\r\n      { name: 'rabattsystemtyp', label: 'Rabattsystemtyp', type: 'select' as const, required: true, group: 'rabatt', options: [{ value: 'kundengruppe', label: 'Kundengruppe' }, { value: 'mengenrabatt', label: 'Mengenrabatt' }, { value: 'treuerabatt', label: 'Treuerabatt' }, { value: 'saisonrabatt', label: 'Saisonrabatt' }], validation: { required: true } },\r\n      { name: 'gueltigAb', label: 'Gültig ab', type: 'date' as const, required: true, group: 'datum', validation: { required: true } },\r\n      { name: 'gueltigBis', label: 'Gültig bis', type: 'date' as const, group: 'datum' },\r\n      { name: 'status', label: 'Status', type: 'select' as const, required: true, group: 'status', options: [{ value: 'aktiv', label: 'Aktiv' }, { value: 'inaktiv', label: 'Inaktiv' }], validation: { required: true } },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n\r\n  private getArtikelstammdatenFormFields(): FormField[] {\r\n    return [\r\n      { name: 'artikelnummer', label: 'Artikelnummer', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true, pattern: /^ART-\\d{6}$/ } },\r\n      { name: 'bezeichnung', label: 'Bezeichnung', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true } },\r\n      { name: 'kurzbeschreibung', label: 'Kurzbeschreibung', type: 'text' as const, group: 'beschreibung' },\r\n      { name: 'langbeschreibung', label: 'Langbeschreibung', type: 'textarea' as const, group: 'beschreibung' },\r\n      { name: 'kategorie', label: 'Kategorie', type: 'select' as const, required: true, group: 'klassifizierung', options: [{ value: 'kategorie1', label: 'Kategorie 1' }, { value: 'kategorie2', label: 'Kategorie 2' }], validation: { required: true } },\r\n      { name: 'unterkategorie', label: 'Unterkategorie', type: 'select' as const, group: 'klassifizierung', options: [{ value: 'unterkategorie1', label: 'Unterkategorie 1' }, { value: 'unterkategorie2', label: 'Unterkategorie 2' }] },\r\n      { name: 'einheit', label: 'Einheit', type: 'select' as const, required: true, group: 'grunddaten', options: [{ value: 'stk', label: 'Stück' }, { value: 'kg', label: 'Kilogramm' }, { value: 'l', label: 'Liter' }], validation: { required: true } },\r\n      { name: 'gewicht', label: 'Gewicht (kg)', type: 'number' as const, group: 'eigenschaften', validation: { min: 0 } },\r\n      { name: 'volumen', label: 'Volumen (m³)', type: 'number' as const, group: 'eigenschaften', validation: { min: 0 } },\r\n      { name: 'ean', label: 'EAN-Code', type: 'text' as const, group: 'identifikation' },\r\n      { name: 'hersteller', label: 'Hersteller', type: 'text' as const, group: 'hersteller' },\r\n      { name: 'herstellernummer', label: 'Herstellernummer', type: 'text' as const, group: 'hersteller' },\r\n      { name: 'status', label: 'Status', type: 'select' as const, required: true, group: 'status', options: [{ value: 'aktiv', label: 'Aktiv' }, { value: 'inaktiv', label: 'Inaktiv' }, { value: 'gesperrt', label: 'Gesperrt' }], validation: { required: true } },\r\n      { name: 'preisgruppe', label: 'Preisgruppe', type: 'select' as const, required: true, group: 'preise', options: [{ value: 'gruppe1', label: 'Gruppe 1' }, { value: 'gruppe2', label: 'Gruppe 2' }], validation: { required: true } },\r\n      { name: 'steuersatz', label: 'Steuersatz (%)', type: 'number' as const, required: true, group: 'preise', validation: { required: true, min: 0, max: 100 } },\r\n      { name: 'mindestbestand', label: 'Mindestbestand', type: 'number' as const, required: true, group: 'lager', validation: { required: true, min: 0 } },\r\n      { name: 'optimalbestand', label: 'Optimalbestand', type: 'number' as const, required: true, group: 'lager', validation: { required: true, min: 0 } },\r\n      { name: 'maxbestand', label: 'Maximalbestand', type: 'number' as const, required: true, group: 'lager', validation: { required: true, min: 0 } },\r\n      { name: 'lagerort', label: 'Lagerort', type: 'text' as const, group: 'lager' },\r\n      { name: 'bild', label: 'Bild', type: 'file' as const, group: 'medien' },\r\n      { name: 'dokumente', label: 'Dokumente', type: 'file' as const, group: 'medien' },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n\r\n  private getArtikelklassifizierungFormFields(): FormField[] {\r\n    return [\r\n      { name: 'artikelId', label: 'Artikel', type: 'select' as const, required: true, group: 'artikel', options: [{ value: 'artikel1', label: 'Artikel 1' }, { value: 'artikel2', label: 'Artikel 2' }], validation: { required: true } },\r\n      { name: 'hauptkategorie', label: 'Hauptkategorie', type: 'select' as const, required: true, group: 'klassifizierung', options: [{ value: 'haupt1', label: 'Hauptkategorie 1' }, { value: 'haupt2', label: 'Hauptkategorie 2' }], validation: { required: true } },\r\n      { name: 'unterkategorie', label: 'Unterkategorie', type: 'select' as const, required: true, group: 'klassifizierung', options: [{ value: 'unter1', label: 'Unterkategorie 1' }, { value: 'unter2', label: 'Unterkategorie 2' }], validation: { required: true } },\r\n      { name: 'produktgruppe', label: 'Produktgruppe', type: 'select' as const, required: true, group: 'klassifizierung', options: [{ value: 'gruppe1', label: 'Gruppe 1' }, { value: 'gruppe2', label: 'Gruppe 2' }], validation: { required: true } },\r\n      { name: 'produktfamilie', label: 'Produktfamilie', type: 'select' as const, required: true, group: 'klassifizierung', options: [{ value: 'familie1', label: 'Familie 1' }, { value: 'familie2', label: 'Familie 2' }], validation: { required: true } },\r\n      { name: 'bewertung', label: 'Bewertung', type: 'number' as const, required: true, group: 'bewertung', validation: { required: true, min: 1, max: 5 } },\r\n      { name: 'prioritaet', label: 'Priorität', type: 'select' as const, required: true, group: 'priorität', options: [{ value: 'niedrig', label: 'Niedrig' }, { value: 'mittel', label: 'Mittel' }, { value: 'hoch', label: 'Hoch' }], validation: { required: true } },\r\n      { name: 'freigabestatus', label: 'Freigabestatus', type: 'select' as const, required: true, group: 'status', options: [{ value: 'entwurf', label: 'Entwurf' }, { value: 'freigegeben', label: 'Freigegeben' }, { value: 'gesperrt', label: 'Gesperrt' }], validation: { required: true } },\r\n    ];\r\n  }\r\n\r\n  private getArtikelvarianteFormFields(): FormField[] {\r\n    return [\r\n      { name: 'artikelId', label: 'Artikel', type: 'select' as const, required: true, group: 'artikel', options: [{ value: 'artikel1', label: 'Artikel 1' }, { value: 'artikel2', label: 'Artikel 2' }], validation: { required: true } },\r\n      { name: 'variantenname', label: 'Variantenname', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true } },\r\n      { name: 'variantencode', label: 'Variantencode', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true } },\r\n      { name: 'preisaufschlag', label: 'Preisaufschlag (%)', type: 'number' as const, group: 'preise', validation: { min: 0 } },\r\n      { name: 'gewicht', label: 'Gewicht (kg)', type: 'number' as const, group: 'eigenschaften', validation: { min: 0 } },\r\n      { name: 'volumen', label: 'Volumen (m³)', type: 'number' as const, group: 'eigenschaften', validation: { min: 0 } },\r\n      { name: 'lagerbestand', label: 'Lagerbestand', type: 'number' as const, required: true, group: 'lager', validation: { required: true, min: 0 } },\r\n      { name: 'status', label: 'Status', type: 'select' as const, required: true, group: 'status', options: [{ value: 'aktiv', label: 'Aktiv' }, { value: 'inaktiv', label: 'Inaktiv' }], validation: { required: true } },\r\n    ];\r\n  }\r\n\r\n  private getStuecklisteFormFields(): FormField[] {\r\n    return [\r\n      { name: 'stuecklistennummer', label: 'Stücklistennummer', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true, pattern: /^STU-\\d{6}$/ } },\r\n      { name: 'bezeichnung', label: 'Bezeichnung', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true } },\r\n      { name: 'version', label: 'Version', type: 'text' as const, required: true, group: 'version', validation: { required: true } },\r\n      { name: 'gueltigAb', label: 'Gültig ab', type: 'date' as const, required: true, group: 'datum', validation: { required: true } },\r\n      { name: 'gueltigBis', label: 'Gültig bis', type: 'date' as const, group: 'datum' },\r\n      { name: 'status', label: 'Status', type: 'select' as const, required: true, group: 'status', options: [{ value: 'entwurf', label: 'Entwurf' }, { value: 'freigegeben', label: 'Freigegeben' }, { value: 'archiviert', label: 'Archiviert' }], validation: { required: true } },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n\r\n  private getEinlagerungFormFields(): FormField[] {\r\n    return [\r\n      { name: 'bewegungsnummer', label: 'Bewegungsnummer', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true, pattern: /^EIN-\\d{6}$/ } },\r\n      { name: 'artikelId', label: 'Artikel', type: 'select' as const, required: true, group: 'artikel', options: [{ value: 'artikel1', label: 'Artikel 1' }, { value: 'artikel2', label: 'Artikel 2' }], validation: { required: true } },\r\n      { name: 'varianteId', label: 'Variante', type: 'select' as const, group: 'artikel', options: [{ value: 'variante1', label: 'Variante 1' }, { value: 'variante2', label: 'Variante 2' }] },\r\n      { name: 'menge', label: 'Menge', type: 'number' as const, required: true, group: 'menge', validation: { required: true, min: 0.001 } },\r\n      { name: 'einheit', label: 'Einheit', type: 'select' as const, required: true, group: 'menge', options: [{ value: 'stk', label: 'Stück' }, { value: 'kg', label: 'Kilogramm' }, { value: 'l', label: 'Liter' }], validation: { required: true } },\r\n      { name: 'lagerortId', label: 'Lagerort', type: 'select' as const, required: true, group: 'lager', options: [{ value: 'lagerort1', label: 'Lagerort 1' }, { value: 'lagerort2', label: 'Lagerort 2' }], validation: { required: true } },\r\n      { name: 'lagerplatzId', label: 'Lagerplatz', type: 'select' as const, group: 'lager', options: [{ value: 'lagerplatz1', label: 'Lagerplatz 1' }, { value: 'lagerplatz2', label: 'Lagerplatz 2' }] },\r\n      { name: 'chargeId', label: 'Charge', type: 'select' as const, group: 'artikel', options: [{ value: 'charge1', label: 'Charge 1' }, { value: 'charge2', label: 'Charge 2' }] },\r\n      { name: 'seriennummer', label: 'Seriennummer', type: 'text' as const, group: 'artikel' },\r\n      { name: 'lieferantId', label: 'Lieferant', type: 'select' as const, group: 'lieferant', options: [{ value: 'lieferant1', label: 'Lieferant 1' }, { value: 'lieferant2', label: 'Lieferant 2' }] },\r\n      { name: 'bestellungId', label: 'Bestellung', type: 'select' as const, group: 'bestellung', options: [{ value: 'bestellung1', label: 'Bestellung 1' }, { value: 'bestellung2', label: 'Bestellung 2' }] },\r\n      { name: 'einlagerungsdatum', label: 'Einlagerungsdatum', type: 'date' as const, required: true, group: 'datum', validation: { required: true } },\r\n      { name: 'qualitaetspruefung', label: 'Qualitätsprüfung', type: 'checkbox' as const, required: true, group: 'qualität', validation: { required: true } },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n\r\n  private getAuslagerungFormFields(): FormField[] {\r\n    return [\r\n      { name: 'bewegungsnummer', label: 'Bewegungsnummer', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true, pattern: /^AUS-\\d{6}$/ } },\r\n      { name: 'artikelId', label: 'Artikel', type: 'select' as const, required: true, group: 'artikel', options: [{ value: 'artikel1', label: 'Artikel 1' }, { value: 'artikel2', label: 'Artikel 2' }], validation: { required: true } },\r\n      { name: 'varianteId', label: 'Variante', type: 'select' as const, group: 'artikel', options: [{ value: 'variante1', label: 'Variante 1' }, { value: 'variante2', label: 'Variante 2' }] },\r\n      { name: 'menge', label: 'Menge', type: 'number' as const, required: true, group: 'menge', validation: { required: true, min: 0.001 } },\r\n      { name: 'einheit', label: 'Einheit', type: 'select' as const, required: true, group: 'menge', options: [{ value: 'stk', label: 'Stück' }, { value: 'kg', label: 'Kilogramm' }, { value: 'l', label: 'Liter' }], validation: { required: true } },\r\n      { name: 'lagerortId', label: 'Lagerort', type: 'select' as const, required: true, group: 'lager', options: [{ value: 'lagerort1', label: 'Lagerort 1' }, { value: 'lagerort2', label: 'Lagerort 2' }], validation: { required: true } },\r\n      { name: 'lagerplatzId', label: 'Lagerplatz', type: 'select' as const, group: 'lager', options: [{ value: 'lagerplatz1', label: 'Lagerplatz 1' }, { value: 'lagerplatz2', label: 'Lagerplatz 2' }] },\r\n      { name: 'chargeId', label: 'Charge', type: 'select' as const, group: 'artikel', options: [{ value: 'charge1', label: 'Charge 1' }, { value: 'charge2', label: 'Charge 2' }] },\r\n      { name: 'seriennummer', label: 'Seriennummer', type: 'text' as const, group: 'artikel' },\r\n      { name: 'kundeId', label: 'Kunde', type: 'select' as const, group: 'kunde', options: [{ value: 'kunde1', label: 'Kunde 1' }, { value: 'kunde2', label: 'Kunde 2' }] },\r\n      { name: 'auftragId', label: 'Auftrag', type: 'select' as const, group: 'auftrag', options: [{ value: 'auftrag1', label: 'Auftrag 1' }, { value: 'auftrag2', label: 'Auftrag 2' }] },\r\n      { name: 'auslagerungsdatum', label: 'Auslagerungsdatum', type: 'date' as const, required: true, group: 'datum', validation: { required: true } },\r\n      { name: 'kommissioniererId', label: 'Kommissionierer', type: 'select' as const, group: 'personal', options: [{ value: 'mitarbeiter1', label: 'Mitarbeiter 1' }, { value: 'mitarbeiter2', label: 'Mitarbeiter 2' }] },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n\r\n  private getLagerplatzOptimierungFormFields(): FormField[] {\r\n    return [\r\n      { name: 'lagerortId', label: 'Lagerort', type: 'select' as const, required: true, group: 'lager', options: [{ value: 'lagerort1', label: 'Lagerort 1' }, { value: 'lagerort2', label: 'Lagerort 2' }], validation: { required: true } },\r\n      { name: 'lagerplatzId', label: 'Lagerplatz', type: 'select' as const, required: true, group: 'lager', options: [{ value: 'lagerplatz1', label: 'Lagerplatz 1' }, { value: 'lagerplatz2', label: 'Lagerplatz 2' }], validation: { required: true } },\r\n      { name: 'artikelId', label: 'Artikel', type: 'select' as const, required: true, group: 'artikel', options: [{ value: 'artikel1', label: 'Artikel 1' }, { value: 'artikel2', label: 'Artikel 2' }], validation: { required: true } },\r\n      { name: 'optimierungsgrund', label: 'Optimierungsgrund', type: 'text' as const, required: true, group: 'grund', validation: { required: true } },\r\n      { name: 'prioritaet', label: 'Priorität', type: 'select' as const, required: true, group: 'priorität', options: [{ value: 'niedrig', label: 'Niedrig' }, { value: 'mittel', label: 'Mittel' }, { value: 'hoch', label: 'Hoch' }], validation: { required: true } },\r\n      { name: 'status', label: 'Status', type: 'select' as const, required: true, group: 'status', options: [{ value: 'vorgeschlagen', label: 'Vorgeschlagen' }, { value: 'in_bearbeitung', label: 'In Bearbeitung' }, { value: 'umgesetzt', label: 'Umgesetzt' }], validation: { required: true } },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n\r\n  private getInventurFormFields(): FormField[] {\r\n    return [\r\n      { name: 'inventurnummer', label: 'Inventurnummer', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true, pattern: /^INV-\\d{6}$/ } },\r\n      { name: 'lagerortId', label: 'Lagerort', type: 'select' as const, required: true, group: 'lager', options: [{ value: 'lagerort1', label: 'Lagerort 1' }, { value: 'lagerort2', label: 'Lagerort 2' }], validation: { required: true } },\r\n      { name: 'inventurdatum', label: 'Inventurdatum', type: 'date' as const, required: true, group: 'datum', validation: { required: true } },\r\n      { name: 'inventurart', label: 'Inventurart', type: 'select' as const, required: true, group: 'art', options: [{ value: 'voll', label: 'Voll' }, { value: 'stichprobe', label: 'Stichprobe' }, { value: 'zyklisch', label: 'Zyklisch' }], validation: { required: true } },\r\n      { name: 'status', label: 'Status', type: 'select' as const, required: true, group: 'status', options: [{ value: 'geplant', label: 'Geplant' }, { value: 'laufend', label: 'Laufend' }, { value: 'abgeschlossen', label: 'Abgeschlossen' }], validation: { required: true } },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n\r\n  private getChargeFormFields(): FormField[] {\r\n    return [\r\n      { name: 'chargennummer', label: 'Chargennummer', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true, pattern: /^CHA-\\d{6}$/ } },\r\n      { name: 'artikelId', label: 'Artikel', type: 'select' as const, required: true, group: 'artikel', options: [{ value: 'artikel1', label: 'Artikel 1' }, { value: 'artikel2', label: 'Artikel 2' }], validation: { required: true } },\r\n      { name: 'varianteId', label: 'Variante', type: 'select' as const, group: 'artikel', options: [{ value: 'variante1', label: 'Variante 1' }, { value: 'variante2', label: 'Variante 2' }] },\r\n      { name: 'herstellungsdatum', label: 'Herstellungsdatum', type: 'date' as const, required: true, group: 'datum', validation: { required: true } },\r\n      { name: 'verfallsdatum', label: 'Verfallsdatum', type: 'date' as const, group: 'datum' },\r\n      { name: 'hersteller', label: 'Hersteller', type: 'text' as const, group: 'hersteller' },\r\n      { name: 'herstellernummer', label: 'Herstellernummer', type: 'text' as const, group: 'hersteller' },\r\n      { name: 'qualitaetszertifikat', label: 'Qualitätszertifikat', type: 'text' as const, group: 'qualität' },\r\n      { name: 'lagerortId', label: 'Lagerort', type: 'select' as const, required: true, group: 'lager', options: [{ value: 'lagerort1', label: 'Lagerort 1' }, { value: 'lagerort2', label: 'Lagerort 2' }], validation: { required: true } },\r\n      { name: 'lagerplatzId', label: 'Lagerplatz', type: 'select' as const, group: 'lager', options: [{ value: 'lagerplatz1', label: 'Lagerplatz 1' }, { value: 'lagerplatz2', label: 'Lagerplatz 2' }] },\r\n      { name: 'menge', label: 'Menge', type: 'number' as const, required: true, group: 'menge', validation: { required: true, min: 0.001 } },\r\n      { name: 'einheit', label: 'Einheit', type: 'select' as const, required: true, group: 'menge', options: [{ value: 'stk', label: 'Stück' }, { value: 'kg', label: 'Kilogramm' }, { value: 'l', label: 'Liter' }], validation: { required: true } },\r\n      { name: 'status', label: 'Status', type: 'select' as const, required: true, group: 'status', options: [{ value: 'aktiv', label: 'Aktiv' }, { value: 'gesperrt', label: 'Gesperrt' }, { value: 'verfallen', label: 'Verfallen' }], validation: { required: true } },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n\r\n  private getLieferantenavisierungFormFields(): FormField[] {\r\n    return [\r\n      { name: 'avisierungsnummer', label: 'Avisierungsnummer', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true, pattern: /^AVI-\\d{6}$/ } },\r\n      { name: 'lieferantId', label: 'Lieferant', type: 'select' as const, required: true, group: 'lieferant', options: [{ value: 'lieferant1', label: 'Lieferant 1' }, { value: 'lieferant2', label: 'Lieferant 2' }], validation: { required: true } },\r\n      { name: 'bestellungId', label: 'Bestellung', type: 'select' as const, group: 'bestellung', options: [{ value: 'bestellung1', label: 'Bestellung 1' }, { value: 'bestellung2', label: 'Bestellung 2' }] },\r\n      { name: 'erwartetesLieferdatum', label: 'Erwartetes Lieferdatum', type: 'date' as const, required: true, group: 'datum', validation: { required: true } },\r\n      { name: 'status', label: 'Status', type: 'select' as const, required: true, group: 'status', options: [{ value: 'erwartet', label: 'Erwartet' }, { value: 'teilweise_angekommen', label: 'Teilweise angekommen' }, { value: 'vollstaendig', label: 'Vollständig' }], validation: { required: true } },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n\r\n  private getWareneingangspruefungFormFields(): FormField[] {\r\n    return [\r\n      { name: 'pruefungsnummer', label: 'Prüfungsnummer', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true, pattern: /^PRU-\\d{6}$/ } },\r\n      { name: 'lieferungId', label: 'Lieferung', type: 'select' as const, required: true, group: 'lieferung', options: [{ value: 'lieferung1', label: 'Lieferung 1' }, { value: 'lieferung2', label: 'Lieferung 2' }], validation: { required: true } },\r\n      { name: 'prueferId', label: 'Prüfer', type: 'select' as const, required: true, group: 'personal', options: [{ value: 'mitarbeiter1', label: 'Mitarbeiter 1' }, { value: 'mitarbeiter2', label: 'Mitarbeiter 2' }], validation: { required: true } },\r\n      { name: 'pruefungsdatum', label: 'Prüfungsdatum', type: 'date' as const, required: true, group: 'datum', validation: { required: true } },\r\n      { name: 'pruefungsart', label: 'Prüfungsart', type: 'select' as const, required: true, group: 'prüfung', options: [{ value: 'visuell', label: 'Visuell' }, { value: 'stichprobe', label: 'Stichprobe' }, { value: 'vollstaendig', label: 'Vollständig' }], validation: { required: true } },\r\n      { name: 'ergebnis', label: 'Ergebnis', type: 'select' as const, required: true, group: 'ergebnis', options: [{ value: 'bestanden', label: 'Bestanden' }, { value: 'teilweise_bestanden', label: 'Teilweise bestanden' }, { value: 'durchgefallen', label: 'Durchgefallen' }], validation: { required: true } },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n\r\n  private getWareneingangsbuchungFormFields(): FormField[] {\r\n    return [\r\n      { name: 'buchungsnummer', label: 'Buchungsnummer', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true, pattern: /^BUC-\\d{6}$/ } },\r\n      { name: 'lieferungId', label: 'Lieferung', type: 'select' as const, required: true, group: 'lieferung', options: [{ value: 'lieferung1', label: 'Lieferung 1' }, { value: 'lieferung2', label: 'Lieferung 2' }], validation: { required: true } },\r\n      { name: 'buchungsdatum', label: 'Buchungsdatum', type: 'date' as const, required: true, group: 'datum', validation: { required: true } },\r\n      { name: 'status', label: 'Status', type: 'select' as const, required: true, group: 'status', options: [{ value: 'entwurf', label: 'Entwurf' }, { value: 'gebucht', label: 'Gebucht' }, { value: 'storniert', label: 'Storniert' }], validation: { required: true } },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n\r\n  private getReklamationFormFields(): FormField[] {\r\n    return [\r\n      { name: 'reklamationsnummer', label: 'Reklamationsnummer', type: 'text' as const, required: true, group: 'grunddaten', validation: { required: true, pattern: /^REK-\\d{6}$/ } },\r\n      { name: 'lieferungId', label: 'Lieferung', type: 'select' as const, required: true, group: 'lieferung', options: [{ value: 'lieferung1', label: 'Lieferung 1' }, { value: 'lieferung2', label: 'Lieferung 2' }], validation: { required: true } },\r\n      { name: 'lieferantId', label: 'Lieferant', type: 'select' as const, required: true, group: 'lieferant', options: [{ value: 'lieferant1', label: 'Lieferant 1' }, { value: 'lieferant2', label: 'Lieferant 2' }], validation: { required: true } },\r\n      { name: 'reklamationsdatum', label: 'Reklamationsdatum', type: 'date' as const, required: true, group: 'datum', validation: { required: true } },\r\n      { name: 'reklamationsgrund', label: 'Reklamationsgrund', type: 'text' as const, required: true, group: 'grund', validation: { required: true } },\r\n      { name: 'reklamationsart', label: 'Reklamationsart', type: 'select' as const, required: true, group: 'art', options: [{ value: 'qualitaet', label: 'Qualität' }, { value: 'menge', label: 'Menge' }, { value: 'lieferung', label: 'Lieferung' }, { value: 'preis', label: 'Preis' }], validation: { required: true } },\r\n      { name: 'prioritaet', label: 'Priorität', type: 'select' as const, required: true, group: 'priorität', options: [{ value: 'niedrig', label: 'Niedrig' }, { value: 'mittel', label: 'Mittel' }, { value: 'hoch', label: 'Hoch' }, { value: 'kritisch', label: 'Kritisch' }], validation: { required: true } },\r\n      { name: 'status', label: 'Status', type: 'select' as const, required: true, group: 'status', options: [{ value: 'eingereicht', label: 'Eingereicht' }, { value: 'in_bearbeitung', label: 'In Bearbeitung' }, { value: 'geloest', label: 'Gelöst' }, { value: 'abgelehnt', label: 'Abgelehnt' }], validation: { required: true } },\r\n      { name: 'notizen', label: 'Notizen', type: 'textarea' as const, group: 'zusätzlich' },\r\n    ];\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// GLOBALE INSTANZ\r\n// ============================================================================\r\n\r\nexport const formRegistryService = FormRegistryService.getInstance(); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\services\\MessagingService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\services\\MissingFormsGenerator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\services\\OfflineService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\services\\PreloadService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\services\\api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\services\\authService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\services\\crmApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\services\\crmService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\services\\eInvoicingApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\services\\fibuApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\services\\lakasirApi.ts","messages":[{"ruleId":"no-useless-escape","severity":1,"message":"Unnecessary escape character: \\..","line":309,"column":26,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":309,"endColumn":27,"suggestions":[{"messageId":"removeEscape","fix":{"range":[8788,8789],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[8788,8788],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":1,"message":"Unnecessary escape character: \\/.","line":309,"column":28,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":309,"endColumn":29,"suggestions":[{"messageId":"removeEscape","fix":{"range":[8790,8791],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[8790,8790],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":1,"message":"Unnecessary escape character: \\+.","line":309,"column":30,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":309,"endColumn":31,"suggestions":[{"messageId":"removeEscape","fix":{"range":[8792,8793],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[8792,8792],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * VALEO NeuroERP - Lakasir Features API Service\r\n * API-Kommunikation für die adaptierten Lakasir-Features\r\n */\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n// API Response Interface\r\ninterface ApiResponse<T = any> {\r\n  success: boolean;\r\n  data?: T;\r\n  message?: string;\r\n  error?: string;\r\n}\r\n\r\n// Barcode Service\r\nexport const barcodeApi = {\r\n  // Barcode suchen\r\n  async lookupBarcode(barcode: string): Promise<ApiResponse> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/barcode/lookup/${barcode}`);\r\n      return await response.json();\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Netzwerkfehler'\r\n      };\r\n    }\r\n  },\r\n\r\n  // Barcode registrieren\r\n  async registerBarcode(productId: string, barcode: string, type: string): Promise<ApiResponse> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/barcode/register`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ product_id: productId, barcode, type })\r\n      });\r\n      return await response.json();\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Netzwerkfehler'\r\n      };\r\n    }\r\n  },\r\n\r\n  // Barcode-Vorschläge\r\n  async getSuggestions(partialBarcode: string): Promise<ApiResponse> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/barcode/suggestions?q=${encodeURIComponent(partialBarcode)}`);\r\n      return await response.json();\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Netzwerkfehler'\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\n// Stock Opname Service\r\nexport const stockOpnameApi = {\r\n  // Alle Stock Opnames laden\r\n  async getAll(): Promise<ApiResponse> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/stock-opname`);\r\n      return await response.json();\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Netzwerkfehler'\r\n      };\r\n    }\r\n  },\r\n\r\n  // Stock Opname erstellen\r\n  async create(data: {\r\n    responsible_person: string;\r\n    date: string;\r\n  }): Promise<ApiResponse> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/stock-opname`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data)\r\n      });\r\n      return await response.json();\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Netzwerkfehler'\r\n      };\r\n    }\r\n  },\r\n\r\n  // Stock Opname Items laden\r\n  async getItems(stockOpnameId: string): Promise<ApiResponse> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/stock-opname/${stockOpnameId}/items`);\r\n      return await response.json();\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Netzwerkfehler'\r\n      };\r\n    }\r\n  },\r\n\r\n  // Stock Opname Item aktualisieren\r\n  async updateItem(itemId: string, data: {\r\n    actual_quantity: number;\r\n    notes?: string;\r\n  }): Promise<ApiResponse> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/stock-opname/items/${itemId}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data)\r\n      });\r\n      return await response.json();\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Netzwerkfehler'\r\n      };\r\n    }\r\n  },\r\n\r\n  // Stock Opname abschließen\r\n  async close(stockOpnameId: string): Promise<ApiResponse> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/stock-opname/${stockOpnameId}/close`, {\r\n        method: 'POST'\r\n      });\r\n      return await response.json();\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Netzwerkfehler'\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\n// Voucher Service\r\nexport const voucherApi = {\r\n  // Alle Vouchers laden\r\n  async getAll(): Promise<ApiResponse> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/vouchers`);\r\n      return await response.json();\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Netzwerkfehler'\r\n      };\r\n    }\r\n  },\r\n\r\n  // Voucher erstellen\r\n  async create(data: {\r\n    name: string;\r\n    code: string;\r\n    type: 'prozent' | 'betrag' | 'versandkosten';\r\n    nominal: number;\r\n    kuota: number;\r\n    start_date: string;\r\n    expired: string;\r\n    minimal_buying: number;\r\n    is_active: boolean;\r\n  }): Promise<ApiResponse> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/vouchers`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data)\r\n      });\r\n      return await response.json();\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Netzwerkfehler'\r\n      };\r\n    }\r\n  },\r\n\r\n  // Voucher aktualisieren\r\n  async update(voucherId: string, data: {\r\n    name: string;\r\n    code: string;\r\n    type: 'prozent' | 'betrag' | 'versandkosten';\r\n    nominal: number;\r\n    kuota: number;\r\n    start_date: string;\r\n    expired: string;\r\n    minimal_buying: number;\r\n    is_active: boolean;\r\n  }): Promise<ApiResponse> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/vouchers/${voucherId}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data)\r\n      });\r\n      return await response.json();\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Netzwerkfehler'\r\n      };\r\n    }\r\n  },\r\n\r\n  // Voucher löschen\r\n  async delete(voucherId: string): Promise<ApiResponse> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/vouchers/${voucherId}`, {\r\n        method: 'DELETE'\r\n      });\r\n      return await response.json();\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Netzwerkfehler'\r\n      };\r\n    }\r\n  },\r\n\r\n  // Voucher validieren\r\n  async validate(code: string, amount: number): Promise<ApiResponse> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/vouchers/validate`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ code, amount })\r\n      });\r\n      return await response.json();\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Netzwerkfehler'\r\n      };\r\n    }\r\n  },\r\n\r\n  // Voucher verwenden\r\n  async use(voucherId: string, data: {\r\n    transaction_id: string;\r\n    customer_id?: string;\r\n    amount: number;\r\n  }): Promise<ApiResponse> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/vouchers/${voucherId}/use`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data)\r\n      });\r\n      return await response.json();\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Netzwerkfehler'\r\n      };\r\n    }\r\n  },\r\n\r\n  // Voucher-Nutzung laden\r\n  async getUsage(voucherId: string): Promise<ApiResponse> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/vouchers/${voucherId}/usage`);\r\n      return await response.json();\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Netzwerkfehler'\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\n// Utility Functions\r\nexport const lakasirUtils = {\r\n  // Format currency\r\n  formatCurrency(amount: number): string {\r\n    return new Intl.NumberFormat('de-DE', {\r\n      style: 'currency',\r\n      currency: 'EUR'\r\n    }).format(amount);\r\n  },\r\n\r\n  // Format date\r\n  formatDate(date: string): string {\r\n    return new Date(date).toLocaleDateString('de-DE');\r\n  },\r\n\r\n  // Generate random code\r\n  generateCode(prefix: string = 'VALE'): string {\r\n    return prefix + Math.random().toString(36).substr(2, 8).toUpperCase();\r\n  },\r\n\r\n  // Validate barcode format\r\n  validateBarcode(barcode: string): boolean {\r\n    // Basic validation for common barcode formats\r\n    const patterns = {\r\n      ean13: /^[0-9]{13}$/,\r\n      ean8: /^[0-9]{8}$/,\r\n      code128: /^[A-Z0-9]{1,48}$/,\r\n      code39: /^[0-9A-Z\\-\\.\\/\\+\\s]{1,43}$/,\r\n      upc: /^[0-9]{12}$/\r\n    };\r\n\r\n    return Object.values(patterns).some(pattern => pattern.test(barcode));\r\n  }\r\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\services\\middlewareApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\services\\streckengeschaeftApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\services\\supabaseClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\services\\userManagementService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\setupTests.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1204,1207],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1204,1207],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":186,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":11,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4484,4487],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4484,4487],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":199,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":11,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4839,4842],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4839,4842],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":286,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":286,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7095,7098],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7095,7098],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// jest-dom adds custom jest matchers for asserting on DOM nodes.\r\n// allows you to do things like:\r\n// expect(element).toHaveTextContent(/react/i)\r\n// learn more: https://github.com/testing-library/jest-dom\r\nimport '@testing-library/jest-dom';\r\n\r\n// Mock für ResizeObserver (wird von vielen UI-Bibliotheken benötigt)\r\nglobal.ResizeObserver = jest.fn().mockImplementation(() => ({\r\n  observe: jest.fn(),\r\n  unobserve: jest.fn(),\r\n  disconnect: jest.fn(),\r\n}));\r\n\r\n// Mock für IntersectionObserver\r\nglobal.IntersectionObserver = jest.fn().mockImplementation(() => ({\r\n  observe: jest.fn(),\r\n  unobserve: jest.fn(),\r\n  disconnect: jest.fn(),\r\n}));\r\n\r\n// Mock für matchMedia\r\nObject.defineProperty(window, 'matchMedia', {\r\n  writable: true,\r\n  value: jest.fn().mockImplementation(query => ({\r\n    matches: false,\r\n    media: query,\r\n    onchange: null,\r\n    addListener: jest.fn(), // deprecated\r\n    removeListener: jest.fn(), // deprecated\r\n    addEventListener: jest.fn(),\r\n    removeEventListener: jest.fn(),\r\n    dispatchEvent: jest.fn(),\r\n  })),\r\n});\r\n\r\n// Mock für console.error um React-Warnungen zu unterdrücken\r\nconst originalError = console.error;\r\nbeforeAll(() => {\r\n  console.error = (...args: any[]) => {\r\n    if (\r\n      typeof args[0] === 'string' &&\r\n      args[0].includes('Warning: ReactDOM.render is no longer supported')\r\n    ) {\r\n      return;\r\n    }\r\n    originalError.call(console, ...args);\r\n  };\r\n});\r\n\r\nafterAll(() => {\r\n  console.error = originalError;\r\n});\r\n\r\n// Mock für fetch\r\nglobal.fetch = jest.fn();\r\n\r\n// Mock für URL.createObjectURL\r\nglobal.URL.createObjectURL = jest.fn(() => 'mocked-url');\r\n\r\n// Mock für URL.revokeObjectURL\r\nglobal.URL.revokeObjectURL = jest.fn();\r\n\r\n// Mock für window.scrollTo\r\nObject.defineProperty(window, 'scrollTo', {\r\n  value: jest.fn(),\r\n  writable: true,\r\n});\r\n\r\n// Mock für window.alert\r\nObject.defineProperty(window, 'alert', {\r\n  value: jest.fn(),\r\n  writable: true,\r\n});\r\n\r\n// Mock für window.confirm\r\nObject.defineProperty(window, 'confirm', {\r\n  value: jest.fn(() => true),\r\n  writable: true,\r\n});\r\n\r\n// Mock für window.prompt\r\nObject.defineProperty(window, 'prompt', {\r\n  value: jest.fn(),\r\n  writable: true,\r\n});\r\n\r\n// Mock für window.open\r\nObject.defineProperty(window, 'open', {\r\n  value: jest.fn(),\r\n  writable: true,\r\n});\r\n\r\n// Mock für window.print\r\nObject.defineProperty(window, 'print', {\r\n  value: jest.fn(),\r\n  writable: true,\r\n});\r\n\r\n// Mock für window.requestAnimationFrame\r\nObject.defineProperty(window, 'requestAnimationFrame', {\r\n  value: jest.fn((callback) => setTimeout(callback, 0)),\r\n  writable: true,\r\n});\r\n\r\n// Mock für window.cancelAnimationFrame\r\nObject.defineProperty(window, 'cancelAnimationFrame', {\r\n  value: jest.fn(),\r\n  writable: true,\r\n});\r\n\r\n// Mock für window.getSelection\r\nObject.defineProperty(window, 'getSelection', {\r\n  value: jest.fn(() => ({\r\n    removeAllRanges: jest.fn(),\r\n    addRange: jest.fn(),\r\n  })),\r\n  writable: true,\r\n});\r\n\r\n// Mock für document.createRange\r\nObject.defineProperty(document, 'createRange', {\r\n  value: jest.fn(() => ({\r\n    setStart: jest.fn(),\r\n    setEnd: jest.fn(),\r\n    commonAncestorContainer: {\r\n      nodeName: 'BODY',\r\n      ownerDocument: document,\r\n    },\r\n  })),\r\n  writable: true,\r\n});\r\n\r\n// Mock für document.execCommand\r\nObject.defineProperty(document, 'execCommand', {\r\n  value: jest.fn(() => true),\r\n  writable: true,\r\n});\r\n\r\n// Mock für navigator.clipboard\r\nObject.defineProperty(navigator, 'clipboard', {\r\n  value: {\r\n    writeText: jest.fn(),\r\n    readText: jest.fn(),\r\n  },\r\n  writable: true,\r\n});\r\n\r\n// Mock für navigator.geolocation\r\nObject.defineProperty(navigator, 'geolocation', {\r\n  value: {\r\n    getCurrentPosition: jest.fn(),\r\n    watchPosition: jest.fn(),\r\n    clearWatch: jest.fn(),\r\n  },\r\n  writable: true,\r\n});\r\n\r\n// Mock für navigator.mediaDevices\r\nObject.defineProperty(navigator, 'mediaDevices', {\r\n  value: {\r\n    getUserMedia: jest.fn(),\r\n    enumerateDevices: jest.fn(),\r\n  },\r\n  writable: true,\r\n});\r\n\r\n// Mock für Performance API\r\nObject.defineProperty(window, 'performance', {\r\n  value: {\r\n    now: jest.fn(() => Date.now()),\r\n    mark: jest.fn(),\r\n    measure: jest.fn(),\r\n    getEntriesByType: jest.fn(() => []),\r\n    getEntriesByName: jest.fn(() => []),\r\n  },\r\n  writable: true,\r\n});\r\n\r\n// Mock für WebSocket\r\nconst WebSocketMock = jest.fn().mockImplementation(() => ({\r\n  addEventListener: jest.fn(),\r\n  removeEventListener: jest.fn(),\r\n  send: jest.fn(),\r\n  close: jest.fn(),\r\n  readyState: 1,\r\n})) as any;\r\nWebSocketMock.CONNECTING = 0;\r\nWebSocketMock.OPEN = 1;\r\nWebSocketMock.CLOSING = 2;\r\nWebSocketMock.CLOSED = 3;\r\nglobal.WebSocket = WebSocketMock;\r\n\r\n// Mock für EventSource\r\nconst EventSourceMock = jest.fn().mockImplementation(() => ({\r\n  addEventListener: jest.fn(),\r\n  removeEventListener: jest.fn(),\r\n  close: jest.fn(),\r\n  readyState: 1,\r\n})) as any;\r\nEventSourceMock.CONNECTING = 0;\r\nEventSourceMock.OPEN = 1;\r\nEventSourceMock.CLOSED = 2;\r\nglobal.EventSource = EventSourceMock;\r\n\r\n// Mock für AbortController\r\nglobal.AbortController = jest.fn().mockImplementation(() => ({\r\n  signal: {\r\n    addEventListener: jest.fn(),\r\n    removeEventListener: jest.fn(),\r\n    aborted: false,\r\n  },\r\n  abort: jest.fn(),\r\n}));\r\n\r\n// Mock für TextEncoder/TextDecoder\r\nglobal.TextEncoder = jest.fn().mockImplementation(() => ({\r\n  encode: jest.fn(() => new Uint8Array()),\r\n}));\r\n\r\nglobal.TextDecoder = jest.fn().mockImplementation(() => ({\r\n  decode: jest.fn(() => ''),\r\n}));\r\n\r\n// Mock für crypto.subtle\r\nObject.defineProperty(window, 'crypto', {\r\n  value: {\r\n    subtle: {\r\n      generateKey: jest.fn(),\r\n      encrypt: jest.fn(),\r\n      decrypt: jest.fn(),\r\n      sign: jest.fn(),\r\n      verify: jest.fn(),\r\n      digest: jest.fn(),\r\n      importKey: jest.fn(),\r\n      exportKey: jest.fn(),\r\n    },\r\n    getRandomValues: jest.fn(() => new Uint8Array(16)),\r\n  },\r\n  writable: true,\r\n});\r\n\r\n// Mock für MutationObserver\r\nglobal.MutationObserver = jest.fn().mockImplementation(() => ({\r\n  observe: jest.fn(),\r\n  disconnect: jest.fn(),\r\n  takeRecords: jest.fn(() => []),\r\n}));\r\n\r\n// Mock für requestIdleCallback\r\nObject.defineProperty(window, 'requestIdleCallback', {\r\n  value: jest.fn((callback) => setTimeout(callback, 0)),\r\n  writable: true,\r\n});\r\n\r\n// Mock für cancelIdleCallback\r\nObject.defineProperty(window, 'cancelIdleCallback', {\r\n  value: jest.fn(),\r\n  writable: true,\r\n});\r\n\r\n// Mock für queueMicrotask\r\nObject.defineProperty(window, 'queueMicrotask', {\r\n  value: jest.fn((callback) => Promise.resolve().then(callback)),\r\n  writable: true,\r\n});\r\n\r\n// Mock für structuredClone\r\nObject.defineProperty(window, 'structuredClone', {\r\n  value: jest.fn((obj) => JSON.parse(JSON.stringify(obj))),\r\n  writable: true,\r\n});\r\n\r\n// Mock für reportError\r\nObject.defineProperty(window, 'reportError', {\r\n  value: jest.fn(),\r\n  writable: true,\r\n});\r\n\r\n// Mock für queueMicrotask\r\nObject.defineProperty(global, 'queueMicrotask', {\r\n  value: jest.fn((callback) => Promise.resolve().then(callback)),\r\n  writable: true,\r\n});\r\n\r\n// Mock für setImmediate\r\nconst setImmediateMock = jest.fn((callback) => setTimeout(callback, 0)) as any;\r\nsetImmediateMock.__promisify__ = jest.fn();\r\nglobal.setImmediate = setImmediateMock;\r\n\r\n// Mock für clearImmediate\r\nglobal.clearImmediate = jest.fn();\r\n\r\n// Mock für process.nextTick\r\nif (typeof process !== 'undefined') {\r\n  process.nextTick = jest.fn((callback) => setTimeout(callback, 0));\r\n}\r\n\r\n// Mock für console methods\r\nconst originalConsole = { ...console };\r\nbeforeEach(() => {\r\n  console.log = jest.fn();\r\n  console.warn = jest.fn();\r\n  console.error = jest.fn();\r\n  console.info = jest.fn();\r\n  console.debug = jest.fn();\r\n});\r\n\r\nafterEach(() => {\r\n  console.log = originalConsole.log;\r\n  console.warn = originalConsole.warn;\r\n  console.error = originalConsole.error;\r\n  console.info = originalConsole.info;\r\n  console.debug = originalConsole.debug;\r\n}); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\store\\appStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'get' is defined but never used. Allowed unused args must match /^_/u.","line":63,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\r\nimport { devtools } from 'zustand/middleware';\r\n\r\n// App State Types für VALEO NeuroERP\r\ninterface AppState {\r\n  // UI State\r\n  sidebarOpen: boolean;\r\n  mobileMenuOpen: boolean;\r\n  loadingOverlay: boolean;\r\n  currentPage: string;\r\n  \r\n  // Feature Flags\r\n  features: {\r\n    aiAssistant: boolean;\r\n    advancedAnalytics: boolean;\r\n    realTimeNotifications: boolean;\r\n    darkMode: boolean;\r\n    multiLanguage: boolean;\r\n  };\r\n  \r\n  // System State\r\n  isOnline: boolean;\r\n  lastSync: Date | null;\r\n  maintenanceMode: boolean;\r\n}\r\n\r\ninterface AppStore extends AppState {\r\n  // Actions\r\n  toggleSidebar: () => void;\r\n  setSidebarOpen: (open: boolean) => void;\r\n  toggleMobileMenu: () => void;\r\n  setMobileMenuOpen: (open: boolean) => void;\r\n  setLoadingOverlay: (loading: boolean) => void;\r\n  setCurrentPage: (page: string) => void;\r\n  toggleFeature: (feature: keyof AppState['features']) => void;\r\n  setFeature: (feature: keyof AppState['features'], enabled: boolean) => void;\r\n  setOnlineStatus: (online: boolean) => void;\r\n  setLastSync: (date: Date) => void;\r\n  setMaintenanceMode: (mode: boolean) => void;\r\n  resetAppState: () => void;\r\n}\r\n\r\n// Default App State\r\nconst defaultAppState: AppState = {\r\n  sidebarOpen: true,\r\n  mobileMenuOpen: false,\r\n  loadingOverlay: false,\r\n  currentPage: 'dashboard',\r\n  features: {\r\n    aiAssistant: true,\r\n    advancedAnalytics: true,\r\n    realTimeNotifications: true,\r\n    darkMode: true,\r\n    multiLanguage: true\r\n  },\r\n  isOnline: navigator.onLine,\r\n  lastSync: null,\r\n  maintenanceMode: false\r\n};\r\n\r\nexport const useAppStore = create<AppStore>()(\r\n  devtools(\r\n    (set, get) => ({\r\n      ...defaultAppState,\r\n      \r\n      // Actions\r\n      toggleSidebar: () => {\r\n        set((state) => ({ sidebarOpen: !state.sidebarOpen }));\r\n      },\r\n      \r\n      setSidebarOpen: (open) => {\r\n        set({ sidebarOpen: open });\r\n      },\r\n      \r\n      toggleMobileMenu: () => {\r\n        set((state) => ({ mobileMenuOpen: !state.mobileMenuOpen }));\r\n      },\r\n      \r\n      setMobileMenuOpen: (open) => {\r\n        set({ mobileMenuOpen: open });\r\n      },\r\n      \r\n      setLoadingOverlay: (loading) => {\r\n        set({ loadingOverlay: loading });\r\n      },\r\n      \r\n      setCurrentPage: (page) => {\r\n        set({ currentPage: page });\r\n      },\r\n      \r\n      toggleFeature: (feature) => {\r\n        set((state) => ({\r\n          features: {\r\n            ...state.features,\r\n            [feature]: !state.features[feature]\r\n          }\r\n        }));\r\n      },\r\n      \r\n      setFeature: (feature, enabled) => {\r\n        set((state) => ({\r\n          features: {\r\n            ...state.features,\r\n            [feature]: enabled\r\n          }\r\n        }));\r\n      },\r\n      \r\n      setOnlineStatus: (online) => {\r\n        set({ isOnline: online });\r\n      },\r\n      \r\n      setLastSync: (date) => {\r\n        set({ lastSync: date });\r\n      },\r\n      \r\n      setMaintenanceMode: (mode) => {\r\n        set({ maintenanceMode: mode });\r\n      },\r\n      \r\n      resetAppState: () => {\r\n        set(defaultAppState);\r\n      }\r\n    }),\r\n    { name: 'app-store' }\r\n  )\r\n);\r\n\r\n// Online/Offline Event Listeners\r\nif (typeof window !== 'undefined') {\r\n  window.addEventListener('online', () => {\r\n    useAppStore.getState().setOnlineStatus(true);\r\n  });\r\n  \r\n  window.addEventListener('offline', () => {\r\n    useAppStore.getState().setOnlineStatus(false);\r\n  });\r\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\store\\crmStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'get' is defined but never used. Allowed unused args must match /^_/u.","line":74,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\r\nimport { devtools } from 'zustand/middleware';\r\n\r\n// CRM Types für VALEO NeuroERP\r\ninterface Customer {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  phone?: string;\r\n  company?: string;\r\n  address?: {\r\n    street: string;\r\n    city: string;\r\n    postalCode: string;\r\n    country: string;\r\n  };\r\n  status: 'active' | 'inactive' | 'prospect' | 'lead';\r\n  category: 'A' | 'B' | 'C';\r\n  lastContact?: Date;\r\n  notes?: string;\r\n  tags: string[];\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\ninterface Contact {\r\n  id: string;\r\n  customerId: string;\r\n  type: 'email' | 'phone' | 'meeting' | 'note';\r\n  subject: string;\r\n  description: string;\r\n  date: Date;\r\n  outcome?: string;\r\n  nextAction?: string;\r\n  assignedTo?: string;\r\n}\r\n\r\ninterface CRMStore {\r\n  // State\r\n  customers: Customer[];\r\n  contacts: Contact[];\r\n  selectedCustomer: Customer | null;\r\n  filters: {\r\n    status: string[];\r\n    category: string[];\r\n    tags: string[];\r\n    searchTerm: string;\r\n  };\r\n  loading: boolean;\r\n  error: string | null;\r\n  \r\n  // Actions\r\n  setCustomers: (customers: Customer[]) => void;\r\n  addCustomer: (customer: Omit<Customer, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>;\r\n  updateCustomer: (id: string, updates: Partial<Customer>) => Promise<void>;\r\n  deleteCustomer: (id: string) => Promise<void>;\r\n  setSelectedCustomer: (customer: Customer | null) => void;\r\n  \r\n  setContacts: (contacts: Contact[]) => void;\r\n  addContact: (contact: Omit<Contact, 'id'>) => Promise<void>;\r\n  updateContact: (id: string, updates: Partial<Contact>) => Promise<void>;\r\n  deleteContact: (id: string) => Promise<void>;\r\n  \r\n  setFilters: (filters: Partial<CRMStore['filters']>) => void;\r\n  clearFilters: () => void;\r\n  \r\n  setLoading: (loading: boolean) => void;\r\n  setError: (error: string | null) => void;\r\n  clearError: () => void;\r\n}\r\n\r\nexport const useCRMStore = create<CRMStore>()(\r\n  devtools(\r\n    (set, get) => ({\r\n      // Initial State\r\n      customers: [],\r\n      contacts: [],\r\n      selectedCustomer: null,\r\n      filters: {\r\n        status: [],\r\n        category: [],\r\n        tags: [],\r\n        searchTerm: ''\r\n      },\r\n      loading: false,\r\n      error: null,\r\n      \r\n      // Actions\r\n      setCustomers: (customers) => {\r\n        set({ customers });\r\n      },\r\n      \r\n      addCustomer: async (customerData) => {\r\n        set({ loading: true, error: null });\r\n        try {\r\n          const response = await fetch('/api/crm/customers', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(customerData)\r\n          });\r\n          \r\n          if (!response.ok) {\r\n            throw new Error('Fehler beim Erstellen des Kunden');\r\n          }\r\n          \r\n          const newCustomer = await response.json();\r\n          set((state) => ({\r\n            customers: [...state.customers, newCustomer],\r\n            loading: false\r\n          }));\r\n        } catch (error) {\r\n          set({\r\n            error: error instanceof Error ? error.message : 'Unbekannter Fehler',\r\n            loading: false\r\n          });\r\n        }\r\n      },\r\n      \r\n      updateCustomer: async (id, updates) => {\r\n        set({ loading: true, error: null });\r\n        try {\r\n          const response = await fetch(`/api/crm/customers/${id}`, {\r\n            method: 'PUT',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(updates)\r\n          });\r\n          \r\n          if (!response.ok) {\r\n            throw new Error('Fehler beim Aktualisieren des Kunden');\r\n          }\r\n          \r\n          const updatedCustomer = await response.json();\r\n          set((state) => ({\r\n            customers: state.customers.map(customer =>\r\n              customer.id === id ? updatedCustomer : customer\r\n            ),\r\n            selectedCustomer: state.selectedCustomer?.id === id ? updatedCustomer : state.selectedCustomer,\r\n            loading: false\r\n          }));\r\n        } catch (error) {\r\n          set({\r\n            error: error instanceof Error ? error.message : 'Unbekannter Fehler',\r\n            loading: false\r\n          });\r\n        }\r\n      },\r\n      \r\n      deleteCustomer: async (id) => {\r\n        set({ loading: true, error: null });\r\n        try {\r\n          const response = await fetch(`/api/crm/customers/${id}`, {\r\n            method: 'DELETE'\r\n          });\r\n          \r\n          if (!response.ok) {\r\n            throw new Error('Fehler beim Löschen des Kunden');\r\n          }\r\n          \r\n          set((state) => ({\r\n            customers: state.customers.filter(customer => customer.id !== id),\r\n            selectedCustomer: state.selectedCustomer?.id === id ? null : state.selectedCustomer,\r\n            loading: false\r\n          }));\r\n        } catch (error) {\r\n          set({\r\n            error: error instanceof Error ? error.message : 'Unbekannter Fehler',\r\n            loading: false\r\n          });\r\n        }\r\n      },\r\n      \r\n      setSelectedCustomer: (customer) => {\r\n        set({ selectedCustomer: customer });\r\n      },\r\n      \r\n      setContacts: (contacts) => {\r\n        set({ contacts });\r\n      },\r\n      \r\n      addContact: async (contactData) => {\r\n        set({ loading: true, error: null });\r\n        try {\r\n          const response = await fetch('/api/crm/contacts', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(contactData)\r\n          });\r\n          \r\n          if (!response.ok) {\r\n            throw new Error('Fehler beim Erstellen des Kontakts');\r\n          }\r\n          \r\n          const newContact = await response.json();\r\n          set((state) => ({\r\n            contacts: [...state.contacts, newContact],\r\n            loading: false\r\n          }));\r\n        } catch (error) {\r\n          set({\r\n            error: error instanceof Error ? error.message : 'Unbekannter Fehler',\r\n            loading: false\r\n          });\r\n        }\r\n      },\r\n      \r\n      updateContact: async (id, updates) => {\r\n        set({ loading: true, error: null });\r\n        try {\r\n          const response = await fetch(`/api/crm/contacts/${id}`, {\r\n            method: 'PUT',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(updates)\r\n          });\r\n          \r\n          if (!response.ok) {\r\n            throw new Error('Fehler beim Aktualisieren des Kontakts');\r\n          }\r\n          \r\n          const updatedContact = await response.json();\r\n          set((state) => ({\r\n            contacts: state.contacts.map(contact =>\r\n              contact.id === id ? updatedContact : contact\r\n            ),\r\n            loading: false\r\n          }));\r\n        } catch (error) {\r\n          set({\r\n            error: error instanceof Error ? error.message : 'Unbekannter Fehler',\r\n            loading: false\r\n          });\r\n        }\r\n      },\r\n      \r\n      deleteContact: async (id) => {\r\n        set({ loading: true, error: null });\r\n        try {\r\n          const response = await fetch(`/api/crm/contacts/${id}`, {\r\n            method: 'DELETE'\r\n          });\r\n          \r\n          if (!response.ok) {\r\n            throw new Error('Fehler beim Löschen des Kontakts');\r\n          }\r\n          \r\n          set((state) => ({\r\n            contacts: state.contacts.filter(contact => contact.id !== id),\r\n            loading: false\r\n          }));\r\n        } catch (error) {\r\n          set({\r\n            error: error instanceof Error ? error.message : 'Unbekannter Fehler',\r\n            loading: false\r\n          });\r\n        }\r\n      },\r\n      \r\n      setFilters: (filters) => {\r\n        set((state) => ({\r\n          filters: { ...state.filters, ...filters }\r\n        }));\r\n      },\r\n      \r\n      clearFilters: () => {\r\n        set({\r\n          filters: {\r\n            status: [],\r\n            category: [],\r\n            tags: [],\r\n            searchTerm: ''\r\n          }\r\n        });\r\n      },\r\n      \r\n      setLoading: (loading) => {\r\n        set({ loading });\r\n      },\r\n      \r\n      setError: (error) => {\r\n        set({ error });\r\n      },\r\n      \r\n      clearError: () => {\r\n        set({ error: null });\r\n      }\r\n    }),\r\n    { name: 'crm-store' }\r\n  )\r\n); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\store\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\store\\invoiceStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\store\\notificationStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\store\\themeStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'get' is defined but never used. Allowed unused args must match /^_/u.","line":41,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\r\nimport { devtools, persist } from 'zustand/middleware';\r\n\r\n// Theme Types für VALEO NeuroERP\r\ntype ThemeMode = 'neural' | 'neural-light' | 'neural-dark';\r\n\r\ninterface ThemePreferences {\r\n  mode: ThemeMode;\r\n  language: 'de' | 'en';\r\n  compactMode: boolean;\r\n  highContrast: boolean;\r\n  fontSize: 'small' | 'medium' | 'large';\r\n}\r\n\r\ninterface ThemeStore {\r\n  // State\r\n  themeMode: ThemeMode;\r\n  preferences: ThemePreferences;\r\n  \r\n  // Actions\r\n  setThemeMode: (mode: ThemeMode) => void;\r\n  setLanguage: (language: 'de' | 'en') => void;\r\n  toggleCompactMode: () => void;\r\n  toggleHighContrast: () => void;\r\n  setFontSize: (size: 'small' | 'medium' | 'large') => void;\r\n  resetPreferences: () => void;\r\n}\r\n\r\n// Default Theme Preferences\r\nconst defaultPreferences: ThemePreferences = {\r\n  mode: 'neural',\r\n  language: 'de',\r\n  compactMode: false,\r\n  highContrast: false,\r\n  fontSize: 'medium'\r\n};\r\n\r\nexport const useThemeStore = create<ThemeStore>()(\r\n  devtools(\r\n    persist(\r\n      (set, get) => ({\r\n        // Initial State\r\n        themeMode: 'neural',\r\n        preferences: defaultPreferences,\r\n        \r\n        // Actions\r\n        setThemeMode: (mode) => {\r\n          set({ themeMode: mode });\r\n          set((state) => ({\r\n            preferences: { ...state.preferences, mode }\r\n          }));\r\n        },\r\n        \r\n        setLanguage: (language) => {\r\n          set((state) => ({\r\n            preferences: { ...state.preferences, language }\r\n          }));\r\n        },\r\n        \r\n        toggleCompactMode: () => {\r\n          set((state) => ({\r\n            preferences: { \r\n              ...state.preferences, \r\n              compactMode: !state.preferences.compactMode \r\n            }\r\n          }));\r\n        },\r\n        \r\n        toggleHighContrast: () => {\r\n          set((state) => ({\r\n            preferences: { \r\n              ...state.preferences, \r\n              highContrast: !state.preferences.highContrast \r\n            }\r\n          }));\r\n        },\r\n        \r\n        setFontSize: (fontSize) => {\r\n          set((state) => ({\r\n            preferences: { ...state.preferences, fontSize }\r\n          }));\r\n        },\r\n        \r\n        resetPreferences: () => {\r\n          set({ \r\n            themeMode: 'neural',\r\n            preferences: defaultPreferences \r\n          });\r\n        }\r\n      }),\r\n      {\r\n        name: 'theme-store',\r\n        partialize: (state) => ({\r\n          themeMode: state.themeMode,\r\n          preferences: state.preferences\r\n        })\r\n      }\r\n    ),\r\n    { name: 'theme-store' }\r\n  )\r\n); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\store\\userStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'get' is defined but never used. Allowed unused args must match /^_/u.","line":56,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\r\nimport { devtools } from 'zustand/middleware';\r\n\r\n// TypeScript Interfaces für Benutzer-Management\r\ninterface User {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  role: 'admin' | 'user' | 'manager' | 'accountant';\r\n  department?: string;\r\n  avatar?: string;\r\n  lastLogin?: Date;\r\n  isActive: boolean;\r\n  permissions: string[];\r\n}\r\n\r\ninterface UserProfile {\r\n  id: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  phone?: string;\r\n  department: string;\r\n  position: string;\r\n  avatar?: string;\r\n  preferences: {\r\n    theme: 'neural' | 'neural-light' | 'neural-dark';\r\n    language: 'de' | 'en';\r\n    notifications: boolean;\r\n  };\r\n}\r\n\r\ninterface UserStore {\r\n  // State\r\n  currentUser: User | null;\r\n  userProfile: UserProfile | null;\r\n  users: User[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  \r\n  // Actions\r\n  setCurrentUser: (user: User | null) => void;\r\n  setUserProfile: (profile: UserProfile | null) => void;\r\n  updateUserProfile: (updates: Partial<UserProfile>) => void;\r\n  fetchUsers: () => Promise<void>;\r\n  addUser: (userData: Omit<User, 'id'>) => Promise<void>;\r\n  updateUser: (id: string, userData: Partial<User>) => Promise<void>;\r\n  deleteUser: (id: string) => Promise<void>;\r\n  setLoading: (loading: boolean) => void;\r\n  setError: (error: string | null) => void;\r\n  clearError: () => void;\r\n}\r\n\r\nexport const useUserStore = create<UserStore>()(\r\n  devtools(\r\n    (set, get) => ({\r\n      // Initial State\r\n      currentUser: null,\r\n      userProfile: null,\r\n      users: [],\r\n      loading: false,\r\n      error: null,\r\n      \r\n      // Actions\r\n      setCurrentUser: (user) => {\r\n        set({ currentUser: user });\r\n      },\r\n      \r\n      setUserProfile: (profile) => {\r\n        set({ userProfile: profile });\r\n      },\r\n      \r\n      updateUserProfile: (updates) => {\r\n        set((state) => ({\r\n          userProfile: state.userProfile \r\n            ? { ...state.userProfile, ...updates }\r\n            : null\r\n        }));\r\n      },\r\n      \r\n      fetchUsers: async () => {\r\n        set({ loading: true, error: null });\r\n        try {\r\n          // TODO: Implementiere API-Aufruf\r\n          const response = await fetch('/api/users');\r\n          if (!response.ok) {\r\n            throw new Error('Fehler beim Laden der Benutzer');\r\n          }\r\n          const users = await response.json();\r\n          set({ users, loading: false });\r\n        } catch (error) {\r\n          set({ \r\n            error: error instanceof Error ? error.message : 'Unbekannter Fehler', \r\n            loading: false \r\n          });\r\n        }\r\n      },\r\n      \r\n      addUser: async (userData) => {\r\n        set({ loading: true, error: null });\r\n        try {\r\n          const response = await fetch('/api/users', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(userData)\r\n          });\r\n          if (!response.ok) {\r\n            throw new Error('Fehler beim Erstellen des Benutzers');\r\n          }\r\n          const newUser = await response.json();\r\n          set((state) => ({ \r\n            users: [...state.users, newUser], \r\n            loading: false \r\n          }));\r\n        } catch (error) {\r\n          set({ \r\n            error: error instanceof Error ? error.message : 'Unbekannter Fehler', \r\n            loading: false \r\n          });\r\n        }\r\n      },\r\n      \r\n      updateUser: async (id, userData) => {\r\n        set({ loading: true, error: null });\r\n        try {\r\n          const response = await fetch(`/api/users/${id}`, {\r\n            method: 'PUT',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(userData)\r\n          });\r\n          if (!response.ok) {\r\n            throw new Error('Fehler beim Aktualisieren des Benutzers');\r\n          }\r\n          const updatedUser = await response.json();\r\n          set((state) => ({\r\n            users: state.users.map(user => \r\n              user.id === id ? updatedUser : user\r\n            ),\r\n            loading: false\r\n          }));\r\n        } catch (error) {\r\n          set({ \r\n            error: error instanceof Error ? error.message : 'Unbekannter Fehler', \r\n            loading: false \r\n          });\r\n        }\r\n      },\r\n      \r\n      deleteUser: async (id) => {\r\n        set({ loading: true, error: null });\r\n        try {\r\n          const response = await fetch(`/api/users/${id}`, { \r\n            method: 'DELETE' \r\n          });\r\n          if (!response.ok) {\r\n            throw new Error('Fehler beim Löschen des Benutzers');\r\n          }\r\n          set((state) => ({\r\n            users: state.users.filter(user => user.id !== id),\r\n            loading: false\r\n          }));\r\n        } catch (error) {\r\n          set({ \r\n            error: error instanceof Error ? error.message : 'Unbekannter Fehler', \r\n            loading: false \r\n          });\r\n        }\r\n      },\r\n      \r\n      setLoading: (loading) => {\r\n        set({ loading });\r\n      },\r\n      \r\n      setError: (error) => {\r\n        set({ error });\r\n      },\r\n      \r\n      clearError: () => {\r\n        set({ error: null });\r\n      }\r\n    }),\r\n    { name: 'user-store' }\r\n  )\r\n); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\tests\\accessibility\\AccessibilityTests.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\tests\\e2e\\UserFlow.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\tests\\integration\\ApiIntegration.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\tests\\performance\\PerformanceTests.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\tests\\visual\\VisualRegression.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\themes\\NeuroFlowTheme.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\themes\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\types\\ai.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\types\\crm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\types\\erp.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\types\\forms.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\types\\global.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\types\\invoices.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\types\\messaging.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\types\\preload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\types\\quagga.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\types\\streckengeschaeft.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\utils\\antdImports.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\utils\\cursorComponentGenerator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\utils\\cursorPrompts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\utils\\dualMCPClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\utils\\formatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\utils\\genxaisIntegration.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\utils\\lazyImports.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\utils\\mcpSchemaInjector.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\utils\\muiImports.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\utils\\performance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\utils\\preloading.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\src\\vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\store\\erpStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\store\\zvooveStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\types\\erpTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\Jochen\\VALEO-NeuroERP-2.0\\frontend\\vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]