{"version":3,"mappings":"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","names":[],"ignoreList":[],"sources":["../../src/utils/preloading.ts","../../src/utils/formatters.ts"],"sourcesContent":["/**\r\n * 🚀 Preloading-System für VALEO NeuroERP\r\n * Intelligentes Vorladen kritischer Routen und Komponenten\r\n */\r\n\r\nimport { useEffect, useRef } from 'react';\r\n\r\n// Preloading-Strategien\r\nexport enum PreloadStrategy {\r\n  IMMEDIATE = 'immediate',    // Sofortiges Laden\r\n  IDLE = 'idle',             // Bei Browser-Idle\r\n  HOVER = 'hover',           // Bei Hover\r\n  INTERSECTION = 'intersection' // Bei Sichtbarkeit\r\n}\r\n\r\n// Preload-Konfiguration\r\ninterface PreloadConfig {\r\n  strategy: PreloadStrategy;\r\n  priority: 'high' | 'medium' | 'low';\r\n  timeout?: number;\r\n}\r\n\r\n// Preload-Manager\r\nclass PreloadManager {\r\n  private preloadedModules = new Set<string>();\r\n  private preloadQueue = new Map<string, () => Promise<any>>();\r\n  private observers = new Map<string, IntersectionObserver>();\r\n\r\n  /**\r\n   * Registriert ein Modul für Preloading\r\n   */\r\n  registerModule(\r\n    moduleName: string, \r\n    importFn: () => Promise<any>, \r\n    config: PreloadConfig\r\n  ): void {\r\n    if (this.preloadedModules.has(moduleName)) {\r\n      return; // Bereits geladen\r\n    }\r\n\r\n    this.preloadQueue.set(moduleName, importFn);\r\n\r\n    switch (config.strategy) {\r\n      case PreloadStrategy.IMMEDIATE:\r\n        this.preloadImmediate(moduleName, importFn);\r\n        break;\r\n      case PreloadStrategy.IDLE:\r\n        this.preloadOnIdle(moduleName, importFn);\r\n        break;\r\n      case PreloadStrategy.HOVER:\r\n        // Wird über usePreloadOnHover Hook implementiert\r\n        break;\r\n      case PreloadStrategy.INTERSECTION:\r\n        // Wird über usePreloadOnIntersection Hook implementiert\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sofortiges Preloading\r\n   */\r\n  private preloadImmediate(moduleName: string, importFn: () => Promise<any>): void {\r\n    importFn()\r\n      .then(() => {\r\n        this.preloadedModules.add(moduleName);\r\n        console.log(`🚀 ${moduleName} sofort vorgeladen`);\r\n      })\r\n      .catch(error => {\r\n        console.warn(`⚠️ Preloading fehlgeschlagen für ${moduleName}:`, error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Preloading bei Browser-Idle\r\n   */\r\n  private preloadOnIdle(moduleName: string, importFn: () => Promise<any>): void {\r\n    if ('requestIdleCallback' in window) {\r\n      (window as any).requestIdleCallback(() => {\r\n        this.preloadImmediate(moduleName, importFn);\r\n      });\r\n    } else {\r\n      // Fallback für ältere Browser\r\n      setTimeout(() => {\r\n        this.preloadImmediate(moduleName, importFn);\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preloading bei Hover über Element\r\n   */\r\n  preloadOnHover(element: HTMLElement, moduleName: string): void {\r\n    const importFn = this.preloadQueue.get(moduleName);\r\n    if (!importFn) return;\r\n\r\n    const handleMouseEnter = () => {\r\n      this.preloadImmediate(moduleName, importFn);\r\n      element.removeEventListener('mouseenter', handleMouseEnter);\r\n    };\r\n\r\n    element.addEventListener('mouseenter', handleMouseEnter);\r\n  }\r\n\r\n  /**\r\n   * Preloading bei Sichtbarkeit\r\n   */\r\n  preloadOnIntersection(element: HTMLElement, moduleName: string): void {\r\n    const importFn = this.preloadQueue.get(moduleName);\r\n    if (!importFn) return;\r\n\r\n    const observer = new IntersectionObserver(\r\n      (entries) => {\r\n        entries.forEach(entry => {\r\n          if (entry.isIntersecting) {\r\n            this.preloadImmediate(moduleName, importFn);\r\n            observer.disconnect();\r\n          }\r\n        });\r\n      },\r\n      { threshold: 0.1 }\r\n    );\r\n\r\n    observer.observe(element);\r\n    this.observers.set(moduleName, observer);\r\n  }\r\n\r\n  /**\r\n   * Prüft ob Modul bereits vorgeladen wurde\r\n   */\r\n  isPreloaded(moduleName: string): boolean {\r\n    return this.preloadedModules.has(moduleName);\r\n  }\r\n\r\n  /**\r\n   * Bereinigt Observer\r\n   */\r\n  cleanup(): void {\r\n    this.observers.forEach(observer => observer.disconnect());\r\n    this.observers.clear();\r\n  }\r\n}\r\n\r\n// Globaler Preload-Manager\r\nexport const preloadManager = new PreloadManager();\r\n\r\n// React Hooks für Preloading\r\n\r\n/**\r\n * Hook für Hover-basiertes Preloading\r\n */\r\nexport const usePreloadOnHover = (moduleName: string) => {\r\n  const elementRef = useRef<HTMLElement>(null);\r\n\r\n  useEffect(() => {\r\n    const element = elementRef.current;\r\n    if (element) {\r\n      preloadManager.preloadOnHover(element, moduleName);\r\n    }\r\n  }, [moduleName]);\r\n\r\n  return elementRef;\r\n};\r\n\r\n/**\r\n * Hook für Intersection-basiertes Preloading\r\n */\r\nexport const usePreloadOnIntersection = (moduleName: string) => {\r\n  const elementRef = useRef<HTMLElement>(null);\r\n\r\n  useEffect(() => {\r\n    const element = elementRef.current;\r\n    if (element) {\r\n      preloadManager.preloadOnIntersection(element, moduleName);\r\n    }\r\n  }, [moduleName]);\r\n\r\n  return elementRef;\r\n};\r\n\r\n/**\r\n * Hook für sofortiges Preloading\r\n */\r\nexport const usePreloadImmediate = (moduleName: string, importFn: () => Promise<any>) => {\r\n  useEffect(() => {\r\n    preloadManager.registerModule(moduleName, importFn, {\r\n      strategy: PreloadStrategy.IMMEDIATE,\r\n      priority: 'high'\r\n    });\r\n  }, [moduleName, importFn]);\r\n};\r\n\r\n/**\r\n * Hook für Idle-basiertes Preloading\r\n */\r\nexport const usePreloadOnIdle = (moduleName: string, importFn: () => Promise<any>) => {\r\n  useEffect(() => {\r\n    preloadManager.registerModule(moduleName, importFn, {\r\n      strategy: PreloadStrategy.IDLE,\r\n      priority: 'medium'\r\n    });\r\n  }, [moduleName, importFn]);\r\n};\r\n\r\n// Preloading-Konfiguration für kritische Routen\r\nexport const CRITICAL_ROUTES = {\r\n  DASHBOARD: {\r\n    moduleName: 'NeuroFlowDashboard',\r\n    importFn: () => import('../components/neuroflow/NeuroFlowDashboard'),\r\n    config: { strategy: PreloadStrategy.IMMEDIATE, priority: 'high' as const }\r\n  },\r\n  POS_SYSTEM: {\r\n    moduleName: 'POSPage',\r\n    importFn: () => import('../pages/POS/POSPage'),\r\n    config: { strategy: PreloadStrategy.IDLE, priority: 'medium' as const }\r\n  },\r\n  LAKASIR_FEATURES: {\r\n    moduleName: 'LakasirFeatures',\r\n    importFn: () => import('../pages/POS/LakasirFeatures'),\r\n    config: { strategy: PreloadStrategy.IDLE, priority: 'medium' as const }\r\n  }\r\n};\r\n\r\n/**\r\n * Initialisiert Preloading für kritische Routen\r\n */\r\nexport const initializeCriticalPreloading = (): void => {\r\n  Object.values(CRITICAL_ROUTES).forEach(route => {\r\n    preloadManager.registerModule(\r\n      route.moduleName,\r\n      route.importFn,\r\n      route.config\r\n    );\r\n  });\r\n\r\n  console.log('🚀 Kritische Routen für Preloading registriert');\r\n};\r\n\r\n// Cleanup bei App-Unmount\r\nif (typeof window !== 'undefined') {\r\n  window.addEventListener('beforeunload', () => {\r\n    preloadManager.cleanup();\r\n  });\r\n} ","/**\r\n * Utility-Funktionen für die Formatierung von Daten\r\n * Verwendet für E-Invoicing, POS-System und andere Komponenten\r\n */\r\n\r\n/**\r\n * Formatiert einen Betrag als Währung\r\n * @param amount - Der zu formatierende Betrag\r\n * @param currency - Die Währung (Standard: EUR)\r\n * @param locale - Das Locale (Standard: de-DE)\r\n * @returns Formatierter Währungsstring\r\n */\r\nexport const formatCurrency = (\r\n  amount: number,\r\n  currency: string = 'EUR',\r\n  locale: string = 'de-DE'\r\n): string => {\r\n  return new Intl.NumberFormat(locale, {\r\n    style: 'currency',\r\n    currency: currency,\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2\r\n  }).format(amount);\r\n};\r\n\r\n/**\r\n * Formatiert ein Datum\r\n * @param date - Das zu formatierende Datum\r\n * @param locale - Das Locale (Standard: de-DE)\r\n * @param options - Zusätzliche Formatierungsoptionen\r\n * @returns Formatierter Datumsstring\r\n */\r\nexport const formatDate = (\r\n  date: Date | string | number,\r\n  locale: string = 'de-DE',\r\n  options?: Intl.DateTimeFormatOptions\r\n): string => {\r\n  const dateObj = typeof date === 'string' || typeof date === 'number' \r\n    ? new Date(date) \r\n    : date;\r\n  \r\n  const defaultOptions: Intl.DateTimeFormatOptions = {\r\n    year: 'numeric',\r\n    month: '2-digit',\r\n    day: '2-digit'\r\n  };\r\n\r\n  return new Intl.DateTimeFormat(locale, {\r\n    ...defaultOptions,\r\n    ...options\r\n  }).format(dateObj);\r\n};\r\n\r\n/**\r\n * Formatiert ein Datum mit Uhrzeit\r\n * @param date - Das zu formatierende Datum\r\n * @param locale - Das Locale (Standard: de-DE)\r\n * @returns Formatierter Datum-Uhrzeit-String\r\n */\r\nexport const formatDateTime = (\r\n  date: Date | string | number,\r\n  locale: string = 'de-DE'\r\n): string => {\r\n  const dateObj = typeof date === 'string' || typeof date === 'number' \r\n    ? new Date(date) \r\n    : date;\r\n  \r\n  return new Intl.DateTimeFormat(locale, {\r\n    year: 'numeric',\r\n    month: '2-digit',\r\n    day: '2-digit',\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n    second: '2-digit'\r\n  }).format(dateObj);\r\n};\r\n\r\n/**\r\n * Formatiert eine Telefonnummer\r\n * @param phone - Die zu formatierende Telefonnummer\r\n * @returns Formatierte Telefonnummer\r\n */\r\nexport const formatPhone = (phone: string): string => {\r\n  // Entferne alle nicht-numerischen Zeichen\r\n  const cleaned = phone.replace(/\\D/g, '');\r\n  \r\n  // Deutsche Telefonnummer-Formatierung\r\n  if (cleaned.length === 11 && cleaned.startsWith('49')) {\r\n    return `+${cleaned.slice(0, 2)} ${cleaned.slice(2, 4)} ${cleaned.slice(4, 7)} ${cleaned.slice(7, 9)} ${cleaned.slice(9)}`;\r\n  }\r\n  \r\n  if (cleaned.length === 10 && cleaned.startsWith('0')) {\r\n    return `${cleaned.slice(0, 3)} ${cleaned.slice(3, 6)} ${cleaned.slice(6, 8)} ${cleaned.slice(8)}`;\r\n  }\r\n  \r\n  return phone;\r\n};\r\n\r\n/**\r\n * Formatiert eine Steuernummer\r\n * @param taxNumber - Die zu formatierende Steuernummer\r\n * @returns Formatierte Steuernummer\r\n */\r\nexport const formatTaxNumber = (taxNumber: string): string => {\r\n  const cleaned = taxNumber.replace(/\\D/g, '');\r\n  \r\n  if (cleaned.length === 11) {\r\n    return `${cleaned.slice(0, 3)}/${cleaned.slice(3, 6)}/${cleaned.slice(6, 9)}/${cleaned.slice(9)}`;\r\n  }\r\n  \r\n  return taxNumber;\r\n};\r\n\r\n/**\r\n * Formatiert eine IBAN\r\n * @param iban - Die zu formatierende IBAN\r\n * @returns Formatierte IBAN\r\n */\r\nexport const formatIBAN = (iban: string): string => {\r\n  const cleaned = iban.replace(/\\s/g, '').toUpperCase();\r\n  \r\n  if (cleaned.length === 22) {\r\n    return cleaned.match(/.{1,4}/g)?.join(' ') || cleaned;\r\n  }\r\n  \r\n  return iban;\r\n};\r\n\r\n/**\r\n * Formatiert eine Zahl mit Tausendertrennzeichen\r\n * @param number - Die zu formatierende Zahl\r\n * @param locale - Das Locale (Standard: de-DE)\r\n * @returns Formatierte Zahl\r\n */\r\nexport const formatNumber = (\r\n  number: number,\r\n  locale: string = 'de-DE'\r\n): string => {\r\n  return new Intl.NumberFormat(locale).format(number);\r\n};\r\n\r\n/**\r\n * Formatiert eine Prozentangabe\r\n * @param value - Der Prozentwert (0-1)\r\n * @param locale - Das Locale (Standard: de-DE)\r\n * @returns Formatierte Prozentangabe\r\n */\r\nexport const formatPercentage = (\r\n  value: number,\r\n  locale: string = 'de-DE'\r\n): string => {\r\n  return new Intl.NumberFormat(locale, {\r\n    style: 'percent',\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2\r\n  }).format(value);\r\n};\r\n\r\n/**\r\n * Formatiert eine Dateigröße\r\n * @param bytes - Größe in Bytes\r\n * @returns Formatierte Dateigröße\r\n */\r\nexport const formatFileSize = (bytes: number): string => {\r\n  if (bytes === 0) return '0 Bytes';\r\n  \r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  \r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n};\r\n\r\n/**\r\n * Formatiert eine Uhrzeit\r\n * @param date - Das Datum mit Uhrzeit\r\n * @param locale - Das Locale (Standard: de-DE)\r\n * @returns Formatierte Uhrzeit\r\n */\r\nexport const formatTime = (\r\n  date: Date | string | number,\r\n  locale: string = 'de-DE'\r\n): string => {\r\n  const dateObj = typeof date === 'string' || typeof date === 'number' \r\n    ? new Date(date) \r\n    : date;\r\n  \r\n  return new Intl.DateTimeFormat(locale, {\r\n    hour: '2-digit',\r\n    minute: '2-digit'\r\n  }).format(dateObj);\r\n}; "],"file":"js/utils-Cn0CNrbA.js"}