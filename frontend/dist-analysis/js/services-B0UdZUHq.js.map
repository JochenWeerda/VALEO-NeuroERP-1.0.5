{"version":3,"file":"services-B0UdZUHq.js","sources":["../../src/services/authService.ts","../../src/services/PreloadService.ts","../../src/services/eInvoicingApi.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000';\r\n\r\nexport interface LoginRequest {\r\n  username: string;\r\n  password: string;\r\n}\r\n\r\nexport interface LoginResponse {\r\n  access_token: string;\r\n  refresh_token: string;\r\n  token_type: string;\r\n  expires_in: number;\r\n  user: {\r\n    id: string;\r\n    username: string;\r\n    email: string;\r\n    full_name: string;\r\n    role: string;\r\n  };\r\n}\r\n\r\nexport interface User {\r\n  id: string;\r\n  username: string;\r\n  email: string;\r\n  full_name: string;\r\n  role: string;\r\n  disabled: boolean;\r\n  created_at?: string;\r\n}\r\n\r\nclass AuthService {\r\n  private tokenKey = 'valeo_access_token';\r\n  private refreshTokenKey = 'valeo_refresh_token';\r\n\r\n  async login(credentials: LoginRequest): Promise<LoginResponse> {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/auth/login`, credentials);\r\n      const data = response.data;\r\n      \r\n      // Tokens speichern\r\n      localStorage.setItem(this.tokenKey, data.access_token);\r\n      localStorage.setItem(this.refreshTokenKey, data.refresh_token);\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  async refreshToken(): Promise<LoginResponse> {\r\n    try {\r\n      const refreshToken = localStorage.getItem(this.refreshTokenKey);\r\n      if (!refreshToken) {\r\n        throw new Error('Kein Refresh Token verfügbar');\r\n      }\r\n\r\n      const response = await axios.post(`${API_BASE_URL}/auth/refresh`, {\r\n        refresh_token: refreshToken\r\n      });\r\n      \r\n      const data = response.data;\r\n      localStorage.setItem(this.tokenKey, data.access_token);\r\n      localStorage.setItem(this.refreshTokenKey, data.refresh_token);\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      this.logout();\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  async logout(): Promise<void> {\r\n    try {\r\n      const refreshToken = localStorage.getItem(this.refreshTokenKey);\r\n      if (refreshToken) {\r\n        await axios.post(`${API_BASE_URL}/auth/logout`, {\r\n          refresh_token: refreshToken\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    } finally {\r\n      localStorage.removeItem(this.tokenKey);\r\n      localStorage.removeItem(this.refreshTokenKey);\r\n    }\r\n  }\r\n\r\n  async getCurrentUser(): Promise<User> {\r\n    try {\r\n      const token = this.getAccessToken();\r\n      const response = await axios.get(`${API_BASE_URL}/auth/me`, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  getAccessToken(): string | null {\r\n    return localStorage.getItem(this.tokenKey);\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return !!this.getAccessToken();\r\n  }\r\n\r\n  private handleError(error: any): Error {\r\n    if (error.response?.data?.detail) {\r\n      return new Error(error.response.data.detail);\r\n    }\r\n    return new Error('Ein Fehler ist aufgetreten');\r\n  }\r\n}\r\n\r\nexport const authService = new AuthService(); ","import { lazy, ComponentType } from 'react';\r\n\r\n// Erweiterte Typen für Preloading-Strategien\r\nexport interface PreloadConfig {\r\n  priority: 'critical' | 'high' | 'medium' | 'low';\r\n  preloadTrigger: 'immediate' | 'idle' | 'hover' | 'intersection' | 'network-idle';\r\n  dependencies?: string[];\r\n  estimatedSize?: number; // Geschätzte Bundle-Größe in KB\r\n  loadTime?: number; // Geschätzte Ladezeit in ms\r\n}\r\n\r\n// Performance-Metriken Interface\r\nexport interface PerformanceMetrics {\r\n  route: string;\r\n  loadTime: number;\r\n  bundleSize: number;\r\n  preloadTime?: number;\r\n  cacheHit: boolean;\r\n  timestamp: number;\r\n}\r\n\r\n// Bundle-Analyse Interface\r\nexport interface BundleAnalysis {\r\n  totalSize: number;\r\n  chunkCount: number;\r\n  largestChunks: Array<{\r\n    name: string;\r\n    size: number;\r\n    percentage: number;\r\n  }>;\r\n  optimizationSuggestions: string[];\r\n}\r\n\r\n// Kritische Routen-Konfiguration mit erweiterten Metriken\r\nexport const CRITICAL_ROUTES: Record<string, PreloadConfig> = {\r\n  '/dashboard': {\r\n    priority: 'critical',\r\n    preloadTrigger: 'immediate',\r\n    estimatedSize: 45,\r\n    loadTime: 120\r\n  },\r\n  '/streckengeschaeft': {\r\n    priority: 'high',\r\n    preloadTrigger: 'idle',\r\n    dependencies: ['/dashboard'],\r\n    estimatedSize: 78,\r\n    loadTime: 200\r\n  },\r\n  '/pos': {\r\n    priority: 'high',\r\n    preloadTrigger: 'idle',\r\n    dependencies: ['/dashboard'],\r\n    estimatedSize: 92,\r\n    loadTime: 250\r\n  },\r\n  '/lakasir-features': {\r\n    priority: 'medium',\r\n    preloadTrigger: 'hover',\r\n    estimatedSize: 35,\r\n    loadTime: 150\r\n  },\r\n  '/daily-report': {\r\n    priority: 'medium',\r\n    preloadTrigger: 'hover',\r\n    dependencies: ['/pos'],\r\n    estimatedSize: 28,\r\n    loadTime: 100\r\n  },\r\n  '/e-invoicing': {\r\n    priority: 'medium',\r\n    preloadTrigger: 'network-idle',\r\n    estimatedSize: 65,\r\n    loadTime: 180\r\n  },\r\n  '/crm': {\r\n    priority: 'low',\r\n    preloadTrigger: 'intersection',\r\n    estimatedSize: 120,\r\n    loadTime: 300\r\n  }\r\n};\r\n\r\n// Lazy-Loading-Komponenten mit erweiterter Preloading-Unterstützung\r\nexport const lazyWithPreload = <T extends ComponentType<any>>(\r\n  importFunc: () => Promise<{ default: T }>,\r\n  routeName: string,\r\n  config?: Partial<PreloadConfig>\r\n) => {\r\n  let Component: T | null = null;\r\n  let loadingPromise: Promise<T> | null = null;\r\n  let loadStartTime: number | null = null;\r\n\r\n  const loadComponent = async (): Promise<T> => {\r\n    if (Component) return Component;\r\n    if (loadingPromise) return loadingPromise;\r\n\r\n    loadStartTime = performance.now();\r\n    loadingPromise = importFunc().then(module => {\r\n      Component = module.default;\r\n      const loadTime = performance.now() - (loadStartTime || 0);\r\n      \r\n      // Performance-Metrik speichern\r\n      preloadService.recordPerformanceMetric({\r\n        route: routeName,\r\n        loadTime,\r\n        bundleSize: config?.estimatedSize || 0,\r\n        cacheHit: false,\r\n        timestamp: Date.now()\r\n      });\r\n      \r\n      return Component;\r\n    });\r\n\r\n    return loadingPromise;\r\n  };\r\n\r\n  const preload = () => {\r\n    if (!Component && !loadingPromise) {\r\n      loadComponent();\r\n    }\r\n  };\r\n\r\n  const preloadWithPriority = (priority: PreloadConfig['priority'] = 'medium') => {\r\n    if (!Component && !loadingPromise) {\r\n      preloadService.queuePreload(routeName, priority, loadComponent);\r\n    }\r\n  };\r\n\r\n  return {\r\n    Component: lazy(importFunc),\r\n    preload,\r\n    preloadWithPriority,\r\n    isLoaded: () => Component !== null,\r\n    routeName,\r\n    config\r\n  };\r\n};\r\n\r\n// Erweiterter PreloadService für intelligentes Preloading und Performance-Monitoring\r\nclass PreloadService {\r\n  private preloadedRoutes = new Set<string>();\r\n  private preloadQueue: Array<{route: string, priority: number, callback: () => void}> = [];\r\n  private performanceMetrics: PerformanceMetrics[] = [];\r\n  private isIdle = false;\r\n  private networkIdleTimer: number | null = null;\r\n  private bundleAnalysis: BundleAnalysis | null = null;\r\n\r\n  constructor() {\r\n    this.setupIdleDetection();\r\n    this.setupIntersectionObserver();\r\n    this.setupNetworkIdleDetection();\r\n    this.setupPerformanceMonitoring();\r\n  }\r\n\r\n  // Bundle-Analyse generieren\r\n  async generateBundleAnalysis(): Promise<BundleAnalysis> {\r\n    try {\r\n      // Versuche Bundle-Analyse-Datei zu laden\r\n      const response = await fetch('/bundle-analysis.json');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        this.bundleAnalysis = data;\r\n        return data;\r\n      }\r\n    } catch (error) {\r\n      console.warn('Bundle-Analyse nicht verfügbar:', error);\r\n    }\r\n\r\n    // Fallback: Schätzung basierend auf PreloadConfig\r\n    const totalSize = Object.values(CRITICAL_ROUTES).reduce((sum, config) => \r\n      sum + (config.estimatedSize || 0), 0\r\n    );\r\n\r\n    this.bundleAnalysis = {\r\n      totalSize,\r\n      chunkCount: Object.keys(CRITICAL_ROUTES).length,\r\n      largestChunks: Object.entries(CRITICAL_ROUTES)\r\n        .map(([route, config]) => ({\r\n          name: route,\r\n          size: config.estimatedSize || 0,\r\n          percentage: ((config.estimatedSize || 0) / totalSize) * 100\r\n        }))\r\n        .sort((a, b) => b.size - a.size)\r\n        .slice(0, 5),\r\n      optimizationSuggestions: this.generateOptimizationSuggestions()\r\n    };\r\n\r\n    return this.bundleAnalysis;\r\n  }\r\n\r\n  // Optimierungsvorschläge generieren\r\n  private generateOptimizationSuggestions(): string[] {\r\n    const suggestions: string[] = [];\r\n    \r\n    if (this.bundleAnalysis) {\r\n      const { totalSize, largestChunks } = this.bundleAnalysis;\r\n      \r\n      if (totalSize > 500) {\r\n        suggestions.push('Bundle-Größe über 500KB - Code-Splitting empfohlen');\r\n      }\r\n      \r\n      if (largestChunks[0]?.percentage > 30) {\r\n        suggestions.push(`Chunk \"${largestChunks[0].name}\" macht ${largestChunks[0].percentage.toFixed(1)}% aus - Optimierung empfohlen`);\r\n      }\r\n      \r\n      if (largestChunks.length > 3) {\r\n        suggestions.push('Mehr als 3 große Chunks - Konsolidierung empfohlen');\r\n      }\r\n    }\r\n    \r\n    return suggestions;\r\n  }\r\n\r\n  // Performance-Metrik aufzeichnen\r\n  recordPerformanceMetric(metric: PerformanceMetrics): void {\r\n    this.performanceMetrics.push(metric);\r\n    \r\n    // Nur die letzten 100 Metriken behalten\r\n    if (this.performanceMetrics.length > 100) {\r\n      this.performanceMetrics = this.performanceMetrics.slice(-100);\r\n    }\r\n    \r\n    // Performance-Warnungen\r\n    if (metric.loadTime > 1000) {\r\n      console.warn(`⚠️ Langsame Route: ${metric.route} (${metric.loadTime.toFixed(0)}ms)`);\r\n    }\r\n  }\r\n\r\n  // Performance-Report generieren\r\n  getPerformanceReport(): {\r\n    averageLoadTime: number;\r\n    slowestRoutes: PerformanceMetrics[];\r\n    totalPreloadedRoutes: number;\r\n    cacheHitRate: number;\r\n  } {\r\n    const avgLoadTime = this.performanceMetrics.length > 0\r\n      ? this.performanceMetrics.reduce((sum, m) => sum + m.loadTime, 0) / this.performanceMetrics.length\r\n      : 0;\r\n\r\n    const slowestRoutes = [...this.performanceMetrics]\r\n      .sort((a, b) => b.loadTime - a.loadTime)\r\n      .slice(0, 5);\r\n\r\n    const cacheHitRate = this.performanceMetrics.length > 0\r\n      ? (this.performanceMetrics.filter(m => m.cacheHit).length / this.performanceMetrics.length) * 100\r\n      : 0;\r\n\r\n    return {\r\n      averageLoadTime: avgLoadTime,\r\n      slowestRoutes,\r\n      totalPreloadedRoutes: this.preloadedRoutes.size,\r\n      cacheHitRate\r\n    };\r\n  }\r\n\r\n  // Preload mit Priorität in Queue einreihen\r\n  queuePreload(route: string, priority: PreloadConfig['priority'], callback: () => void): void {\r\n    const priorityMap = { critical: 4, high: 3, medium: 2, low: 1 };\r\n    const priorityValue = priorityMap[priority];\r\n    \r\n    this.preloadQueue.push({ route, priority: priorityValue, callback });\r\n    this.preloadQueue.sort((a, b) => b.priority - a.priority);\r\n    \r\n    this.processQueue();\r\n  }\r\n\r\n  // Queue verarbeiten\r\n  private processQueue(): void {\r\n    if (this.isIdle && this.preloadQueue.length > 0) {\r\n      const item = this.preloadQueue.shift();\r\n      if (item) {\r\n        item.callback();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Sofortiges Preloading für kritische Routen\r\n  preloadCriticalRoutes(): void {\r\n    Object.entries(CRITICAL_ROUTES)\r\n      .filter(([_, config]) => config.priority === 'critical')\r\n      .forEach(([route]) => {\r\n        this.preloadRoute(route);\r\n      });\r\n  }\r\n\r\n  // Preloading basierend auf Konfiguration\r\n  preloadRoute(route: string): void {\r\n    if (this.preloadedRoutes.has(route)) return;\r\n\r\n    const config = CRITICAL_ROUTES[route];\r\n    if (!config) return;\r\n\r\n    switch (config.preloadTrigger) {\r\n      case 'immediate':\r\n        this.executePreload(route);\r\n        break;\r\n      case 'idle':\r\n        this.queueForIdle(() => this.executePreload(route));\r\n        break;\r\n      case 'network-idle':\r\n        this.queueForNetworkIdle(() => this.executePreload(route));\r\n        break;\r\n      case 'hover':\r\n        this.setupHoverPreload(route);\r\n        break;\r\n      case 'intersection':\r\n        this.setupIntersectionPreload(route);\r\n        break;\r\n    }\r\n  }\r\n\r\n  // Abhängigkeiten preloaden\r\n  preloadDependencies(route: string): void {\r\n    const config = CRITICAL_ROUTES[route];\r\n    if (config?.dependencies) {\r\n      config.dependencies.forEach(dep => this.preloadRoute(dep));\r\n    }\r\n  }\r\n\r\n  // Preload basierend auf aktueller Route\r\n  preloadBasedOnCurrentRoute(currentRoute: string): void {\r\n    const likelyNextRoutes = this.getLikelyNextRoutes(currentRoute);\r\n    likelyNextRoutes.forEach(route => this.preloadRoute(route));\r\n  }\r\n\r\n  // Wahrscheinliche nächste Routen basierend auf aktueller Route\r\n  private getLikelyNextRoutes(currentRoute: string): string[] {\r\n    const routeFlow: Record<string, string[]> = {\r\n      '/dashboard': ['/streckengeschaeft', '/pos', '/lakasir-features'],\r\n      '/streckengeschaeft': ['/pos', '/lakasir-features'],\r\n      '/pos': ['/daily-report', '/dashboard'],\r\n      '/lakasir-features': ['/dashboard', '/streckengeschaeft'],\r\n      '/daily-report': ['/pos', '/dashboard'],\r\n      '/e-invoicing': ['/dashboard', '/crm'],\r\n      '/crm': ['/dashboard', '/e-invoicing']\r\n    };\r\n\r\n    return routeFlow[currentRoute] || [];\r\n  }\r\n\r\n  // Preload ausführen\r\n  private executePreload(route: string): void {\r\n    if (this.preloadedRoutes.has(route)) return;\r\n\r\n    const startTime = performance.now();\r\n    console.log(`🔄 Preloading route: ${route}`);\r\n    \r\n    this.preloadedRoutes.add(route);\r\n\r\n    // Performance-Metrik aufzeichnen\r\n    this.recordPerformanceMetric({\r\n      route,\r\n      loadTime: performance.now() - startTime,\r\n      bundleSize: CRITICAL_ROUTES[route]?.estimatedSize || 0,\r\n      preloadTime: performance.now() - startTime,\r\n      cacheHit: false,\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n\r\n  // Queue für Idle-Zeit\r\n  private queueForIdle(callback: () => void): void {\r\n    if (this.isIdle) {\r\n      callback();\r\n    } else {\r\n      this.preloadQueue.push({ route: '', priority: 1, callback });\r\n    }\r\n  }\r\n\r\n  // Queue für Network-Idle\r\n  private queueForNetworkIdle(callback: () => void): void {\r\n    if (this.networkIdleTimer) {\r\n      clearTimeout(this.networkIdleTimer);\r\n    }\r\n    \r\n    this.networkIdleTimer = window.setTimeout(() => {\r\n      callback();\r\n    }, 1000); // 1 Sekunde nach letzter Netzwerkaktivität\r\n  }\r\n\r\n  // Idle-Detection Setup\r\n  private setupIdleDetection(): void {\r\n    if ('requestIdleCallback' in window) {\r\n      const processQueue = () => {\r\n        this.isIdle = true;\r\n        this.processQueue();\r\n        this.isIdle = false;\r\n        requestIdleCallback(processQueue);\r\n      };\r\n      requestIdleCallback(processQueue);\r\n    }\r\n  }\r\n\r\n  // Network-Idle Detection Setup\r\n  private setupNetworkIdleDetection(): void {\r\n    let lastNetworkActivity = Date.now();\r\n    \r\n    // Netzwerkaktivität überwachen\r\n    const originalFetch = window.fetch;\r\n    window.fetch = (...args) => {\r\n      lastNetworkActivity = Date.now();\r\n      return originalFetch.apply(window, args);\r\n    };\r\n  }\r\n\r\n  // Performance-Monitoring Setup\r\n  private setupPerformanceMonitoring(): void {\r\n    // Navigation Timing API\r\n    if ('performance' in window) {\r\n      window.addEventListener('load', () => {\r\n        const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\r\n        if (navigation) {\r\n          console.log(`📊 Page Load Time: ${navigation.loadEventEnd - navigation.loadEventStart}ms`);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Intersection Observer Setup\r\n  private setupIntersectionObserver(): void {\r\n    if ('IntersectionObserver' in window) {\r\n      console.log('🔍 Intersection Observer für Preloading eingerichtet');\r\n    }\r\n  }\r\n\r\n  // Hover-Preloading Setup\r\n  private setupHoverPreload(route: string): void {\r\n    const links = document.querySelectorAll(`[data-route=\"${route}\"]`);\r\n    links.forEach(link => {\r\n      link.addEventListener('mouseenter', () => {\r\n        this.executePreload(route);\r\n      });\r\n    });\r\n  }\r\n\r\n  // Intersection-Preloading Setup\r\n  private setupIntersectionPreload(route: string): void {\r\n    const links = document.querySelectorAll(`[data-route=\"${route}\"]`);\r\n    const observer = new IntersectionObserver(\r\n      (entries) => {\r\n        entries.forEach(entry => {\r\n          if (entry.isIntersecting) {\r\n            this.executePreload(route);\r\n            observer.unobserve(entry.target);\r\n          }\r\n        });\r\n      },\r\n      { threshold: 0.1 }\r\n    );\r\n    links.forEach(link => observer.observe(link));\r\n  }\r\n\r\n  // Preload-Status abrufen\r\n  getPreloadStatus(): Record<string, boolean> {\r\n    const status: Record<string, boolean> = {};\r\n    Object.keys(CRITICAL_ROUTES).forEach(route => {\r\n      status[route] = this.preloadedRoutes.has(route);\r\n    });\r\n    return status;\r\n  }\r\n\r\n  // Alle Routen preloaden\r\n  preloadAllRoutes(): void {\r\n    Object.keys(CRITICAL_ROUTES).forEach(route => {\r\n      this.preloadRoute(route);\r\n    });\r\n  }\r\n\r\n  // Bundle-Analyse abrufen\r\n  getBundleAnalysis(): BundleAnalysis | null {\r\n    return this.bundleAnalysis;\r\n  }\r\n\r\n  // Service-Status abrufen\r\n  getServiceStatus(): {\r\n    preloadedRoutes: number;\r\n    queueLength: number;\r\n    isIdle: boolean;\r\n    performanceMetrics: number;\r\n  } {\r\n    return {\r\n      preloadedRoutes: this.preloadedRoutes.size,\r\n      queueLength: this.preloadQueue.length,\r\n      isIdle: this.isIdle,\r\n      performanceMetrics: this.performanceMetrics.length\r\n    };\r\n  }\r\n}\r\n\r\n// Singleton-Instanz\r\nexport const preloadService = new PreloadService();\r\n\r\n// React Hook für erweitertes Preloading\r\nexport const usePreload = () => {\r\n  return {\r\n    preloadRoute: (route: string) => preloadService.preloadRoute(route),\r\n    preloadCriticalRoutes: () => preloadService.preloadCriticalRoutes(),\r\n    getPreloadStatus: () => preloadService.getPreloadStatus(),\r\n    preloadAllRoutes: () => preloadService.preloadAllRoutes(),\r\n    getPerformanceReport: () => preloadService.getPerformanceReport(),\r\n    getBundleAnalysis: () => preloadService.getBundleAnalysis(),\r\n    getServiceStatus: () => preloadService.getServiceStatus(),\r\n    generateBundleAnalysis: () => preloadService.generateBundleAnalysis()\r\n  };\r\n}; ","import { InvoiceSummary, InvoiceFilter, InvoiceStatus } from '../types/invoices';\r\n\r\n// Mock-Daten für E-Invoicing\r\nconst mockInvoices: InvoiceSummary[] = [\r\n  {\r\n    id: '1',\r\n    invoiceId: 'INV-2024-001',\r\n    customerName: 'Max Mustermann GmbH',\r\n    customerEmail: 'max@mustermann.de',\r\n    amount: 1250.00,\r\n    status: 'paid',\r\n    createdAt: '2024-01-15T10:30:00Z',\r\n    dueDate: '2024-02-15T00:00:00Z',\r\n    taxAmount: 237.50,\r\n    totalAmount: 1487.50,\r\n    currency: 'EUR',\r\n    description: 'Webdesign und Entwicklung',\r\n    items: [\r\n      {\r\n        id: '1',\r\n        name: 'Webdesign',\r\n        quantity: 1,\r\n        unitPrice: 800.00,\r\n        totalPrice: 800.00,\r\n        taxRate: 19,\r\n        taxAmount: 152.00\r\n      },\r\n      {\r\n        id: '2',\r\n        name: 'Entwicklung',\r\n        quantity: 10,\r\n        unitPrice: 45.00,\r\n        totalPrice: 450.00,\r\n        taxRate: 19,\r\n        taxAmount: 85.50\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: '2',\r\n    invoiceId: 'INV-2024-002',\r\n    customerName: 'Anna Schmidt e.K.',\r\n    customerEmail: 'anna@schmidt.de',\r\n    amount: 850.00,\r\n    status: 'open',\r\n    createdAt: '2024-01-20T14:15:00Z',\r\n    dueDate: '2024-02-20T00:00:00Z',\r\n    taxAmount: 161.50,\r\n    totalAmount: 1011.50,\r\n    currency: 'EUR',\r\n    description: 'Marketing Beratung',\r\n    items: [\r\n      {\r\n        id: '3',\r\n        name: 'Marketing Beratung',\r\n        quantity: 8,\r\n        unitPrice: 106.25,\r\n        totalPrice: 850.00,\r\n        taxRate: 19,\r\n        taxAmount: 161.50\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: '3',\r\n    invoiceId: 'INV-2024-003',\r\n    customerName: 'Tech Solutions AG',\r\n    customerEmail: 'info@techsolutions.de',\r\n    amount: 2200.00,\r\n    status: 'overdue',\r\n    createdAt: '2024-01-10T09:00:00Z',\r\n    dueDate: '2024-02-10T00:00:00Z',\r\n    taxAmount: 418.00,\r\n    totalAmount: 2618.00,\r\n    currency: 'EUR',\r\n    description: 'Software-Entwicklung',\r\n    items: [\r\n      {\r\n        id: '4',\r\n        name: 'Software-Entwicklung',\r\n        quantity: 20,\r\n        unitPrice: 110.00,\r\n        totalPrice: 2200.00,\r\n        taxRate: 19,\r\n        taxAmount: 418.00\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport class EInvoicingApi {\r\n  /**\r\n   * Lädt alle Rechnungen basierend auf den Filtern\r\n   */\r\n  static async getInvoices(filter: InvoiceFilter): Promise<InvoiceSummary[]> {\r\n    // Simuliere API-Verzögerung\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n\r\n    let filteredInvoices = [...mockInvoices];\r\n\r\n    // Filter nach Status\r\n    if (filter.status) {\r\n      filteredInvoices = filteredInvoices.filter(invoice => invoice.status === filter.status);\r\n    }\r\n\r\n    // Filter nach Datum\r\n    if (filter.startDate && filter.endDate) {\r\n      filteredInvoices = filteredInvoices.filter(invoice => {\r\n        const invoiceDate = new Date(invoice.createdAt);\r\n        const startDate = new Date(filter.startDate!);\r\n        const endDate = new Date(filter.endDate!);\r\n        return invoiceDate >= startDate && invoiceDate <= endDate;\r\n      });\r\n    }\r\n\r\n    // Filter nach Suchbegriff\r\n    if (filter.searchTerm) {\r\n      const searchTerm = filter.searchTerm.toLowerCase();\r\n      filteredInvoices = filteredInvoices.filter(invoice =>\r\n        invoice.customerName.toLowerCase().includes(searchTerm) ||\r\n        invoice.invoiceId.toLowerCase().includes(searchTerm) ||\r\n        invoice.description?.toLowerCase().includes(searchTerm)\r\n      );\r\n    }\r\n\r\n    // Filter nach Betrag\r\n    if (filter.minAmount) {\r\n      filteredInvoices = filteredInvoices.filter(invoice => invoice.amount >= filter.minAmount!);\r\n    }\r\n    if (filter.maxAmount) {\r\n      filteredInvoices = filteredInvoices.filter(invoice => invoice.amount <= filter.maxAmount!);\r\n    }\r\n\r\n    return filteredInvoices;\r\n  }\r\n\r\n  /**\r\n   * Lädt eine einzelne Rechnung\r\n   */\r\n  static async getInvoice(id: string): Promise<InvoiceSummary | null> {\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    return mockInvoices.find(invoice => invoice.id === id) || null;\r\n  }\r\n\r\n  /**\r\n   * Erstellt eine neue Rechnung\r\n   */\r\n  static async createInvoice(invoiceData: Partial<InvoiceSummary>): Promise<InvoiceSummary> {\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    const newInvoice: InvoiceSummary = {\r\n      id: Date.now().toString(),\r\n      invoiceId: `INV-2024-${String(mockInvoices.length + 1).padStart(3, '0')}`,\r\n      customerName: invoiceData.customerName || '',\r\n      customerEmail: invoiceData.customerEmail || '',\r\n      amount: invoiceData.amount || 0,\r\n      status: 'open',\r\n      createdAt: new Date().toISOString(),\r\n      dueDate: invoiceData.dueDate || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\r\n      taxAmount: invoiceData.taxAmount || 0,\r\n      totalAmount: invoiceData.totalAmount || 0,\r\n      currency: invoiceData.currency || 'EUR',\r\n      description: invoiceData.description || '',\r\n      items: invoiceData.items || []\r\n    };\r\n\r\n    mockInvoices.push(newInvoice);\r\n    return newInvoice;\r\n  }\r\n\r\n  /**\r\n   * Aktualisiert eine Rechnung\r\n   */\r\n  static async updateInvoice(id: string, invoiceData: Partial<InvoiceSummary>): Promise<InvoiceSummary> {\r\n    await new Promise(resolve => setTimeout(resolve, 800));\r\n    \r\n    const index = mockInvoices.findIndex(invoice => invoice.id === id);\r\n    if (index === -1) {\r\n      throw new Error('Rechnung nicht gefunden');\r\n    }\r\n\r\n    mockInvoices[index] = { ...mockInvoices[index], ...invoiceData };\r\n    return mockInvoices[index];\r\n  }\r\n\r\n  /**\r\n   * Löscht eine Rechnung\r\n   */\r\n  static async deleteInvoice(id: string): Promise<void> {\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    \r\n    const index = mockInvoices.findIndex(invoice => invoice.id === id);\r\n    if (index === -1) {\r\n      throw new Error('Rechnung nicht gefunden');\r\n    }\r\n\r\n    mockInvoices.splice(index, 1);\r\n  }\r\n\r\n  /**\r\n   * Lädt eine Rechnung als PDF herunter\r\n   */\r\n  static async downloadInvoice(id: string): Promise<Blob> {\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    const invoice = mockInvoices.find(inv => inv.id === id);\r\n    if (!invoice) {\r\n      throw new Error('Rechnung nicht gefunden');\r\n    }\r\n\r\n    // Simuliere PDF-Generierung\r\n    const pdfContent = `\r\n      Rechnung ${invoice.invoiceId}\r\n      \r\n      Kunde: ${invoice.customerName}\r\n      E-Mail: ${invoice.customerEmail}\r\n      \r\n      Betrag: ${invoice.totalAmount} ${invoice.currency}\r\n      Status: ${invoice.status}\r\n      \r\n      Erstellt: ${invoice.createdAt}\r\n      Fällig: ${invoice.dueDate}\r\n    `;\r\n\r\n    return new Blob([pdfContent], { type: 'application/pdf' });\r\n  }\r\n\r\n  /**\r\n   * Sendet eine Rechnung per E-Mail\r\n   */\r\n  static async sendInvoice(id: string, email?: string): Promise<void> {\r\n    await new Promise(resolve => setTimeout(resolve, 1500));\r\n    \r\n    const invoice = mockInvoices.find(inv => inv.id === id);\r\n    if (!invoice) {\r\n      throw new Error('Rechnung nicht gefunden');\r\n    }\r\n\r\n    console.log(`Rechnung ${invoice.invoiceId} wurde an ${email || invoice.customerEmail} gesendet`);\r\n  }\r\n\r\n  /**\r\n   * Markiert eine Rechnung als bezahlt\r\n   */\r\n  static async markAsPaid(id: string): Promise<InvoiceSummary> {\r\n    await new Promise(resolve => setTimeout(resolve, 600));\r\n    \r\n    const index = mockInvoices.findIndex(invoice => invoice.id === id);\r\n    if (index === -1) {\r\n      throw new Error('Rechnung nicht gefunden');\r\n    }\r\n\r\n    mockInvoices[index].status = 'paid';\r\n    return mockInvoices[index];\r\n  }\r\n\r\n  /**\r\n   * Lädt Statistiken\r\n   */\r\n  static async getStatistics(): Promise<any> {\r\n    await new Promise(resolve => setTimeout(resolve, 400));\r\n    \r\n    const totalInvoices = mockInvoices.length;\r\n    const totalAmount = mockInvoices.reduce((sum, inv) => sum + inv.totalAmount, 0);\r\n    const paidInvoices = mockInvoices.filter(inv => inv.status === 'paid').length;\r\n    const openInvoices = mockInvoices.filter(inv => inv.status === 'open').length;\r\n    const overdueInvoices = mockInvoices.filter(inv => inv.status === 'overdue').length;\r\n\r\n    return {\r\n      totalInvoices,\r\n      totalAmount,\r\n      paidInvoices,\r\n      openInvoices,\r\n      overdueInvoices,\r\n      averageAmount: totalInvoices > 0 ? totalAmount / totalInvoices : 0\r\n    };\r\n  }\r\n} "],"names":["lazy"],"mappings":"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"}