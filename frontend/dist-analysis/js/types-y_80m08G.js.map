{"version":3,"file":"types-y_80m08G.js","sources":["../../src/types/streckengeschaeft.ts"],"sourcesContent":["import { z } from 'zod';\r\n\r\n/**\r\n * Streckengeschäft - Hauptinterface basierend auf zvoove Handel\r\n * \r\n * Repräsentiert eine Handelsstrecke zwischen Lieferant und Kunde\r\n * mit Artikel, Mengen, Preisen und Frachtkosten\r\n */\r\nexport interface Streckengeschaeft {\r\n  // Identifikation\r\n  streckeNr: string;\r\n  vorgangsTyp: VorgangsTyp;\r\n  datum: string;\r\n  vorgangPosition: string;\r\n  positionsNr: string;\r\n  \r\n  // Artikel-Referenzen\r\n  artikelVon: string;\r\n  artikelBis: string;\r\n  artikelBezeichnung: string;\r\n  artikelNr: string;\r\n  sortenNr?: string;\r\n  \r\n  // Verträge und Lieferscheine\r\n  vertrag: string;\r\n  lieferschein: string;\r\n  kennzeichen: string;\r\n  lkwKennzeichen?: string;\r\n  \r\n  // Mengen und Preise\r\n  menge: number;\r\n  einheit: string;\r\n  ekPreis: number; // Einkaufspreis\r\n  vkPreis: number; // Verkaufspreis\r\n  frachtkosten: number;\r\n  preisProEinheit: number;\r\n  \r\n  // EK-Details\r\n  ekMenge: number;\r\n  ekNetto: number;\r\n  ekLieferkosten: number;\r\n  ekRechnung: string;\r\n  ekKontakt: string;\r\n  ekKontaktNr: string;\r\n  \r\n  // VK-Details\r\n  vkMenge: number;\r\n  vkNetto: number;\r\n  vkLieferkosten: number;\r\n  vkRechnung: string;\r\n  vkKontakt: string;\r\n  vkKontaktNr: string;\r\n  \r\n  // Partner\r\n  lieferant: string;\r\n  lieferantName: string;\r\n  lieferantNr: string;\r\n  kunde: string;\r\n  kundeName: string;\r\n  kundeNr: string;\r\n  \r\n  // Spedition\r\n  spediteurNr: string;\r\n  spediteurName: string;\r\n  frachtart: string;\r\n  \r\n  // Be-/Entladestelle\r\n  beEntladestelle: string;\r\n  beEntladestellePLZ: string;\r\n  land: string;\r\n  \r\n  // Partie/NLS\r\n  partienNr?: string;\r\n  nlsNr?: string;\r\n  \r\n  // Sonstige\r\n  bereich: string;\r\n  spediteur?: string;\r\n  start?: string;\r\n  ursprung?: string;\r\n  lagerhalle?: string;\r\n  fahrzeugKennzeichen?: string;\r\n  kostenstelle?: string;\r\n  bedarfsnummer?: string;\r\n  \r\n  // Berechnungen\r\n  summeVk: number;\r\n  summeEk: number;\r\n  restwert: number;\r\n  geplanteMengeVk: number;\r\n  geplanteMengeEk?: number;\r\n  \r\n  // Status und Metadaten\r\n  status: StreckenStatus;\r\n  erstelltAm: string;\r\n  geaendertAm: string;\r\n  erstelltVon: string;\r\n  \r\n  // Optionale Felder\r\n  bemerkung?: string;\r\n  referenzNr?: string;\r\n  waehrung?: string;\r\n  skonto?: number;\r\n  rabatt?: number;\r\n  \r\n  // Biomasse-Flag\r\n  istBiomasse?: boolean;\r\n  \r\n  // Rechnungs-Flags\r\n  hatEingangsrechnung?: boolean;\r\n  hatSpeditionsrechnung?: boolean;\r\n  hatFrachtabrechnung?: boolean;\r\n  \r\n  // Deckungsbeitrag\r\n  deckungsbeitrag?: number;\r\n}\r\n\r\n/**\r\n * Vorgangstypen für Streckengeschäfte\r\n */\r\nexport enum VorgangsTyp {\r\n  KAUF = 'kauf',\r\n  VERKAUF = 'verkauf',\r\n  UMTASCH = 'umtausch',\r\n  RÜCKGABE = 'rueckgabe'\r\n}\r\n\r\n/**\r\n * Status einer Strecke\r\n */\r\nexport enum StreckenStatus {\r\n  ENTWURF = 'entwurf',\r\n  BESTÄTIGT = 'bestaetigt',\r\n  IN_BEARBEITUNG = 'in_bearbeitung',\r\n  ABGESCHLOSSEN = 'abgeschlossen',\r\n  STORNIERT = 'storniert',\r\n  ERLEDIGT = 'erledigt',\r\n  UNERLEDIGT = 'unerledigt'\r\n}\r\n\r\n/**\r\n * Biomasse-Optionen\r\n */\r\nexport enum BiomasseOption {\r\n  ALLE = 'alle',\r\n  NUR_BIOMASSE = 'nur_biomasse'\r\n}\r\n\r\n/**\r\n * Erweiterte Filter-Interface für die Streckengeschäft-Suche\r\n */\r\nexport interface StreckengeschaeftFilter {\r\n  // STRECKE\r\n  streckeNrVon?: string;\r\n  streckeNrBis?: string;\r\n  artikelNrVon?: string;\r\n  artikelNrBis?: string;\r\n  nurErledigte?: boolean;\r\n  nurUnerledigte?: boolean;\r\n  vorgaengeGetrennt?: boolean;\r\n  \r\n  // LIEFERANTEN/KUNDEN\r\n  lieferantNrVon?: string;\r\n  lieferantNrBis?: string;\r\n  kundeNrVon?: string;\r\n  kundeNrBis?: string;\r\n  nurOhneLieferant?: boolean;\r\n  nurOhneKunde?: boolean;\r\n  \r\n  // KONTRAKTE\r\n  ekKontaktNrVon?: string;\r\n  ekKontaktNrBis?: string;\r\n  vkKontaktNrVon?: string;\r\n  vkKontaktNrBis?: string;\r\n  biomasseOption?: BiomasseOption;\r\n  \r\n  // LIEFERRECHNUNG\r\n  lieferRechnungsdatumVon?: string;\r\n  lieferRechnungsdatumBis?: string;\r\n  lkwKennzeichenVon?: string;\r\n  lkwKennzeichenBis?: string;\r\n  keineEingangsrechnung?: boolean;\r\n  keineSpeditionsrechnung?: boolean;\r\n  keineFrachtabrechnung?: boolean;\r\n  deckungsbeitragAusStreckendaten?: boolean;\r\n  \r\n  // BE-/ENTLADESTELLE\r\n  land?: string;\r\n  beEntladestellePLZVon?: string;\r\n  beEntladestellePLZBis?: string;\r\n  \r\n  // PARTIE/NLS\r\n  partienNrVon?: string;\r\n  partienNrBis?: string;\r\n  nlsNrVon?: string;\r\n  nlsNrBis?: string;\r\n  \r\n  // SONSTIGE SELEKTIONEN\r\n  spediteur?: string;\r\n  start?: string;\r\n  ursprung?: string;\r\n  lagerhalle?: string;\r\n  fahrzeugKennzeichen?: string;\r\n  sortenNr?: string;\r\n  kostenstelle?: string;\r\n  bedarfsnummer?: string;\r\n  \r\n  // Allgemeine Filter\r\n  vorgangsTyp?: VorgangsTyp;\r\n  datumVon?: string;\r\n  datumBis?: string;\r\n  status?: StreckenStatus;\r\n  minMenge?: number;\r\n  maxMenge?: number;\r\n  minEkPreis?: number;\r\n  maxEkPreis?: number;\r\n  minVkPreis?: number;\r\n  maxVkPreis?: number;\r\n}\r\n\r\n/**\r\n * Formular-Daten für neue/zu bearbeitende Strecken\r\n */\r\nexport interface StreckengeschaeftFormData {\r\n  streckeNr: string;\r\n  vorgangsTyp: VorgangsTyp;\r\n  datum: string;\r\n  vorgangPosition: string;\r\n  positionsNr: string;\r\n  artikelVon: string;\r\n  artikelBis: string;\r\n  artikelBezeichnung: string;\r\n  artikelNr: string;\r\n  sortenNr?: string;\r\n  vertrag: string;\r\n  lieferschein: string;\r\n  kennzeichen: string;\r\n  lkwKennzeichen?: string;\r\n  menge: number;\r\n  einheit: string;\r\n  ekPreis: number;\r\n  vkPreis: number;\r\n  frachtkosten: number;\r\n  preisProEinheit: number;\r\n  ekMenge: number;\r\n  ekNetto: number;\r\n  ekLieferkosten: number;\r\n  ekRechnung: string;\r\n  ekKontakt: string;\r\n  ekKontaktNr: string;\r\n  vkMenge: number;\r\n  vkNetto: number;\r\n  vkLieferkosten: number;\r\n  vkRechnung: string;\r\n  vkKontakt: string;\r\n  vkKontaktNr: string;\r\n  lieferant: string;\r\n  lieferantName: string;\r\n  lieferantNr: string;\r\n  kunde: string;\r\n  kundeName: string;\r\n  kundeNr: string;\r\n  spediteurNr: string;\r\n  spediteurName: string;\r\n  frachtart: string;\r\n  beEntladestelle: string;\r\n  beEntladestellePLZ: string;\r\n  land: string;\r\n  partienNr?: string;\r\n  nlsNr?: string;\r\n  bereich: string;\r\n  spediteur?: string;\r\n  start?: string;\r\n  ursprung?: string;\r\n  lagerhalle?: string;\r\n  fahrzeugKennzeichen?: string;\r\n  kostenstelle?: string;\r\n  bedarfsnummer?: string;\r\n  summeVk: number;\r\n  summeEk: number;\r\n  restwert: number;\r\n  geplanteMengeVk: number;\r\n  geplanteMengeEk?: number;\r\n  bemerkung?: string;\r\n  referenzNr?: string;\r\n  waehrung?: string;\r\n  skonto?: number;\r\n  rabatt?: number;\r\n  istBiomasse?: boolean;\r\n  hatEingangsrechnung?: boolean;\r\n  hatSpeditionsrechnung?: boolean;\r\n  hatFrachtabrechnung?: boolean;\r\n  deckungsbeitrag?: number;\r\n}\r\n\r\n/**\r\n * Summen-Interface für Berechnungen\r\n */\r\nexport interface StreckengeschaeftSummen {\r\n  ekBetragInklMwSt: number;\r\n  vkBetragInklMwSt: number;\r\n  frachtkosten: number;\r\n  sollDifferenz: number;\r\n  istDifferenz: number;\r\n  mwst: number;\r\n  deckungsbeitrag: number;\r\n  differenzSollIst: number;\r\n  restMenge: number;\r\n  restWert: number;\r\n  geplanteMengenEk: number;\r\n  geplanteMengenVk: number;\r\n}\r\n\r\n/**\r\n * Zod-Schema für Validierung\r\n */\r\nexport const StreckengeschaeftSchema = z.object({\r\n  streckeNr: z.string().min(1, 'Strecken-Nr. ist erforderlich'),\r\n  vorgangsTyp: z.nativeEnum(VorgangsTyp),\r\n  datum: z.string().min(1, 'Datum ist erforderlich'),\r\n  vorgangPosition: z.string().min(1, 'Vorgangsposition ist erforderlich'),\r\n  positionsNr: z.string().min(1, 'Positions-Nr. ist erforderlich'),\r\n  artikelVon: z.string().min(1, 'Artikel von ist erforderlich'),\r\n  artikelBis: z.string().min(1, 'Artikel bis ist erforderlich'),\r\n  artikelBezeichnung: z.string().min(1, 'Artikelbezeichnung ist erforderlich'),\r\n  artikelNr: z.string().min(1, 'Artikel-Nr. ist erforderlich'),\r\n  sortenNr: z.string().optional(),\r\n  vertrag: z.string().min(1, 'Vertrag ist erforderlich'),\r\n  lieferschein: z.string().min(1, 'Lieferschein ist erforderlich'),\r\n  kennzeichen: z.string().min(1, 'Kennzeichen ist erforderlich'),\r\n  lkwKennzeichen: z.string().optional(),\r\n  menge: z.number().positive('Menge muss positiv sein'),\r\n  einheit: z.string().min(1, 'Einheit ist erforderlich'),\r\n  ekPreis: z.number().min(0, 'EK-Preis darf nicht negativ sein'),\r\n  vkPreis: z.number().min(0, 'VK-Preis darf nicht negativ sein'),\r\n  frachtkosten: z.number().min(0, 'Frachtkosten dürfen nicht negativ sein'),\r\n  preisProEinheit: z.number().min(0, 'Preis pro Einheit darf nicht negativ sein'),\r\n  ekMenge: z.number().positive('EK-Menge muss positiv sein'),\r\n  ekNetto: z.number().min(0, 'EK-Netto darf nicht negativ sein'),\r\n  ekLieferkosten: z.number().min(0, 'EK-Lieferkosten dürfen nicht negativ sein'),\r\n  ekRechnung: z.string().min(1, 'EK-Rechnung ist erforderlich'),\r\n  ekKontakt: z.string().min(1, 'EK-Kontakt ist erforderlich'),\r\n  ekKontaktNr: z.string().min(1, 'EK-Kontakt-Nr. ist erforderlich'),\r\n  vkMenge: z.number().positive('VK-Menge muss positiv sein'),\r\n  vkNetto: z.number().min(0, 'VK-Netto darf nicht negativ sein'),\r\n  vkLieferkosten: z.number().min(0, 'VK-Lieferkosten dürfen nicht negativ sein'),\r\n  vkRechnung: z.string().min(1, 'VK-Rechnung ist erforderlich'),\r\n  vkKontakt: z.string().min(1, 'VK-Kontakt ist erforderlich'),\r\n  vkKontaktNr: z.string().min(1, 'VK-Kontakt-Nr. ist erforderlich'),\r\n  lieferant: z.string().min(1, 'Lieferant ist erforderlich'),\r\n  lieferantName: z.string().min(1, 'Lieferantname ist erforderlich'),\r\n  lieferantNr: z.string().min(1, 'Lieferant-Nr. ist erforderlich'),\r\n  kunde: z.string().min(1, 'Kunde ist erforderlich'),\r\n  kundeName: z.string().min(1, 'Kundenname ist erforderlich'),\r\n  kundeNr: z.string().min(1, 'Kunde-Nr. ist erforderlich'),\r\n  spediteurNr: z.string().min(1, 'Spediteur-Nr. ist erforderlich'),\r\n  spediteurName: z.string().min(1, 'Spediteurname ist erforderlich'),\r\n  frachtart: z.string().min(1, 'Frachtart ist erforderlich'),\r\n  beEntladestelle: z.string().min(1, 'Be-/Entladestelle ist erforderlich'),\r\n  beEntladestellePLZ: z.string().min(1, 'PLZ Be-/Entladestelle ist erforderlich'),\r\n  land: z.string().min(1, 'Land ist erforderlich'),\r\n  partienNr: z.string().optional(),\r\n  nlsNr: z.string().optional(),\r\n  bereich: z.string().min(1, 'Bereich ist erforderlich'),\r\n  spediteur: z.string().optional(),\r\n  start: z.string().optional(),\r\n  ursprung: z.string().optional(),\r\n  lagerhalle: z.string().optional(),\r\n  fahrzeugKennzeichen: z.string().optional(),\r\n  kostenstelle: z.string().optional(),\r\n  bedarfsnummer: z.string().optional(),\r\n  summeVk: z.number().min(0, 'Summe VK darf nicht negativ sein'),\r\n  summeEk: z.number().min(0, 'Summe EK darf nicht negativ sein'),\r\n  restwert: z.number().min(0, 'Restwert darf nicht negativ sein'),\r\n  geplanteMengeVk: z.number().min(0, 'Geplante Menge VK darf nicht negativ sein'),\r\n  geplanteMengeEk: z.number().min(0).optional(),\r\n  bemerkung: z.string().optional(),\r\n  referenzNr: z.string().optional(),\r\n  waehrung: z.string().default('EUR'),\r\n  skonto: z.number().min(0).max(100).optional(),\r\n  rabatt: z.number().min(0).max(100).optional(),\r\n  istBiomasse: z.boolean().optional(),\r\n  hatEingangsrechnung: z.boolean().optional(),\r\n  hatSpeditionsrechnung: z.boolean().optional(),\r\n  hatFrachtabrechnung: z.boolean().optional(),\r\n  deckungsbeitrag: z.number().optional(),\r\n});\r\n\r\n/**\r\n * Zod-Schema für erweiterte Filter\r\n */\r\nexport const StreckengeschaeftFilterSchema = z.object({\r\n  // STRECKE\r\n  streckeNrVon: z.string().optional(),\r\n  streckeNrBis: z.string().optional(),\r\n  artikelNrVon: z.string().optional(),\r\n  artikelNrBis: z.string().optional(),\r\n  nurErledigte: z.boolean().optional(),\r\n  nurUnerledigte: z.boolean().optional(),\r\n  vorgaengeGetrennt: z.boolean().optional(),\r\n  \r\n  // LIEFERANTEN/KUNDEN\r\n  lieferantNrVon: z.string().optional(),\r\n  lieferantNrBis: z.string().optional(),\r\n  kundeNrVon: z.string().optional(),\r\n  kundeNrBis: z.string().optional(),\r\n  nurOhneLieferant: z.boolean().optional(),\r\n  nurOhneKunde: z.boolean().optional(),\r\n  \r\n  // KONTRAKTE\r\n  ekKontaktNrVon: z.string().optional(),\r\n  ekKontaktNrBis: z.string().optional(),\r\n  vkKontaktNrVon: z.string().optional(),\r\n  vkKontaktNrBis: z.string().optional(),\r\n  biomasseOption: z.nativeEnum(BiomasseOption).optional(),\r\n  \r\n  // LIEFERRECHNUNG\r\n  lieferRechnungsdatumVon: z.string().optional(),\r\n  lieferRechnungsdatumBis: z.string().optional(),\r\n  lkwKennzeichenVon: z.string().optional(),\r\n  lkwKennzeichenBis: z.string().optional(),\r\n  keineEingangsrechnung: z.boolean().optional(),\r\n  keineSpeditionsrechnung: z.boolean().optional(),\r\n  keineFrachtabrechnung: z.boolean().optional(),\r\n  deckungsbeitragAusStreckendaten: z.boolean().optional(),\r\n  \r\n  // BE-/ENTLADESTELLE\r\n  land: z.string().optional(),\r\n  beEntladestellePLZVon: z.string().optional(),\r\n  beEntladestellePLZBis: z.string().optional(),\r\n  \r\n  // PARTIE/NLS\r\n  partienNrVon: z.string().optional(),\r\n  partienNrBis: z.string().optional(),\r\n  nlsNrVon: z.string().optional(),\r\n  nlsNrBis: z.string().optional(),\r\n  \r\n  // SONSTIGE SELEKTIONEN\r\n  spediteur: z.string().optional(),\r\n  start: z.string().optional(),\r\n  ursprung: z.string().optional(),\r\n  lagerhalle: z.string().optional(),\r\n  fahrzeugKennzeichen: z.string().optional(),\r\n  sortenNr: z.string().optional(),\r\n  kostenstelle: z.string().optional(),\r\n  bedarfsnummer: z.string().optional(),\r\n  \r\n  // Allgemeine Filter\r\n  vorgangsTyp: z.nativeEnum(VorgangsTyp).optional(),\r\n  datumVon: z.string().optional(),\r\n  datumBis: z.string().optional(),\r\n  status: z.nativeEnum(StreckenStatus).optional(),\r\n  minMenge: z.number().optional(),\r\n  maxMenge: z.number().optional(),\r\n  minEkPreis: z.number().optional(),\r\n  maxEkPreis: z.number().optional(),\r\n  minVkPreis: z.number().optional(),\r\n  maxVkPreis: z.number().optional(),\r\n});\r\n\r\n/**\r\n * Tabellen-Spalten-Definition\r\n */\r\nexport interface StreckengeschaeftColumn {\r\n  key: string;\r\n  title: string;\r\n  dataIndex: keyof Streckengeschaeft;\r\n  width?: number;\r\n  fixed?: 'left' | 'right';\r\n  sorter?: boolean;\r\n  filters?: { text: string; value: string }[];\r\n  render?: (value: any, record: Streckengeschaeft) => React.ReactNode;\r\n}\r\n\r\n/**\r\n * Export-Typen\r\n */\r\nexport type StreckengeschaeftFormDataFromSchema = z.infer<typeof StreckengeschaeftSchema>;\r\nexport type StreckengeschaeftFilterFromSchema = z.infer<typeof StreckengeschaeftFilterSchema>;\r\n\r\n/**\r\n * Utility-Funktionen\r\n */\r\nexport const getVorgangsTypLabel = (typ: VorgangsTyp): string => {\r\n  const labels = {\r\n    [VorgangsTyp.KAUF]: 'Kauf',\r\n    [VorgangsTyp.VERKAUF]: 'Verkauf',\r\n    [VorgangsTyp.UMTASCH]: 'Umtausch',\r\n    [VorgangsTyp.RÜCKGABE]: 'Rückgabe'\r\n  };\r\n  return labels[typ] || typ;\r\n};\r\n\r\nexport const getStatusLabel = (status: StreckenStatus): string => {\r\n  const labels = {\r\n    [StreckenStatus.ENTWURF]: 'Entwurf',\r\n    [StreckenStatus.BESTÄTIGT]: 'Bestätigt',\r\n    [StreckenStatus.IN_BEARBEITUNG]: 'In Bearbeitung',\r\n    [StreckenStatus.ABGESCHLOSSEN]: 'Abgeschlossen',\r\n    [StreckenStatus.STORNIERT]: 'Storniert',\r\n    [StreckenStatus.ERLEDIGT]: 'Erledigt',\r\n    [StreckenStatus.UNERLEDIGT]: 'Unerledigt'\r\n  };\r\n  return labels[status] || status;\r\n};\r\n\r\nexport const getStatusColor = (status: StreckenStatus): string => {\r\n  const colors = {\r\n    [StreckenStatus.ENTWURF]: 'default',\r\n    [StreckenStatus.BESTÄTIGT]: 'processing',\r\n    [StreckenStatus.IN_BEARBEITUNG]: 'warning',\r\n    [StreckenStatus.ABGESCHLOSSEN]: 'success',\r\n    [StreckenStatus.STORNIERT]: 'error',\r\n    [StreckenStatus.ERLEDIGT]: 'success',\r\n    [StreckenStatus.UNERLEDIGT]: 'warning'\r\n  };\r\n  return colors[status] || 'default';\r\n};\r\n\r\nexport const getBiomasseOptionLabel = (option: BiomasseOption): string => {\r\n  const labels = {\r\n    [BiomasseOption.ALLE]: 'Alle',\r\n    [BiomasseOption.NUR_BIOMASSE]: 'Nur Biomasse'\r\n  };\r\n  return labels[option] || option;\r\n};\r\n\r\n/**\r\n * Berechnungsfunktionen\r\n */\r\nexport const calculateGewinn = (vkPreis: number, ekPreis: number, menge: number, frachtkosten: number = 0): number => {\r\n  return (vkPreis - ekPreis) * menge - frachtkosten;\r\n};\r\n\r\nexport const calculateGewinnmarge = (vkPreis: number, ekPreis: number): number => {\r\n  if (ekPreis === 0) return 0;\r\n  return ((vkPreis - ekPreis) / ekPreis) * 100;\r\n};\r\n\r\nexport const calculateDeckungsbeitrag = (vkBetrag: number, ekBetrag: number, frachtkosten: number): number => {\r\n  return vkBetrag - ekBetrag - frachtkosten;\r\n};\r\n\r\nexport const calculateMwSt = (betrag: number, mwstSatz: number = 19): number => {\r\n  return betrag * (mwstSatz / 100);\r\n};\r\n\r\nexport const formatCurrency = (amount: number, currency: string = 'EUR'): string => {\r\n  return new Intl.NumberFormat('de-DE', {\r\n    style: 'currency',\r\n    currency: currency\r\n  }).format(amount);\r\n};\r\n\r\nexport const formatNumber = (num: number): string => {\r\n  return new Intl.NumberFormat('de-DE').format(num);\r\n};\r\n\r\nexport const formatDate = (date: string): string => {\r\n  return new Date(date).toLocaleDateString('de-DE');\r\n}; "],"names":["VorgangsTyp","StreckenStatus","BiomasseOption","z.object","z.string","z.nativeEnum","z.number","z.boolean"],"mappings":"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"}