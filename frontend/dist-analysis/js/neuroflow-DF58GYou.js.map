{"version":3,"mappings":"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","names":["NeuroFlowSupplierForm","lazy","NeuroFlowChargenverwaltung","NeuroFlowAutocomplete","jsxs","jsx","useState","useEffect","ReceiptIcon","ErrorIcon","Suspense","a","MuiAutocomplete","useRef","useCallback","error","options","inputValue","Fragment","createElement","NeuroFlowCard","NeuroFlowButton","z.object","z.string","z.enum","z.literal","z.number","z.boolean","zodResolver","z.array","_a","_b"],"ignoreList":[],"sources":["../../src/components/neuroflow/NeuroFlowDashboard.tsx","../../src/components/neuroflow/NeuroFlowAutocomplete.tsx","../../src/components/neuroflow/NeuroFlowSupplierForm.tsx","../../src/components/neuroflow/NeuroFlowChargenverwaltung.tsx"],"sourcesContent":["/**\r\n * 🧠 NeuroFlow Dashboard\r\n * KI-first Dashboard mit integrierten NeuroFlow-Komponenten\r\n * Autocomplete, Chargenverwaltung, Lieferantenstammdaten und Workflow-Integration\r\n */\r\n\r\nimport React, { useState, useEffect, Suspense, lazy } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Grid,\r\n  Tabs,\r\n  Tab,\r\n  Button,\r\n  Chip,\r\n  Stack,\r\n  IconButton,\r\n  Tooltip,\r\n  Alert,\r\n  CircularProgress,\r\n  Divider,\r\n  Paper,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemIcon,\r\n  ListItemSecondaryAction,\r\n  Badge,\r\n  Avatar,\r\n  LinearProgress,\r\n} from '@mui/material';\r\nimport {\r\n  Dashboard as DashboardIcon,\r\n  Science as ScienceIcon,\r\n  Business as BusinessIcon,\r\n  LocalShipping as ShippingIcon,\r\n  Assessment as AssessmentIcon,\r\n  Settings as SettingsIcon,\r\n  Add as AddIcon,\r\n  Refresh as RefreshIcon,\r\n  PlayArrow as PlayArrowIcon,\r\n  Stop as StopIcon,\r\n  CheckCircle as CheckCircleIcon,\r\n  Warning as WarningIcon,\r\n  Error as ErrorIcon,\r\n  Info as InfoIcon,\r\n  Timeline as TimelineIcon,\r\n  AutoGraph as AutoGraphIcon,\r\n  QrCode as QrCodeIcon,\r\n  Security as SecurityIcon,\r\n  Description as DescriptionIcon,\r\n  Person as PersonIcon,\r\n  AccountBalance as BankIcon,\r\n  LocationOn as LocationIcon,\r\n  Logout as LogoutIcon,\r\n  Route as RouteIcon,\r\n  Receipt as ReceiptIcon,\r\n} from '@mui/icons-material';\r\nimport { styled } from '@mui/material/styles';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport { trackComponentLoad } from '../../utils/performance';\r\n\r\n// Lazy Loading für alle Subkomponenten\r\nconst NeuroFlowSupplierForm = lazy(() => import('./NeuroFlowSupplierForm').then(module => ({ default: module.NeuroFlowSupplierForm })));\r\nconst NeuroFlowChargenverwaltung = lazy(() => import('./NeuroFlowChargenverwaltung').then(module => ({ default: module.NeuroFlowChargenverwaltung })));\r\nconst NeuroFlowAutocomplete = lazy(() => import('./NeuroFlowAutocomplete').then(module => ({ default: module.NeuroFlowAutocomplete })));\r\nconst StreckengeschaeftPage = lazy(() => import('../../pages/StreckengeschaeftPage').then(module => ({ default: module.StreckengeschaeftPage })));\r\nconst EInvoicingPage = lazy(() => import('../e-invoicing/EInvoicingPage'));\r\nconst POSPage = lazy(() => import('../../pages/POS/POSPage'));\r\nconst DailyReportPage = lazy(() => import('../../pages/POS/DailyReportPage'));\r\n\r\n// Loading Component für Subkomponenten\r\nconst ComponentLoader: React.FC<{ componentName: string }> = ({ componentName }) => (\r\n  <Box\r\n    sx={{\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      minHeight: '200px',\r\n      flexDirection: 'column',\r\n      gap: 2\r\n    }}\r\n  >\r\n    <CircularProgress size={40} />\r\n    <Typography variant=\"body2\" color=\"text.secondary\">\r\n      {componentName} wird geladen...\r\n    </Typography>\r\n  </Box>\r\n);\r\n\r\n// Styled Components\r\nconst DashboardCard = styled(Card)(({ theme }) => ({\r\n  borderRadius: theme.shape.borderRadius * 2,\r\n  boxShadow: theme.shadows[1],\r\n  border: `1px solid ${theme.palette.divider}`,\r\n  transition: 'all 0.3s ease-in-out',\r\n  '&:hover': {\r\n    boxShadow: theme.shadows[4],\r\n    transform: 'translateY(-2px)',\r\n  },\r\n}));\r\n\r\nconst StatusChip = styled(Chip)(({ theme }: { theme: any }) => ({\r\n  borderRadius: theme.shape.borderRadius * 1.5,\r\n  fontWeight: 600,\r\n  '&.MuiChip-colorSuccess': {\r\n    backgroundColor: theme.palette.success.light,\r\n    color: theme.palette.success.contrastText,\r\n  },\r\n  '&.MuiChip-colorWarning': {\r\n    backgroundColor: theme.palette.warning.light,\r\n    color: theme.palette.warning.contrastText,\r\n  },\r\n  '&.MuiChip-colorError': {\r\n    backgroundColor: theme.palette.error.light,\r\n    color: theme.palette.error.contrastText,\r\n  },\r\n  '&.MuiChip-colorInfo': {\r\n    backgroundColor: theme.palette.info.light,\r\n    color: theme.palette.info.contrastText,\r\n  },\r\n}));\r\n\r\n// Dashboard Stats Interface\r\ninterface DashboardStats {\r\n  totalCharges: number;\r\n  pendingCharges: number;\r\n  approvedCharges: number;\r\n  quarantinedCharges: number;\r\n  totalSuppliers: number;\r\n  activeSuppliers: number;\r\n  totalArticles: number;\r\n  lowStockArticles: number;\r\n  workflowExecutions: number;\r\n  successfulWorkflows: number;\r\n  failedWorkflows: number;\r\n  kiAnalysisCount: number;\r\n  averageProcessingTime: number;\r\n}\r\n\r\n// Service Status Interface\r\ninterface ServiceStatus {\r\n  name: string;\r\n  status: 'online' | 'offline' | 'warning';\r\n  url: string;\r\n  responseTime: number;\r\n  lastCheck: Date;\r\n  description: string;\r\n}\r\n\r\n// NeuroFlow Dashboard Component\r\nexport const NeuroFlowDashboard: React.FC = () => {\r\n  const { user, logout } = useAuth();\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const [showSupplierForm, setShowSupplierForm] = useState(false);\r\n  const [showChargeForm, setShowChargeForm] = useState(false);\r\n  const [stats, setStats] = useState<DashboardStats>({\r\n    totalCharges: 0,\r\n    pendingCharges: 0,\r\n    approvedCharges: 0,\r\n    quarantinedCharges: 0,\r\n    totalSuppliers: 0,\r\n    activeSuppliers: 0,\r\n    totalArticles: 0,\r\n    lowStockArticles: 0,\r\n    workflowExecutions: 0,\r\n    successfulWorkflows: 0,\r\n    failedWorkflows: 0,\r\n    kiAnalysisCount: 0,\r\n    averageProcessingTime: 0,\r\n  });\r\n  const [services, setServices] = useState<ServiceStatus[]>([\r\n    {\r\n      name: 'n8n Workflow Engine',\r\n      status: 'online',\r\n      url: 'http://localhost:5678',\r\n      responseTime: 120,\r\n      lastCheck: new Date(),\r\n      description: 'Workflow-Automatisierung und KI-Integration',\r\n    },\r\n    {\r\n      name: 'MCP Resource Server',\r\n      status: 'online',\r\n      url: 'http://localhost:8001',\r\n      responseTime: 85,\r\n      lastCheck: new Date(),\r\n      description: 'Model Context Protocol für KI-Kommunikation',\r\n    },\r\n    {\r\n      name: 'Autocomplete API',\r\n      status: 'online',\r\n      url: 'http://localhost:8003',\r\n      responseTime: 45,\r\n      lastCheck: new Date(),\r\n      description: 'Intelligente Autocomplete-Funktionalität',\r\n    },\r\n    {\r\n      name: 'PostgreSQL Database',\r\n      status: 'online',\r\n      url: 'localhost:5432',\r\n      responseTime: 12,\r\n      lastCheck: new Date(),\r\n      description: 'Hauptdatenbank für Stammdaten',\r\n    },\r\n  ]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Performance Tracking - Fix für endlose Render-Schleife\r\n  const trackDashboardLoad = React.useCallback(() => {\r\n    const startTime = performance.now();\r\n    return () => {\r\n      const loadEnd = performance.now();\r\n      const loadDuration = loadEnd - startTime;\r\n      console.log(`🧠 NeuroFlowDashboard geladen in ${loadDuration.toFixed(2)}ms`);\r\n    };\r\n  }, []);\r\n\r\n  // Mock data loading\r\n  useEffect(() => {\r\n    const loadDashboardData = async () => {\r\n      setLoading(true);\r\n      const trackLoad = trackDashboardLoad();\r\n      \r\n      try {\r\n        // Simuliere API-Aufrufe\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        \r\n        setStats({\r\n          totalCharges: 1247,\r\n          pendingCharges: 23,\r\n          approvedCharges: 1189,\r\n          quarantinedCharges: 35,\r\n          totalSuppliers: 89,\r\n          activeSuppliers: 76,\r\n          totalArticles: 456,\r\n          lowStockArticles: 12,\r\n          workflowExecutions: 2341,\r\n          successfulWorkflows: 2218,\r\n          failedWorkflows: 123,\r\n          kiAnalysisCount: 1897,\r\n          averageProcessingTime: 2.3,\r\n        });\r\n      } catch (error) {\r\n        console.error('Error loading dashboard data:', error);\r\n      } finally {\r\n        setLoading(false);\r\n        // Track component load completion\r\n        trackLoad();\r\n      }\r\n    };\r\n\r\n    loadDashboardData();\r\n  }, []); // Leeres Dependency-Array - lädt nur einmal beim Mount\r\n\r\n  // Tab configuration\r\n  const tabs = [\r\n    { label: 'Übersicht', icon: <DashboardIcon /> },\r\n    { label: 'Kassensystem', icon: <ReceiptIcon /> },\r\n    { label: 'Tagesjournal', icon: <AssessmentIcon /> },\r\n    { label: 'Streckengeschäfte', icon: <RouteIcon /> },\r\n    { label: 'E-Invoicing', icon: <ReceiptIcon /> },\r\n    { label: 'Chargenverwaltung', icon: <ScienceIcon /> },\r\n    { label: 'Lieferantenstammdaten', icon: <BusinessIcon /> },\r\n    { label: 'Workflows', icon: <TimelineIcon /> },\r\n    { label: 'KI-Analysen', icon: <AutoGraphIcon /> },\r\n    { label: 'Services', icon: <SettingsIcon /> },\r\n  ];\r\n\r\n  // Get status color\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'online': return 'success';\r\n      case 'warning': return 'warning';\r\n      case 'offline': return 'error';\r\n      default: return 'default';\r\n    }\r\n  };\r\n\r\n  // Get status icon\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'online': return <CheckCircleIcon color=\"success\" />;\r\n      case 'warning': return <WarningIcon color=\"warning\" />;\r\n      case 'offline': return <ErrorIcon color=\"error\" />;\r\n      default: return <InfoIcon color=\"action\" />;\r\n    }\r\n  };\r\n\r\n  const handleLogout = async () => {\r\n    try {\r\n      await logout();\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex', minHeight: '100vh' }}>\r\n      {/* Sidebar */}\r\n      <Box\r\n        sx={{\r\n          width: 280,\r\n          backgroundColor: 'background.paper',\r\n          borderRight: 1,\r\n          borderColor: 'divider',\r\n          display: 'flex',\r\n          flexDirection: 'column'\r\n        }}\r\n      >\r\n        {/* Header */}\r\n        <Box sx={{ p: 3, borderBottom: 1, borderColor: 'divider' }}>\r\n          <Typography variant=\"h6\" component=\"h1\" gutterBottom>\r\n            VALEO NeuroERP\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            {user?.full_name} ({user?.role})\r\n          </Typography>\r\n        </Box>\r\n\r\n        {/* Navigation */}\r\n        <Box sx={{ flex: 1, p: 2 }}>\r\n          <List>\r\n            {tabs.map((tab, index) => (\r\n              <ListItem\r\n                key={index}\r\n                button\r\n                onClick={() => setActiveTab(index)}\r\n                selected={activeTab === index}\r\n              >\r\n                <ListItemIcon>{tab.icon}</ListItemIcon>\r\n                <ListItemText primary={tab.label} />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Box>\r\n\r\n        {/* Logout Button */}\r\n        <Box sx={{ p: 2, borderTop: 1, borderColor: 'divider' }}>\r\n          <Button\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            onClick={handleLogout}\r\n            startIcon={<LogoutIcon />}\r\n          >\r\n            Abmelden\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Main Content */}\r\n      <Box sx={{ flex: 1, p: 3 }}>\r\n        {/* Header */}\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={3}>\r\n          <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n            <AutoGraphIcon color=\"primary\" sx={{ fontSize: 40 }} />\r\n            <Box>\r\n              <Typography variant=\"h4\" fontWeight={700} color=\"text.primary\">\r\n                VALEO NeuroERP Dashboard\r\n              </Typography>\r\n              <Typography variant=\"body1\" color=\"text.secondary\">\r\n                KI-first ERP-System mit intelligenter Workflow-Automatisierung\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n          \r\n          <Stack direction=\"row\" spacing={2}>\r\n            <Tooltip title=\"Daten aktualisieren\">\r\n              <IconButton onClick={() => window.location.reload()} color=\"primary\">\r\n                <RefreshIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Stack>\r\n        </Box>\r\n\r\n        {/* Tabs */}\r\n        <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\r\n          <Tabs value={activeTab} onChange={(e, newValue) => setActiveTab(newValue)}>\r\n            {tabs.map((tab, index) => (\r\n              <Tab\r\n                key={index}\r\n                label={tab.label}\r\n                icon={tab.icon}\r\n                iconPosition=\"start\"\r\n                sx={{ minHeight: 64 }}\r\n              />\r\n            ))}\r\n          </Tabs>\r\n        </Box>\r\n\r\n        {/* Tab Content */}\r\n        {activeTab === 0 && (\r\n          <Grid container spacing={3}>\r\n            {/* Stats Cards */}\r\n            <Grid item xs={12} md={3}>\r\n              <DashboardCard>\r\n                <CardContent>\r\n                  <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                    <Box>\r\n                      <Typography variant=\"h4\" fontWeight={700} color=\"primary\">\r\n                        {stats.totalCharges}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Gesamte Chargen\r\n                      </Typography>\r\n                    </Box>\r\n                    <ScienceIcon color=\"primary\" sx={{ fontSize: 40 }} />\r\n                  </Box>\r\n                  <Stack direction=\"row\" spacing={1} mt={2}>\r\n                    <StatusChip label={`${stats.approvedCharges} Genehmigt`} color=\"success\" size=\"small\" />\r\n                    <StatusChip label={`${stats.pendingCharges} Ausstehend`} color=\"warning\" size=\"small\" />\r\n                    <StatusChip label={`${stats.quarantinedCharges} Quarantäne`} color=\"error\" size=\"small\" />\r\n                  </Stack>\r\n                </CardContent>\r\n              </DashboardCard>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={3}>\r\n              <DashboardCard>\r\n                <CardContent>\r\n                  <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                    <Box>\r\n                      <Typography variant=\"h4\" fontWeight={700} color=\"secondary\">\r\n                        {stats.totalSuppliers}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Lieferanten\r\n                      </Typography>\r\n                    </Box>\r\n                    <BusinessIcon color=\"secondary\" sx={{ fontSize: 40 }} />\r\n                  </Box>\r\n                  <Stack direction=\"row\" spacing={1} mt={2}>\r\n                    <StatusChip label={`${stats.activeSuppliers} Aktiv`} color=\"success\" size=\"small\" />\r\n                    <StatusChip label={`${stats.totalSuppliers - stats.activeSuppliers} Inaktiv`} color=\"default\" size=\"small\" />\r\n                  </Stack>\r\n                </CardContent>\r\n              </DashboardCard>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={3}>\r\n              <DashboardCard>\r\n                <CardContent>\r\n                  <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                    <Box>\r\n                      <Typography variant=\"h4\" fontWeight={700} color=\"info\">\r\n                        {stats.workflowExecutions}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Workflow-Ausführungen\r\n                      </Typography>\r\n                    </Box>\r\n                    <TimelineIcon color=\"info\" sx={{ fontSize: 40 }} />\r\n                  </Box>\r\n                  <Stack direction=\"row\" spacing={1} mt={2}>\r\n                    <StatusChip label={`${stats.successfulWorkflows} Erfolgreich`} color=\"success\" size=\"small\" />\r\n                    <StatusChip label={`${stats.failedWorkflows} Fehlgeschlagen`} color=\"error\" size=\"small\" />\r\n                  </Stack>\r\n                </CardContent>\r\n              </DashboardCard>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={3}>\r\n              <DashboardCard>\r\n                <CardContent>\r\n                  <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                    <Box>\r\n                      <Typography variant=\"h4\" fontWeight={700} color=\"warning\">\r\n                        {stats.kiAnalysisCount}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        KI-Analysen\r\n                      </Typography>\r\n                    </Box>\r\n                    <AutoGraphIcon color=\"warning\" sx={{ fontSize: 40 }} />\r\n                  </Box>\r\n                  <Stack direction=\"row\" spacing={1} mt={2}>\r\n                    <StatusChip label={`${stats.averageProcessingTime}s Durchschnitt`} color=\"info\" size=\"small\" />\r\n                  </Stack>\r\n                </CardContent>\r\n              </DashboardCard>\r\n            </Grid>\r\n\r\n            {/* Quick Actions */}\r\n            <Grid item xs={12}>\r\n              <DashboardCard>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                    Schnellaktionen\r\n                  </Typography>\r\n                  <Stack direction=\"row\" spacing={2}>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      startIcon={<AddIcon />}\r\n                      onClick={() => setShowChargeForm(true)}\r\n                    >\r\n                      Neue Charge erstellen\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      startIcon={<AddIcon />}\r\n                      onClick={() => setShowSupplierForm(true)}\r\n                    >\r\n                      Neuen Lieferanten anlegen\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      startIcon={<PlayArrowIcon />}\r\n                    >\r\n                      Workflow ausführen\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      startIcon={<AutoGraphIcon />}\r\n                    >\r\n                      KI-Analyse starten\r\n                    </Button>\r\n                  </Stack>\r\n                </CardContent>\r\n              </DashboardCard>\r\n            </Grid>\r\n\r\n            {/* Recent Activity */}\r\n            <Grid item xs={12} md={6}>\r\n              <DashboardCard>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                    Letzte Aktivitäten\r\n                  </Typography>\r\n                  <List dense>\r\n                    <ListItem>\r\n                      <ListItemIcon>\r\n                        <CheckCircleIcon color=\"success\" />\r\n                      </ListItemIcon>\r\n                      <ListItemText\r\n                        primary=\"Charge CH20240701001 genehmigt\"\r\n                        secondary=\"Vor 5 Minuten\"\r\n                      />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemIcon>\r\n                        <WarningIcon color=\"warning\" />\r\n                      </ListItemIcon>\r\n                      <ListItemText\r\n                        primary=\"Charge CH20240702001 in Quarantäne\"\r\n                        secondary=\"Vor 12 Minuten\"\r\n                      />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemIcon>\r\n                        <AutoGraphIcon color=\"info\" />\r\n                      </ListItemIcon>\r\n                      <ListItemText\r\n                        primary=\"KI-Analyse für Sojaschrot abgeschlossen\"\r\n                        secondary=\"Vor 18 Minuten\"\r\n                      />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemIcon>\r\n                        <BusinessIcon color=\"primary\" />\r\n                      </ListItemIcon>\r\n                      <ListItemText\r\n                        primary=\"Neuer Lieferant 'Agrarhandel GmbH' angelegt\"\r\n                        secondary=\"Vor 25 Minuten\"\r\n                      />\r\n                    </ListItem>\r\n                  </List>\r\n                </CardContent>\r\n              </DashboardCard>\r\n            </Grid>\r\n\r\n            {/* Service Status */}\r\n            <Grid item xs={12} md={6}>\r\n              <DashboardCard>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                    Service-Status\r\n                  </Typography>\r\n                  <List dense>\r\n                    {services.map((service, index) => (\r\n                      <ListItem key={index}>\r\n                        <ListItemIcon>\r\n                          {getStatusIcon(service.status)}\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                          primary={service.name}\r\n                          secondary={`${service.responseTime}ms • ${service.description}`}\r\n                        />\r\n                        <ListItemSecondaryAction>\r\n                          <StatusChip\r\n                            label={service.status}\r\n                            color={getStatusColor(service.status)}\r\n                            size=\"small\"\r\n                          />\r\n                        </ListItemSecondaryAction>\r\n                      </ListItem>\r\n                    ))}\r\n                  </List>\r\n                </CardContent>\r\n              </DashboardCard>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n\r\n        {activeTab === 1 && (\r\n          <Box>\r\n            <Suspense fallback={<ComponentLoader componentName=\"Kassensystem\" />}>\r\n              <POSPage />\r\n            </Suspense>\r\n          </Box>\r\n        )}\r\n\r\n        {activeTab === 2 && (\r\n          <Box>\r\n            <Suspense fallback={<ComponentLoader componentName=\"Tagesjournal\" />}>\r\n              <DailyReportPage />\r\n            </Suspense>\r\n          </Box>\r\n        )}\r\n\r\n        {activeTab === 3 && (\r\n          <Box>\r\n            <Suspense fallback={<ComponentLoader componentName=\"Streckengeschäft\" />}>\r\n              <StreckengeschaeftPage />\r\n            </Suspense>\r\n          </Box>\r\n        )}\r\n\r\n        {activeTab === 4 && (\r\n          <Box>\r\n            <Suspense fallback={<ComponentLoader componentName=\"E-Invoicing\" />}>\r\n              <EInvoicingPage />\r\n            </Suspense>\r\n          </Box>\r\n        )}\r\n\r\n        {activeTab === 5 && (\r\n          <Box>\r\n            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={3}>\r\n              <Typography variant=\"h5\" fontWeight={600}>\r\n                Chargenverwaltung\r\n              </Typography>\r\n              <Button\r\n                variant=\"contained\"\r\n                startIcon={<AddIcon />}\r\n                onClick={() => setShowChargeForm(true)}\r\n              >\r\n                Neue Charge\r\n              </Button>\r\n            </Box>\r\n            <Suspense fallback={<ComponentLoader componentName=\"Chargenverwaltung\" />}>\r\n              <NeuroFlowChargenverwaltung />\r\n            </Suspense>\r\n          </Box>\r\n        )}\r\n\r\n        {activeTab === 6 && (\r\n          <Box>\r\n            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={3}>\r\n              <Typography variant=\"h5\" fontWeight={600}>\r\n                Lieferantenstammdaten\r\n              </Typography>\r\n              <Button\r\n                variant=\"contained\"\r\n                startIcon={<AddIcon />}\r\n                onClick={() => setShowSupplierForm(true)}\r\n              >\r\n                Neuer Lieferant\r\n              </Button>\r\n            </Box>\r\n            <Alert severity=\"info\" sx={{ mb: 3 }}>\r\n              Verwenden Sie die Autocomplete-Funktionalität für schnelle Eingabe und intelligente Vorschläge.\r\n            </Alert>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} md={6}>\r\n                <DashboardCard>\r\n                  <CardContent>\r\n                    <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                      Lieferanten-Suche\r\n                    </Typography>\r\n                    <Suspense fallback={<ComponentLoader componentName=\"Autocomplete\" />}>\r\n                      <NeuroFlowAutocomplete\r\n                        label=\"Lieferant suchen\"\r\n                        value=\"\"\r\n                        onChange={(value) => console.log('Selected:', value)}\r\n                        type=\"supplier\"\r\n                        placeholder=\"Lieferantenname oder -nummer eingeben...\"\r\n                        onLoadOptions={async (query) => {\r\n                          // Mock data\r\n                          const mockSuppliers = [\r\n                            { id: '1', value: 'L001', label: 'L001 - Agrarhandel GmbH', type: 'supplier' as const, metadata: { category: 'Landhandel' } },\r\n                            { id: '2', value: 'L002', label: 'L002 - Futtermittel AG', type: 'supplier' as const, metadata: { category: 'Futtermittel' } },\r\n                            { id: '3', value: 'L003', label: 'L003 - Dünger & Co KG', type: 'supplier' as const, metadata: { category: 'Düngemittel' } },\r\n                          ];\r\n                          return mockSuppliers.filter(s => \r\n                            s.label.toLowerCase().includes(query.toLowerCase())\r\n                          );\r\n                        }}\r\n                      />\r\n                    </Suspense>\r\n                  </CardContent>\r\n                </DashboardCard>\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <DashboardCard>\r\n                  <CardContent>\r\n                    <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                      Artikel-Suche\r\n                    </Typography>\r\n                    <Suspense fallback={<ComponentLoader componentName=\"Autocomplete\" />}>\r\n                      <NeuroFlowAutocomplete\r\n                        label=\"Artikel suchen\"\r\n                        value=\"\"\r\n                        onChange={(value) => console.log('Selected:', value)}\r\n                        type=\"article\"\r\n                        placeholder=\"Artikelnummer oder -name eingeben...\"\r\n                        onLoadOptions={async (query) => {\r\n                          // Mock data\r\n                          const mockArticles = [\r\n                            { id: '1', value: 'ART001', label: 'ART001 - Sojaschrot Premium', type: 'article' as const, metadata: { category: 'Futtermittel' } },\r\n                            { id: '2', value: 'ART002', label: 'ART002 - Weizenkleie', type: 'article' as const, metadata: { category: 'Futtermittel' } },\r\n                            { id: '3', value: 'ART003', label: 'ART003 - Maiskleber', type: 'article' as const, metadata: { category: 'Futtermittel' } },\r\n                          ];\r\n                          return mockArticles.filter(a => \r\n                            a.label.toLowerCase().includes(query.toLowerCase())\r\n                          );\r\n                        }}\r\n                      />\r\n                    </Suspense>\r\n                  </CardContent>\r\n                </DashboardCard>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        )}\r\n\r\n        {activeTab === 7 && (\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <DashboardCard>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                    n8n Workflow-Engine\r\n                  </Typography>\r\n                  <Alert severity=\"success\" sx={{ mb: 2 }}>\r\n                    n8n Workflow-Engine läuft auf Port 5678\r\n                  </Alert>\r\n                  <Stack direction=\"row\" spacing={2}>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      startIcon={<PlayArrowIcon />}\r\n                      href=\"http://localhost:5678\"\r\n                      target=\"_blank\"\r\n                    >\r\n                      n8n Dashboard öffnen\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      startIcon={<RefreshIcon />}\r\n                    >\r\n                      Workflows aktualisieren\r\n                    </Button>\r\n                  </Stack>\r\n                </CardContent>\r\n              </DashboardCard>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n\r\n        {activeTab === 8 && (\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <DashboardCard>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                    KI-Analysen Übersicht\r\n                  </Typography>\r\n                  <Grid container spacing={2}>\r\n                    <Grid item xs={12} md={4}>\r\n                      <Paper sx={{ p: 2, textAlign: 'center' }}>\r\n                        <Typography variant=\"h4\" color=\"success.main\">\r\n                          {stats.kiAnalysisCount}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          Durchgeführte KI-Analysen\r\n                        </Typography>\r\n                      </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={4}>\r\n                      <Paper sx={{ p: 2, textAlign: 'center' }}>\r\n                        <Typography variant=\"h4\" color=\"info.main\">\r\n                          {stats.averageProcessingTime}s\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          Durchschnittliche Verarbeitungszeit\r\n                        </Typography>\r\n                      </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={4}>\r\n                      <Paper sx={{ p: 2, textAlign: 'center' }}>\r\n                        <Typography variant=\"h4\" color=\"warning.main\">\r\n                          98.5%\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          Genauigkeit der KI-Vorhersagen\r\n                        </Typography>\r\n                      </Paper>\r\n                    </Grid>\r\n                  </Grid>\r\n                </CardContent>\r\n              </DashboardCard>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n\r\n        {activeTab === 9 && (\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <DashboardCard>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                    Service-Monitoring\r\n                  </Typography>\r\n                  <List>\r\n                    {services.map((service, index) => (\r\n                      <ListItem key={index}>\r\n                        <ListItemIcon>\r\n                          {getStatusIcon(service.status)}\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                          primary={service.name}\r\n                          secondary={\r\n                            <Box>\r\n                              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                {service.description}\r\n                              </Typography>\r\n                              <Typography variant=\"caption\" color=\"text.secondary\">\r\n                                URL: {service.url} • Response Time: {service.responseTime}ms\r\n                              </Typography>\r\n                            </Box>\r\n                          }\r\n                        />\r\n                        <ListItemSecondaryAction>\r\n                          <Stack direction=\"row\" spacing={1}>\r\n                            <StatusChip\r\n                              label={service.status}\r\n                              color={getStatusColor(service.status)}\r\n                            />\r\n                            <IconButton size=\"small\">\r\n                              <RefreshIcon />\r\n                            </IconButton>\r\n                          </Stack>\r\n                        </ListItemSecondaryAction>\r\n                      </ListItem>\r\n                    ))}\r\n                  </List>\r\n                </CardContent>\r\n              </DashboardCard>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n\r\n        {/* Modals */}\r\n        {showSupplierForm && (\r\n          <Box\r\n            sx={{\r\n              position: 'fixed',\r\n              top: 0,\r\n              left: 0,\r\n              right: 0,\r\n              bottom: 0,\r\n              backgroundColor: 'rgba(0,0,0,0.5)',\r\n              zIndex: 1300,\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              p: 2,\r\n            }}\r\n          >\r\n            <Box sx={{ maxWidth: 1200, width: '100%', maxHeight: '90vh', overflow: 'auto' }}>\r\n              <Suspense fallback={<ComponentLoader componentName=\"Lieferantenformular\" />}>\r\n                <NeuroFlowSupplierForm\r\n                  onCancel={() => setShowSupplierForm(false)}\r\n                  onSubmit={async (data) => {\r\n                    console.log('Supplier saved:', data);\r\n                    setShowSupplierForm(false);\r\n                  }}\r\n                />\r\n              </Suspense>\r\n            </Box>\r\n          </Box>\r\n        )}\r\n\r\n        {showChargeForm && (\r\n          <Box\r\n            sx={{\r\n              position: 'fixed',\r\n              top: 0,\r\n              left: 0,\r\n              right: 0,\r\n              bottom: 0,\r\n              backgroundColor: 'rgba(0,0,0,0.5)',\r\n              zIndex: 1300,\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              p: 2,\r\n            }}\r\n          >\r\n            <Box sx={{ maxWidth: 1400, width: '100%', maxHeight: '90vh', overflow: 'auto' }}>\r\n              <Suspense fallback={<ComponentLoader componentName=\"Chargenverwaltung\" />}>\r\n                <NeuroFlowChargenverwaltung />\r\n              </Suspense>\r\n            </Box>\r\n          </Box>\r\n        )}\r\n\r\n        {/* Loading Overlay */}\r\n        {loading && (\r\n          <Box\r\n            sx={{\r\n              position: 'fixed',\r\n              top: 0,\r\n              left: 0,\r\n              right: 0,\r\n              bottom: 0,\r\n              backgroundColor: 'rgba(0,0,0,0.3)',\r\n              zIndex: 1400,\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n            }}\r\n          >\r\n            <CircularProgress size={60} />\r\n          </Box>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default NeuroFlowDashboard; ","/**\r\n * 🧠 NeuroFlow Autocomplete Component\r\n * KI-first Autocomplete mit PostgreSQL-Integration für Stammdaten\r\n * Typeahead, Fuzzy Matching und intelligente Vorschläge\r\n */\r\n\r\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport {\r\n  TextField,\r\n  Autocomplete as MuiAutocomplete,\r\n  CircularProgress,\r\n  Chip,\r\n  Box,\r\n  Typography,\r\n  Popper,\r\n  Paper,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemIcon,\r\n  Divider,\r\n  Alert,\r\n  Tooltip,\r\n} from '@mui/material';\r\nimport {\r\n  Search as SearchIcon,\r\n  Person as PersonIcon,\r\n  Business as BusinessIcon,\r\n  LocationOn as LocationIcon,\r\n  Phone as PhoneIcon,\r\n  Email as EmailIcon,\r\n  AccountBalance as BankIcon,\r\n  Science as ScienceIcon,\r\n  LocalShipping as ShippingIcon,\r\n  Payment as PaymentIcon,\r\n  Description as DescriptionIcon,\r\n  CheckCircle as CheckCircleIcon,\r\n  Warning as WarningIcon,\r\n  Info as InfoIcon,\r\n} from '@mui/icons-material';\r\nimport { styled } from '@mui/material/styles';\r\nimport debounce from 'lodash/debounce';\r\n\r\n// Styled Components\r\nconst StyledAutocomplete = styled(MuiAutocomplete)(({ theme }) => ({\r\n  '& .MuiAutocomplete-inputRoot': {\r\n    padding: theme.spacing(1.5),\r\n    borderRadius: theme.shape.borderRadius * 1.5,\r\n    transition: 'all 0.3s ease-in-out',\r\n    '&:hover': {\r\n      boxShadow: theme.shadows[2],\r\n    },\r\n    '&.Mui-focused': {\r\n      boxShadow: theme.shadows[4],\r\n    },\r\n  },\r\n  '& .MuiAutocomplete-option': {\r\n    padding: theme.spacing(1.5),\r\n    '&[data-focus=\"true\"]': {\r\n      backgroundColor: theme.palette.primary.light,\r\n      color: theme.palette.primary.contrastText,\r\n    },\r\n  },\r\n}));\r\n\r\nconst CustomPopper = styled(Popper)(({ theme }) => ({\r\n  '& .MuiAutocomplete-paper': {\r\n    borderRadius: theme.shape.borderRadius * 1.5,\r\n    boxShadow: theme.shadows[8],\r\n    border: `1px solid ${theme.palette.divider}`,\r\n    maxHeight: 400,\r\n  },\r\n}));\r\n\r\n// Autocomplete Option Interface\r\ninterface AutocompleteOption {\r\n  id: string;\r\n  value: string;\r\n  label: string;\r\n  type: 'customer' | 'supplier' | 'article' | 'personnel' | 'charge' | 'location' | 'bank';\r\n  category?: string;\r\n  subcategory?: string;\r\n  icon?: React.ReactNode;\r\n  metadata?: Record<string, any>;\r\n  score?: number;\r\n  isExact?: boolean;\r\n  isFuzzy?: boolean;\r\n}\r\n\r\n// Autocomplete Props Interface\r\ninterface NeuroFlowAutocompleteProps {\r\n  label: string;\r\n  placeholder?: string;\r\n  value: string;\r\n  onChange: (value: string, option?: AutocompleteOption) => void;\r\n  onSelect?: (option: AutocompleteOption) => void;\r\n  type: 'customer' | 'supplier' | 'article' | 'personnel' | 'charge' | 'location' | 'bank';\r\n  required?: boolean;\r\n  disabled?: boolean;\r\n  error?: boolean;\r\n  helperText?: string;\r\n  fullWidth?: boolean;\r\n  size?: 'small' | 'medium';\r\n  variant?: 'outlined' | 'filled' | 'standard';\r\n  showChips?: boolean;\r\n  multiple?: boolean;\r\n  maxSuggestions?: number;\r\n  minChars?: number;\r\n  debounceMs?: number;\r\n  apiEndpoint?: string;\r\n  customOptions?: AutocompleteOption[];\r\n  onLoadOptions?: (query: string) => Promise<AutocompleteOption[]>;\r\n  renderOption?: (option: AutocompleteOption) => React.ReactNode;\r\n  getOptionLabel?: (option: AutocompleteOption) => string;\r\n  filterOptions?: (options: AutocompleteOption[], inputValue: string) => AutocompleteOption[];\r\n}\r\n\r\n// Icon Mapping\r\nconst getIconForType = (type: string): React.ReactNode => {\r\n  switch (type) {\r\n    case 'customer':\r\n      return <PersonIcon color=\"primary\" />;\r\n    case 'supplier':\r\n      return <BusinessIcon color=\"secondary\" />;\r\n    case 'article':\r\n      return <DescriptionIcon color=\"info\" />;\r\n    case 'personnel':\r\n      return <PersonIcon color=\"success\" />;\r\n    case 'charge':\r\n      return <ScienceIcon color=\"warning\" />;\r\n    case 'location':\r\n      return <LocationIcon color=\"error\" />;\r\n    case 'bank':\r\n      return <BankIcon color=\"primary\" />;\r\n    default:\r\n      return <InfoIcon color=\"action\" />;\r\n  }\r\n};\r\n\r\n// Default API Endpoints\r\nconst getApiEndpoint = (type: string): string => {\r\n  switch (type) {\r\n    case 'customer':\r\n      return '/api/customers/search';\r\n    case 'supplier':\r\n      return '/api/suppliers/search';\r\n    case 'article':\r\n      return '/api/articles/search';\r\n    case 'personnel':\r\n      return '/api/personnel/search';\r\n    case 'charge':\r\n      return '/api/charges/search';\r\n    case 'location':\r\n      return '/api/locations/search';\r\n    case 'bank':\r\n      return '/api/banks/search';\r\n    default:\r\n      return '/api/search';\r\n  }\r\n};\r\n\r\n// Fuzzy Search Implementation\r\nconst fuzzySearch = (query: string, text: string): number => {\r\n  const queryLower = query.toLowerCase();\r\n  const textLower = text.toLowerCase();\r\n  \r\n  if (textLower.includes(queryLower)) {\r\n    return 1.0; // Exact match\r\n  }\r\n  \r\n  // Simple fuzzy matching\r\n  let score = 0;\r\n  let queryIndex = 0;\r\n  \r\n  for (let i = 0; i < textLower.length && queryIndex < queryLower.length; i++) {\r\n    if (textLower[i] === queryLower[queryIndex]) {\r\n      score += 1;\r\n      queryIndex++;\r\n    }\r\n  }\r\n  \r\n  return score / queryLower.length;\r\n};\r\n\r\n// NeuroFlow Autocomplete Component\r\nexport const NeuroFlowAutocomplete: React.FC<NeuroFlowAutocompleteProps> = ({\r\n  label,\r\n  placeholder,\r\n  value,\r\n  onChange,\r\n  onSelect,\r\n  type,\r\n  required = false,\r\n  disabled = false,\r\n  error = false,\r\n  helperText,\r\n  fullWidth = true,\r\n  size = 'medium',\r\n  variant = 'outlined',\r\n  showChips = false,\r\n  multiple = false,\r\n  maxSuggestions = 10,\r\n  minChars = 2,\r\n  debounceMs = 300,\r\n  apiEndpoint,\r\n  customOptions = [],\r\n  onLoadOptions,\r\n  renderOption,\r\n  getOptionLabel,\r\n  filterOptions,\r\n}) => {\r\n  const [options, setOptions] = useState<AutocompleteOption[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [inputValue, setInputValue] = useState(value);\r\n  const [open, setOpen] = useState(false);\r\n  const abortControllerRef = useRef<AbortController | null>(null);\r\n\r\n  // Debounced search function\r\n  const debouncedSearch = useCallback(\r\n    debounce(async (query: string) => {\r\n      if (query.length < minChars) {\r\n        setOptions([]);\r\n        return;\r\n      }\r\n\r\n      setLoading(true);\r\n      \r\n      try {\r\n        // Cancel previous request\r\n        if (abortControllerRef.current) {\r\n          abortControllerRef.current.abort();\r\n        }\r\n        \r\n        abortControllerRef.current = new AbortController();\r\n        \r\n        let searchResults: AutocompleteOption[] = [];\r\n        \r\n        // Use custom load function if provided\r\n        if (onLoadOptions) {\r\n          searchResults = await onLoadOptions(query);\r\n        } else {\r\n          // Default API call\r\n          const endpoint = apiEndpoint || getApiEndpoint(type);\r\n          const response = await fetch(`${endpoint}?q=${encodeURIComponent(query)}&limit=${maxSuggestions}`, {\r\n            signal: abortControllerRef.current.signal,\r\n          });\r\n          \r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            searchResults = data.results || data || [];\r\n          }\r\n        }\r\n        \r\n        // Add custom options\r\n        const allOptions = [...customOptions, ...searchResults];\r\n        \r\n        // Apply fuzzy matching and scoring\r\n        const scoredOptions = allOptions.map(option => ({\r\n          ...option,\r\n          score: fuzzySearch(query, option.label),\r\n          isExact: option.label.toLowerCase().includes(query.toLowerCase()),\r\n          isFuzzy: !option.label.toLowerCase().includes(query.toLowerCase()) && fuzzySearch(query, option.label) > 0.5,\r\n        }));\r\n        \r\n        // Sort by relevance\r\n        const sortedOptions = scoredOptions\r\n          .filter(option => option.score > 0.3)\r\n          .sort((a, b) => {\r\n            // Exact matches first\r\n            if (a.isExact && !b.isExact) return -1;\r\n            if (!a.isExact && b.isExact) return 1;\r\n            \r\n            // Then by score\r\n            return (b.score || 0) - (a.score || 0);\r\n          })\r\n          .slice(0, maxSuggestions);\r\n        \r\n        setOptions(sortedOptions);\r\n        \r\n      } catch (error) {\r\n        if (error.name !== 'AbortError') {\r\n          console.error('Autocomplete search error:', error);\r\n          setOptions([]);\r\n        }\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }, debounceMs),\r\n    [type, apiEndpoint, onLoadOptions, customOptions, maxSuggestions, minChars]\r\n  );\r\n\r\n  // Handle input change\r\n  const handleInputChange = (event: React.SyntheticEvent, newInputValue: string) => {\r\n    setInputValue(newInputValue);\r\n    onChange(newInputValue);\r\n    \r\n    if (newInputValue.length >= minChars) {\r\n      debouncedSearch(newInputValue);\r\n    } else {\r\n      setOptions([]);\r\n    }\r\n  };\r\n\r\n  // Handle option selection\r\n  const handleOptionSelect = (event: React.SyntheticEvent, option: AutocompleteOption | null) => {\r\n    if (option) {\r\n      onChange(option.value, option);\r\n      onSelect?.(option);\r\n    }\r\n  };\r\n\r\n  // Default option renderer\r\n  const defaultRenderOption = (option: AutocompleteOption) => (\r\n    <ListItem dense>\r\n      <ListItemIcon>\r\n        {option.icon || getIconForType(option.type)}\r\n      </ListItemIcon>\r\n      <ListItemText\r\n        primary={\r\n          <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n            <Typography variant=\"body2\" fontWeight={option.isExact ? 600 : 400}>\r\n              {option.label}\r\n            </Typography>\r\n            {option.isExact && (\r\n              <CheckCircleIcon color=\"success\" sx={{ fontSize: 16 }} />\r\n            )}\r\n            {option.isFuzzy && (\r\n              <WarningIcon color=\"warning\" sx={{ fontSize: 16 }} />\r\n            )}\r\n          </Box>\r\n        }\r\n        secondary={\r\n          option.metadata && (\r\n            <Typography variant=\"caption\" color=\"text.secondary\">\r\n              {option.metadata.description || option.metadata.category || option.category}\r\n            </Typography>\r\n          )\r\n        }\r\n      />\r\n    </ListItem>\r\n  );\r\n\r\n  // Default option label getter\r\n  const defaultGetOptionLabel = (option: AutocompleteOption) => option.label;\r\n\r\n  // Default filter function\r\n  const defaultFilterOptions = (options: AutocompleteOption[], inputValue: string) => {\r\n    return options.filter(option => \r\n      option.label.toLowerCase().includes(inputValue.toLowerCase()) ||\r\n      option.value.toLowerCase().includes(inputValue.toLowerCase())\r\n    );\r\n  };\r\n\r\n  return (\r\n    <StyledAutocomplete\r\n      open={open}\r\n      onOpen={() => setOpen(true)}\r\n      onClose={() => setOpen(false)}\r\n      options={options}\r\n      loading={loading}\r\n      value={value}\r\n      onChange={handleOptionSelect}\r\n      inputValue={inputValue}\r\n      onInputChange={handleInputChange}\r\n      getOptionLabel={getOptionLabel || defaultGetOptionLabel}\r\n      filterOptions={filterOptions || defaultFilterOptions as any}\r\n      renderOption={renderOption || defaultRenderOption as any}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          label={label}\r\n          placeholder={placeholder}\r\n          required={required}\r\n          error={error}\r\n          helperText={helperText}\r\n          fullWidth={fullWidth}\r\n          size={size}\r\n          variant={variant}\r\n          disabled={disabled}\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            endAdornment: (\r\n              <>\r\n                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                {params.InputProps.endAdornment}\r\n              </>\r\n            ),\r\n          }}\r\n        />\r\n      )}\r\n      renderTags={(tagValue, getTagProps) =>\r\n        showChips && multiple\r\n          ? tagValue.map((option, index) => (\r\n              <Chip\r\n                {...getTagProps({ index })}\r\n                key={(option as any).id}\r\n                label={(option as any).label}\r\n                icon={(option as any).icon || getIconForType((option as any).type)}\r\n                size=\"small\"\r\n                color=\"primary\"\r\n                variant=\"outlined\"\r\n              />\r\n            ))\r\n          : null\r\n      }\r\n      PopperComponent={CustomPopper}\r\n      multiple={multiple}\r\n      freeSolo\r\n      autoHighlight\r\n      autoComplete\r\n      includeInputInList\r\n      filterSelectedOptions\r\n      clearOnBlur={false}\r\n      selectOnFocus\r\n      handleHomeEndKeys\r\n      blurOnSelect\r\n    />\r\n  );\r\n};\r\n\r\n// Specialized Autocomplete Components\r\nexport const CustomerAutocomplete: React.FC<Omit<NeuroFlowAutocompleteProps, 'type'>> = (props) => (\r\n  <NeuroFlowAutocomplete\r\n    {...props}\r\n    type=\"customer\"\r\n    placeholder=\"Kundenname, -nummer oder E-Mail eingeben...\"\r\n    showChips={true}\r\n  />\r\n);\r\n\r\nexport const SupplierAutocomplete: React.FC<Omit<NeuroFlowAutocompleteProps, 'type'>> = (props) => (\r\n  <NeuroFlowAutocomplete\r\n    {...props}\r\n    type=\"supplier\"\r\n    placeholder=\"Lieferantenname, -nummer oder Branche eingeben...\"\r\n    showChips={true}\r\n  />\r\n);\r\n\r\nexport const ArticleAutocomplete: React.FC<Omit<NeuroFlowAutocompleteProps, 'type'>> = (props) => (\r\n  <NeuroFlowAutocomplete\r\n    {...props}\r\n    type=\"article\"\r\n    placeholder=\"Artikelnummer, -name oder Kategorie eingeben...\"\r\n    showChips={true}\r\n  />\r\n);\r\n\r\nexport const PersonnelAutocomplete: React.FC<Omit<NeuroFlowAutocompleteProps, 'type'>> = (props) => (\r\n  <NeuroFlowAutocomplete\r\n    {...props}\r\n    type=\"personnel\"\r\n    placeholder=\"Mitarbeitername, -nummer oder Abteilung eingeben...\"\r\n    showChips={true}\r\n  />\r\n);\r\n\r\nexport const ChargeAutocomplete: React.FC<Omit<NeuroFlowAutocompleteProps, 'type'>> = (props) => (\r\n  <NeuroFlowAutocomplete\r\n    {...props}\r\n    type=\"charge\"\r\n    placeholder=\"Chargennummer, Artikel oder Lieferant eingeben...\"\r\n    showChips={true}\r\n  />\r\n);\r\n\r\nexport default NeuroFlowAutocomplete; ","/**\r\n * 🧠 NeuroFlow Supplier Form\r\n * KI-first, responsive-first Lieferantenstammdaten-Formular für ERP-Systeme\r\n * Fehlerfreier TypeScript-Code mit vollständiger Validierung\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormHelperText,\r\n  Chip,\r\n  Divider,\r\n  Stack,\r\n  IconButton,\r\n  Tooltip,\r\n  Skeleton,\r\n  CircularProgress,\r\n  Tabs,\r\n  Tab,\r\n  Alert,\r\n  Switch,\r\n  FormControlLabel,\r\n} from '@mui/material';\r\nimport {\r\n  Save as SaveIcon,\r\n  Cancel as CancelIcon,\r\n  Refresh as RefreshIcon,\r\n  Business as BusinessIcon,\r\n  ContactPhone as ContactIcon,\r\n  LocationOn as LocationIcon,\r\n  AccountBalance as BankIcon,\r\n  Assessment as AssessmentIcon,\r\n  Settings as SettingsIcon,\r\n  LocalShipping as ShippingIcon,\r\n  Payment as PaymentIcon,\r\n  Description as DescriptionIcon,\r\n} from '@mui/icons-material';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport type { SubmitHandler } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { z } from 'zod';\r\nimport { styled } from '@mui/material/styles';\r\nimport { NeuroFlowAutocomplete, SupplierAutocomplete } from './NeuroFlowAutocomplete';\r\n\r\n// Styled Components\r\nconst NeuroFlowCard = styled(Card)(({ theme }) => ({\r\n  borderRadius: theme.shape.borderRadius * 2,\r\n  boxShadow: theme.shadows[1],\r\n  border: `1px solid ${theme.palette.divider}`,\r\n  transition: 'all 0.3s ease-in-out',\r\n  '&:hover': {\r\n    boxShadow: theme.shadows[4],\r\n  },\r\n}));\r\n\r\nconst NeuroFlowButton = styled(Button)(({ theme }) => ({\r\n  borderRadius: theme.shape.borderRadius * 1.5,\r\n  textTransform: 'none',\r\n  fontWeight: 600,\r\n  padding: '0.75rem 1.5rem',\r\n  transition: 'all 0.3s ease-in-out',\r\n  '&:hover': {\r\n    transform: 'translateY(-1px)',\r\n    boxShadow: theme.shadows[3],\r\n  },\r\n}));\r\n\r\n// Zod Schema für Lieferantenstammdaten\r\nconst SupplierSchema = z.object({\r\n  // Grunddaten\r\n  supplier_number: z.string().min(1, 'Lieferantennummer ist erforderlich'),\r\n  company_name: z.string().min(2, 'Firmenname muss mindestens 2 Zeichen lang sein'),\r\n  legal_form: z.enum(['GmbH', 'AG', 'KG', 'OHG', 'Einzelunternehmen', 'Gbr', 'e.V.', 'Sonstige']),\r\n  tax_number: z.string().optional(),\r\n  vat_number: z.string().optional(),\r\n  commercial_register: z.string().optional(),\r\n  \r\n  // Kontaktdaten\r\n  contact_person: z.string().min(1, 'Ansprechpartner ist erforderlich'),\r\n  email: z.string().email('Ungültige E-Mail-Adresse'),\r\n  phone: z.string().min(1, 'Telefonnummer ist erforderlich'),\r\n  fax: z.string().optional(),\r\n  website: z.string().url('Ungültige Website-URL').optional().or(z.literal('')),\r\n  \r\n  // Adressdaten\r\n  street: z.string().min(1, 'Straße ist erforderlich'),\r\n  house_number: z.string().min(1, 'Hausnummer ist erforderlich'),\r\n  postal_code: z.string().min(5, 'PLZ muss mindestens 5 Zeichen lang sein'),\r\n  city: z.string().min(1, 'Stadt ist erforderlich'),\r\n  country: z.string().min(1, 'Land ist erforderlich'),\r\n  \r\n  // Bankdaten\r\n  bank_name: z.string().optional(),\r\n  iban: z.string().optional(),\r\n  bic: z.string().optional(),\r\n  account_holder: z.string().optional(),\r\n  \r\n  // Geschäftsdaten\r\n  industry: z.enum(['Elektronik', 'Bürobedarf', 'Werkzeuge', 'Verbrauchsmaterial', 'Dienstleistungen', 'Software', 'Hardware', 'Sonstige']),\r\n  supplier_type: z.enum(['Hauptlieferant', 'Nebenlieferant', 'Notfalllieferant', 'Exklusivlieferant']),\r\n  payment_terms: z.number().min(0, 'Zahlungsziel darf nicht negativ sein'),\r\n  credit_limit: z.number().min(0, 'Kreditlimit darf nicht negativ sein'),\r\n  discount_percentage: z.number().min(0, 'Rabatt darf nicht negativ sein').max(100, 'Rabatt darf nicht über 100% sein'),\r\n  \r\n  // Bewertung\r\n  rating: z.number().min(1, 'Bewertung muss mindestens 1 sein').max(5, 'Bewertung darf maximal 5 sein'),\r\n  reliability_score: z.number().min(0, 'Zuverlässigkeits-Score darf nicht negativ sein').max(100, 'Zuverlässigkeits-Score darf nicht über 100 sein'),\r\n  quality_score: z.number().min(0, 'Qualitäts-Score darf nicht negativ sein').max(100, 'Qualitäts-Score darf nicht über 100 sein'),\r\n  delivery_score: z.number().min(0, 'Liefer-Score darf nicht negativ sein').max(100, 'Liefer-Score darf nicht über 100 sein'),\r\n  \r\n  // Status\r\n  status: z.enum(['active', 'inactive', 'blocked', 'prospect']),\r\n  is_preferred: z.boolean(),\r\n  is_certified: z.boolean(),\r\n  is_local: z.boolean(),\r\n  \r\n  // ERP-spezifische Felder\r\n  sales_rep: z.string().optional(),\r\n  cost_center: z.string().optional(),\r\n  notes: z.string().optional(),\r\n  \r\n  // Lieferdaten\r\n  average_delivery_time: z.number().min(0, 'Durchschnittliche Lieferzeit darf nicht negativ sein'),\r\n  minimum_order_value: z.number().min(0, 'Mindestbestellwert darf nicht negativ sein'),\r\n  free_shipping_threshold: z.number().min(0, 'Kostenlose Lieferung ab darf nicht negativ sein'),\r\n  \r\n  // Zertifizierungen\r\n  iso_9001: z.boolean(),\r\n  iso_14001: z.boolean(),\r\n  other_certifications: z.string().optional(),\r\n});\r\n\r\ntype SupplierFormData = z.infer<typeof SupplierSchema>;\r\n\r\n// Mock Data\r\nconst mockLegalForms = [\r\n  { value: 'GmbH', label: 'GmbH' },\r\n  { value: 'AG', label: 'Aktiengesellschaft (AG)' },\r\n  { value: 'KG', label: 'Kommanditgesellschaft (KG)' },\r\n  { value: 'OHG', label: 'Offene Handelsgesellschaft (OHG)' },\r\n  { value: 'Einzelunternehmen', label: 'Einzelunternehmen' },\r\n  { value: 'Gbr', label: 'Gesellschaft bürgerlichen Rechts (GbR)' },\r\n  { value: 'e.V.', label: 'Eingetragener Verein (e.V.)' },\r\n  { value: 'Sonstige', label: 'Sonstige' },\r\n];\r\n\r\nconst mockIndustries = [\r\n  { value: 'Elektronik', label: 'Elektronik' },\r\n  { value: 'Bürobedarf', label: 'Bürobedarf' },\r\n  { value: 'Werkzeuge', label: 'Werkzeuge' },\r\n  { value: 'Verbrauchsmaterial', label: 'Verbrauchsmaterial' },\r\n  { value: 'Dienstleistungen', label: 'Dienstleistungen' },\r\n  { value: 'Software', label: 'Software' },\r\n  { value: 'Hardware', label: 'Hardware' },\r\n  { value: 'Sonstige', label: 'Sonstige' },\r\n];\r\n\r\nconst mockSupplierTypes = [\r\n  { value: 'Hauptlieferant', label: 'Hauptlieferant', color: 'success' },\r\n  { value: 'Nebenlieferant', label: 'Nebenlieferant', color: 'primary' },\r\n  { value: 'Notfalllieferant', label: 'Notfalllieferant', color: 'warning' },\r\n  { value: 'Exklusivlieferant', label: 'Exklusivlieferant', color: 'secondary' },\r\n];\r\n\r\n// NeuroFlow Supplier Form Component\r\ninterface NeuroFlowSupplierFormProps {\r\n  initialData?: Partial<SupplierFormData>;\r\n  onSubmit?: (data: SupplierFormData) => Promise<void>;\r\n  onCancel?: () => void;\r\n  loading?: boolean;\r\n  mode?: 'create' | 'edit';\r\n}\r\n\r\nexport const NeuroFlowSupplierForm: React.FC<NeuroFlowSupplierFormProps> = ({\r\n  initialData,\r\n  onSubmit,\r\n  onCancel,\r\n  loading = false,\r\n  mode = 'create',\r\n}) => {\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const [submitLoading, setSubmitLoading] = useState(false);\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors, isDirty },\r\n    reset,\r\n    watch,\r\n    setValue,\r\n  } = useForm<SupplierFormData>({\r\n    resolver: zodResolver(SupplierSchema),\r\n    defaultValues: {\r\n      supplier_number: '',\r\n      company_name: '',\r\n      legal_form: 'GmbH',\r\n      tax_number: '',\r\n      vat_number: '',\r\n      commercial_register: '',\r\n      contact_person: '',\r\n      email: '',\r\n      phone: '',\r\n      fax: '',\r\n      website: '',\r\n      street: '',\r\n      house_number: '',\r\n      postal_code: '',\r\n      city: '',\r\n      country: 'Deutschland',\r\n      bank_name: '',\r\n      iban: '',\r\n      bic: '',\r\n      account_holder: '',\r\n      industry: 'Elektronik',\r\n      supplier_type: 'Nebenlieferant',\r\n      payment_terms: 30,\r\n      credit_limit: 0,\r\n      discount_percentage: 0,\r\n      rating: 3,\r\n      reliability_score: 75,\r\n      quality_score: 75,\r\n      delivery_score: 75,\r\n      status: 'active',\r\n      is_preferred: false,\r\n      is_certified: false,\r\n      is_local: false,\r\n      sales_rep: '',\r\n      cost_center: '',\r\n      notes: '',\r\n      average_delivery_time: 7,\r\n      minimum_order_value: 0,\r\n      free_shipping_threshold: 0,\r\n      iso_9001: false,\r\n      iso_14001: false,\r\n      other_certifications: '',\r\n      ...initialData,\r\n    },\r\n  });\r\n\r\n  const handleFormSubmit: SubmitHandler<SupplierFormData> = async (data) => {\r\n    setSubmitLoading(true);\r\n    try {\r\n      if (onSubmit) {\r\n        await onSubmit(data);\r\n      }\r\n      console.log('Supplier saved:', data);\r\n    } catch (error) {\r\n      console.error('Error saving supplier:', error);\r\n    } finally {\r\n      setSubmitLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    if (isDirty) {\r\n      if (window.confirm('Änderungen verwerfen?')) {\r\n        reset();\r\n        onCancel?.();\r\n      }\r\n    } else {\r\n      onCancel?.();\r\n    }\r\n  };\r\n\r\n  const generateSupplierNumber = () => {\r\n    const date = new Date();\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');\r\n    const supplierNumber = `L${year}${month}-${random}`;\r\n    setValue('supplier_number', supplierNumber);\r\n  };\r\n\r\n  const tabs = [\r\n    { label: 'Grunddaten', icon: <BusinessIcon /> },\r\n    { label: 'Kontaktdaten', icon: <ContactIcon /> },\r\n    { label: 'Adressdaten', icon: <LocationIcon /> },\r\n    { label: 'Bankdaten', icon: <BankIcon /> },\r\n    { label: 'Geschäftsdaten', icon: <AssessmentIcon /> },\r\n    { label: 'Bewertung', icon: <AssessmentIcon /> },\r\n    { label: 'Lieferdaten', icon: <ShippingIcon /> },\r\n    { label: 'Zertifizierungen', icon: <SettingsIcon /> },\r\n  ];\r\n\r\n  return (\r\n    <NeuroFlowCard>\r\n      <CardContent>\r\n        {/* Header */}\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={3}>\r\n          <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n            <BusinessIcon color=\"primary\" sx={{ fontSize: 32 }} />\r\n            <Box>\r\n              <Typography variant=\"h5\" fontWeight={600} color=\"text.primary\">\r\n                {mode === 'create' ? 'Neuer Lieferant' : 'Lieferant bearbeiten'}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Erstellen Sie einen neuen Lieferantenstammsatz mit allen erforderlichen Informationen\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n          \r\n          <Stack direction=\"row\" spacing={1}>\r\n            <Tooltip title=\"Lieferantennummer generieren\">\r\n              <IconButton onClick={generateSupplierNumber} color=\"primary\">\r\n                <RefreshIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Stack>\r\n        </Box>\r\n\r\n        <form onSubmit={handleSubmit(handleFormSubmit)}>\r\n          {/* Tabs */}\r\n          <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\r\n            <Tabs value={activeTab} onChange={(e, newValue) => setActiveTab(newValue)}>\r\n              {tabs.map((tab, index) => (\r\n                <Tab\r\n                  key={index}\r\n                  label={tab.label}\r\n                  icon={tab.icon}\r\n                  iconPosition=\"start\"\r\n                  sx={{ minHeight: 64 }}\r\n                />\r\n              ))}\r\n            </Tabs>\r\n          </Box>\r\n\r\n          {/* Tab Content */}\r\n          {activeTab === 0 && (\r\n            <Grid container spacing={3}>\r\n              {/* Lieferantennummer */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"supplier_number\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Lieferantennummer *\"\r\n                      fullWidth\r\n                      error={!!errors.supplier_number}\r\n                      helperText={errors.supplier_number?.message}\r\n                      InputProps={{\r\n                        startAdornment: <BusinessIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Firmenname */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"company_name\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <NeuroFlowAutocomplete\r\n                      label=\"Firmenname *\"\r\n                      value={field.value}\r\n                      onChange={(value) => field.onChange(value)}\r\n                      type=\"supplier\"\r\n                      placeholder=\"Firmenname eingeben...\"\r\n                      error={!!errors.company_name}\r\n                      helperText={errors.company_name?.message}\r\n                      onLoadOptions={async (query) => {\r\n                        // Mock data - in Produktion durch echte API ersetzen\r\n                        const mockSuppliers = [\r\n                          { id: '1', value: 'Agrarhandel GmbH', label: 'Agrarhandel GmbH', type: 'supplier' as const, metadata: { category: 'Landhandel' } },\r\n                          { id: '2', value: 'Futtermittel AG', label: 'Futtermittel AG', type: 'supplier' as const, metadata: { category: 'Futtermittel' } },\r\n                          { id: '3', value: 'Dünger & Co KG', label: 'Dünger & Co KG', type: 'supplier' as const, metadata: { category: 'Düngemittel' } },\r\n                        ];\r\n                        return mockSuppliers.filter(s => \r\n                          s.label.toLowerCase().includes(query.toLowerCase())\r\n                        );\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Rechtsform */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"legal_form\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.legal_form}>\r\n                      <InputLabel>Rechtsform *</InputLabel>\r\n                      <Select {...field} label=\"Rechtsform *\">\r\n                        {mockLegalForms.map((form) => (\r\n                          <MenuItem key={form.value} value={form.value}>\r\n                            {form.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                      {errors.legal_form && (\r\n                        <FormHelperText>{errors.legal_form.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Branche */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"industry\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <NeuroFlowAutocomplete\r\n                      label=\"Branche *\"\r\n                      value={field.value}\r\n                      onChange={(value) => field.onChange(value)}\r\n                      type=\"supplier\"\r\n                      placeholder=\"Branche auswählen...\"\r\n                      error={!!errors.industry}\r\n                      helperText={errors.industry?.message}\r\n                      customOptions={mockIndustries.map(industry => ({\r\n                        id: industry.value,\r\n                        value: industry.value,\r\n                        label: industry.label,\r\n                        type: 'supplier' as const,\r\n                        metadata: { category: 'Branche' }\r\n                      }))}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Steuernummer */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"tax_number\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Steuernummer\"\r\n                      fullWidth\r\n                      error={!!errors.tax_number}\r\n                      helperText={errors.tax_number?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* USt-ID */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"vat_number\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"USt-ID\"\r\n                      fullWidth\r\n                      error={!!errors.vat_number}\r\n                      helperText={errors.vat_number?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Handelsregister */}\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  name=\"commercial_register\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Handelsregister\"\r\n                      fullWidth\r\n                      error={!!errors.commercial_register}\r\n                      helperText={errors.commercial_register?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 1 && (\r\n            <Grid container spacing={3}>\r\n              {/* Ansprechpartner */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"contact_person\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Ansprechpartner *\"\r\n                      fullWidth\r\n                      error={!!errors.contact_person}\r\n                      helperText={errors.contact_person?.message}\r\n                      InputProps={{\r\n                        startAdornment: <ContactIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* E-Mail */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"email\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"E-Mail *\"\r\n                      type=\"email\"\r\n                      fullWidth\r\n                      error={!!errors.email}\r\n                      helperText={errors.email?.message}\r\n                      InputProps={{\r\n                        startAdornment: <ContactIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Telefon */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"phone\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Telefon *\"\r\n                      fullWidth\r\n                      error={!!errors.phone}\r\n                      helperText={errors.phone?.message}\r\n                      InputProps={{\r\n                        startAdornment: <ContactIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Fax */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"fax\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Fax\"\r\n                      fullWidth\r\n                      error={!!errors.fax}\r\n                      helperText={errors.fax?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Website */}\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  name=\"website\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Website\"\r\n                      fullWidth\r\n                      error={!!errors.website}\r\n                      helperText={errors.website?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 2 && (\r\n            <Grid container spacing={3}>\r\n              {/* Straße */}\r\n              <Grid item xs={12} md={8}>\r\n                <Controller\r\n                  name=\"street\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Straße *\"\r\n                      fullWidth\r\n                      error={!!errors.street}\r\n                      helperText={errors.street?.message}\r\n                      InputProps={{\r\n                        startAdornment: <LocationIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Hausnummer */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"house_number\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Hausnummer *\"\r\n                      fullWidth\r\n                      error={!!errors.house_number}\r\n                      helperText={errors.house_number?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* PLZ */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"postal_code\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"PLZ *\"\r\n                      fullWidth\r\n                      error={!!errors.postal_code}\r\n                      helperText={errors.postal_code?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Stadt */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"city\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Stadt *\"\r\n                      fullWidth\r\n                      error={!!errors.city}\r\n                      helperText={errors.city?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Land */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"country\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Land *\"\r\n                      fullWidth\r\n                      error={!!errors.country}\r\n                      helperText={errors.country?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 3 && (\r\n            <Grid container spacing={3}>\r\n              {/* Bankname */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"bank_name\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Bankname\"\r\n                      fullWidth\r\n                      error={!!errors.bank_name}\r\n                      helperText={errors.bank_name?.message}\r\n                      InputProps={{\r\n                        startAdornment: <BankIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Kontoinhaber */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"account_holder\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Kontoinhaber\"\r\n                      fullWidth\r\n                      error={!!errors.account_holder}\r\n                      helperText={errors.account_holder?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* IBAN */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"iban\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"IBAN\"\r\n                      fullWidth\r\n                      error={!!errors.iban}\r\n                      helperText={errors.iban?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* BIC */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"bic\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"BIC\"\r\n                      fullWidth\r\n                      error={!!errors.bic}\r\n                      helperText={errors.bic?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 4 && (\r\n            <Grid container spacing={3}>\r\n              {/* Lieferantentyp */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"supplier_type\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.supplier_type}>\r\n                      <InputLabel>Lieferantentyp *</InputLabel>\r\n                      <Select {...field} label=\"Lieferantentyp *\">\r\n                        {mockSupplierTypes.map((type) => (\r\n                          <MenuItem key={type.value} value={type.value}>\r\n                            <Chip\r\n                              label={type.label}\r\n                              size=\"small\"\r\n                              color={type.color as any}\r\n                              sx={{ mr: 1 }}\r\n                            />\r\n                            {type.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                      {errors.supplier_type && (\r\n                        <FormHelperText>{errors.supplier_type.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Zahlungsziel */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"payment_terms\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Zahlungsziel (Tage) *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.payment_terms}\r\n                      helperText={errors.payment_terms?.message}\r\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                      InputProps={{\r\n                        startAdornment: <PaymentIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Kreditlimit */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"credit_limit\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Kreditlimit (€) *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.credit_limit}\r\n                      helperText={errors.credit_limit?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                      InputProps={{\r\n                        startAdornment: <PaymentIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Rabatt */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"discount_percentage\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Rabatt (%) *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.discount_percentage}\r\n                      helperText={errors.discount_percentage?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                      InputProps={{\r\n                        startAdornment: <PaymentIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Status */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"status\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.status}>\r\n                      <InputLabel>Status *</InputLabel>\r\n                      <Select {...field} label=\"Status *\">\r\n                        <MenuItem value=\"active\">\r\n                          <Chip label=\"Aktiv\" color=\"success\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Aktiv\r\n                        </MenuItem>\r\n                        <MenuItem value=\"inactive\">\r\n                          <Chip label=\"Inaktiv\" color=\"default\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Inaktiv\r\n                        </MenuItem>\r\n                        <MenuItem value=\"blocked\">\r\n                          <Chip label=\"Gesperrt\" color=\"error\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Gesperrt\r\n                        </MenuItem>\r\n                        <MenuItem value=\"prospect\">\r\n                          <Chip label=\"Interessent\" color=\"warning\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Interessent\r\n                        </MenuItem>\r\n                      </Select>\r\n                      {errors.status && (\r\n                        <FormHelperText>{errors.status.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Vertriebsmitarbeiter */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"sales_rep\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Vertriebsmitarbeiter\"\r\n                      fullWidth\r\n                      error={!!errors.sales_rep}\r\n                      helperText={errors.sales_rep?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Lieferanten-Flags */}\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                  Lieferanten-Eigenschaften\r\n                </Typography>\r\n                <Stack direction=\"row\" spacing={3}>\r\n                  <Controller\r\n                    name=\"is_preferred\"\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Switch\r\n                            checked={field.value}\r\n                            onChange={field.onChange}\r\n                            color=\"success\"\r\n                          />\r\n                        }\r\n                        label=\"Bevorzugter Lieferant\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Controller\r\n                    name=\"is_certified\"\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Switch\r\n                            checked={field.value}\r\n                            onChange={field.onChange}\r\n                            color=\"primary\"\r\n                          />\r\n                        }\r\n                        label=\"Zertifiziert\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Controller\r\n                    name=\"is_local\"\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Switch\r\n                            checked={field.value}\r\n                            onChange={field.onChange}\r\n                            color=\"info\"\r\n                          />\r\n                        }\r\n                        label=\"Lokaler Lieferant\"\r\n                      />\r\n                    )}\r\n                  />\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 5 && (\r\n            <Grid container spacing={3}>\r\n              {/* Bewertung */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"rating\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.rating}>\r\n                      <InputLabel>Bewertung (1-5) *</InputLabel>\r\n                      <Select {...field} label=\"Bewertung (1-5) *\">\r\n                        <MenuItem value={1}>1 - Sehr schlecht</MenuItem>\r\n                        <MenuItem value={2}>2 - Schlecht</MenuItem>\r\n                        <MenuItem value={3}>3 - Durchschnittlich</MenuItem>\r\n                        <MenuItem value={4}>4 - Gut</MenuItem>\r\n                        <MenuItem value={5}>5 - Sehr gut</MenuItem>\r\n                      </Select>\r\n                      {errors.rating && (\r\n                        <FormHelperText>{errors.rating.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Zuverlässigkeits-Score */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"reliability_score\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Zuverlässigkeits-Score (0-100) *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.reliability_score}\r\n                      helperText={errors.reliability_score?.message}\r\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Qualitäts-Score */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"quality_score\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Qualitäts-Score (0-100) *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.quality_score}\r\n                      helperText={errors.quality_score?.message}\r\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Liefer-Score */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"delivery_score\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Liefer-Score (0-100) *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.delivery_score}\r\n                      helperText={errors.delivery_score?.message}\r\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 6 && (\r\n            <Grid container spacing={3}>\r\n              {/* Durchschnittliche Lieferzeit */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"average_delivery_time\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Durchschnittliche Lieferzeit (Tage) *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.average_delivery_time}\r\n                      helperText={errors.average_delivery_time?.message}\r\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                      InputProps={{\r\n                        startAdornment: <ShippingIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Mindestbestellwert */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"minimum_order_value\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Mindestbestellwert (€) *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.minimum_order_value}\r\n                      helperText={errors.minimum_order_value?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                      InputProps={{\r\n                        startAdornment: <PaymentIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Kostenlose Lieferung ab */}\r\n              <Grid item xs={12} md={4}>\r\n                <Controller\r\n                  name=\"free_shipping_threshold\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Kostenlose Lieferung ab (€) *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.free_shipping_threshold}\r\n                      helperText={errors.free_shipping_threshold?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                      InputProps={{\r\n                        startAdornment: <ShippingIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 7 && (\r\n            <Grid container spacing={3}>\r\n              {/* ISO-Zertifizierungen */}\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                  Zertifizierungen\r\n                </Typography>\r\n                <Stack direction=\"row\" spacing={3} mb={3}>\r\n                  <Controller\r\n                    name=\"iso_9001\"\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Switch\r\n                            checked={field.value}\r\n                            onChange={field.onChange}\r\n                            color=\"primary\"\r\n                          />\r\n                        }\r\n                        label=\"ISO 9001 (Qualitätsmanagement)\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Controller\r\n                    name=\"iso_14001\"\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Switch\r\n                            checked={field.value}\r\n                            onChange={field.onChange}\r\n                            color=\"success\"\r\n                          />\r\n                        }\r\n                        label=\"ISO 14001 (Umweltmanagement)\"\r\n                      />\r\n                    )}\r\n                  />\r\n                </Stack>\r\n              </Grid>\r\n\r\n              {/* Weitere Zertifizierungen */}\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  name=\"other_certifications\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Weitere Zertifizierungen\"\r\n                      multiline\r\n                      rows={4}\r\n                      fullWidth\r\n                      error={!!errors.other_certifications}\r\n                      helperText={errors.other_certifications?.message}\r\n                      placeholder=\"Zusätzliche Zertifizierungen, Qualitätsstandards, etc.\"\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Notizen */}\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  name=\"notes\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Notizen\"\r\n                      multiline\r\n                      rows={4}\r\n                      fullWidth\r\n                      error={!!errors.notes}\r\n                      helperText={errors.notes?.message}\r\n                      placeholder=\"Zusätzliche Informationen, Besonderheiten, etc.\"\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {/* Form Actions */}\r\n          <Box display=\"flex\" justifyContent=\"flex-end\" gap={2} mt={4}>\r\n            <NeuroFlowButton\r\n              variant=\"outlined\"\r\n              onClick={handleCancel}\r\n              disabled={submitLoading}\r\n              startIcon={<CancelIcon />}\r\n            >\r\n              Abbrechen\r\n            </NeuroFlowButton>\r\n            <NeuroFlowButton\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              disabled={submitLoading || loading}\r\n              startIcon={submitLoading ? <CircularProgress size={20} /> : <SaveIcon />}\r\n            >\r\n              {submitLoading ? 'Speichern...' : 'Lieferant speichern'}\r\n            </NeuroFlowButton>\r\n          </Box>\r\n        </form>\r\n      </CardContent>\r\n    </NeuroFlowCard>\r\n  );\r\n};\r\n\r\nexport default NeuroFlowSupplierForm; ","/**\r\n * 🧠 NeuroFlow Chargenverwaltung\r\n * KI-first, responsive-first Chargenverwaltung für Landhandel-ERP-Systeme\r\n * Integration mit n8n Workflows für Automatisierung\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormHelperText,\r\n  Chip,\r\n  Divider,\r\n  Stack,\r\n  IconButton,\r\n  Tooltip,\r\n  Skeleton,\r\n  CircularProgress,\r\n  Tabs,\r\n  Tab,\r\n  Alert,\r\n  Switch,\r\n  FormControlLabel,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n} from '@mui/material';\r\nimport {\r\n  Save as SaveIcon,\r\n  Cancel as CancelIcon,\r\n  Refresh as RefreshIcon,\r\n  Add as AddIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Visibility as ViewIcon,\r\n  QrCode as QrCodeIcon,\r\n  Assessment as AssessmentIcon,\r\n  Settings as SettingsIcon,\r\n  LocalShipping as ShippingIcon,\r\n  Payment as PaymentIcon,\r\n  Description as DescriptionIcon,\r\n  Science as ScienceIcon,\r\n  Security as SecurityIcon,\r\n  Timeline as TimelineIcon,\r\n  AutoGraph as AutoGraphIcon,\r\n  PlayArrow as PlayArrowIcon,\r\n} from '@mui/icons-material';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport type { SubmitHandler } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { z } from 'zod';\r\nimport { styled } from '@mui/material/styles';\r\nimport { \r\n  NeuroFlowAutocomplete, \r\n  ArticleAutocomplete, \r\n  SupplierAutocomplete,\r\n  ChargeAutocomplete \r\n} from './NeuroFlowAutocomplete';\r\n\r\n// Styled Components\r\nconst NeuroFlowCard = styled(Card)(({ theme }) => ({\r\n  borderRadius: theme.shape.borderRadius * 2,\r\n  boxShadow: theme.shadows[1],\r\n  border: `1px solid ${theme.palette.divider}`,\r\n  transition: 'all 0.3s ease-in-out',\r\n  '&:hover': {\r\n    boxShadow: theme.shadows[4],\r\n  },\r\n}));\r\n\r\nconst NeuroFlowButton = styled(Button)(({ theme }) => ({\r\n  borderRadius: theme.shape.borderRadius * 1.5,\r\n  textTransform: 'none',\r\n  fontWeight: 600,\r\n  padding: '0.75rem 1.5rem',\r\n  transition: 'all 0.3s ease-in-out',\r\n  '&:hover': {\r\n    transform: 'translateY(-1px)',\r\n    boxShadow: theme.shadows[3],\r\n  },\r\n}));\r\n\r\n// Zod Schema für Chargenverwaltung\r\nconst ChargeSchema = z.object({\r\n  // Grunddaten\r\n  charge_number: z.string().min(1, 'Chargennummer ist erforderlich'),\r\n  article_number: z.string().min(1, 'Artikelnummer ist erforderlich'),\r\n  article_name: z.string().min(2, 'Artikelname muss mindestens 2 Zeichen lang sein'),\r\n  supplier_number: z.string().min(1, 'Lieferantennummer ist erforderlich'),\r\n  supplier_name: z.string().min(2, 'Lieferantenname muss mindestens 2 Zeichen lang sein'),\r\n  \r\n  // Chargendaten\r\n  production_date: z.string().min(1, 'Produktionsdatum ist erforderlich'),\r\n  expiry_date: z.string().min(1, 'Verfallsdatum ist erforderlich'),\r\n  batch_size: z.number().min(0, 'Chargengröße darf nicht negativ sein'),\r\n  unit: z.enum(['kg', 't', 'l', 'stk', 'm³']),\r\n  \r\n  // Qualitätsdaten\r\n  quality_status: z.enum(['pending', 'approved', 'rejected', 'quarantine']),\r\n  qs_milk_relevant: z.boolean(),\r\n  vlog_gmo_status: z.enum(['VLOG', 'GMO', 'unknown']),\r\n  eudr_compliant: z.boolean(),\r\n  sustainability_rapeseed: z.boolean(),\r\n  \r\n  // Analysedaten\r\n  protein_content: z.number().min(0).max(100).optional(),\r\n  fat_content: z.number().min(0).max(100).optional(),\r\n  moisture_content: z.number().min(0).max(100).optional(),\r\n  ash_content: z.number().min(0).max(100).optional(),\r\n  \r\n  // Preisdaten\r\n  purchase_price: z.number().min(0, 'Einkaufspreis darf nicht negativ sein'),\r\n  currency: z.enum(['EUR', 'USD', 'CHF']),\r\n  \r\n  // Lagerdaten\r\n  warehouse_location: z.string().min(1, 'Lagerort ist erforderlich'),\r\n  storage_conditions: z.enum(['ambient', 'cooled', 'frozen', 'controlled']),\r\n  \r\n  // Zertifikate\r\n  certificates: z.array(z.object({\r\n    id: z.string(),\r\n    type: z.string(),\r\n    filename: z.string(),\r\n    upload_date: z.string(),\r\n    valid_until: z.string().optional(),\r\n  })).optional(),\r\n  \r\n  // KI-Extensionen\r\n  ki_analysis: z.object({\r\n    risk_score: z.number().min(0).max(100),\r\n    quality_prediction: z.enum(['excellent', 'good', 'average', 'poor']),\r\n    shelf_life_prediction: z.number().min(0),\r\n    price_optimization_suggestion: z.number().optional(),\r\n    anomaly_detection: z.boolean(),\r\n    trend_analysis: z.string().optional(),\r\n  }).optional(),\r\n  \r\n  // Workflow-Status\r\n  workflow_status: z.enum(['draft', 'in_review', 'approved', 'rejected', 'archived']),\r\n  workflow_steps: z.array(z.object({\r\n    step: z.string(),\r\n    status: z.enum(['pending', 'completed', 'failed']),\r\n    completed_by: z.string().optional(),\r\n    completed_at: z.string().optional(),\r\n    notes: z.string().optional(),\r\n  })).optional(),\r\n  \r\n  // Audit Trail\r\n  created_by: z.string(),\r\n  created_at: z.string(),\r\n  updated_by: z.string().optional(),\r\n  updated_at: z.string().optional(),\r\n  \r\n  // Notizen\r\n  notes: z.string().optional(),\r\n});\r\n\r\ntype ChargeFormData = z.infer<typeof ChargeSchema>;\r\n\r\n// Mock Data\r\nconst mockUnits = [\r\n  { value: 'kg', label: 'Kilogramm (kg)' },\r\n  { value: 't', label: 'Tonne (t)' },\r\n  { value: 'l', label: 'Liter (l)' },\r\n  { value: 'stk', label: 'Stück (stk)' },\r\n  { value: 'm³', label: 'Kubikmeter (m³)' },\r\n];\r\n\r\nconst mockQualityStatuses = [\r\n  { value: 'pending', label: 'Ausstehend', color: 'warning' },\r\n  { value: 'approved', label: 'Genehmigt', color: 'success' },\r\n  { value: 'rejected', label: 'Abgelehnt', color: 'error' },\r\n  { value: 'quarantine', label: 'Quarantäne', color: 'error' },\r\n];\r\n\r\nconst mockVlogGmoStatuses = [\r\n  { value: 'VLOG', label: 'VLOG-konform', color: 'success' },\r\n  { value: 'GMO', label: 'GVO-haltig', color: 'error' },\r\n  { value: 'unknown', label: 'Unbekannt', color: 'warning' },\r\n];\r\n\r\nconst mockStorageConditions = [\r\n  { value: 'ambient', label: 'Umgebungstemperatur' },\r\n  { value: 'cooled', label: 'Gekühlt' },\r\n  { value: 'frozen', label: 'Gefroren' },\r\n  { value: 'controlled', label: 'Klimakontrolliert' },\r\n];\r\n\r\n// n8n Workflow Integration\r\ninterface N8nWorkflow {\r\n  id: string;\r\n  name: string;\r\n  status: 'active' | 'inactive';\r\n  trigger: string;\r\n  nodes: number;\r\n  lastExecution?: string;\r\n}\r\n\r\n// NeuroFlow Chargenverwaltung Component\r\ninterface NeuroFlowChargenverwaltungProps {\r\n  initialData?: Partial<ChargeFormData>;\r\n  onSubmit?: (data: ChargeFormData) => Promise<void>;\r\n  onCancel?: () => void;\r\n  loading?: boolean;\r\n  mode?: 'create' | 'edit' | 'view';\r\n}\r\n\r\nexport const NeuroFlowChargenverwaltung: React.FC<NeuroFlowChargenverwaltungProps> = ({\r\n  initialData,\r\n  onSubmit,\r\n  onCancel,\r\n  loading = false,\r\n  mode = 'create',\r\n}) => {\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const [submitLoading, setSubmitLoading] = useState(false);\r\n  const [n8nWorkflows, setN8nWorkflows] = useState<N8nWorkflow[]>([]);\r\n  const [workflowDialogOpen, setWorkflowDialogOpen] = useState(false);\r\n  const [selectedWorkflow, setSelectedWorkflow] = useState<N8nWorkflow | null>(null);\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors, isDirty },\r\n    reset,\r\n    watch,\r\n    setValue,\r\n  } = useForm<ChargeFormData>({\r\n    resolver: zodResolver(ChargeSchema),\r\n    defaultValues: {\r\n      charge_number: '',\r\n      article_number: '',\r\n      article_name: '',\r\n      supplier_number: '',\r\n      supplier_name: '',\r\n      production_date: '',\r\n      expiry_date: '',\r\n      batch_size: 0,\r\n      unit: 'kg',\r\n      quality_status: 'pending',\r\n      qs_milk_relevant: false,\r\n      vlog_gmo_status: 'unknown',\r\n      eudr_compliant: false,\r\n      sustainability_rapeseed: false,\r\n      protein_content: 0,\r\n      fat_content: 0,\r\n      moisture_content: 0,\r\n      ash_content: 0,\r\n      purchase_price: 0,\r\n      currency: 'EUR',\r\n      warehouse_location: '',\r\n      storage_conditions: 'ambient',\r\n      certificates: [],\r\n      ki_analysis: {\r\n        risk_score: 50,\r\n        quality_prediction: 'average',\r\n        shelf_life_prediction: 365,\r\n        anomaly_detection: false,\r\n      },\r\n      workflow_status: 'draft',\r\n      workflow_steps: [],\r\n      created_by: 'System',\r\n      created_at: new Date().toISOString(),\r\n      notes: '',\r\n      ...initialData,\r\n    },\r\n  });\r\n\r\n  // n8n Workflow Integration\r\n  useEffect(() => {\r\n    fetchN8nWorkflows();\r\n  }, []);\r\n\r\n  const fetchN8nWorkflows = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5678/api/v1/workflows');\r\n      if (response.ok) {\r\n        const workflows = await response.json();\r\n        setN8nWorkflows(workflows.data || []);\r\n      }\r\n    } catch (error) {\r\n      console.error('Fehler beim Laden der n8n Workflows:', error);\r\n    }\r\n  };\r\n\r\n  const triggerWorkflow = async (workflowId: string, data: any) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:5678/api/v1/workflows/${workflowId}/trigger`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n      \r\n      if (response.ok) {\r\n        console.log('Workflow erfolgreich ausgelöst:', workflowId);\r\n        return true;\r\n      }\r\n    } catch (error) {\r\n      console.error('Fehler beim Auslösen des Workflows:', error);\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const handleFormSubmit: SubmitHandler<ChargeFormData> = async (data) => {\r\n    setSubmitLoading(true);\r\n    try {\r\n      // KI-Analyse durchführen\r\n      const kiAnalysis = await performKIAnalysis(data);\r\n      data.ki_analysis = { ...data.ki_analysis, ...kiAnalysis };\r\n      \r\n      // n8n Workflow für Chargenverarbeitung auslösen\r\n      await triggerWorkflow('charge-processing', data);\r\n      \r\n      if (onSubmit) {\r\n        await onSubmit(data);\r\n      }\r\n      console.log('Charge saved:', data);\r\n    } catch (error) {\r\n      console.error('Error saving charge:', error);\r\n    } finally {\r\n      setSubmitLoading(false);\r\n    }\r\n  };\r\n\r\n  const performKIAnalysis = async (data: ChargeFormData): Promise<any> => {\r\n    // Simulierte KI-Analyse\r\n    const riskScore = Math.random() * 100;\r\n    const qualityPrediction = riskScore < 30 ? 'excellent' : \r\n                             riskScore < 60 ? 'good' : \r\n                             riskScore < 80 ? 'average' : 'poor';\r\n    \r\n    return {\r\n      risk_score: Math.round(riskScore),\r\n      quality_prediction: qualityPrediction,\r\n      shelf_life_prediction: Math.floor(Math.random() * 730) + 30,\r\n      price_optimization_suggestion: data.purchase_price * (0.9 + Math.random() * 0.2),\r\n      anomaly_detection: Math.random() > 0.8,\r\n      trend_analysis: 'Stabile Qualität, leichte Preiserhöhung erwartet',\r\n    };\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    if (isDirty) {\r\n      if (window.confirm('Änderungen verwerfen?')) {\r\n        reset();\r\n        onCancel?.();\r\n      }\r\n    } else {\r\n      onCancel?.();\r\n    }\r\n  };\r\n\r\n  const generateChargeNumber = () => {\r\n    const date = new Date();\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');\r\n    const chargeNumber = `CH${year}${month}${day}-${random}`;\r\n    setValue('charge_number', chargeNumber);\r\n  };\r\n\r\n  const tabs = [\r\n    { label: 'Grunddaten', icon: <DescriptionIcon /> },\r\n    { label: 'Qualität', icon: <ScienceIcon /> },\r\n    { label: 'Analysen', icon: <AssessmentIcon /> },\r\n    { label: 'Lagerung', icon: <ShippingIcon /> },\r\n    { label: 'Zertifikate', icon: <SecurityIcon /> },\r\n    { label: 'KI-Analyse', icon: <AutoGraphIcon /> },\r\n    { label: 'Workflow', icon: <TimelineIcon /> },\r\n  ];\r\n\r\n  return (\r\n    <NeuroFlowCard>\r\n      <CardContent>\r\n        {/* Header */}\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={3}>\r\n          <Box display=\"flex\" alignItems=\"center\" gap={2}>\r\n            <ScienceIcon color=\"primary\" sx={{ fontSize: 32 }} />\r\n            <Box>\r\n              <Typography variant=\"h5\" fontWeight={600} color=\"text.primary\">\r\n                {mode === 'create' ? 'Neue Charge' : mode === 'edit' ? 'Charge bearbeiten' : 'Charge anzeigen'}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Chargenverwaltung mit KI-Analyse und n8n Workflow-Integration\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n          \r\n          <Stack direction=\"row\" spacing={1}>\r\n            <Tooltip title=\"Chargennummer generieren\">\r\n              <IconButton onClick={generateChargeNumber} color=\"primary\">\r\n                <RefreshIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Tooltip title=\"n8n Workflows\">\r\n              <IconButton onClick={() => setWorkflowDialogOpen(true)} color=\"secondary\">\r\n                <TimelineIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Stack>\r\n        </Box>\r\n\r\n        <form onSubmit={handleSubmit(handleFormSubmit)}>\r\n          {/* Tabs */}\r\n          <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\r\n            <Tabs value={activeTab} onChange={(e, newValue) => setActiveTab(newValue)}>\r\n              {tabs.map((tab, index) => (\r\n                <Tab\r\n                  key={index}\r\n                  label={tab.label}\r\n                  icon={tab.icon}\r\n                  iconPosition=\"start\"\r\n                  sx={{ minHeight: 64 }}\r\n                />\r\n              ))}\r\n            </Tabs>\r\n          </Box>\r\n\r\n          {/* Tab Content */}\r\n          {activeTab === 0 && (\r\n            <Grid container spacing={3}>\r\n              {/* Chargennummer */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"charge_number\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Chargennummer *\"\r\n                      fullWidth\r\n                      error={!!errors.charge_number}\r\n                      helperText={errors.charge_number?.message}\r\n                      InputProps={{\r\n                        startAdornment: <QrCodeIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Artikelnummer */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"article_number\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <ArticleAutocomplete\r\n                      label=\"Artikelnummer *\"\r\n                      value={field.value}\r\n                      onChange={(value) => field.onChange(value)}\r\n                      error={!!errors.article_number}\r\n                      helperText={errors.article_number?.message}\r\n                      onLoadOptions={async (query) => {\r\n                        // Mock data - in Produktion durch echte API ersetzen\r\n                        const mockArticles = [\r\n                          { id: '1', value: 'ART001', label: 'ART001 - Sojaschrot Premium', type: 'article' as const, metadata: { category: 'Futtermittel' } },\r\n                          { id: '2', value: 'ART002', label: 'ART002 - Weizenkleie', type: 'article' as const, metadata: { category: 'Futtermittel' } },\r\n                          { id: '3', value: 'ART003', label: 'ART003 - Maiskleber', type: 'article' as const, metadata: { category: 'Futtermittel' } },\r\n                        ];\r\n                        return mockArticles.filter(a => \r\n                          a.label.toLowerCase().includes(query.toLowerCase()) ||\r\n                          a.value.toLowerCase().includes(query.toLowerCase())\r\n                        );\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Artikelname */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"article_name\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <ArticleAutocomplete\r\n                      label=\"Artikelname *\"\r\n                      value={field.value}\r\n                      onChange={(value) => field.onChange(value)}\r\n                      error={!!errors.article_name}\r\n                      helperText={errors.article_name?.message}\r\n                      onLoadOptions={async (query) => {\r\n                        // Mock data - in Produktion durch echte API ersetzen\r\n                        const mockArticleNames = [\r\n                          { id: '1', value: 'Sojaschrot Premium', label: 'Sojaschrot Premium', type: 'article' as const, metadata: { category: 'Futtermittel', protein: '45%' } },\r\n                          { id: '2', value: 'Weizenkleie', label: 'Weizenkleie', type: 'article' as const, metadata: { category: 'Futtermittel', protein: '15%' } },\r\n                          { id: '3', value: 'Maiskleber', label: 'Maiskleber', type: 'article' as const, metadata: { category: 'Futtermittel', protein: '60%' } },\r\n                        ];\r\n                        return mockArticleNames.filter(a => \r\n                          a.label.toLowerCase().includes(query.toLowerCase())\r\n                        );\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Lieferantennummer */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"supplier_number\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <SupplierAutocomplete\r\n                      label=\"Lieferantennummer *\"\r\n                      value={field.value}\r\n                      onChange={(value) => field.onChange(value)}\r\n                      error={!!errors.supplier_number}\r\n                      helperText={errors.supplier_number?.message}\r\n                      onLoadOptions={async (query) => {\r\n                        // Mock data - in Produktion durch echte API ersetzen\r\n                        const mockSuppliers = [\r\n                          { id: '1', value: 'L001', label: 'L001 - Agrarhandel GmbH', type: 'supplier' as const, metadata: { category: 'Landhandel' } },\r\n                          { id: '2', value: 'L002', label: 'L002 - Futtermittel AG', type: 'supplier' as const, metadata: { category: 'Futtermittel' } },\r\n                          { id: '3', value: 'L003', label: 'L003 - Dünger & Co KG', type: 'supplier' as const, metadata: { category: 'Düngemittel' } },\r\n                        ];\r\n                        return mockSuppliers.filter(s => \r\n                          s.label.toLowerCase().includes(query.toLowerCase()) ||\r\n                          s.value.toLowerCase().includes(query.toLowerCase())\r\n                        );\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Lieferantenname */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"supplier_name\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Lieferantenname *\"\r\n                      fullWidth\r\n                      error={!!errors.supplier_name}\r\n                      helperText={errors.supplier_name?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Produktionsdatum */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"production_date\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Produktionsdatum *\"\r\n                      type=\"date\"\r\n                      fullWidth\r\n                      error={!!errors.production_date}\r\n                      helperText={errors.production_date?.message}\r\n                      InputLabelProps={{ shrink: true }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Verfallsdatum */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"expiry_date\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Verfallsdatum *\"\r\n                      type=\"date\"\r\n                      fullWidth\r\n                      error={!!errors.expiry_date}\r\n                      helperText={errors.expiry_date?.message}\r\n                      InputLabelProps={{ shrink: true }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Chargengröße */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"batch_size\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Chargengröße *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.batch_size}\r\n                      helperText={errors.batch_size?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Einheit */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"unit\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.unit}>\r\n                      <InputLabel>Einheit *</InputLabel>\r\n                      <Select {...field} label=\"Einheit *\">\r\n                        {mockUnits.map((unit) => (\r\n                          <MenuItem key={unit.value} value={unit.value}>\r\n                            {unit.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                      {errors.unit && (\r\n                        <FormHelperText>{errors.unit.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Einkaufspreis */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"purchase_price\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Einkaufspreis *\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.purchase_price}\r\n                      helperText={errors.purchase_price?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                      InputProps={{\r\n                        startAdornment: <PaymentIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Währung */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"currency\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.currency}>\r\n                      <InputLabel>Währung *</InputLabel>\r\n                      <Select {...field} label=\"Währung *\">\r\n                        <MenuItem value=\"EUR\">EUR (Euro)</MenuItem>\r\n                        <MenuItem value=\"USD\">USD (US-Dollar)</MenuItem>\r\n                        <MenuItem value=\"CHF\">CHF (Schweizer Franken)</MenuItem>\r\n                      </Select>\r\n                      {errors.currency && (\r\n                        <FormHelperText>{errors.currency.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 1 && (\r\n            <Grid container spacing={3}>\r\n              {/* Qualitätsstatus */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"quality_status\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.quality_status}>\r\n                      <InputLabel>Qualitätsstatus *</InputLabel>\r\n                      <Select {...field} label=\"Qualitätsstatus *\">\r\n                        {mockQualityStatuses.map((status) => (\r\n                          <MenuItem key={status.value} value={status.value}>\r\n                            <Chip\r\n                              label={status.label}\r\n                              size=\"small\"\r\n                              color={status.color as any}\r\n                              sx={{ mr: 1 }}\r\n                            />\r\n                            {status.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                      {errors.quality_status && (\r\n                        <FormHelperText>{errors.quality_status.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* VLOG/GMO Status */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"vlog_gmo_status\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.vlog_gmo_status}>\r\n                      <InputLabel>VLOG/GMO Status *</InputLabel>\r\n                      <Select {...field} label=\"VLOG/GMO Status *\">\r\n                        {mockVlogGmoStatuses.map((status) => (\r\n                          <MenuItem key={status.value} value={status.value}>\r\n                            <Chip\r\n                              label={status.label}\r\n                              size=\"small\"\r\n                              color={status.color as any}\r\n                              sx={{ mr: 1 }}\r\n                            />\r\n                            {status.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                      {errors.vlog_gmo_status && (\r\n                        <FormHelperText>{errors.vlog_gmo_status.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Qualitäts-Flags */}\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                  Qualitäts-Eigenschaften\r\n                </Typography>\r\n                <Stack direction=\"row\" spacing={3}>\r\n                  <Controller\r\n                    name=\"qs_milk_relevant\"\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Switch\r\n                            checked={field.value}\r\n                            onChange={field.onChange}\r\n                            color=\"primary\"\r\n                          />\r\n                        }\r\n                        label=\"QS Milch relevant\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Controller\r\n                    name=\"eudr_compliant\"\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Switch\r\n                            checked={field.value}\r\n                            onChange={field.onChange}\r\n                            color=\"success\"\r\n                          />\r\n                        }\r\n                        label=\"EUDR konform\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Controller\r\n                    name=\"sustainability_rapeseed\"\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Switch\r\n                            checked={field.value}\r\n                            onChange={field.onChange}\r\n                            color=\"info\"\r\n                          />\r\n                        }\r\n                        label=\"Nachhaltiger Raps\"\r\n                      />\r\n                    )}\r\n                  />\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 2 && (\r\n            <Grid container spacing={3}>\r\n              {/* Proteingehalt */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"protein_content\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Proteingehalt (%)\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.protein_content}\r\n                      helperText={errors.protein_content?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Fettgehalt */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"fat_content\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Fettgehalt (%)\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.fat_content}\r\n                      helperText={errors.fat_content?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Feuchtigkeitsgehalt */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"moisture_content\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Feuchtigkeitsgehalt (%)\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.moisture_content}\r\n                      helperText={errors.moisture_content?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Aschegehalt */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"ash_content\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Aschegehalt (%)\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.ash_content}\r\n                      helperText={errors.ash_content?.message}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 3 && (\r\n            <Grid container spacing={3}>\r\n              {/* Lagerort */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"warehouse_location\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Lagerort *\"\r\n                      fullWidth\r\n                      error={!!errors.warehouse_location}\r\n                      helperText={errors.warehouse_location?.message}\r\n                      InputProps={{\r\n                        startAdornment: <ShippingIcon sx={{ mr: 1, color: 'text.secondary' }} />,\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Lagerbedingungen */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"storage_conditions\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.storage_conditions}>\r\n                      <InputLabel>Lagerbedingungen *</InputLabel>\r\n                      <Select {...field} label=\"Lagerbedingungen *\">\r\n                        {mockStorageConditions.map((condition) => (\r\n                          <MenuItem key={condition.value} value={condition.value}>\r\n                            {condition.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                      {errors.storage_conditions && (\r\n                        <FormHelperText>{errors.storage_conditions.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 4 && (\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                  Zertifikate und Dokumente\r\n                </Typography>\r\n                <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                  Zertifikate können über das n8n Workflow-System automatisch verarbeitet werden.\r\n                </Alert>\r\n                <TableContainer component={Paper}>\r\n                  <Table>\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>Typ</TableCell>\r\n                        <TableCell>Dateiname</TableCell>\r\n                        <TableCell>Upload-Datum</TableCell>\r\n                        <TableCell>Gültig bis</TableCell>\r\n                        <TableCell>Aktionen</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {watch('certificates')?.map((cert, index) => (\r\n                        <TableRow key={index}>\r\n                          <TableCell>{cert.type}</TableCell>\r\n                          <TableCell>{cert.filename}</TableCell>\r\n                          <TableCell>{new Date(cert.upload_date).toLocaleDateString()}</TableCell>\r\n                          <TableCell>\r\n                            {cert.valid_until ? new Date(cert.valid_until).toLocaleDateString() : '-'}\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            <IconButton size=\"small\" color=\"primary\">\r\n                              <ViewIcon />\r\n                            </IconButton>\r\n                            <IconButton size=\"small\" color=\"error\">\r\n                              <DeleteIcon />\r\n                            </IconButton>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 5 && (\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                  KI-Analyse und Vorhersagen\r\n                </Typography>\r\n                <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                  Die KI-Analyse wird automatisch durchgeführt und basiert auf historischen Daten und Qualitätsparametern.\r\n                </Alert>\r\n              </Grid>\r\n\r\n              {/* Risiko-Score */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"ki_analysis.risk_score\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Risiko-Score (0-100)\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.ki_analysis?.risk_score}\r\n                      helperText={errors.ki_analysis?.risk_score?.message}\r\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Qualitätsvorhersage */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"ki_analysis.quality_prediction\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.ki_analysis?.quality_prediction}>\r\n                      <InputLabel>Qualitätsvorhersage</InputLabel>\r\n                      <Select {...field} label=\"Qualitätsvorhersage\">\r\n                        <MenuItem value=\"excellent\">\r\n                          <Chip label=\"Ausgezeichnet\" color=\"success\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Ausgezeichnet\r\n                        </MenuItem>\r\n                        <MenuItem value=\"good\">\r\n                          <Chip label=\"Gut\" color=\"primary\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Gut\r\n                        </MenuItem>\r\n                        <MenuItem value=\"average\">\r\n                          <Chip label=\"Durchschnittlich\" color=\"warning\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Durchschnittlich\r\n                        </MenuItem>\r\n                        <MenuItem value=\"poor\">\r\n                          <Chip label=\"Schlecht\" color=\"error\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Schlecht\r\n                        </MenuItem>\r\n                      </Select>\r\n                      {errors.ki_analysis?.quality_prediction && (\r\n                        <FormHelperText>{errors.ki_analysis.quality_prediction.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Haltbarkeitsvorhersage */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"ki_analysis.shelf_life_prediction\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Haltbarkeitsvorhersage (Tage)\"\r\n                      type=\"number\"\r\n                      fullWidth\r\n                      error={!!errors.ki_analysis?.shelf_life_prediction}\r\n                      helperText={errors.ki_analysis?.shelf_life_prediction?.message}\r\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Anomalie-Erkennung */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"ki_analysis.anomaly_detection\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Switch\r\n                          checked={field.value}\r\n                          onChange={field.onChange}\r\n                          color=\"warning\"\r\n                        />\r\n                      }\r\n                      label=\"Anomalie erkannt\"\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Trend-Analyse */}\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  name=\"ki_analysis.trend_analysis\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <TextField\r\n                      {...field}\r\n                      label=\"Trend-Analyse\"\r\n                      multiline\r\n                      rows={3}\r\n                      fullWidth\r\n                      error={!!errors.ki_analysis?.trend_analysis}\r\n                      helperText={errors.ki_analysis?.trend_analysis?.message}\r\n                    />\r\n                  )}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {activeTab === 6 && (\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h6\" fontWeight={600} mb={2}>\r\n                  Workflow-Status und Automatisierung\r\n                </Typography>\r\n                <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                  Der Workflow wird über n8n gesteuert und automatisiert die Chargenverarbeitung.\r\n                </Alert>\r\n              </Grid>\r\n\r\n              {/* Workflow-Status */}\r\n              <Grid item xs={12} md={6}>\r\n                <Controller\r\n                  name=\"workflow_status\"\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <FormControl fullWidth error={!!errors.workflow_status}>\r\n                      <InputLabel>Workflow-Status *</InputLabel>\r\n                      <Select {...field} label=\"Workflow-Status *\">\r\n                        <MenuItem value=\"draft\">\r\n                          <Chip label=\"Entwurf\" color=\"default\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Entwurf\r\n                        </MenuItem>\r\n                        <MenuItem value=\"in_review\">\r\n                          <Chip label=\"In Prüfung\" color=\"warning\" size=\"small\" sx={{ mr: 1 }} />\r\n                          In Prüfung\r\n                        </MenuItem>\r\n                        <MenuItem value=\"approved\">\r\n                          <Chip label=\"Genehmigt\" color=\"success\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Genehmigt\r\n                        </MenuItem>\r\n                        <MenuItem value=\"rejected\">\r\n                          <Chip label=\"Abgelehnt\" color=\"error\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Abgelehnt\r\n                        </MenuItem>\r\n                        <MenuItem value=\"archived\">\r\n                          <Chip label=\"Archiviert\" color=\"default\" size=\"small\" sx={{ mr: 1 }} />\r\n                          Archiviert\r\n                        </MenuItem>\r\n                      </Select>\r\n                      {errors.workflow_status && (\r\n                        <FormHelperText>{errors.workflow_status.message}</FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  )}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Workflow-Schritte */}\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"subtitle1\" fontWeight={600} mb={2}>\r\n                  Workflow-Schritte\r\n                </Typography>\r\n                <TableContainer component={Paper}>\r\n                  <Table>\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>Schritt</TableCell>\r\n                        <TableCell>Status</TableCell>\r\n                        <TableCell>Ausgeführt von</TableCell>\r\n                        <TableCell>Ausgeführt am</TableCell>\r\n                        <TableCell>Notizen</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {watch('workflow_steps')?.map((step, index) => (\r\n                        <TableRow key={index}>\r\n                          <TableCell>{step.step}</TableCell>\r\n                          <TableCell>\r\n                            <Chip\r\n                              label={step.status === 'completed' ? 'Abgeschlossen' : \r\n                                    step.status === 'pending' ? 'Ausstehend' : 'Fehlgeschlagen'}\r\n                              color={step.status === 'completed' ? 'success' : \r\n                                     step.status === 'pending' ? 'warning' : 'error'}\r\n                              size=\"small\"\r\n                            />\r\n                          </TableCell>\r\n                          <TableCell>{step.completed_by || '-'}</TableCell>\r\n                          <TableCell>\r\n                            {step.completed_at ? new Date(step.completed_at).toLocaleString() : '-'}\r\n                          </TableCell>\r\n                          <TableCell>{step.notes || '-'}</TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {/* Form Actions */}\r\n          <Box display=\"flex\" justifyContent=\"flex-end\" gap={2} mt={4}>\r\n            <NeuroFlowButton\r\n              variant=\"outlined\"\r\n              onClick={handleCancel}\r\n              disabled={submitLoading}\r\n              startIcon={<CancelIcon />}\r\n            >\r\n              Abbrechen\r\n            </NeuroFlowButton>\r\n            <NeuroFlowButton\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              disabled={submitLoading || loading}\r\n              startIcon={submitLoading ? <CircularProgress size={20} /> : <SaveIcon />}\r\n            >\r\n              {submitLoading ? 'Speichern...' : 'Charge speichern'}\r\n            </NeuroFlowButton>\r\n          </Box>\r\n        </form>\r\n\r\n        {/* n8n Workflow Dialog */}\r\n        <Dialog\r\n          open={workflowDialogOpen}\r\n          onClose={() => setWorkflowDialogOpen(false)}\r\n          maxWidth=\"md\"\r\n          fullWidth\r\n        >\r\n          <DialogTitle>\r\n            <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n              <TimelineIcon color=\"primary\" />\r\n              n8n Workflows\r\n            </Box>\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <TableContainer component={Paper}>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Name</TableCell>\r\n                    <TableCell>Status</TableCell>\r\n                    <TableCell>Trigger</TableCell>\r\n                    <TableCell>Nodes</TableCell>\r\n                    <TableCell>Letzte Ausführung</TableCell>\r\n                    <TableCell>Aktionen</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {n8nWorkflows.map((workflow) => (\r\n                    <TableRow key={workflow.id}>\r\n                      <TableCell>{workflow.name}</TableCell>\r\n                      <TableCell>\r\n                        <Chip\r\n                          label={workflow.status === 'active' ? 'Aktiv' : 'Inaktiv'}\r\n                          color={workflow.status === 'active' ? 'success' : 'default'}\r\n                          size=\"small\"\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>{workflow.trigger}</TableCell>\r\n                      <TableCell>{workflow.nodes}</TableCell>\r\n                      <TableCell>\r\n                        {workflow.lastExecution ? new Date(workflow.lastExecution).toLocaleString() : '-'}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                                                  <IconButton\r\n                            size=\"small\"\r\n                            color=\"primary\"\r\n                            onClick={() => {\r\n                              setSelectedWorkflow(workflow);\r\n                              // Hier könnte man den Workflow auslösen\r\n                            }}\r\n                          >\r\n                            <PlayArrowIcon />\r\n                          </IconButton>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={() => setWorkflowDialogOpen(false)}>Schließen</Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </CardContent>\r\n    </NeuroFlowCard>\r\n  );\r\n};\r\n\r\nexport default NeuroFlowChargenverwaltung; "],"file":"js/neuroflow-DF58GYou.js"}