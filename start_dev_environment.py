#!/usr/bin/env python3
"""
VALEO-NeuroERP Development Environment Starter
Startet die lokale Entwicklungsumgebung mit Docker Compose
"""
import os
import subprocess
import sys
import time
import requests
from datetime import datetime
from typing import Dict

class DevEnvironmentStarter:
    """Entwicklungsumgebung Starter"""
    
    def __init__(self):
        self.services = {
            "postgres": {"port": 5432, "url": "http://localhost:5432", "name": "PostgreSQL"},
            "redis": {"port": 6379, "url": "http://localhost:6379", "name": "Redis"},
            "rabbitmq": {"port": 5672, "url": "http://localhost:15672", "name": "RabbitMQ"},
            "elasticsearch": {"port": 9200, "url": "http://localhost:9200", "name": "Elasticsearch"},
            "kibana": {"port": 5601, "url": "http://localhost:5601", "name": "Kibana"},
            "prometheus": {"port": 9090, "url": "http://localhost:9090", "name": "Prometheus"},
            "grafana": {"port": 3000, "url": "http://localhost:3000", "name": "Grafana"}
        }
    
    def check_docker(self) -> bool:
        """Pr√ºft ob Docker verf√ºgbar ist"""
        try:
            result = subprocess.run(["docker", "--version"], 
                                  capture_output=True, text=True, check=True)
            print(f"‚úÖ Docker verf√ºgbar: {result.stdout.strip()}")
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚ùå Docker nicht gefunden. Bitte Docker installieren.")
            return False
    
    def check_docker_compose(self) -> bool:
        """Pr√ºft ob Docker Compose verf√ºgbar ist"""
        try:
            result = subprocess.run(["docker-compose", "--version"], 
                                  capture_output=True, text=True, check=True)
            print(f"‚úÖ Docker Compose verf√ºgbar: {result.stdout.strip()}")
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚ùå Docker Compose nicht gefunden. Bitte Docker Compose installieren.")
            return False
    
    def start_services(self) -> bool:
        """Startet alle Services mit Docker Compose"""
        print("\nüöÄ Starte VALEO-NeuroERP Entwicklungsumgebung...")
        
        try:
            # Docker Compose starten
            result = subprocess.run(["docker-compose", "up", "-d"], 
                                  capture_output=True, text=True, check=True)
            print("‚úÖ Docker Compose Services gestartet")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Fehler beim Starten der Services: {e}")
            print(f"Stderr: {e.stderr}")
            return False
    
    def wait_for_service(self, service_name: str, url: str, timeout: int = 60) -> bool:
        """Wartet bis ein Service verf√ºgbar ist"""
        print(f"‚è≥ Warte auf {service_name}...")
        
        start_time = time.time()
        while time.time() - start_time < timeout:
            try:
                response = requests.get(url, timeout=5)
                if response.status_code in [200, 401, 403]:  # Verschiedene Erfolgs-Codes
                    print(f"‚úÖ {service_name} ist verf√ºgbar")
                    return True
            except requests.exceptions.RequestException:
                pass
            
            time.sleep(2)
        
        print(f"‚ö†Ô∏è  {service_name} nicht verf√ºgbar nach {timeout}s")
        return False
    
    def check_all_services(self) -> Dict[str, bool]:
        """Pr√ºft alle Services auf Verf√ºgbarkeit"""
        print("\nüîç Pr√ºfe Service-Verf√ºgbarkeit...")
        
        service_status = {}
        for service_id, service_info in self.services.items():
            if service_id == "postgres":
                # PostgreSQL speziell pr√ºfen
                try:
                    import psycopg2
                    conn = psycopg2.connect(
                        host="localhost",
                        port=5432,
                        database="valeo_neuroerp",
                        user="valeo_user",
                        password="valeo_password"
                    )
                    conn.close()
                    service_status[service_id] = True
                    print(f"‚úÖ {service_info['name']} ist verf√ºgbar")
                except Exception:
                    service_status[service_id] = False
                    print(f"‚ùå {service_info['name']} nicht verf√ºgbar")
            elif service_id == "redis":
                # Redis speziell pr√ºfen
                try:
                    import redis
                    r = redis.Redis(host='localhost', port=6379, db=0)
                    r.ping()
                    service_status[service_id] = True
                    print(f"‚úÖ {service_info['name']} ist verf√ºgbar")
                except Exception:
                    service_status[service_id] = False
                    print(f"‚ùå {service_info['name']} nicht verf√ºgbar")
            else:
                # HTTP Services pr√ºfen
                service_status[service_id] = self.wait_for_service(
                    service_info['name'], 
                    service_info['url']
                )
        
        return service_status
    
    def show_service_urls(self):
        """Zeigt alle Service-URLs an"""
        print("\nüåê Service-URLs:")
        print("-" * 50)
        
        urls = {
            "RabbitMQ Management": "http://localhost:15672",
            "Kibana": "http://localhost:5601", 
            "Prometheus": "http://localhost:9090",
            "Grafana": "http://localhost:3000"
        }
        
        for name, url in urls.items():
            print(f"   ‚Ä¢ {name}: {url}")
        
        print("\nüîê Standard-Credentials:")
        print("-" * 30)
        print("   ‚Ä¢ PostgreSQL: valeo_user / valeo_password")
        print("   ‚Ä¢ RabbitMQ: valeo_user / valeo_password")
        print("   ‚Ä¢ Grafana: admin / valeo_admin")
    
    def stop_services(self):
        """Stoppt alle Services"""
        print("\nüõë Stoppe Entwicklungsumgebung...")
        
        try:
            result = subprocess.run(["docker-compose", "down"], 
                                  capture_output=True, text=True, check=True)
            print("‚úÖ Services gestoppt")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Fehler beim Stoppen: {e}")

def main():
    """Hauptfunktion"""
    print("üèóÔ∏è  VALEO-NeuroERP Development Environment Starter")
    print("=" * 60)
    
    starter = DevEnvironmentStarter()
    
    # Docker pr√ºfen
    if not starter.check_docker():
        return
    
    if not starter.check_docker_compose():
        return
    
    # Services starten
    if not starter.start_services():
        return
    
    # Kurz warten
    print("\n‚è≥ Warte auf Service-Start...")
    time.sleep(10)
    
    # Services pr√ºfen
    service_status = starter.check_all_services()
    
    # Status zusammenfassen
    running_services = sum(service_status.values())
    total_services = len(service_status)
    
    print(f"\nüìä Service-Status: {running_services}/{total_services} Services laufen")
    
    if running_services == total_services:
        print("üéâ Alle Services erfolgreich gestartet!")
        starter.show_service_urls()
        
        print(f"\nüöÄ VALEO-NeuroERP Development Environment bereit!")
        print("   ‚Ä¢ Backend kann jetzt gestartet werden")
        print("   ‚Ä¢ Frontend kann entwickelt werden")
        print("   ‚Ä¢ Monitoring ist verf√ºgbar")
        
    else:
        print("‚ö†Ô∏è  Einige Services sind nicht verf√ºgbar")
        print("   ‚Ä¢ Pr√ºfe Docker Compose Logs: docker-compose logs")
        print("   ‚Ä¢ Pr√ºfe Service-Konfiguration")
    
    print("\n" + "=" * 60)
    print("Development Environment Setup beendet")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Setup abgebrochen")
    except Exception as e:
        print(f"\n‚ùå Unerwarteter Fehler: {e}") 