# Material-UI Cursor Rules f√ºr VALEO NeuroERP
# Spezifische Regeln f√ºr Material-UI v5 Komponenten

## üé® Material-UI Komponenten-Regeln

### Grundlegende Komponenten-Struktur
```tsx
import React from 'react';
import { Card, Typography, Button, Box } from '@mui/material';
import { Add as AddIcon, Edit as EditIcon, Delete as DeleteIcon } from '@mui/icons-material';

interface ComponentProps {
  title: string;
  description?: string;
  onAdd?: () => void;
  onEdit?: () => void;
  onDelete?: () => void;
  children?: React.ReactNode;
}

export const ValeoComponent: React.FC<ComponentProps> = ({
  title,
  description,
  onAdd,
  onEdit,
  onDelete,
  children
}) => {
  return (
    <Card sx={{ p: 3, borderRadius: 2, boxShadow: 2 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
        <Box>
          <Typography variant="h6" sx={{ color: 'text.primary', fontWeight: 600 }}>
            {title}
          </Typography>
          {description && (
            <Typography variant="body2" sx={{ color: 'text.secondary', mt: 0.5 }}>
              {description}
            </Typography>
          )}
        </Box>
        <Box sx={{ display: 'flex', gap: 1 }}>
          {onAdd && (
            <Button
              variant="contained"
              startIcon={<AddIcon />}
              onClick={onAdd}
              size="small"
              sx={{ textTransform: 'none' }}
            >
              Hinzuf√ºgen
            </Button>
          )}
          {onEdit && (
            <Button
              variant="outlined"
              startIcon={<EditIcon />}
              onClick={onEdit}
              size="small"
              sx={{ textTransform: 'none' }}
            >
              Bearbeiten
            </Button>
          )}
          {onDelete && (
            <Button
              variant="outlined"
              color="error"
              startIcon={<DeleteIcon />}
              onClick={onDelete}
              size="small"
              sx={{ textTransform: 'none' }}
            >
              L√∂schen
            </Button>
          )}
        </Box>
      </Box>
      {children}
    </Card>
  );
};
```

### Formulare mit Material-UI
```tsx
import React from 'react';
import { useForm, Controller } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import {
  TextField,
  Button,
  Alert,
  Box,
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  FormHelperText
} from '@mui/material';
import { Save as SaveIcon, Cancel as CancelIcon } from '@mui/icons-material';

const schema = yup.object({
  name: yup.string().required('Name ist erforderlich'),
  email: yup.string().email('Ung√ºltige E-Mail-Adresse').required('E-Mail ist erforderlich'),
  phone: yup.string().matches(/^[0-9+\-\s()]+$/, 'Ung√ºltige Telefonnummer'),
  role: yup.string().required('Rolle ist erforderlich')
});

interface FormData {
  name: string;
  email: string;
  phone: string;
  role: string;
}

interface ValeoFormProps {
  initialData?: Partial<FormData>;
  onSubmit: (data: FormData) => void;
  onCancel?: () => void;
  loading?: boolean;
}

export const ValeoForm: React.FC<ValeoFormProps> = ({
  initialData,
  onSubmit,
  onCancel,
  loading = false
}) => {
  const { control, handleSubmit, formState: { errors } } = useForm<FormData>({
    resolver: yupResolver(schema),
    defaultValues: initialData
  });

  return (
    <Box component="form" onSubmit={handleSubmit(onSubmit)} sx={{ mt: 2 }}>
      <Grid container spacing={3}>
        <Grid item xs={12} md={6}>
          <Controller
            name="name"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label="Name"
                fullWidth
                error={!!errors.name}
                helperText={errors.name?.message}
                disabled={loading}
              />
            )}
          />
        </Grid>
        <Grid item xs={12} md={6}>
          <Controller
            name="email"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label="E-Mail"
                type="email"
                fullWidth
                error={!!errors.email}
                helperText={errors.email?.message}
                disabled={loading}
              />
            )}
          />
        </Grid>
        <Grid item xs={12} md={6}>
          <Controller
            name="phone"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label="Telefon"
                fullWidth
                error={!!errors.phone}
                helperText={errors.phone?.message}
                disabled={loading}
              />
            )}
          />
        </Grid>
        <Grid item xs={12} md={6}>
          <Controller
            name="role"
            control={control}
            render={({ field }) => (
              <FormControl fullWidth error={!!errors.role} disabled={loading}>
                <InputLabel>Rolle</InputLabel>
                <Select {...field} label="Rolle">
                  <MenuItem value="admin">Administrator</MenuItem>
                  <MenuItem value="manager">Manager</MenuItem>
                  <MenuItem value="user">Benutzer</MenuItem>
                  <MenuItem value="viewer">Betrachter</MenuItem>
                </Select>
                {errors.role && (
                  <FormHelperText>{errors.role.message}</FormHelperText>
                )}
              </FormControl>
            )}
          />
        </Grid>
      </Grid>
      
      <Box sx={{ display: 'flex', gap: 2, mt: 3 }}>
        <Button
          type="submit"
          variant="contained"
          startIcon={<SaveIcon />}
          disabled={loading}
          sx={{ textTransform: 'none' }}
        >
          {loading ? 'Speichere...' : 'Speichern'}
        </Button>
        {onCancel && (
          <Button
            variant="outlined"
            startIcon={<CancelIcon />}
            onClick={onCancel}
            disabled={loading}
            sx={{ textTransform: 'none' }}
          >
            Abbrechen
          </Button>
        )}
      </Box>
    </Box>
  );
};
```

### Tabellen mit Material-UI DataGrid
```tsx
import React from 'react';
import {
  DataGrid,
  GridColDef,
  GridActionsCellItem,
  GridRowParams,
  GridToolbar
} from '@mui/x-data-grid';
import { Edit as EditIcon, Delete as DeleteIcon } from '@mui/icons-material';
import { Box, Typography } from '@mui/material';

interface User {
  id: string;
  name: string;
  email: string;
  role: string;
  status: 'active' | 'inactive';
  createdAt: string;
}

interface ValeoDataTableProps {
  users: User[];
  onEdit?: (user: User) => void;
  onDelete?: (id: string) => void;
  loading?: boolean;
}

export const ValeoDataTable: React.FC<ValeoDataTableProps> = ({
  users,
  onEdit,
  onDelete,
  loading = false
}) => {
  const columns: GridColDef[] = [
    {
      field: 'name',
      headerName: 'Name',
      flex: 1,
      minWidth: 150
    },
    {
      field: 'email',
      headerName: 'E-Mail',
      flex: 1,
      minWidth: 200
    },
    {
      field: 'role',
      headerName: 'Rolle',
      flex: 0.5,
      minWidth: 120,
      valueFormatter: (params) => {
        const roleMap: Record<string, string> = {
          admin: 'Administrator',
          manager: 'Manager',
          user: 'Benutzer',
          viewer: 'Betrachter'
        };
        return roleMap[params.value] || params.value;
      }
    },
    {
      field: 'status',
      headerName: 'Status',
      flex: 0.5,
      minWidth: 100,
      renderCell: (params) => (
        <Box
          sx={{
            px: 2,
            py: 0.5,
            borderRadius: 1,
            backgroundColor: params.value === 'active' ? 'success.light' : 'error.light',
            color: params.value === 'active' ? 'success.dark' : 'error.dark',
            fontSize: '0.875rem'
          }}
        >
          {params.value === 'active' ? 'Aktiv' : 'Inaktiv'}
        </Box>
      )
    },
    {
      field: 'createdAt',
      headerName: 'Erstellt am',
      flex: 0.5,
      minWidth: 120,
      valueFormatter: (params) => {
        return new Date(params.value).toLocaleDateString('de-DE');
      }
    },
    {
      field: 'actions',
      type: 'actions',
      headerName: 'Aktionen',
      flex: 0.5,
      minWidth: 120,
      getActions: (params: GridRowParams) => [
        ...(onEdit ? [
          <GridActionsCellItem
            icon={<EditIcon />}
            label="Bearbeiten"
            onClick={() => onEdit(params.row)}
            key="edit"
          />
        ] : []),
        ...(onDelete ? [
          <GridActionsCellItem
            icon={<DeleteIcon />}
            label="L√∂schen"
            onClick={() => onDelete(params.row.id)}
            key="delete"
          />
        ] : [])
      ]
    }
  ];

  return (
    <Box sx={{ height: 600, width: '100%' }}>
      <Typography variant="h6" sx={{ mb: 2 }}>
        Benutzerverwaltung
      </Typography>
      <DataGrid
        rows={users}
        columns={columns}
        loading={loading}
        pageSizeOptions={[10, 25, 50, 100]}
        initialState={{
          pagination: {
            paginationModel: { page: 0, pageSize: 25 }
          }
        }}
        slots={{
          toolbar: GridToolbar
        }}
        slotProps={{
          toolbar: {
            showQuickFilter: true,
            quickFilterProps: { debounceMs: 500 }
          }
        }}
        localeText={{
          toolbarColumns: 'Spalten',
          toolbarFilters: 'Filter',
          toolbarDensity: 'Dichte',
          toolbarExport: 'Export',
          toolbarExportPrint: 'Drucken',
          toolbarExportCSV: 'CSV herunterladen',
          toolbarExportExcel: 'Excel herunterladen',
          toolbarQuickFilterPlaceholder: 'Suchen...',
          toolbarQuickFilterLabel: 'Suchen',
          toolbarQuickFilterDeleteIconLabel: 'L√∂schen',
          footerTotalRows: 'Gesamt:',
          footerTotalVisibleRows: (visibleCount, totalCount) =>
            `${visibleCount.toLocaleString()} von ${totalCount.toLocaleString()}`,
          columnMenuLabel: 'Men√º',
          columnMenuShowColumns: 'Spalten anzeigen',
          columnMenuFilter: 'Filter',
          columnMenuHideColumn: 'Verstecken',
          columnMenuUnsort: 'Sortierung aufheben',
          columnMenuSortAsc: 'Aufsteigend sortieren',
          columnMenuSortDesc: 'Absteigend sortieren',
          columnHeaderSortIconLabel: 'Sortieren',
          booleanCellTrueLabel: 'Ja',
          booleanCellFalseLabel: 'Nein',
          noRowsLabel: 'Keine Daten verf√ºgbar',
          noResultsOverlayLabel: 'Keine Ergebnisse gefunden.',
          errorOverlayDefaultLabel: 'Ein Fehler ist aufgetreten.',
          loadingOverlayLabel: 'Lade...',
          filterPanelAddFilter: 'Filter hinzuf√ºgen',
          filterPanelDeleteIconLabel: 'L√∂schen',
          filterPanelOperators: 'Operatoren',
          filterPanelOperatorAnd: 'Und',
          filterPanelOperatorOr: 'Oder',
          filterPanelColumns: 'Spalten',
          filterPanelInputLabel: 'Wert',
          filterPanelInputPlaceholder: 'Filterwert',
          filterOperatorContains: 'enth√§lt',
          filterOperatorEquals: 'gleich',
          filterOperatorStartsWith: 'beginnt mit',
          filterOperatorEndsWith: 'endet mit',
          filterOperatorIs: 'ist',
          filterOperatorNot: 'ist nicht',
          filterOperatorAfter: 'nach',
          filterOperatorOnOrAfter: 'am oder nach',
          filterOperatorBefore: 'vor',
          filterOperatorOnOrBefore: 'am oder vor',
          filterOperatorIsEmpty: 'ist leer',
          filterOperatorIsNotEmpty: 'ist nicht leer',
          filterOperatorIsAnyOf: 'ist einer von',
          filterOperatorIsNotAnyOf: 'ist keiner von',
          filterOperatorIsTrue: 'ist wahr',
          filterOperatorIsFalse: 'ist falsch'
        }}
      />
    </Box>
  );
};
```

### Dialoge und Modals
```tsx
import React from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  Box,
  IconButton
} from '@mui/material';
import { Close as CloseIcon } from '@mui/icons-material';

interface ValeoDialogProps {
  open: boolean;
  title: string;
  children: React.ReactNode;
  onClose: () => void;
  onConfirm?: () => void;
  confirmText?: string;
  cancelText?: string;
  maxWidth?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
  loading?: boolean;
}

export const ValeoDialog: React.FC<ValeoDialogProps> = ({
  open,
  title,
  children,
  onClose,
  onConfirm,
  confirmText = 'Best√§tigen',
  cancelText = 'Abbrechen',
  maxWidth = 'sm',
  loading = false
}) => {
  return (
    <Dialog
      open={open}
      onClose={onClose}
      maxWidth={maxWidth}
      fullWidth
      PaperProps={{
        sx: { borderRadius: 2 }
      }}
    >
      <DialogTitle sx={{ m: 0, p: 3, pb: 1 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Typography variant="h6" sx={{ fontWeight: 600 }}>
            {title}
          </Typography>
          <IconButton
            aria-label="schlie√üen"
            onClick={onClose}
            sx={{ color: 'grey.500' }}
          >
            <CloseIcon />
          </IconButton>
        </Box>
      </DialogTitle>
      
      <DialogContent sx={{ px: 3, py: 2 }}>
        {children}
      </DialogContent>
      
      <DialogActions sx={{ p: 3, pt: 1 }}>
        <Button
          onClick={onClose}
          disabled={loading}
          sx={{ textTransform: 'none' }}
        >
          {cancelText}
        </Button>
        {onConfirm && (
          <Button
            onClick={onConfirm}
            variant="contained"
            disabled={loading}
            sx={{ textTransform: 'none' }}
          >
            {loading ? 'L√§dt...' : confirmText}
          </Button>
        )}
      </DialogActions>
    </Dialog>
  );
};
```

### Navigation und Layout
```tsx
import React from 'react';
import {
  AppBar,
  Toolbar,
  Typography,
  Button,
  Box,
  Drawer,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  IconButton,
  Avatar,
  Menu,
  MenuItem,
  Divider
} from '@mui/material';
import {
  Menu as MenuIcon,
  Dashboard as DashboardIcon,
  People as PeopleIcon,
  Inventory as InventoryIcon,
  Assessment as AssessmentIcon,
  Settings as SettingsIcon,
  AccountCircle as AccountCircleIcon,
  Notifications as NotificationsIcon,
  Logout as LogoutIcon
} from '@mui/icons-material';

interface ValeoLayoutProps {
  children: React.ReactNode;
}

export const ValeoLayout: React.FC<ValeoLayoutProps> = ({ children }) => {
  const [drawerOpen, setDrawerOpen] = React.useState(false);
  const [userMenuAnchor, setUserMenuAnchor] = React.useState<null | HTMLElement>(null);

  const menuItems = [
    { text: 'Dashboard', icon: <DashboardIcon />, path: '/dashboard' },
    { text: 'Benutzer', icon: <PeopleIcon />, path: '/users' },
    { text: 'Lager', icon: <InventoryIcon />, path: '/inventory' },
    { text: 'Analysen', icon: <AssessmentIcon />, path: '/analytics' },
    { text: 'Einstellungen', icon: <SettingsIcon />, path: '/settings' }
  ];

  return (
    <Box sx={{ display: 'flex' }}>
      {/* App Bar */}
      <AppBar position="fixed" sx={{ zIndex: (theme) => theme.zIndex.drawer + 1 }}>
        <Toolbar>
          <IconButton
            color="inherit"
            edge="start"
            onClick={() => setDrawerOpen(!drawerOpen)}
            sx={{ mr: 2, display: { sm: 'none' } }}
          >
            <MenuIcon />
          </IconButton>
          
          <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
            VALEO NeuroERP
          </Typography>
          
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <IconButton color="inherit">
              <NotificationsIcon />
            </IconButton>
            
            <Button
              color="inherit"
              startIcon={<AccountCircleIcon />}
              onClick={(e) => setUserMenuAnchor(e.currentTarget)}
            >
              Max Mustermann
            </Button>
          </Box>
        </Toolbar>
      </AppBar>

      {/* Drawer */}
      <Drawer
        variant="permanent"
        sx={{
          width: 240,
          flexShrink: 0,
          [`& .MuiDrawer-paper`]: { width: 240, boxSizing: 'border-box' },
          display: { xs: 'none', sm: 'block' }
        }}
      >
        <Toolbar />
        <Box sx={{ overflow: 'auto' }}>
          <List>
            {menuItems.map((item) => (
              <ListItem button key={item.text}>
                <ListItemIcon>{item.icon}</ListItemIcon>
                <ListItemText primary={item.text} />
              </ListItem>
            ))}
          </List>
        </Box>
      </Drawer>

      {/* Mobile Drawer */}
      <Drawer
        variant="temporary"
        open={drawerOpen}
        onClose={() => setDrawerOpen(false)}
        sx={{
          display: { xs: 'block', sm: 'none' },
          '& .MuiDrawer-paper': { boxSizing: 'border-box', width: 240 }
        }}
      >
        <Toolbar />
        <Box sx={{ overflow: 'auto' }}>
          <List>
            {menuItems.map((item) => (
              <ListItem button key={item.text}>
                <ListItemIcon>{item.icon}</ListItemIcon>
                <ListItemText primary={item.text} />
              </ListItem>
            ))}
          </List>
        </Box>
      </Drawer>

      {/* Main Content */}
      <Box component="main" sx={{ flexGrow: 1, p: 3 }}>
        <Toolbar />
        {children}
      </Box>

      {/* User Menu */}
      <Menu
        anchorEl={userMenuAnchor}
        open={Boolean(userMenuAnchor)}
        onClose={() => setUserMenuAnchor(null)}
      >
        <MenuItem onClick={() => setUserMenuAnchor(null)}>
          <ListItemIcon>
            <AccountCircleIcon fontSize="small" />
          </ListItemIcon>
          Profil
        </MenuItem>
        <MenuItem onClick={() => setUserMenuAnchor(null)}>
          <ListItemIcon>
            <SettingsIcon fontSize="small" />
          </ListItemIcon>
          Einstellungen
        </MenuItem>
        <Divider />
        <MenuItem onClick={() => setUserMenuAnchor(null)}>
          <ListItemIcon>
            <LogoutIcon fontSize="small" />
          </ListItemIcon>
          Abmelden
        </MenuItem>
      </Menu>
    </Box>
  );
};
```

### Loading und Error States
```tsx
import React from 'react';
import {
  CircularProgress,
  Skeleton,
  Alert,
  Box,
  Typography,
  Button
} from '@mui/material';
import { Refresh as RefreshIcon } from '@mui/icons-material';

export const ValeoLoadingSpinner: React.FC = () => (
  <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 400 }}>
    <CircularProgress />
  </Box>
);

export const ValeoSkeletonCard: React.FC = () => (
  <Box sx={{ p: 3, bgcolor: 'background.paper', borderRadius: 2, boxShadow: 1 }}>
    <Skeleton variant="text" width="60%" height={32} sx={{ mb: 1 }} />
    <Skeleton variant="text" width="40%" height={24} sx={{ mb: 2 }} />
    <Skeleton variant="rectangular" width="100%" height={120} />
  </Box>
);

export const ValeoErrorAlert: React.FC<{
  error: string;
  onRetry?: () => void;
}> = ({ error, onRetry }) => (
  <Alert
    severity="error"
    action={
      onRetry && (
        <Button
          color="inherit"
          size="small"
          startIcon={<RefreshIcon />}
          onClick={onRetry}
        >
          Wiederholen
        </Button>
      )
    }
  >
    <Typography variant="body2">
      {error}
    </Typography>
  </Alert>
);

export const ValeoEmptyState: React.FC<{
  title: string;
  description: string;
  actionText?: string;
  onAction?: () => void;
}> = ({ title, description, actionText, onAction }) => (
  <Box sx={{ textAlign: 'center', py: 8 }}>
    <Typography variant="h6" sx={{ mb: 1, color: 'text.secondary' }}>
      {title}
    </Typography>
    <Typography variant="body2" sx={{ mb: 3, color: 'text.secondary' }}>
      {description}
    </Typography>
    {actionText && onAction && (
      <Button
        variant="contained"
        onClick={onAction}
        sx={{ textTransform: 'none' }}
      >
        {actionText}
      </Button>
    )}
  </Box>
);
```

## üéØ Material-UI Best Practices

### Theme-Konfiguration
```tsx
import { createTheme } from '@mui/material/styles';

export const valeTheme = createTheme({
  palette: {
    primary: {
      main: '#1976d2',
      light: '#42a5f5',
      dark: '#1565c0'
    },
    secondary: {
      main: '#dc004e',
      light: '#ff5983',
      dark: '#9a0036'
    },
    background: {
      default: '#f5f5f5',
      paper: '#ffffff'
    }
  },
  typography: {
    fontFamily: '"Roboto", "Helvetica", "Arial", sans-serif',
    h1: {
      fontSize: '2.5rem',
      fontWeight: 500
    },
    h2: {
      fontSize: '2rem',
      fontWeight: 500
    },
    h6: {
      fontSize: '1.25rem',
      fontWeight: 500
    }
  },
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          textTransform: 'none',
          borderRadius: 8
        }
      }
    },
    MuiCard: {
      styleOverrides: {
        root: {
          borderRadius: 12,
          boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
        }
      }
    },
    MuiDataGrid: {
      styleOverrides: {
        root: {
          border: 'none',
          '& .MuiDataGrid-cell': {
            borderBottom: '1px solid #e0e0e0'
          }
        }
      }
    }
  }
});
```

### Responsive Design
```tsx
import { useTheme } from '@mui/material/styles';
import { useMediaQuery } from '@mui/material';

export const useResponsive = () => {
  const theme = useTheme();
  
  return {
    isMobile: useMediaQuery(theme.breakpoints.down('sm')),
    isTablet: useMediaQuery(theme.breakpoints.between('sm', 'md')),
    isDesktop: useMediaQuery(theme.breakpoints.up('md')),
    isLargeScreen: useMediaQuery(theme.breakpoints.up('lg'))
  };
};
```

Diese Regeln stellen sicher, dass alle Material-UI Komponenten konsistent, benutzerfreundlich und an das VALEO Design-System angepasst sind. 